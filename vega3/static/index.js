define(function() { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var embed = __webpack_require__(1).default;
	
	function javascriptIndex(selector, outputs) {
	  // Return the index in the output array of the JS repr of this viz
	  for (var i = 0; i < outputs.length; i++) {
	    var item = outputs[i];
	    if (item.metadata &&
	        item.metadata['jupyter-vega3'] === selector &&
	        item.data['application/javascript'] !== undefined) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	function imageIndex(selector, outputs) {
	  // Return the index in the output array of the PNG repr of this viz
	  for (var i = 0; i < outputs.length; i++) {
	    var item = outputs[i];
	    if (item.metadata &&
	        item.metadata['jupyter-vega3'] === selector &&
	        item.data['image/png'] !== undefined) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	function render(selector, spec, type, output_area) {
	  // Find the indices of this visualizations JS and PNG
	  // representation.
	  var imgIndex = imageIndex(selector, output_area.outputs);
	  var jsIndex = javascriptIndex(selector, output_area.outputs);
	
	  // If we have already rendered a static image, don't render
	  // the JS version or append a new PNG version
	  if (imgIndex >- 1 && jsIndex >- 1 && imgIndex === (jsIndex+1)) {
	    return;
	  }
	
	  // Never been rendered, so render JS and append the PNG to the
	  // outputs for the cell
	  var el = document.getElementById(selector.substring(1));
	  embed(el, spec, {mode: type}).then(function(result) {
	    var imageData = result.view.toImageURL('png').then(function(imageData) {
	        if (output_area!==undefined) {
	            var output = {
	                data: {
	                  'image/png': imageData.split(',')[1]
	                },
	                metadata: {'jupyter-vega3': selector},
	                output_type: 'display_data'
	            };
	            // This appends the PNG output, but doesn't render it this time
	            // as the JS version will be rendered already.
	            output_area.outputs.push(output);
	          }
	    }).catch(console.warn);
	  }).catch(console.warn);
	}
	
	exports.render = render;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var versionCompare = __webpack_require__(2);
	var d3 = __webpack_require__(3);
	var vegaImport = __webpack_require__(4);
	var VegaLite = __webpack_require__(12);
	var vega_schema_url_parser_1 = __webpack_require__(139);
	exports.vega = vegaImport;
	exports.vl = VegaLite;
	var post_1 = __webpack_require__(140);
	var NAMES = {
	    'vega': 'Vega',
	    'vega-lite': 'Vega-Lite',
	};
	var VERSION = {
	    'vega': exports.vega.version,
	    'vega-lite': exports.vl ? exports.vl.version : 'not available',
	};
	var PREPROCESSOR = {
	    'vega': function (vgjson) { return vgjson; },
	    'vega-lite': function (vljson) { return exports.vl.compile(vljson).spec; },
	};
	/**
	 * Embed a Vega visualization component in a web page. This function returns a promise.
	 *
	 * @param el        DOM element in which to place component (DOM node or CSS selector).
	 * @param spec      String : A URL string from which to load the Vega specification.
	 *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.
	 * @param opt       A JavaScript object containing options for embedding.
	 */
	function embed(el, spec, opt) {
	    try {
	        opt = opt || {};
	        var actions = opt.actions !== undefined ? opt.actions : true;
	        var loader = opt.loader || exports.vega.loader();
	        var renderer = opt.renderer || 'canvas';
	        var logLevel = opt.logLevel || exports.vega.Warn;
	        // Load the visualization specification.
	        if (exports.vega.isString(spec)) {
	            return loader.load(spec).then(function (data) { return embed(el, JSON.parse(data), opt); }).catch(Promise.reject);
	        }
	        // Load Vega theme/configuration.
	        var config = opt.config;
	        if (exports.vega.isString(config)) {
	            return loader.load(config).then(function (data) {
	                opt.config = JSON.parse(data);
	                return embed(el, spec, opt);
	            }).catch(Promise.reject);
	        }
	        // Decide mode
	        var parsed = void 0;
	        var mode_1;
	        if (spec.$schema) {
	            parsed = vega_schema_url_parser_1.default(spec.$schema);
	            if (opt.mode && opt.mode !== parsed.library) {
	                console.warn("The given visualization spec is written in " + NAMES[parsed.library] + ", but mode argument sets " + NAMES[opt.mode] + ".");
	            }
	            mode_1 = parsed.library;
	            if (versionCompare(parsed.version, VERSION[mode_1]) > 0) {
	                console.warn("The input spec uses " + mode_1 + " " + parsed.version + ", but the current version of " + NAMES[mode_1] + " is " + VERSION[mode_1] + ".");
	            }
	        }
	        else {
	            mode_1 = opt.mode || 'vega';
	        }
	        var vgSpec = PREPROCESSOR[mode_1](spec);
	        if (mode_1 === 'vega-lite') {
	            if (vgSpec.$schema) {
	                parsed = vega_schema_url_parser_1.default(vgSpec.$schema);
	                if (versionCompare(parsed.version, VERSION.vega) > 0) {
	                    console.warn("The compiled spec uses Vega " + parsed.version + ", but current version is " + VERSION.vega + ".");
	                }
	            }
	        }
	        // ensure container div has class 'vega-embed'
	        var div = d3.select(el) // d3.select supports elements and strings
	            .classed('vega-embed', true)
	            .html(''); // clear container
	        if (opt.onBeforeParse) {
	            // Allow Vega spec to be modified before being used
	            vgSpec = opt.onBeforeParse(vgSpec);
	        }
	        var runtime = exports.vega.parse(vgSpec, opt.config); // may throw an Error if parsing fails
	        var view_1 = new exports.vega.View(runtime, { loader: loader, logLevel: logLevel, renderer: renderer })
	            .initialize(el);
	        // Vega-Lite does not need hover so we can improve perf by not activating it
	        if (mode_1 !== 'vega-lite') {
	            view_1.hover();
	        }
	        if (opt) {
	            if (opt.width) {
	                view_1.width(opt.width);
	            }
	            if (opt.height) {
	                view_1.height(opt.height);
	            }
	            if (opt.padding) {
	                view_1.padding(opt.padding);
	            }
	        }
	        view_1.run();
	        if (actions !== false) {
	            // add child div to house action links
	            var ctrl = div.append('div')
	                .attr('class', 'vega-actions');
	            // add 'Export' action
	            if (actions === true || actions.export !== false) {
	                var ext_1 = renderer === 'canvas' ? 'png' : 'svg';
	                ctrl.append('a')
	                    .text("Export as " + ext_1.toUpperCase())
	                    .attr('href', '#')
	                    .attr('target', '_blank')
	                    .attr('download', (spec.name || 'vega') + '.' + ext_1)
	                    .on('mousedown', function () {
	                    var _this = this;
	                    view_1.toImageURL(ext_1).then(function (url) {
	                        _this.href = url;
	                    }).catch(function (error) { throw error; });
	                    d3.event.preventDefault();
	                });
	            }
	            // add 'View Source' action
	            if (actions === true || actions.source !== false) {
	                ctrl.append('a')
	                    .text('View Source')
	                    .attr('href', '#')
	                    .on('click', function () {
	                    viewSource(JSON.stringify(spec, null, 2), opt.sourceHeader || '', opt.sourceFooter || '');
	                    d3.event.preventDefault();
	                });
	            }
	            // add 'Open in Vega Editor' action
	            if (actions === true || actions.editor !== false) {
	                var editorUrl_1 = opt.editorUrl || 'https://vega.github.io/editor/';
	                ctrl.append('a')
	                    .text('Open in Vega Editor')
	                    .attr('href', '#')
	                    .on('click', function () {
	                    post_1.post(window, editorUrl_1, {
	                        mode: mode_1,
	                        spec: JSON.stringify(spec, null, 2),
	                    });
	                    d3.event.preventDefault();
	                });
	            }
	        }
	        return Promise.resolve({ view: view_1, spec: spec });
	    }
	    catch (err) {
	        return Promise.reject(err);
	    }
	}
	exports.default = embed;
	function viewSource(source, sourceHeader, sourceFooter) {
	    var header = "<html><head>" + sourceHeader + "</head>' + '<body><pre><code class=\"json\">";
	    var footer = "</code></pre>" + sourceFooter + "</body></html>";
	    var win = window.open('');
	    win.document.write(header + source + footer);
	    win.document.title = 'Vega JSON Source';
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
	(function (root, factory) {
	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        module.exports = factory();
	    } else {
	        root.compareVersions = factory();
	    }
	}(this, function () {
	
	    var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
	    var patch = /-([0-9A-Za-z-.]+)/;
	
	    function split(v) {
	        var temp = v.replace(/^v/, '').split('.');
	        var arr = temp.splice(0, 2);
	        arr.push(temp.join('.'));
	        return arr;
	    }
	
	    function tryParse(v) {
	        return isNaN(Number(v)) ? v : Number(v);
	    }
	
	    function validate(version) {
	        if (typeof version !== 'string') {
	            throw new TypeError('Invalid argument expected string');
	        }
	        if (!semver.test(version)) {
	            throw new Error('Invalid argument not valid semver');
	        }
	    }
	
	    return function compareVersions(v1, v2) {
	        [v1, v2].forEach(validate);
	
	        var s1 = split(v1);
	        var s2 = split(v2);
	
	        for (var i = 0; i < 3; i++) {
	            var n1 = parseInt(s1[i] || 0, 10);
	            var n2 = parseInt(s2[i] || 0, 10);
	
	            if (n1 > n2) return 1;
	            if (n2 > n1) return -1;
	        }
	
	        if ([s1[2], s2[2]].every(patch.test.bind(patch))) {
	            var p1 = patch.exec(s1[2])[1].split('.').map(tryParse);
	            var p2 = patch.exec(s2[2])[1].split('.').map(tryParse);
	
	            for (i = 0; i < Math.max(p1.length, p2.length); i++) {
	                if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;
	                if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;
	
	                if (p1[i] > p2[i]) return 1;
	                if (p2[i] > p1[i]) return -1;
	            }
	        } else if ([s1[2], s2[2]].some(patch.test.bind(patch))) {
	            return patch.test(s1[2]) ? -1 : 1;
	        }
	
	        return 0;
	    };
	
	}));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-selection/ Version 1.3.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var xhtml = "http://www.w3.org/1999/xhtml";
	
	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};
	
	function namespace(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	}
	
	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}
	
	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}
	
	function creator(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	}
	
	function none() {}
	
	function selector(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	}
	
	function selection_select(select) {
	  if (typeof select !== "function") select = selector(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	}
	
	function empty() {
	  return [];
	}
	
	function selectorAll(selector) {
	  return selector == null ? empty : function() {
	    return this.querySelectorAll(selector);
	  };
	}
	
	function selection_selectAll(select) {
	  if (typeof select !== "function") select = selectorAll(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, parents);
	}
	
	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};
	
	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}
	
	var matcher$1 = matcher;
	
	function selection_filter(match) {
	  if (typeof match !== "function") match = matcher$1(match);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	}
	
	function sparse(update) {
	  return new Array(update.length);
	}
	
	function selection_enter() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	}
	
	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}
	
	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};
	
	function constant(x) {
	  return function() {
	    return x;
	  };
	}
	
	var keyPrefix = "$"; // Protect against keys like “__proto__”.
	
	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;
	
	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}
	
	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;
	
	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }
	
	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}
	
	function selection_data(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }
	
	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;
	
	  if (typeof value !== "function") value = constant(value);
	
	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);
	
	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
	
	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }
	
	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	}
	
	function selection_exit() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	}
	
	function selection_merge(selection$$1) {
	
	  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }
	
	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }
	
	  return new Selection(merges, this._parents);
	}
	
	function selection_order() {
	
	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }
	
	  return this;
	}
	
	function selection_sort(compare) {
	  if (!compare) compare = ascending;
	
	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }
	
	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }
	
	  return new Selection(sortgroups, this._parents).order();
	}
	
	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}
	
	function selection_call() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	}
	
	function selection_nodes() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	}
	
	function selection_node() {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }
	
	  return null;
	}
	
	function selection_size() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	}
	
	function selection_empty() {
	  return !this.node();
	}
	
	function selection_each(callback) {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }
	
	  return this;
	}
	
	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}
	
	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}
	
	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}
	
	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}
	
	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}
	
	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}
	
	function selection_attr(name, value) {
	  var fullname = namespace(name);
	
	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }
	
	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	}
	
	function defaultView(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	}
	
	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}
	
	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}
	
	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}
	
	function selection_style(name, value, priority) {
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : styleValue(this.node(), name);
	}
	
	function styleValue(node, name) {
	  return node.style.getPropertyValue(name)
	      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}
	
	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}
	
	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}
	
	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}
	
	function selection_property(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	}
	
	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}
	
	function classList(node) {
	  return node.classList || new ClassList(node);
	}
	
	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}
	
	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};
	
	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}
	
	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}
	
	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}
	
	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}
	
	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}
	
	function selection_classed(name, value) {
	  var names = classArray(name + "");
	
	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }
	
	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	}
	
	function textRemove() {
	  this.textContent = "";
	}
	
	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}
	
	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}
	
	function selection_text(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	}
	
	function htmlRemove() {
	  this.innerHTML = "";
	}
	
	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}
	
	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}
	
	function selection_html(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	}
	
	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}
	
	function selection_raise() {
	  return this.each(raise);
	}
	
	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}
	
	function selection_lower() {
	  return this.each(lower);
	}
	
	function selection_append(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	}
	
	function constantNull() {
	  return null;
	}
	
	function selection_insert(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	}
	
	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}
	
	function selection_remove() {
	  return this.each(remove);
	}
	
	function selection_cloneShallow() {
	  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
	}
	
	function selection_cloneDeep() {
	  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
	}
	
	function selection_clone(deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	}
	
	function selection_datum(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	}
	
	var filterEvents = {};
	
	exports.event = null;
	
	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}
	
	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}
	
	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}
	
	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}
	
	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}
	
	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}
	
	function selection_on(typename, value, capture) {
	  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
	
	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }
	
	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	}
	
	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}
	
	function dispatchEvent(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;
	
	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }
	
	  node.dispatchEvent(event);
	}
	
	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}
	
	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}
	
	function selection_dispatch(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	}
	
	var root = [null];
	
	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}
	
	function selection() {
	  return new Selection([[document.documentElement]], root);
	}
	
	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  clone: selection_clone,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};
	
	function select(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	}
	
	function create(name) {
	  return select(creator(name).call(document.documentElement));
	}
	
	var nextId = 0;
	
	function local() {
	  return new Local;
	}
	
	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}
	
	Local.prototype = local.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	function sourceEvent() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	}
	
	function point(node, event) {
	  var svg = node.ownerSVGElement || node;
	
	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }
	
	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	}
	
	function mouse(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	}
	
	function selectAll(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	}
	
	function touch(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;
	
	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }
	
	  return null;
	}
	
	function touches(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;
	
	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }
	
	  return points;
	}
	
	exports.create = create;
	exports.creator = creator;
	exports.local = local;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.clientPoint = point;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.style = styleValue;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = defaultView;
	exports.customEvent = customEvent;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.vega = global.vega || {})));
	}(this, (function (exports) { 'use strict';
	
	var accessor = function(fn, fields, name) {
	  fn.fields = fields || [];
	  fn.fname = name;
	  return fn;
	};
	
	function accessorName(fn) {
	  return fn == null ? null : fn.fname;
	}
	
	function accessorFields(fn) {
	  return fn == null ? null : fn.fields;
	}
	
	var error$1 = function(message) {
	  throw Error(message);
	};
	
	var splitAccessPath = function(p) {
	  var path = [],
	      q = null,
	      b = 0,
	      n = p.length,
	      s = '',
	      i, j, c;
	
	  p = p + '';
	
	  function push() {
	    path.push(s + p.substring(i, j));
	    s = '';
	    i = j + 1;
	  }
	
	  for (i=j=0; j<n; ++j) {
	    c = p[j];
	    if (c === '\\') {
	      s += p.substring(i, j);
	      i = ++j;
	    } else if (c === q) {
	      push();
	      q = null;
	      b = -1;
	    } else if (q) {
	      continue;
	    } else if (i === b && c === '"') {
	      i = j + 1;
	      q = c;
	    } else if (i === b && c === "'") {
	      i = j + 1;
	      q = c;
	    } else if (c === '.' && !b) {
	      if (j > i) {
	        push();
	      } else {
	        i = j + 1;
	      }
	    } else if (c === '[') {
	      if (j > i) push();
	      b = i = j + 1;
	    } else if (c === ']') {
	      if (!b) error$1('Access path missing open bracket: ' + p);
	      if (b > 0) push();
	      b = 0;
	      i = j + 1;
	    }
	  }
	
	  if (b) error$1('Access path missing closing bracket: ' + p);
	  if (q) error$1('Access path missing closing quote: ' + p);
	
	  if (j > i) {
	    j++;
	    push();
	  }
	
	  return path;
	};
	
	var isArray = Array.isArray;
	
	var isObject = function(_) {
	  return _ === Object(_);
	};
	
	var isString = function(_) {
	  return typeof _ === 'string';
	};
	
	function $(x) {
	  return isArray(x) ? '[' + x.map($) + ']'
	    : isObject(x) || isString(x) ?
	      // Output valid JSON and JS source strings.
	      // See http://timelessrepo.com/json-isnt-a-javascript-subset
	      JSON.stringify(x).replace('\u2028','\\u2028').replace('\u2029', '\\u2029')
	    : x;
	}
	
	var field = function(field, name) {
	  var path = splitAccessPath(field),
	      code = 'return _[' + path.map($).join('][') + '];';
	
	  return accessor(
	    Function('_', code),
	    [(field = path.length===1 ? path[0] : field)],
	    name || field
	  );
	};
	
	var empty = [];
	
	var id = field('id');
	
	var identity = accessor(function(_) { return _; }, empty, 'identity');
	
	var zero = accessor(function() { return 0; }, empty, 'zero');
	
	var one = accessor(function() { return 1; }, empty, 'one');
	
	var truthy = accessor(function() { return true; }, empty, 'true');
	
	var falsy = accessor(function() { return false; }, empty, 'false');
	
	function log(method, level, input) {
	  var args = [level].concat([].slice.call(input));
	  console[method].apply(console, args); // eslint-disable-line no-console
	}
	
	var None  = 0;
	var Error$1 = 1;
	var Warn  = 2;
	var Info  = 3;
	var Debug = 4;
	
	var logger = function(_) {
	  var level = _ || None;
	  return {
	    level: function(_) {
	      if (arguments.length) {
	        level = +_;
	        return this;
	      } else {
	        return level;
	      }
	    },
	    error: function() {
	      if (level >= Error$1) log('error', 'ERROR', arguments);
	      return this;
	    },
	    warn: function() {
	      if (level >= Warn) log('warn', 'WARN', arguments);
	      return this;
	    },
	    info: function() {
	      if (level >= Info) log('log', 'INFO', arguments);
	      return this;
	    },
	    debug: function() {
	      if (level >= Debug) log('log', 'DEBUG', arguments);
	      return this;
	    }
	  }
	};
	
	var peek = function(array) {
	  return array[array.length - 1];
	};
	
	var toNumber = function(_) {
	  return _ == null || _ === '' ? null : +_;
	};
	
	function exp(sign) {
	  return function(x) { return sign * Math.exp(x); };
	}
	
	function log$1(sign) {
	  return function(x) { return Math.log(sign * x); };
	}
	
	function pow(exponent) {
	  return function(x) {
	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	  };
	}
	
	function pan(domain, delta, lift, ground) {
	  var d0 = lift(domain[0]),
	      d1 = lift(peek(domain)),
	      dd = (d1 - d0) * delta;
	
	  return [
	    ground(d0 - dd),
	    ground(d1 - dd)
	  ];
	}
	
	function panLinear(domain, delta) {
	  return pan(domain, delta, toNumber, identity);
	}
	
	function panLog(domain, delta) {
	  var sign = Math.sign(domain[0]);
	  return pan(domain, delta, log$1(sign), exp(sign));
	}
	
	function panPow(domain, delta, exponent) {
	  return pan(domain, delta, pow(exponent), pow(1/exponent));
	}
	
	function zoom(domain, anchor, scale, lift, ground) {
	  var d0 = lift(domain[0]),
	      d1 = lift(peek(domain)),
	      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
	
	  return [
	    ground(da + (d0 - da) * scale),
	    ground(da + (d1 - da) * scale)
	  ];
	}
	
	function zoomLinear(domain, anchor, scale) {
	  return zoom(domain, anchor, scale, toNumber, identity);
	}
	
	function zoomLog(domain, anchor, scale) {
	  var sign = Math.sign(domain[0]);
	  return zoom(domain, anchor, scale, log$1(sign), exp(sign));
	}
	
	function zoomPow(domain, anchor, scale, exponent) {
	  return zoom(domain, anchor, scale, pow(exponent), pow(1/exponent));
	}
	
	var array = function(_) {
	  return _ != null ? (isArray(_) ? _ : [_]) : [];
	};
	
	var isFunction = function(_) {
	  return typeof _ === 'function';
	};
	
	var compare = function(fields, orders) {
	  var idx = [],
	      cmp = (fields = array(fields)).map(function(f, i) {
	        if (f == null) {
	          return null;
	        } else {
	          idx.push(i);
	          return isFunction(f) ? f
	            : splitAccessPath(f).map($).join('][');
	        }
	      }),
	      n = idx.length - 1,
	      ord = array(orders),
	      code = 'var u,v;return ',
	      i, j, f, u, v, d, t, lt, gt;
	
	  if (n < 0) return null;
	
	  for (j=0; j<=n; ++j) {
	    i = idx[j];
	    f = cmp[i];
	
	    if (isFunction(f)) {
	      d = 'f' + i;
	      u = '(u=this.' + d + '(a))';
	      v = '(v=this.' + d + '(b))';
	      (t = t || {})[d] = f;
	    } else {
	      u = '(u=a['+f+'])';
	      v = '(v=b['+f+'])';
	    }
	
	    d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';
	
	    if (ord[i] !== 'descending') {
	      gt = 1;
	      lt = -1;
	    } else {
	      gt = -1;
	      lt = 1;
	    }
	
	    code += '(' + u+'<'+v+'||u==null)&&v!=null?' + lt
	      + ':(u>v||v==null)&&u!=null?' + gt
	      + ':'+d+'!==u&&v===v?' + lt
	      + ':v!==v&&u===u?' + gt
	      + (i < n ? ':' : ':0');
	  }
	
	  f = Function('a', 'b', code + ';');
	  if (t) f = f.bind(t);
	
	  fields = fields.reduce(function(map, field) {
	    if (isFunction(field)) {
	      (accessorFields(field) || []).forEach(function(_) { map[_] = 1; });
	    } else if (field != null) {
	      map[field + ''] = 1;
	    }
	    return map;
	  }, {});
	
	  return accessor(f, Object.keys(fields));
	};
	
	var constant = function(_) {
	  return isFunction(_) ? _ : function() { return _; };
	};
	
	var debounce = function(delay, handler) {
	  var tid, evt;
	
	  function callback() {
	    handler(evt);
	    tid = evt = null;
	  }
	
	  return function(e) {
	    evt = e;
	    if (tid) clearTimeout(tid);
	    tid = setTimeout(callback, delay);
	  };
	};
	
	var extend = function(_) {
	  for (var x, k, i=1, len=arguments.length; i<len; ++i) {
	    x = arguments[i];
	    for (k in x) { _[k] = x[k]; }
	  }
	  return _;
	};
	
	var extentIndex = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a, b, c, u, v;
	
	  if (f == null) {
	    while (++i < n) {
	      b = array[i];
	      if (b != null && b >= b) {
	        a = c = b;
	        break;
	      }
	    }
	    u = v = i;
	    while (++i < n) {
	      b = array[i];
	      if (b != null) {
	        if (a > b) {
	          a = b;
	          u = i;
	        }
	        if (c < b) {
	          c = b;
	          v = i;
	        }
	      }
	    }
	  } else {
	    while (++i < n) {
	      b = f(array[i], i, array);
	      if (b != null && b >= b) {
	        a = c = b;
	        break;
	      }
	    }
	    u = v = i;
	    while (++i < n) {
	      b = f(array[i], i, array);
	      if (b != null) {
	        if (a > b) {
	          a = b;
	          u = i;
	        }
	        if (c < b) {
	          c = b;
	          v = i;
	        }
	      }
	    }
	  }
	
	  return [u, v];
	};
	
	var NULL = {};
	
	var fastmap = function(input) {
	  var obj = {},
	      map,
	      test;
	
	  function has(key) {
	    return obj.hasOwnProperty(key) && obj[key] !== NULL;
	  }
	
	  map = {
	    size: 0,
	    empty: 0,
	    object: obj,
	    has: has,
	    get: function(key) {
	      return has(key) ? obj[key] : undefined;
	    },
	    set: function(key, value) {
	      if (!has(key)) {
	        ++map.size;
	        if (obj[key] === NULL) --map.empty;
	      }
	      obj[key] = value;
	      return this;
	    },
	    delete: function(key) {
	      if (has(key)) {
	        --map.size;
	        ++map.empty;
	        obj[key] = NULL;
	      }
	      return this;
	    },
	    clear: function() {
	      map.size = map.empty = 0;
	      map.object = obj = {};
	    },
	    test: function(_) {
	      if (arguments.length) {
	        test = _;
	        return map;
	      } else {
	        return test;
	      }
	    },
	    clean: function() {
	      var next = {},
	          size = 0,
	          key, value;
	      for (key in obj) {
	        value = obj[key];
	        if (value !== NULL && (!test || !test(value))) {
	          next[key] = value;
	          ++size;
	        }
	      }
	      map.size = size;
	      map.empty = 0;
	      map.object = (obj = next);
	    }
	  };
	
	  if (input) Object.keys(input).forEach(function(key) {
	    map.set(key, input[key]);
	  });
	
	  return map;
	};
	
	var inherits = function(child, parent) {
	  var proto = (child.prototype = Object.create(parent.prototype));
	  proto.constructor = child;
	  return proto;
	};
	
	var isBoolean = function(_) {
	  return typeof _ === 'boolean';
	};
	
	var isDate = function(_) {
	  return Object.prototype.toString.call(_) === '[object Date]';
	};
	
	var isNumber = function(_) {
	  return typeof _ === 'number';
	};
	
	var isRegExp = function(_) {
	  return Object.prototype.toString.call(_) === '[object RegExp]';
	};
	
	var key = function(fields, flat) {
	  if (fields) {
	    fields = flat
	      ? array(fields).map(function(f) { return f.replace(/\\(.)/g, '$1'); })
	      : array(fields);
	  }
	
	  var fn = !(fields && fields.length)
	    ? function() { return ''; }
	    : Function('_', 'return \'\'+' +
	        fields.map(function(f) {
	          return '_[' + (flat
	              ? $(f)
	              : splitAccessPath(f).map($).join('][')
	            ) + ']';
	        }).join('+\'|\'+') + ';');
	
	  return accessor(fn, fields, 'key');
	};
	
	var merge = function(compare, array0, array1, output) {
	  var n0 = array0.length,
	      n1 = array1.length;
	
	  if (!n1) return array0;
	  if (!n0) return array1;
	
	  var merged = output || new array0.constructor(n0 + n1),
	      i0 = 0, i1 = 0, i = 0;
	
	  for (; i0<n0 && i1<n1; ++i) {
	    merged[i] = compare(array0[i0], array1[i1]) > 0
	       ? array1[i1++]
	       : array0[i0++];
	  }
	
	  for (; i0<n0; ++i0, ++i) {
	    merged[i] = array0[i0];
	  }
	
	  for (; i1<n1; ++i1, ++i) {
	    merged[i] = array1[i1];
	  }
	
	  return merged;
	};
	
	var repeat = function(str, reps) {
	  var s = '';
	  while (--reps >= 0) s += str;
	  return s;
	};
	
	var pad = function(str, length, padchar, align) {
	  var c = padchar || ' ',
	      s = str + '',
	      n = length - s.length;
	
	  return n <= 0 ? s
	    : align === 'left' ? repeat(c, n) + s
	    : align === 'center' ? repeat(c, ~~(n/2)) + s + repeat(c, Math.ceil(n/2))
	    : s + repeat(c, n);
	};
	
	var toBoolean = function(_) {
	  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
	};
	
	function defaultParser(_) {
	  return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
	}
	
	var toDate = function(_, parser) {
	  parser = parser || defaultParser;
	  return _ == null || _ === '' ? null : parser(_);
	};
	
	var toString = function(_) {
	  return _ == null || _ === '' ? null : _ + '';
	};
	
	var toSet = function(_) {
	  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = 1;
	  return s;
	};
	
	var truncate = function(str, length, align, ellipsis) {
	  var e = ellipsis != null ? ellipsis : '\u2026',
	      s = str + '',
	      n = s.length,
	      l = Math.max(0, length - e.length);
	
	  return n <= length ? s
	    : align === 'left' ? e + s.slice(n - l)
	    : align === 'center' ? s.slice(0, Math.ceil(l/2)) + e + s.slice(n - ~~(l/2))
	    : s.slice(0, l) + e;
	};
	
	var visitArray = function(array, filter, visitor) {
	  if (array) {
	    var i = 0, n = array.length, t;
	    if (filter) {
	      for (; i<n; ++i) {
	        if (t = filter(array[i])) visitor(t, i, array);
	      }
	    } else {
	      array.forEach(visitor);
	    }
	  }
	};
	
	function UniqueList(idFunc) {
	  var $$$1 = idFunc || identity,
	      list = [],
	      ids = {};
	
	  list.add = function(_) {
	    var id$$1 = $$$1(_);
	    if (!ids[id$$1]) {
	      ids[id$$1] = 1;
	      list.push(_);
	    }
	    return list;
	  };
	
	  list.remove = function(_) {
	    var id$$1 = $$$1(_), idx;
	    if (ids[id$$1]) {
	      ids[id$$1] = 0;
	      if ((idx = list.indexOf(_)) >= 0) {
	        list.splice(idx, 1);
	      }
	    }
	    return list;
	  };
	
	  return list;
	}
	
	var TUPLE_ID_KEY = Symbol('vega_id');
	var TUPLE_ID = 1;
	
	/**
	 * Resets the internal tuple id counter to one.
	 */
	
	
	/**
	 * Checks if an input value is a registered tuple.
	 * @param {*} t - The value to check.
	 * @return {boolean} True if the input is a tuple, false otherwise.
	 */
	function isTuple(t) {
	  return !!(t && tupleid(t));
	}
	
	/**
	 * Returns the id of a tuple.
	 * @param {object} t - The input tuple.
	 * @return {*} the tuple id.
	 */
	function tupleid(t) {
	  return t[TUPLE_ID_KEY];
	}
	
	/**
	 * Sets the id of a tuple.
	 * @param {object} t - The input tuple.
	 * @param {*} id - The id value to set.
	 * @return {object} the input tuple.
	 */
	function setid(t, id) {
	  t[TUPLE_ID_KEY] = id;
	  return t;
	}
	
	/**
	 * Ingest an object or value as a data tuple.
	 * If the input value is an object, an id field will be added to it. For
	 * efficiency, the input object is modified directly. A copy is not made.
	 * If the input value is a literal, it will be wrapped in a new object
	 * instance, with the value accessible as the 'data' property.
	 * @param datum - The value to ingest.
	 * @return {object} The ingested data tuple.
	 */
	function ingest(datum) {
	  var t = (datum === Object(datum)) ? datum : {data: datum};
	  return tupleid(t) ? t : setid(t, TUPLE_ID++);
	}
	
	/**
	 * Given a source tuple, return a derived copy.
	 * @param {object} t - The source tuple.
	 * @return {object} The derived tuple.
	 */
	function derive(t) {
	  return rederive(t, ingest({}));
	}
	
	/**
	 * Rederive a derived tuple by copying values from the source tuple.
	 * @param {object} t - The source tuple.
	 * @param {object} d - The derived tuple.
	 * @return {object} The derived tuple.
	 */
	function rederive(t, d) {
	  for (var k in t) d[k] = t[k];
	  return d;
	}
	
	/**
	 * Replace an existing tuple with a new tuple.
	 * @param {object} t - The existing data tuple.
	 * @param {object} d - The new tuple that replaces the old.
	 * @return {object} The new tuple.
	 */
	function replace(t, d) {
	  return setid(d, tupleid(t));
	}
	
	function isChangeSet(v) {
	  return v && v.constructor === changeset;
	}
	
	function changeset() {
	  var add = [],  // insert tuples
	      rem = [],  // remove tuples
	      mod = [],  // modify tuples
	      remp = [], // remove by predicate
	      modp = [], // modify by predicate
	      reflow = false;
	
	  return {
	    constructor: changeset,
	    insert: function(t) {
	      var d = array(t), i = 0, n = d.length;
	      for (; i<n; ++i) add.push(d[i]);
	      return this;
	    },
	    remove: function(t) {
	      var a = isFunction(t) ? remp : rem,
	          d = array(t), i = 0, n = d.length;
	      for (; i<n; ++i) a.push(d[i]);
	      return this;
	    },
	    modify: function(t, field$$1, value) {
	      var m = {field: field$$1, value: constant(value)};
	      if (isFunction(t)) {
	        m.filter = t;
	        modp.push(m);
	      } else {
	        m.tuple = t;
	        mod.push(m);
	      }
	      return this;
	    },
	    encode: function(t, set) {
	      if (isFunction(t)) modp.push({filter: t, field: set});
	      else mod.push({tuple: t, field: set});
	      return this;
	    },
	    reflow: function() {
	      reflow = true;
	      return this;
	    },
	    pulse: function(pulse, tuples) {
	      var out, i, n, m, f, t, id$$1;
	
	      // add
	      for (i=0, n=add.length; i<n; ++i) {
	        pulse.add.push(ingest(add[i]));
	      }
	
	      // remove
	      for (out={}, i=0, n=rem.length; i<n; ++i) {
	        t = rem[i];
	        out[tupleid(t)] = t;
	      }
	      for (i=0, n=remp.length; i<n; ++i) {
	        f = remp[i];
	        tuples.forEach(function(t) {
	          if (f(t)) out[tupleid(t)] = t;
	        });
	      }
	      for (id$$1 in out) pulse.rem.push(out[id$$1]);
	
	      // modify
	      function modify(t, f, v) {
	        if (v) t[f] = v(t); else pulse.encode = f;
	        if (!reflow) out[tupleid(t)] = t;
	      }
	      for (out={}, i=0, n=mod.length; i<n; ++i) {
	        m = mod[i];
	        modify(m.tuple, m.field, m.value);
	        pulse.modifies(m.field);
	      }
	      for (i=0, n=modp.length; i<n; ++i) {
	        m = modp[i];
	        f = m.filter;
	        tuples.forEach(function(t) {
	          if (f(t)) modify(t, m.field, m.value);
	        });
	        pulse.modifies(m.field);
	      }
	
	      // reflow?
	      if (reflow) {
	        pulse.mod = rem.length || remp.length
	          ? tuples.filter(function(t) { return out.hasOwnProperty(tupleid(t)); })
	          : tuples.slice();
	      } else {
	        for (id$$1 in out) pulse.mod.push(out[id$$1]);
	      }
	
	      return pulse;
	    }
	  };
	}
	
	var CACHE = '_:mod:_';
	
	/**
	 * Hash that tracks modifications to assigned values.
	 * Callers *must* use the set method to update values.
	 */
	function Parameters() {
	  Object.defineProperty(this, CACHE, {writable:true, value: {}});
	}
	
	var prototype$2 = Parameters.prototype;
	
	/**
	 * Set a parameter value. If the parameter value changes, the parameter
	 * will be recorded as modified.
	 * @param {string} name - The parameter name.
	 * @param {number} index - The index into an array-value parameter. Ignored if
	 *   the argument is undefined, null or less than zero.
	 * @param {*} value - The parameter value to set.
	 * @param {boolean} [force=false] - If true, records the parameter as modified
	 *   even if the value is unchanged.
	 * @return {Parameters} - This parameter object.
	 */
	prototype$2.set = function(name, index, value, force) {
	  var o = this,
	      v = o[name],
	      mod = o[CACHE];
	
	  if (index != null && index >= 0) {
	    if (v[index] !== value || force) {
	      v[index] = value;
	      mod[index + ':' + name] = -1;
	      mod[name] = -1;
	    }
	  } else if (v !== value || force) {
	    o[name] = value;
	    mod[name] = isArray(value) ? 1 + value.length : -1;
	  }
	
	  return o;
	};
	
	/**
	 * Tests if one or more parameters has been modified. If invoked with no
	 * arguments, returns true if any parameter value has changed. If the first
	 * argument is array, returns trues if any parameter name in the array has
	 * changed. Otherwise, tests if the given name and optional array index has
	 * changed.
	 * @param {string} name - The parameter name to test.
	 * @param {number} [index=undefined] - The parameter array index to test.
	 * @return {boolean} - Returns true if a queried parameter was modified.
	 */
	prototype$2.modified = function(name, index) {
	  var mod = this[CACHE], k;
	  if (!arguments.length) {
	    for (k in mod) { if (mod[k]) return true; }
	    return false;
	  } else if (isArray(name)) {
	    for (k=0; k<name.length; ++k) {
	      if (mod[name[k]]) return true;
	    }
	    return false;
	  }
	  return (index != null && index >= 0)
	    ? (index + 1 < mod[name] || !!mod[index + ':' + name])
	    : !!mod[name];
	};
	
	/**
	 * Clears the modification records. After calling this method,
	 * all parameters are considered unmodified.
	 */
	prototype$2.clear = function() {
	  this[CACHE] = {};
	  return this;
	};
	
	var OP_ID = 0;
	var PULSE = 'pulse';
	var NO_PARAMS = new Parameters();
	
	// Boolean Flags
	var SKIP     = 1;
	var MODIFIED = 2;
	
	/**
	 * An Operator is a processing node in a dataflow graph.
	 * Each operator stores a value and an optional value update function.
	 * Operators can accept a hash of named parameters. Parameter values can
	 * either be direct (JavaScript literals, arrays, objects) or indirect
	 * (other operators whose values will be pulled dynamically). Operators
	 * included as parameters will have this operator added as a dependency.
	 * @constructor
	 * @param {*} [init] - The initial value for this operator.
	 * @param {function(object, Pulse)} [update] - An update function. Upon
	 *   evaluation of this operator, the update function will be invoked and the
	 *   return value will be used as the new value of this operator.
	 * @param {object} [params] - The parameters for this operator.
	 * @param {boolean} [react=true] - Flag indicating if this operator should
	 *   listen for changes to upstream operators included as parameters.
	 * @see parameters
	 */
	function Operator(init, update, params, react) {
	  this.id = ++OP_ID;
	  this.value = init;
	  this.stamp = -1;
	  this.rank = -1;
	  this.qrank = -1;
	  this.flags = 0;
	
	  if (update) {
	    this._update = update;
	  }
	  if (params) this.parameters(params, react);
	}
	
	var prototype$1 = Operator.prototype;
	
	/**
	 * Returns a list of target operators dependent on this operator.
	 * If this list does not exist, it is created and then returned.
	 * @return {UniqueList}
	 */
	prototype$1.targets = function() {
	  return this._targets || (this._targets = UniqueList(id));
	};
	
	/**
	 * Sets the value of this operator.
	 * @param {*} value - the value to set.
	 * @return {Number} Returns 1 if the operator value has changed
	 *   according to strict equality, returns 0 otherwise.
	 */
	prototype$1.set = function(value) {
	  if (this.value !== value) {
	    this.value = value;
	    return 1;
	  } else {
	    return 0;
	  }
	};
	
	function flag(bit) {
	  return function(state) {
	    var f = this.flags;
	    if (arguments.length === 0) return !!(f & bit);
	    this.flags = state ? (f | bit) : (f & ~bit);
	    return this;
	  };
	}
	
	/**
	 * Indicates that operator evaluation should be skipped on the next pulse.
	 * This operator will still propagate incoming pulses, but its update function
	 * will not be invoked. The skip flag is reset after every pulse, so calling
	 * this method will affect processing of the next pulse only.
	 */
	prototype$1.skip = flag(SKIP);
	
	/**
	 * Indicates that this operator's value has been modified on its most recent
	 * pulse. Normally modification is checked via strict equality; however, in
	 * some cases it is more efficient to update the internal state of an object.
	 * In those cases, the modified flag can be used to trigger propagation. Once
	 * set, the modification flag persists across pulses until unset. The flag can
	 * be used with the last timestamp to test if a modification is recent.
	 */
	prototype$1.modified = flag(MODIFIED);
	
	/**
	 * Sets the parameters for this operator. The parameter values are analyzed for
	 * operator instances. If found, this operator will be added as a dependency
	 * of the parameterizing operator. Operator values are dynamically marshalled
	 * from each operator parameter prior to evaluation. If a parameter value is
	 * an array, the array will also be searched for Operator instances. However,
	 * the search does not recurse into sub-arrays or object properties.
	 * @param {object} params - A hash of operator parameters.
	 * @param {boolean} [react=true] - A flag indicating if this operator should
	 *   automatically update (react) when parameter values change. In other words,
	 *   this flag determines if the operator registers itself as a listener on
	 *   any upstream operators included in the parameters.
	 * @return {Operator[]} - An array of upstream dependencies.
	 */
	prototype$1.parameters = function(params, react) {
	  react = react !== false;
	  var self = this,
	      argval = (self._argval = self._argval || new Parameters()),
	      argops = (self._argops = self._argops || []),
	      deps = [],
	      name, value, n, i;
	
	  function add(name, index, value) {
	    if (value instanceof Operator) {
	      if (value !== self) {
	        if (react) value.targets().add(self);
	        deps.push(value);
	      }
	      argops.push({op:value, name:name, index:index});
	    } else {
	      argval.set(name, index, value);
	    }
	  }
	
	  for (name in params) {
	    value = params[name];
	
	    if (name === PULSE) {
	      array(value).forEach(function(op) {
	        if (!(op instanceof Operator)) {
	          error$1('Pulse parameters must be operator instances.');
	        } else if (op !== self) {
	          op.targets().add(self);
	          deps.push(op);
	        }
	      });
	      self.source = value;
	    } else if (isArray(value)) {
	      argval.set(name, -1, Array(n = value.length));
	      for (i=0; i<n; ++i) add(name, i, value[i]);
	    } else {
	      add(name, -1, value);
	    }
	  }
	
	  this.marshall().clear(); // initialize values
	  return deps;
	};
	
	/**
	 * Internal method for marshalling parameter values.
	 * Visits each operator dependency to pull the latest value.
	 * @return {Parameters} A Parameters object to pass to the update function.
	 */
	prototype$1.marshall = function(stamp) {
	  var argval = this._argval || NO_PARAMS,
	      argops = this._argops, item, i, n, op, mod;
	
	  if (argops && (n = argops.length)) {
	    for (i=0; i<n; ++i) {
	      item = argops[i];
	      op = item.op;
	      mod = op.modified() && op.stamp === stamp;
	      argval.set(item.name, item.index, op.value, mod);
	    }
	  }
	  return argval;
	};
	
	/**
	 * Delegate method to perform operator processing.
	 * Subclasses can override this method to perform custom processing.
	 * By default, it marshalls parameters and calls the update function
	 * if that function is defined. If the update function does not
	 * change the operator value then StopPropagation is returned.
	 * If no update function is defined, this method does nothing.
	 * @param {Pulse} pulse - the current dataflow pulse.
	 * @return The output pulse or StopPropagation. A falsy return value
	 *   (including undefined) will let the input pulse pass through.
	 */
	prototype$1.evaluate = function(pulse) {
	  if (this._update) {
	    var params = this.marshall(pulse.stamp),
	        v = this._update(params, pulse);
	
	    params.clear();
	    if (v !== this.value) {
	      this.value = v;
	    } else if (!this.modified()) {
	      return pulse.StopPropagation;
	    }
	  }
	};
	
	/**
	 * Run this operator for the current pulse. If this operator has already
	 * been run at (or after) the pulse timestamp, returns StopPropagation.
	 * Internally, this method calls {@link evaluate} to perform processing.
	 * If {@link evaluate} returns a falsy value, the input pulse is returned.
	 * This method should NOT be overridden, instead overrride {@link evaluate}.
	 * @param {Pulse} pulse - the current dataflow pulse.
	 * @return the output pulse for this operator (or StopPropagation)
	 */
	prototype$1.run = function(pulse) {
	  if (pulse.stamp <= this.stamp) return pulse.StopPropagation;
	  var rv;
	  if (this.skip()) {
	    this.skip(false);
	    rv = 0;
	  } else {
	    rv = this.evaluate(pulse);
	  }
	  this.stamp = pulse.stamp;
	  this.pulse = rv;
	  return rv || pulse;
	};
	
	/**
	 * Add an operator to the dataflow graph. This function accepts a
	 * variety of input argument types. The basic signature supports an
	 * initial value, update function and parameters. If the first parameter
	 * is an Operator instance, it will be added directly. If it is a
	 * constructor for an Operator subclass, a new instance will be instantiated.
	 * Otherwise, if the first parameter is a function instance, it will be used
	 * as the update function and a null initial value is assumed.
	 * @param {*} init - One of: the operator to add, the initial value of
	 *   the operator, an operator class to instantiate, or an update function.
	 * @param {function} [update] - The operator update function.
	 * @param {object} [params] - The operator parameters.
	 * @param {boolean} [react=true] - Flag indicating if this operator should
	 *   listen for changes to upstream operators included as parameters.
	 * @return {Operator} - The added operator.
	 */
	var add = function(init, update, params, react) {
	  var shift = 1,
	    op;
	
	  if (init instanceof Operator) {
	    op = init;
	  } else if (init && init.prototype instanceof Operator) {
	    op = new init();
	  } else if (isFunction(init)) {
	    op = new Operator(null, init);
	  } else {
	    shift = 0;
	    op = new Operator(init, update);
	  }
	
	  this.rank(op);
	  if (shift) {
	    react = params;
	    params = update;
	  }
	  if (params) this.connect(op, op.parameters(params, react));
	  this.touch(op);
	
	  return op;
	};
	
	/**
	 * Connect a target operator as a dependent of source operators.
	 * If necessary, this method will rerank the target operator and its
	 * dependents to ensure propagation proceeds in a topologically sorted order.
	 * @param {Operator} target - The target operator.
	 * @param {Array<Operator>} - The source operators that should propagate
	 *   to the target operator.
	 */
	var connect = function(target, sources) {
	  var targetRank = target.rank, i, n;
	
	  for (i=0, n=sources.length; i<n; ++i) {
	    if (targetRank < sources[i].rank) {
	      this.rerank(target);
	      return;
	    }
	  }
	};
	
	var STREAM_ID = 0;
	
	/**
	 * Models an event stream.
	 * @constructor
	 * @param {function(Object, number): boolean} [filter] - Filter predicate.
	 *   Events pass through when truthy, events are suppressed when falsy.
	 * @param {function(Object): *} [apply] - Applied to input events to produce
	 *   new event values.
	 * @param {function(Object)} [receive] - Event callback function to invoke
	 *   upon receipt of a new event. Use to override standard event processing.
	 */
	function EventStream(filter, apply, receive) {
	  this.id = ++STREAM_ID;
	  this.value = null;
	  if (receive) this.receive = receive;
	  if (filter) this._filter = filter;
	  if (apply) this._apply = apply;
	}
	
	/**
	 * Creates a new event stream instance with the provided
	 * (optional) filter, apply and receive functions.
	 * @param {function(Object, number): boolean} [filter] - Filter predicate.
	 *   Events pass through when truthy, events are suppressed when falsy.
	 * @param {function(Object): *} [apply] - Applied to input events to produce
	 *   new event values.
	 * @see EventStream
	 */
	function stream(filter, apply, receive) {
	  return new EventStream(filter, apply, receive);
	}
	
	var prototype$3 = EventStream.prototype;
	
	prototype$3._filter = truthy;
	
	prototype$3._apply = identity;
	
	prototype$3.targets = function() {
	  return this._targets || (this._targets = UniqueList(id));
	};
	
	prototype$3.consume = function(_) {
	  if (!arguments.length) return !!this._consume;
	  this._consume = !!_;
	  return this;
	};
	
	prototype$3.receive = function(evt) {
	  if (this._filter(evt)) {
	    var val = (this.value = this._apply(evt)),
	        trg = this._targets,
	        n = trg ? trg.length : 0,
	        i = 0;
	
	    for (; i<n; ++i) trg[i].receive(val);
	
	    if (this._consume) {
	      evt.preventDefault();
	      evt.stopPropagation();
	    }
	  }
	};
	
	prototype$3.filter = function(filter) {
	  var s = stream(filter);
	  this.targets().add(s);
	  return s;
	};
	
	prototype$3.apply = function(apply) {
	  var s = stream(null, apply);
	  this.targets().add(s);
	  return s;
	};
	
	prototype$3.merge = function() {
	  var s = stream();
	
	  this.targets().add(s);
	  for (var i=0, n=arguments.length; i<n; ++i) {
	    arguments[i].targets().add(s);
	  }
	
	  return s;
	};
	
	prototype$3.throttle = function(pause) {
	  var t = -1;
	  return this.filter(function() {
	    var now = Date.now();
	    if ((now - t) > pause) {
	      t = now;
	      return 1;
	    } else {
	      return 0;
	    }
	  });
	};
	
	prototype$3.debounce = function(delay) {
	  var s = stream();
	
	  this.targets().add(stream(null, null,
	    debounce(delay, function(e) {
	      var df = e.dataflow;
	      s.receive(e);
	      if (df && df.run) df.run();
	    })
	  ));
	
	  return s;
	};
	
	prototype$3.between = function(a, b) {
	  var active = false;
	  a.targets().add(stream(null, null, function() { active = true; }));
	  b.targets().add(stream(null, null, function() { active = false; }));
	  return this.filter(function() { return active; });
	};
	
	/**
	 * Create a new event stream from an event source.
	 * @param {object} source - The event source to monitor. The input must
	 *  support the addEventListener method.
	 * @param {string} type - The event type.
	 * @param {function(object): boolean} [filter] - Event filter function.
	 * @param {function(object): *} [apply] - Event application function.
	 *   If provided, this function will be invoked and the result will be
	 *   used as the downstream event value.
	 * @return {EventStream}
	 */
	var events = function(source, type, filter, apply) {
	  var df = this,
	      s = stream(filter, apply),
	      send = function(e) {
	        e.dataflow = df;
	        try {
	          s.receive(e);
	        } catch (error) {
	          df.error(error);
	        } finally {
	          df.run();
	        }
	      },
	      sources;
	
	  if (typeof source === 'string' && typeof document !== 'undefined') {
	    sources = document.querySelectorAll(source);
	  } else {
	    sources = array(source);
	  }
	
	  for (var i=0, n=sources.length; i<n; ++i) {
	    sources[i].addEventListener(type, send);
	  }
	
	  return s;
	};
	
	var prefix = "$";
	
	function Map() {}
	
	Map.prototype = map.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};
	
	function map(object, f) {
	  var map = new Map;
	
	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });
	
	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;
	
	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }
	
	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);
	
	  return map;
	}
	
	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;
	
	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) {
	      if (sortValues != null) array.sort(sortValues);
	      return rollup != null ? rollup(array) : array;
	    }
	
	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map(),
	        values,
	        result = createResult();
	
	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }
	
	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });
	
	    return result;
	  }
	
	  function entries(map$$1, depth) {
	    if (++depth > keys.length) return map$$1;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map$$1.entries();
	    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }
	
	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};
	
	function createObject() {
	  return {};
	}
	
	function setObject(object, key, value) {
	  object[key] = value;
	}
	
	function createMap() {
	  return map();
	}
	
	function setMap(map$$1, key, value) {
	  map$$1.set(key, value);
	}
	
	function Set() {}
	
	var proto = map.prototype;
	
	Set.prototype = set.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};
	
	function set(object, f) {
	  var set = new Set;
	
	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });
	
	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }
	
	  return set;
	}
	
	var noop = {value: function() {}};
	
	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}
	
	function Dispatch(_) {
	  this._ = _;
	}
	
	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}
	
	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;
	
	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }
	
	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set$2(_[t], typename.name, null);
	    }
	
	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};
	
	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}
	
	function set$2(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}
	
	var request$1 = function(url, callback) {
	  var request,
	      event = dispatch("beforesend", "progress", "load", "error"),
	      mimeType,
	      headers = map(),
	      xhr = new XMLHttpRequest,
	      user = null,
	      password = null,
	      response,
	      responseType,
	      timeout = 0;
	
	  // If IE does not support CORS, use XDomainRequest.
	  if (typeof XDomainRequest !== "undefined"
	      && !("withCredentials" in xhr)
	      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;
	
	  "onload" in xhr
	      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
	      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };
	
	  function respond(o) {
	    var status = xhr.status, result;
	    if (!status && hasResponse(xhr)
	        || status >= 200 && status < 300
	        || status === 304) {
	      if (response) {
	        try {
	          result = response.call(request, xhr);
	        } catch (e) {
	          event.call("error", request, e);
	          return;
	        }
	      } else {
	        result = xhr;
	      }
	      event.call("load", request, result);
	    } else {
	      event.call("error", request, o);
	    }
	  }
	
	  xhr.onprogress = function(e) {
	    event.call("progress", request, e);
	  };
	
	  request = {
	    header: function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers.get(name);
	      if (value == null) headers.remove(name);
	      else headers.set(name, value + "");
	      return request;
	    },
	
	    // If mimeType is non-null and no Accept header is set, a default is used.
	    mimeType: function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return request;
	    },
	
	    // Specifies what type the response value should take;
	    // for instance, arraybuffer, blob, document, or text.
	    responseType: function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return request;
	    },
	
	    timeout: function(value) {
	      if (!arguments.length) return timeout;
	      timeout = +value;
	      return request;
	    },
	
	    user: function(value) {
	      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
	    },
	
	    password: function(value) {
	      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
	    },
	
	    // Specify how to convert the response content to a specific type;
	    // changes the callback value on "load" events.
	    response: function(value) {
	      response = value;
	      return request;
	    },
	
	    // Alias for send("GET", …).
	    get: function(data, callback) {
	      return request.send("GET", data, callback);
	    },
	
	    // Alias for send("POST", …).
	    post: function(data, callback) {
	      return request.send("POST", data, callback);
	    },
	
	    // If callback is non-null, it will be used for error and load events.
	    send: function(method, data, callback) {
	      xhr.open(method, url, true, user, password);
	      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
	      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
	      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
	      if (responseType != null) xhr.responseType = responseType;
	      if (timeout > 0) xhr.timeout = timeout;
	      if (callback == null && typeof data === "function") callback = data, data = null;
	      if (callback != null && callback.length === 1) callback = fixCallback(callback);
	      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
	      event.call("beforesend", request, xhr);
	      xhr.send(data == null ? null : data);
	      return request;
	    },
	
	    abort: function() {
	      xhr.abort();
	      return request;
	    },
	
	    on: function() {
	      var value = event.on.apply(event, arguments);
	      return value === event ? request : value;
	    }
	  };
	
	  if (callback != null) {
	    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    return request.get(callback);
	  }
	
	  return request;
	};
	
	function fixCallback(callback) {
	  return function(error, xhr) {
	    callback(error == null ? xhr : null);
	  };
	}
	
	function hasResponse(xhr) {
	  var type = xhr.responseType;
	  return type && type !== "text"
	      ? xhr.response // null on error
	      : xhr.responseText; // "" on error
	}
	
	var EOL = {};
	var EOF = {};
	var QUOTE = 34;
	var NEWLINE = 10;
	var RETURN = 13;
	
	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}
	
	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}
	
	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];
	
	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });
	
	  return columns;
	}
	
	var dsvFormat = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      DELIMITER = delimiter.charCodeAt(0);
	
	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns || [];
	    return rows;
	  }
	
	  function parseRows(text, f) {
	    var rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // current line number
	        t, // current token
	        eof = N <= 0, // current token followed by EOF?
	        eol = false; // current token followed by EOL?
	
	    // Strip the trailing newline.
	    if (text.charCodeAt(N - 1) === NEWLINE) --N;
	    if (text.charCodeAt(N - 1) === RETURN) --N;
	
	    function token() {
	      if (eof) return EOF;
	      if (eol) return eol = false, EOL;
	
	      // Unescape quotes.
	      var i, j = I, c;
	      if (text.charCodeAt(j) === QUOTE) {
	        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
	        if ((i = I) >= N) eof = true;
	        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
	      }
	
	      // Find next delimiter or newline.
	      while (I < N) {
	        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        else if (c !== DELIMITER) continue;
	        return text.slice(j, i);
	      }
	
	      // Return last token before EOF.
	      return eof = true, text.slice(j, N);
	    }
	
	    while ((t = token()) !== EOF) {
	      var row = [];
	      while (t !== EOL && t !== EOF) row.push(t), t = token();
	      if (f && (row = f(row, n++)) == null) continue;
	      rows.push(row);
	    }
	
	    return rows;
	  }
	
	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }
	
	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }
	
	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }
	
	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\""
	        : text;
	  }
	
	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};
	
	var csv$1 = dsvFormat(",");
	
	var tsv = dsvFormat("\t");
	
	// Matches absolute URLs with optional protocol
	//   https://...    file://...    //...
	var protocol_re = /^([A-Za-z]+:)?\/\//;
	
	// Special treatment in node.js for the file: protocol
	var fileProtocol = 'file://';
	
	// Request options to check for d3-request
	var requestOptions = [
	  'mimeType',
	  'responseType',
	  'user',
	  'password'
	];
	
	/**
	 * Creates a new loader instance that provides methods for requesting files
	 * from either the network or disk, and for sanitizing request URIs.
	 * @param {object} [options] - Optional default loading options to use.
	 * @return {object} - A new loader instance.
	 */
	var loader = function(options) {
	  return {
	    options: options || {},
	    sanitize: sanitize,
	    load: load,
	    file: file,
	    http: http
	  };
	};
	
	function marshall(loader, options) {
	  return extend({}, loader.options, options);
	}
	
	/**
	 * Load an external resource, typically either from the web or from the local
	 * filesystem. This function uses {@link sanitize} to first sanitize the uri,
	 * then calls either {@link http} (for web requests) or {@link file} (for
	 * filesystem loading).
	 * @param {string} uri - The resource indicator (e.g., URL or filename).
	 * @param {object} [options] - Optional loading options. These options will
	 *   override any existing default options.
	 * @return {Promise} - A promise that resolves to the loaded content.
	 */
	function load(uri, options) {
	  var loader = this;
	  return loader.sanitize(uri, options)
	    .then(function(opt) {
	      var url = opt.href;
	      return opt.localFile
	        ? loader.file(url)
	        : loader.http(url, options);
	    });
	}
	
	/**
	 * URI sanitizer function.
	 * @param {string} uri - The uri (url or filename) to sanity check.
	 * @param {object} options - An options hash.
	 * @return {Promise} - A promise that resolves to an object containing
	 *  sanitized uri data, or rejects it the input uri is deemed invalid.
	 *  The properties of the resolved object are assumed to be
	 *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
	 *  provided by the 'href' property of the returned object.
	 */
	function sanitize(uri, options) {
	  options = marshall(this, options);
	  return new Promise(function(accept, reject) {
	    var result = {href: null},
	        isFile, hasProtocol, loadFile, base;
	
	    if (uri == null || typeof uri !== 'string') {
	      reject('Sanitize failure, invalid URI: ' + $(uri));
	      return;
	    }
	
	    hasProtocol = protocol_re.test(uri);
	
	    // if relative url (no protocol/host), prepend baseURL
	    if ((base = options.baseURL) && !hasProtocol) {
	      // Ensure that there is a slash between the baseURL (e.g. hostname) and url
	      if (!startsWith(uri, '/') && base[base.length-1] !== '/') {
	        uri = '/' + uri;
	      }
	      uri = base + uri;
	    }
	
	    // should we load from file system?
	    loadFile = (isFile = startsWith(uri, fileProtocol))
	      || options.mode === 'file'
	      || options.mode !== 'http' && !hasProtocol && fs();
	
	    if (isFile) {
	      // strip file protocol
	      uri = uri.slice(fileProtocol.length);
	    } else if (startsWith(uri, '//')) {
	      if (options.defaultProtocol === 'file') {
	        // if is file, strip protocol and set loadFile flag
	        uri = uri.slice(2);
	        loadFile = true;
	      } else {
	        // if relative protocol (starts with '//'), prepend default protocol
	        uri = (options.defaultProtocol || 'http') + ':' + uri;
	      }
	    }
	
	    // set non-enumerable mode flag to indicate local file load
	    Object.defineProperty(result, 'localFile', {value: !!loadFile});
	
	    // set uri and return
	    result.href = uri;
	    accept(result);
	  });
	}
	
	/**
	 * HTTP request loader.
	 * @param {string} url - The url to request.
	 * @param {object} options - An options hash.
	 * @return {Promise} - A promise that resolves to the file contents.
	 */
	function http(url, options) {
	  options = marshall(this, options);
	  return new Promise(function(accept, reject) {
	    var req = request$1(url),
	        name;
	
	    for (name in options.headers) {
	      req.header(name, options.headers[name]);
	    }
	
	    requestOptions.forEach(function(name) {
	      if (options[name]) req[name](options[name]);
	    });
	
	    req.on('error', function(error) {
	        reject(error || 'Error loading URL: ' + url);
	      })
	      .on('load', function(result) {
	        var text$$1 = result && result.responseText;
	        (!result || result.status === 0)
	          ? reject(text$$1 || 'Error')
	          : accept(text$$1);
	      })
	      .get();
	  });
	}
	
	/**
	 * File system loader.
	 * @param {string} filename - The file system path to load.
	 * @return {Promise} - A promise that resolves to the file contents.
	 */
	function file(filename) {
	  return new Promise(function(accept, reject) {
	    var f = fs();
	    f ? f.readFile(filename, function(error, data) {
	          if (error) reject(error);
	          else accept(data);
	        })
	      : reject('No file system access for ' + filename);
	  });
	}
	
	function fs() {
	  var fs = "function" === 'function' && __webpack_require__(9);
	  return fs && isFunction(fs.readFile) ? fs : null;
	}
	
	function startsWith(string, query) {
	  return string == null ? false : string.lastIndexOf(query, 0) === 0;
	}
	
	var typeParsers = {
	  boolean: toBoolean,
	  integer: toNumber,
	  number:  toNumber,
	  date:    toDate,
	  string:  toString,
	  unknown: identity
	};
	
	var typeTests = [
	  isBoolean$1,
	  isInteger,
	  isNumber$1,
	  isDate$1
	];
	
	var typeList = [
	  'boolean',
	  'integer',
	  'number',
	  'date'
	];
	
	function inferType(values, field$$1) {
	  if (!values || !values.length) return 'unknown';
	
	  var tests = typeTests.slice(),
	      value, i, n, j;
	
	  for (i=0, n=values.length; i<n; ++i) {
	    value = field$$1 ? values[i][field$$1] : values[i];
	    for (j=0; j<tests.length; ++j) {
	      if (isValid(value) && !tests[j](value)) {
	        tests.splice(j, 1); --j;
	      }
	    }
	    if (tests.length === 0) return 'string';
	  }
	  return typeList[typeTests.indexOf(tests[0])];
	}
	
	function inferTypes(data, fields) {
	  return fields.reduce(function(types, field$$1) {
	    types[field$$1] = inferType(data, field$$1);
	    return types;
	  }, {});
	}
	
	// -- Type Checks ----
	
	function isValid(_) {
	  return _ != null && _ === _;
	}
	
	function isBoolean$1(_) {
	  return _ === 'true' || _ === 'false' || _ === true || _ === false;
	}
	
	function isDate$1(_) {
	  return !isNaN(Date.parse(_));
	}
	
	function isNumber$1(_) {
	  return !isNaN(+_) && !(_ instanceof Date);
	}
	
	function isInteger(_) {
	  return isNumber$1(_) && (_=+_) === ~~_;
	}
	
	function delimitedFormat(delimiter) {
	  return function(data, format) {
	    var delim = {delimiter: delimiter};
	    return dsv$1(data, format ? extend(format, delim) : delim);
	  };
	}
	
	function dsv$1(data, format) {
	  if (format.header) {
	    data = format.header
	      .map($)
	      .join(format.delimiter) + '\n' + data;
	  }
	  return dsvFormat(format.delimiter).parse(data+'');
	}
	
	function isBuffer(_) {
	  return (typeof Buffer === 'function' && isFunction(Buffer.isBuffer))
	    ? Buffer.isBuffer(_) : false;
	}
	
	var json$1 = function(data, format) {
	  var prop = (format && format.property) ? field(format.property) : identity;
	  return isObject(data) && !isBuffer(data)
	    ? parseJSON(prop(data))
	    : prop(JSON.parse(data));
	};
	
	function parseJSON(data, format) {
	  return (format && format.copy)
	    ? JSON.parse(JSON.stringify(data))
	    : data;
	}
	
	var identity$1 = function(x) {
	  return x;
	};
	
	var transform = function(transform) {
	  if (transform == null) return identity$1;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(input, i) {
	    if (!i) x0 = y0 = 0;
	    var j = 2, n = input.length, output = new Array(n);
	    output[0] = (x0 += input[0]) * kx + dx;
	    output[1] = (y0 += input[1]) * ky + dy;
	    while (j < n) output[j] = input[j], ++j;
	    return output;
	  };
	};
	
	var reverse = function(array, n) {
	  var t, j = array.length, i = j - n;
	  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	};
	
	var feature = function(topology, o) {
	  return o.type === "GeometryCollection"
	      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
	      : feature$1(topology, o);
	};
	
	function feature$1(topology, o) {
	  var id = o.id,
	      bbox = o.bbox,
	      properties = o.properties == null ? {} : o.properties,
	      geometry = object(topology, o);
	  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
	      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
	      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
	}
	
	function object(topology, o) {
	  var transformPoint = transform(topology.transform),
	      arcs = topology.arcs;
	
	  function arc(i, points) {
	    if (points.length) points.pop();
	    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
	      points.push(transformPoint(a[k], k));
	    }
	    if (i < 0) reverse(points, n);
	  }
	
	  function point(p) {
	    return transformPoint(p);
	  }
	
	  function line(arcs) {
	    var points = [];
	    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
	    return points;
	  }
	
	  function ring(arcs) {
	    var points = line(arcs);
	    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
	    return points;
	  }
	
	  function polygon(arcs) {
	    return arcs.map(ring);
	  }
	
	  function geometry(o) {
	    var type = o.type, coordinates;
	    switch (type) {
	      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
	      case "Point": coordinates = point(o.coordinates); break;
	      case "MultiPoint": coordinates = o.coordinates.map(point); break;
	      case "LineString": coordinates = line(o.arcs); break;
	      case "MultiLineString": coordinates = o.arcs.map(line); break;
	      case "Polygon": coordinates = polygon(o.arcs); break;
	      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
	      default: return null;
	    }
	    return {type: type, coordinates: coordinates};
	  }
	
	  return geometry(o);
	}
	
	var stitch = function(topology, arcs) {
	  var stitchedArcs = {},
	      fragmentByStart = {},
	      fragmentByEnd = {},
	      fragments = [],
	      emptyIndex = -1;
	
	  // Stitch empty arcs first, since they may be subsumed by other arcs.
	  arcs.forEach(function(i, j) {
	    var arc = topology.arcs[i < 0 ? ~i : i], t;
	    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
	      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
	    }
	  });
	
	  arcs.forEach(function(i) {
	    var e = ends(i),
	        start = e[0],
	        end = e[1],
	        f, g;
	
	    if (f = fragmentByEnd[start]) {
	      delete fragmentByEnd[f.end];
	      f.push(i);
	      f.end = end;
	      if (g = fragmentByStart[end]) {
	        delete fragmentByStart[g.start];
	        var fg = g === f ? f : f.concat(g);
	        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else if (f = fragmentByStart[end]) {
	      delete fragmentByStart[f.start];
	      f.unshift(i);
	      f.start = start;
	      if (g = fragmentByEnd[start]) {
	        delete fragmentByEnd[g.end];
	        var gf = g === f ? f : g.concat(f);
	        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else {
	      f = [i];
	      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
	    }
	  });
	
	  function ends(i) {
	    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
	    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
	    else p1 = arc[arc.length - 1];
	    return i < 0 ? [p1, p0] : [p0, p1];
	  }
	
	  function flush(fragmentByEnd, fragmentByStart) {
	    for (var k in fragmentByEnd) {
	      var f = fragmentByEnd[k];
	      delete fragmentByStart[f.start];
	      delete f.start;
	      delete f.end;
	      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
	      fragments.push(f);
	    }
	  }
	
	  flush(fragmentByEnd, fragmentByStart);
	  flush(fragmentByStart, fragmentByEnd);
	  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });
	
	  return fragments;
	};
	
	var mesh = function(topology) {
	  return object(topology, meshArcs.apply(this, arguments));
	};
	
	function meshArcs(topology, object$$1, filter) {
	  var arcs, i, n;
	  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);
	  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
	  return {type: "MultiLineString", arcs: stitch(topology, arcs)};
	}
	
	function extractArcs(topology, object$$1, filter) {
	  var arcs = [],
	      geomsByArc = [],
	      geom;
	
	  function extract0(i) {
	    var j = i < 0 ? ~i : i;
	    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
	  }
	
	  function extract1(arcs) {
	    arcs.forEach(extract0);
	  }
	
	  function extract2(arcs) {
	    arcs.forEach(extract1);
	  }
	
	  function extract3(arcs) {
	    arcs.forEach(extract2);
	  }
	
	  function geometry(o) {
	    switch (geom = o, o.type) {
	      case "GeometryCollection": o.geometries.forEach(geometry); break;
	      case "LineString": extract1(o.arcs); break;
	      case "MultiLineString": case "Polygon": extract2(o.arcs); break;
	      case "MultiPolygon": extract3(o.arcs); break;
	    }
	  }
	
	  geometry(object$$1);
	
	  geomsByArc.forEach(filter == null
	      ? function(geoms) { arcs.push(geoms[0].i); }
	      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });
	
	  return arcs;
	}
	
	var bisect = function(a, x) {
	  var lo = 0, hi = a.length;
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;
	    if (a[mid] < x) lo = mid + 1;
	    else hi = mid;
	  }
	  return lo;
	};
	
	var topojson = function(data, format) {
	  var object, property;
	  data = json$1(data, format);
	
	  if (format && (property = format.feature)) {
	    return (object = data.objects[property])
	      ? feature(data, object).features
	      : error$1('Invalid TopoJSON object: ' + property);
	  }
	
	  else if (format && (property = format.mesh)) {
	    return (object = data.objects[property])
	      ? [mesh(data, object)]
	      : error$1('Invalid TopoJSON object: ' + property);
	  }
	
	  error$1('Missing TopoJSON feature or mesh parameter.');
	};
	
	var formats = {
	  dsv: dsv$1,
	  csv: delimitedFormat(','),
	  tsv: delimitedFormat('\t'),
	  json: json$1,
	  topojson: topojson
	};
	
	var formats$1 = function(name, format) {
	  if (arguments.length > 1) {
	    formats[name] = format;
	    return this;
	  } else {
	    return formats.hasOwnProperty(name) ? formats[name] : null;
	  }
	};
	
	var t0 = new Date;
	var t1 = new Date;
	
	function newInterval(floori, offseti, count, field) {
	
	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }
	
	  interval.floor = interval;
	
	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };
	
	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };
	
	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };
	
	  interval.range = function(start, stop, step) {
	    var range = [], previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    while (previous < start && start < stop);
	    return range;
	  };
	
	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };
	
	  if (count) {
	    interval.count = function(start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };
	
	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }
	
	  return interval;
	}
	
	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});
	
	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	
	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;
	
	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond) * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	
	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute) * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});
	
	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
	  if (offset < 0) offset += durationHour;
	  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});
	
	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});
	
	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}
	
	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);
	
	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	
	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});
	
	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	
	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	
	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});
	
	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	
	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}
	
	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);
	
	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	
	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});
	
	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	
	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}
	
	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}
	
	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}
	
	function formatLocale(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };
	
	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);
	
	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	
	      if (!(date instanceof Date)) date = new Date(+date);
	
	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }
	
	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }
	
	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week, day$$1;
	      if (i != string.length) return null;
	
	      // If a UNIX timestamp is specified, return it.
	      if ("Q" in d) return new Date(d.Q);
	
	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;
	
	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;
	        if ("Z" in d) {
	          week = utcDate(newYear(d.y)), day$$1 = week.getUTCDay();
	          week = day$$1 > 4 || day$$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
	          week = utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = newDate(newYear(d.y)), day$$1 = week.getDay();
	          week = day$$1 > 4 || day$$1 === 0 ? monday.ceil(week) : monday(week);
	          week = day.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }
	
	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }
	
	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }
	
	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;
	
	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }
	
	    return j;
	  }
	
	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }
	
	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }
	
	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }
	
	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }
	
	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }
	
	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }
	
	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }
	
	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }
	
	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }
	
	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }
	
	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }
	
	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }
	
	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }
	
	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}
	
	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\^$*+?|[\]().{}]/g;
	
	function pad$1(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}
	
	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}
	
	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}
	
	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}
	
	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}
	
	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}
	
	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}
	
	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}
	
	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}
	
	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}
	
	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}
	
	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}
	
	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}
	
	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}
	
	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}
	
	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}
	
	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
	}
	
	function formatDayOfMonth(d, p) {
	  return pad$1(d.getDate(), p, 2);
	}
	
	function formatHour24(d, p) {
	  return pad$1(d.getHours(), p, 2);
	}
	
	function formatHour12(d, p) {
	  return pad$1(d.getHours() % 12 || 12, p, 2);
	}
	
	function formatDayOfYear(d, p) {
	  return pad$1(1 + day.count(year(d), d), p, 3);
	}
	
	function formatMilliseconds(d, p) {
	  return pad$1(d.getMilliseconds(), p, 3);
	}
	
	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}
	
	function formatMonthNumber(d, p) {
	  return pad$1(d.getMonth() + 1, p, 2);
	}
	
	function formatMinutes(d, p) {
	  return pad$1(d.getMinutes(), p, 2);
	}
	
	function formatSeconds(d, p) {
	  return pad$1(d.getSeconds(), p, 2);
	}
	
	function formatWeekdayNumberMonday(d) {
	  var day$$1 = d.getDay();
	  return day$$1 === 0 ? 7 : day$$1;
	}
	
	function formatWeekNumberSunday(d, p) {
	  return pad$1(sunday.count(year(d), d), p, 2);
	}
	
	function formatWeekNumberISO(d, p) {
	  var day$$1 = d.getDay();
	  d = (day$$1 >= 4 || day$$1 === 0) ? thursday(d) : thursday.ceil(d);
	  return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
	}
	
	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}
	
	function formatWeekNumberMonday(d, p) {
	  return pad$1(monday.count(year(d), d), p, 2);
	}
	
	function formatYear(d, p) {
	  return pad$1(d.getFullYear() % 100, p, 2);
	}
	
	function formatFullYear(d, p) {
	  return pad$1(d.getFullYear() % 10000, p, 4);
	}
	
	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad$1(z / 60 | 0, "0", 2)
	      + pad$1(z % 60, "0", 2);
	}
	
	function formatUTCDayOfMonth(d, p) {
	  return pad$1(d.getUTCDate(), p, 2);
	}
	
	function formatUTCHour24(d, p) {
	  return pad$1(d.getUTCHours(), p, 2);
	}
	
	function formatUTCHour12(d, p) {
	  return pad$1(d.getUTCHours() % 12 || 12, p, 2);
	}
	
	function formatUTCDayOfYear(d, p) {
	  return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);
	}
	
	function formatUTCMilliseconds(d, p) {
	  return pad$1(d.getUTCMilliseconds(), p, 3);
	}
	
	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}
	
	function formatUTCMonthNumber(d, p) {
	  return pad$1(d.getUTCMonth() + 1, p, 2);
	}
	
	function formatUTCMinutes(d, p) {
	  return pad$1(d.getUTCMinutes(), p, 2);
	}
	
	function formatUTCSeconds(d, p) {
	  return pad$1(d.getUTCSeconds(), p, 2);
	}
	
	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}
	
	function formatUTCWeekNumberSunday(d, p) {
	  return pad$1(utcSunday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCWeekNumberISO(d, p) {
	  var day$$1 = d.getUTCDay();
	  d = (day$$1 >= 4 || day$$1 === 0) ? utcThursday(d) : utcThursday.ceil(d);
	  return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
	}
	
	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}
	
	function formatUTCWeekNumberMonday(d, p) {
	  return pad$1(utcMonday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 100, p, 2);
	}
	
	function formatUTCFullYear(d, p) {
	  return pad$1(d.getUTCFullYear() % 10000, p, 4);
	}
	
	function formatUTCZone() {
	  return "+0000";
	}
	
	function formatLiteralPercent() {
	  return "%";
	}
	
	function formatUnixTimestamp(d) {
	  return +d;
	}
	
	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}
	
	var locale$1;
	var timeFormat;
	var timeParse;
	var utcFormat;
	var utcParse;
	
	defaultLocale({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	
	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  timeFormat = locale$1.format;
	  timeParse = locale$1.parse;
	  utcFormat = locale$1.utcFormat;
	  utcParse = locale$1.utcParse;
	  return locale$1;
	}
	
	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
	
	function formatIsoNative(date) {
	  return date.toISOString();
	}
	
	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : utcFormat(isoSpecifier);
	
	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}
	
	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : utcParse(isoSpecifier);
	
	var read = function(data, schema, dateParse) {
	  schema = schema || {};
	
	  var reader = formats$1(schema.type || 'json');
	  if (!reader) error$1('Unknown data format type: ' + schema.type);
	
	  data = reader(data, schema);
	  if (schema.parse) parse(data, schema.parse, dateParse);
	
	  if (data.hasOwnProperty('columns')) delete data.columns;
	  return data;
	};
	
	function parse(data, types, dateParse) {
	  if (!data.length) return; // early exit for empty data
	
	  dateParse = dateParse || timeParse;
	
	  var fields = data.columns || Object.keys(data[0]),
	      parsers, datum, field$$1, i, j, n, m;
	
	  if (types === 'auto') types = inferTypes(data, fields);
	
	  fields = Object.keys(types);
	  parsers = fields.map(function(field$$1) {
	    var type = types[field$$1],
	        parts, pattern;
	
	    if (type && (type.indexOf('date:') === 0 || type.indexOf('utc:') === 0)) {
	      parts = type.split(/:(.+)?/, 2);  // split on first :
	      pattern = parts[1];
	
	      if ((pattern[0] === '\'' && pattern[pattern.length-1] === '\'') ||
	          (pattern[0] === '"'  && pattern[pattern.length-1] === '"')) {
	        pattern = pattern.slice(1, -1);
	      }
	
	      return parts[0] === 'utc' ? utcParse(pattern) : dateParse(pattern);
	    }
	
	    if (!typeParsers[type]) {
	      throw Error('Illegal format pattern: ' + field$$1 + ':' + type);
	    }
	
	    return typeParsers[type];
	  });
	
	  for (i=0, n=data.length, m=fields.length; i<n; ++i) {
	    datum = data[i];
	    for (j=0; j<m; ++j) {
	      field$$1 = fields[j];
	      datum[field$$1] = parsers[j](datum[field$$1]);
	    }
	  }
	}
	
	function ingest$1(target, data, format) {
	  return this.pulse(target, this.changeset().insert(read(data, format)));
	}
	
	function loadPending(df) {
	  var accept, reject,
	      pending = new Promise(function(a, r) {
	        accept = a;
	        reject = r;
	      });
	
	  pending.requests = 0;
	
	  pending.done = function() {
	    if (--pending.requests === 0) {
	      df.runAfter(function() {
	        df._pending = null;
	        try {
	          df.run();
	          accept(df);
	        } catch (err) {
	          reject(err);
	        }
	      });
	    }
	  };
	
	  return (df._pending = pending);
	}
	
	function request(target, url, format) {
	  var df = this,
	      pending = df._pending || loadPending(df);
	
	  pending.requests += 1;
	
	  df.loader()
	    .load(url, {context:'dataflow'})
	    .then(
	      function(data) { df.ingest(target, data, format); },
	      function(error) { df.error('Loading failed', url, error); })
	    .catch(
	      function(error) { df.error('Data ingestion failed', url, error); })
	    .then(pending.done, pending.done);
	}
	
	var SKIP$1 = {skip: true};
	
	/**
	 * Perform operator updates in response to events. Applies an
	 * update function to compute a new operator value. If the update function
	 * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
	 * changes. Otherwise, the operator value will be updated to the return value.
	 * @param {EventStream|Operator} source - The event source to react to.
	 *   This argument can be either an EventStream or an Operator.
	 * @param {Operator|function(object):Operator} target - The operator to update.
	 *   This argument can either be an Operator instance or (if the source
	 *   argument is an EventStream), a function that accepts an event object as
	 *   input and returns an Operator to target.
	 * @param {function(Parameters,Event): *} [update] - Optional update function
	 *   to compute the new operator value, or a literal value to set. Update
	 *   functions expect to receive a parameter object and event as arguments.
	 *   This function can either return a new operator value or (if the source
	 *   argument is an EventStream) a {@link ChangeSet} instance to pulse
	 *   the target operator with tuple changes.
	 * @param {object} [params] - The update function parameters.
	 * @param {object} [options] - Additional options hash. If not overridden,
	 *   updated operators will be skipped by default.
	 * @param {boolean} [options.skip] - If true, the operator will
	 *  be skipped: it will not be evaluated, but its dependents will be.
	 * @param {boolean} [options.force] - If true, the operator will
	 *   be re-evaluated even if its value has not changed.
	 * @return {Dataflow}
	 */
	var on = function(source, target, update, params, options) {
	  var fn = source instanceof Operator ? onOperator : onStream;
	  fn(this, source, target, update, params, options);
	  return this;
	};
	
	function onStream(df, stream, target, update, params, options) {
	  var opt = extend({}, options, SKIP$1), func, op;
	
	  if (!isFunction(target)) target = constant(target);
	
	  if (update === undefined) {
	    func = function(e) {
	      df.touch(target(e));
	    };
	  } else if (isFunction(update)) {
	    op = new Operator(null, update, params, false);
	    func = function(e) {
	      var v, t = target(e);
	      op.evaluate(e);
	      isChangeSet(v = op.value) ? df.pulse(t, v, options) : df.update(t, v, opt);
	    };
	  } else {
	    func = function(e) {
	      df.update(target(e), update, opt);
	    };
	  }
	
	  stream.apply(func);
	}
	
	function onOperator(df, source, target, update, params, options) {
	  var func, op;
	
	  if (update === undefined) {
	    op = target;
	  } else {
	    func = isFunction(update) ? update : constant(update);
	    update = !target ? func : function(_, pulse) {
	      var value = func(_, pulse);
	      return target.skip()
	        ? value
	        : (target.skip(true).value = value);
	    };
	
	    op = new Operator(null, update, params, false);
	    op.modified(options && options.force);
	    op.rank = 0;
	
	    if (target) {
	      op.skip(true); // skip first invocation
	      op.value = target.value;
	      op.targets().add(target);
	    }
	  }
	
	  source.targets().add(op);
	}
	
	/**
	 * Assigns a rank to an operator. Ranks are assigned in increasing order
	 * by incrementing an internal rank counter.
	 * @param {Operator} op - The operator to assign a rank.
	 */
	function rank(op) {
	  op.rank = ++this._rank;
	}
	
	/**
	 * Re-ranks an operator and all downstream target dependencies. This
	 * is necessary when upstream depencies of higher rank are added to
	 * a target operator.
	 * @param {Operator} op - The operator to re-rank.
	 */
	function rerank(op) {
	  var queue = [op],
	      cur, list, i;
	
	  while (queue.length) {
	    this.rank(cur = queue.pop());
	    if (list = cur._targets) {
	      for (i=list.length; --i >= 0;) {
	        queue.push(cur = list[i]);
	        if (cur === op) error$1('Cycle detected in dataflow graph.');
	      }
	    }
	  }
	}
	
	/**
	 * Sentinel value indicating pulse propagation should stop.
	 */
	var StopPropagation = {};
	
	// Pulse visit type flags
	var ADD       = (1 << 0);
	var REM       = (1 << 1);
	var MOD       = (1 << 2);
	var ADD_REM   = ADD | REM;
	var ADD_MOD   = ADD | MOD;
	var ALL       = ADD | REM | MOD;
	var REFLOW    = (1 << 3);
	var SOURCE    = (1 << 4);
	var NO_SOURCE = (1 << 5);
	var NO_FIELDS = (1 << 6);
	
	/**
	 * A Pulse enables inter-operator communication during a run of the
	 * dataflow graph. In addition to the current timestamp, a pulse may also
	 * contain a change-set of added, removed or modified data tuples, as well as
	 * a pointer to a full backing data source. Tuple change sets may not
	 * be fully materialized; for example, to prevent needless array creation
	 * a change set may include larger arrays and corresponding filter functions.
	 * The pulse provides a {@link visit} method to enable proper and efficient
	 * iteration over requested data tuples.
	 *
	 * In addition, each pulse can track modification flags for data tuple fields.
	 * Responsible transform operators should call the {@link modifies} method to
	 * indicate changes to data fields. The {@link modified} method enables
	 * querying of this modification state.
	 *
	 * @constructor
	 * @param {Dataflow} dataflow - The backing dataflow instance.
	 * @param {number} stamp - The current propagation timestamp.
	 * @param {string} [encode] - An optional encoding set name, which is then
	 *   accessible as Pulse.encode. Operators can respond to (or ignore) this
	 *   setting as appropriate. This parameter can be used in conjunction with
	 *   the Encode transform in the vega-encode module.
	 */
	function Pulse(dataflow, stamp, encode) {
	  this.dataflow = dataflow;
	  this.stamp = stamp == null ? -1 : stamp;
	  this.add = [];
	  this.rem = [];
	  this.mod = [];
	  this.fields = null;
	  this.encode = encode || null;
	}
	
	var prototype$4 = Pulse.prototype;
	
	/**
	 * Sentinel value indicating pulse propagation should stop.
	 */
	prototype$4.StopPropagation = StopPropagation;
	
	/**
	 * Boolean flag indicating ADD (added) tuples.
	 */
	prototype$4.ADD = ADD;
	
	/**
	 * Boolean flag indicating REM (removed) tuples.
	 */
	prototype$4.REM = REM;
	
	/**
	 * Boolean flag indicating MOD (modified) tuples.
	 */
	prototype$4.MOD = MOD;
	
	/**
	 * Boolean flag indicating ADD (added) and REM (removed) tuples.
	 */
	prototype$4.ADD_REM = ADD_REM;
	
	/**
	 * Boolean flag indicating ADD (added) and MOD (modified) tuples.
	 */
	prototype$4.ADD_MOD = ADD_MOD;
	
	/**
	 * Boolean flag indicating ADD, REM and MOD tuples.
	 */
	prototype$4.ALL = ALL;
	
	/**
	 * Boolean flag indicating all tuples in a data source
	 * except for the ADD, REM and MOD tuples.
	 */
	prototype$4.REFLOW = REFLOW;
	
	/**
	 * Boolean flag indicating a 'pass-through' to a
	 * backing data source, ignoring ADD, REM and MOD tuples.
	 */
	prototype$4.SOURCE = SOURCE;
	
	/**
	 * Boolean flag indicating that source data should be
	 * suppressed when creating a forked pulse.
	 */
	prototype$4.NO_SOURCE = NO_SOURCE;
	
	/**
	 * Boolean flag indicating that field modifications should be
	 * suppressed when creating a forked pulse.
	 */
	prototype$4.NO_FIELDS = NO_FIELDS;
	
	/**
	 * Creates a new pulse based on the values of this pulse.
	 * The dataflow, time stamp and field modification values are copied over.
	 * By default, new empty ADD, REM and MOD arrays are created.
	 * @param {number} flags - Integer of boolean flags indicating which (if any)
	 *   tuple arrays should be copied to the new pulse. The supported flag values
	 *   are ADD, REM and MOD. Array references are copied directly: new array
	 *   instances are not created.
	 * @return {Pulse} - The forked pulse instance.
	 * @see init
	 */
	prototype$4.fork = function(flags) {
	  return new Pulse(this.dataflow).init(this, flags);
	};
	
	/**
	 * Returns a pulse that adds all tuples from a backing source. This is
	 * useful for cases where operators are added to a dataflow after an
	 * upstream data pipeline has already been processed, ensuring that
	 * new operators can observe all tuples within a stream.
	 * @return {Pulse} - A pulse instance with all source tuples included
	 *   in the add array. If the current pulse already has all source
	 *   tuples in its add array, it is returned directly. If the current
	 *   pulse does not have a backing source, it is returned directly.
	 */
	prototype$4.addAll = function() {
	  var p = this;
	  if (!this.source || this.source.length === this.add.length) {
	    return p;
	  } else {
	    p = new Pulse(this.dataflow).init(this);
	    p.add = p.source;
	    return p;
	  }
	};
	
	/**
	 * Initialize this pulse based on the values of another pulse. This method
	 * is used internally by {@link fork} to initialize a new forked tuple.
	 * The dataflow, time stamp and field modification values are copied over.
	 * By default, new empty ADD, REM and MOD arrays are created.
	 * @param {Pulse} src - The source pulse to copy from.
	 * @param {number} flags - Integer of boolean flags indicating which (if any)
	 *   tuple arrays should be copied to the new pulse. The supported flag values
	 *   are ADD, REM and MOD. Array references are copied directly: new array
	 *   instances are not created. By default, source data arrays are copied
	 *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
	 * @return {Pulse} - Returns this Pulse instance.
	 */
	prototype$4.init = function(src, flags) {
	  var p = this;
	  p.stamp = src.stamp;
	  p.encode = src.encode;
	
	  if (src.fields && !(flags & NO_FIELDS)) {
	    p.fields = src.fields;
	  }
	
	  if (flags & ADD) {
	    p.addF = src.addF;
	    p.add = src.add;
	  } else {
	    p.addF = null;
	    p.add = [];
	  }
	
	  if (flags & REM) {
	    p.remF = src.remF;
	    p.rem = src.rem;
	  } else {
	    p.remF = null;
	    p.rem = [];
	  }
	
	  if (flags & MOD) {
	    p.modF = src.modF;
	    p.mod = src.mod;
	  } else {
	    p.modF = null;
	    p.mod = [];
	  }
	
	  if (flags & NO_SOURCE) {
	    p.srcF = null;
	    p.source = null;
	  } else {
	    p.srcF = src.srcF;
	    p.source = src.source;
	  }
	
	  return p;
	};
	
	/**
	 * Schedules a function to run after pulse propagation completes.
	 * @param {function} func - The function to run.
	 */
	prototype$4.runAfter = function(func) {
	  this.dataflow.runAfter(func);
	};
	
	/**
	 * Indicates if tuples have been added, removed or modified.
	 * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
	 *   Defaults to ALL, returning true if any tuple type has changed.
	 * @return {boolean} - Returns true if one or more queried tuple types have
	 *   changed, false otherwise.
	 */
	prototype$4.changed = function(flags) {
	  var f = flags || ALL;
	  return ((f & ADD) && this.add.length)
	      || ((f & REM) && this.rem.length)
	      || ((f & MOD) && this.mod.length);
	};
	
	/**
	 * Forces a "reflow" of tuple values, such that all tuples in the backing
	 * source are added to the MOD set, unless already present in the ADD set.
	 * @param {boolean} [fork=false] - If true, returns a forked copy of this
	 *   pulse, and invokes reflow on that derived pulse.
	 * @return {Pulse} - The reflowed pulse instance.
	 */
	prototype$4.reflow = function(fork) {
	  if (fork) return this.fork(ALL).reflow();
	
	  var len = this.add.length,
	      src = this.source && this.source.length;
	  if (src && src !== len) {
	    this.mod = this.source;
	    if (len) this.filter(MOD, filter(this, ADD));
	  }
	  return this;
	};
	
	/**
	 * Marks one or more data field names as modified to assist dependency
	 * tracking and incremental processing by transform operators.
	 * @param {string|Array<string>} _ - The field(s) to mark as modified.
	 * @return {Pulse} - This pulse instance.
	 */
	prototype$4.modifies = function(_) {
	  var fields = array(_),
	      hash = this.fields || (this.fields = {});
	  fields.forEach(function(f) { hash[f] = true; });
	  return this;
	};
	
	/**
	 * Checks if one or more data fields have been modified during this pulse
	 * propagation timestamp.
	 * @param {string|Array<string>} _ - The field(s) to check for modified.
	 * @return {boolean} - Returns true if any of the provided fields has been
	 *   marked as modified, false otherwise.
	 */
	prototype$4.modified = function(_) {
	  var fields = this.fields;
	  return !(this.mod.length && fields) ? false
	    : !arguments.length ? !!fields
	    : isArray(_) ? _.some(function(f) { return fields[f]; })
	    : fields[_];
	};
	
	/**
	 * Adds a filter function to one more tuple sets. Filters are applied to
	 * backing tuple arrays, to determine the actual set of tuples considered
	 * added, removed or modified. They can be used to delay materialization of
	 * a tuple set in order to avoid expensive array copies. In addition, the
	 * filter functions can serve as value transformers: unlike standard predicate
	 * function (which return boolean values), Pulse filters should return the
	 * actual tuple value to process. If a tuple set is already filtered, the
	 * new filter function will be appended into a conjuntive ('and') query.
	 * @param {number} flags - Flags indicating the tuple set(s) to filter.
	 * @param {function(*):object} filter - Filter function that will be applied
	 *   to the tuple set array, and should return a data tuple if the value
	 *   should be included in the tuple set, and falsy (or null) otherwise.
	 * @return {Pulse} - Returns this pulse instance.
	 */
	prototype$4.filter = function(flags, filter) {
	  var p = this;
	  if (flags & ADD) p.addF = addFilter(p.addF, filter);
	  if (flags & REM) p.remF = addFilter(p.remF, filter);
	  if (flags & MOD) p.modF = addFilter(p.modF, filter);
	  if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
	  return p;
	};
	
	function addFilter(a, b) {
	  return a ? function(t,i) { return a(t,i) && b(t,i); } : b;
	}
	
	/**
	 * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
	 * a registered filter function, it will be applied and the tuple set(s) will
	 * be replaced with materialized tuple arrays.
	 * @param {number} flags - Flags indicating the tuple set(s) to materialize.
	 * @return {Pulse} - Returns this pulse instance.
	 */
	prototype$4.materialize = function(flags) {
	  flags = flags || ALL;
	  var p = this;
	  if ((flags & ADD) && p.addF) {
	    p.add = materialize(p.add, p.addF);
	    p.addF = null;
	  }
	  if ((flags & REM) && p.remF) {
	    p.rem = materialize(p.rem, p.remF);
	    p.remF = null;
	  }
	  if ((flags & MOD) && p.modF) {
	    p.mod = materialize(p.mod, p.modF);
	    p.modF = null;
	  }
	  if ((flags & SOURCE) && p.srcF) {
	    p.source = p.source.filter(p.srcF);
	    p.srcF = null;
	  }
	  return p;
	};
	
	function materialize(data, filter) {
	  var out = [];
	  visitArray(data, filter, function(_) { out.push(_); });
	  return out;
	}
	
	function filter(pulse, flags) {
	  var map = {};
	  pulse.visit(flags, function(t) { map[tupleid(t)] = 1; });
	  return function(t) { return map[tupleid(t)] ? null : t; };
	}
	
	/**
	 * Visit one or more tuple sets in this pulse.
	 * @param {number} flags - Flags indicating the tuple set(s) to visit.
	 *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
	 *   has been set).
	 * @param {function(object):*} - Visitor function invoked per-tuple.
	 * @return {Pulse} - Returns this pulse instance.
	 */
	prototype$4.visit = function(flags, visitor) {
	  var p = this, v = visitor, src, sum;
	
	  if (flags & SOURCE) {
	    visitArray(p.source, p.srcF, v);
	    return p;
	  }
	
	  if (flags & ADD) visitArray(p.add, p.addF, v);
	  if (flags & REM) visitArray(p.rem, p.remF, v);
	  if (flags & MOD) visitArray(p.mod, p.modF, v);
	
	  if ((flags & REFLOW) && (src = p.source)) {
	    sum = p.add.length + p.mod.length;
	    if (sum === src.length) {
	      // do nothing
	    } else if (sum) {
	      visitArray(src, filter(p, ADD_MOD), v);
	    } else {
	      // if no add/rem/mod tuples, visit source
	      visitArray(src, p.srcF, v);
	    }
	  }
	
	  return p;
	};
	
	/**
	 * Represents a set of multiple pulses. Used as input for operators
	 * that accept multiple pulses at a time. Contained pulses are
	 * accessible via the public "pulses" array property. This pulse doe
	 * not carry added, removed or modified tuples directly. However,
	 * the visit method can be used to traverse all such tuples contained
	 * in sub-pulses with a timestamp matching this parent multi-pulse.
	 * @constructor
	 * @param {Dataflow} dataflow - The backing dataflow instance.
	 * @param {number} stamp - The timestamp.
	 * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
	 */
	function MultiPulse(dataflow, stamp, pulses, encode) {
	  var p = this,
	      c = 0,
	      pulse, hash, i, n, f;
	
	  this.dataflow = dataflow;
	  this.stamp = stamp;
	  this.fields = null;
	  this.encode = encode || null;
	  this.pulses = pulses;
	
	  for (i=0, n=pulses.length; i<n; ++i) {
	    pulse = pulses[i];
	    if (pulse.stamp !== stamp) continue;
	
	    if (pulse.fields) {
	      hash = p.fields || (p.fields = {});
	      for (f in pulse.fields) { hash[f] = 1; }
	    }
	
	    if (pulse.changed(p.ADD)) c |= p.ADD;
	    if (pulse.changed(p.REM)) c |= p.REM;
	    if (pulse.changed(p.MOD)) c |= p.MOD;
	  }
	
	  this.changes = c;
	}
	
	var prototype$5 = inherits(MultiPulse, Pulse);
	
	/**
	 * Creates a new pulse based on the values of this pulse.
	 * The dataflow, time stamp and field modification values are copied over.
	 * @return {Pulse}
	 */
	prototype$5.fork = function(flags) {
	  var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
	  if (flags !== undefined) {
	    if (flags & p.ADD) {
	      this.visit(p.ADD, function(t) { return p.add.push(t); });
	    }
	    if (flags & p.REM) {
	      this.visit(p.REM, function(t) { return p.rem.push(t); });
	    }
	    if (flags & p.MOD) {
	      this.visit(p.MOD, function(t) { return p.mod.push(t); });
	    }
	  }
	  return p;
	};
	
	prototype$5.changed = function(flags) {
	  return this.changes & flags;
	};
	
	prototype$5.modified = function(_) {
	  var p = this, fields = p.fields;
	  return !(fields && (p.changes & p.MOD)) ? 0
	    : isArray(_) ? _.some(function(f) { return fields[f]; })
	    : fields[_];
	};
	
	prototype$5.filter = function() {
	  error$1('MultiPulse does not support filtering.');
	};
	
	prototype$5.materialize = function() {
	  error$1('MultiPulse does not support materialization.');
	};
	
	prototype$5.visit = function(flags, visitor) {
	  var p = this,
	      pulses = p.pulses,
	      n = pulses.length,
	      i = 0;
	
	  if (flags & p.SOURCE) {
	    for (; i<n; ++i) {
	      pulses[i].visit(flags, visitor);
	    }
	  } else {
	    for (; i<n; ++i) {
	      if (pulses[i].stamp === p.stamp) {
	        pulses[i].visit(flags, visitor);
	      }
	    }
	  }
	
	  return p;
	};
	
	/**
	 * Runs the dataflow. This method will increment the current timestamp
	 * and process all updated, pulsed and touched operators. When run for
	 * the first time, all registered operators will be processed. If there
	 * are pending data loading operations, this method will return immediately
	 * without evaluating the dataflow. Instead, the dataflow will be
	 * asynchronously invoked when data loading completes. To track when dataflow
	 * evaluation completes, use the {@link runAsync} method instead.
	 * @param {string} [encode] - The name of an encoding set to invoke during
	 *   propagation. This value is added to generated Pulse instances;
	 *   operators can then respond to (or ignore) this setting as appropriate.
	 *   This parameter can be used in conjunction with the Encode transform in
	 *   the vega-encode module.
	 */
	function run(encode) {
	  var df = this,
	      count = 0,
	      level = df.logLevel(),
	      op, next, dt, error;
	
	  if (df._pending) {
	    df.info('Awaiting requests, delaying dataflow run.');
	    return 0;
	  }
	
	  if (df._pulse) {
	    df.error('Dataflow invoked recursively. Use the runAfter method to queue invocation.');
	    return 0;
	  }
	
	  if (!df._touched.length) {
	    df.info('Dataflow invoked, but nothing to do.');
	    return 0;
	  }
	
	  df._pulse = new Pulse(df, ++df._clock, encode);
	
	  if (level >= Info) {
	    dt = Date.now();
	    df.debug('-- START PROPAGATION (' + df._clock + ') -----');
	  }
	
	  // initialize queue, reset touched operators
	  df._touched.forEach(function(op) { df._enqueue(op, true); });
	  df._touched = UniqueList(id);
	
	  try {
	    while (df._heap.size() > 0) {
	      op = df._heap.pop();
	
	      // re-queue if rank changes
	      if (op.rank !== op.qrank) { df._enqueue(op, true); continue; }
	
	      // otherwise, evaluate the operator
	      next = op.run(df._getPulse(op, encode));
	
	      if (level >= Debug) {
	        df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);
	      }
	
	      // propagate the pulse
	      if (next !== StopPropagation) {
	        df._pulse = next;
	        if (op._targets) op._targets.forEach(function(op) { df._enqueue(op); });
	      }
	
	      // increment visit counter
	      ++count;
	    }
	  } catch (err) {
	    error = err;
	  }
	
	  // reset pulse map
	  df._pulses = {};
	  df._pulse = null;
	
	  if (level >= Info) {
	    dt = Date.now() - dt;
	    df.info('> Pulse ' + df._clock + ': ' + count + ' operators; ' + dt + 'ms');
	  }
	
	  if (error) {
	    df._postrun = [];
	    df.error(error);
	  }
	
	  if (df._onrun) {
	    try { df._onrun(df, count, error); } catch (err) { df.error(err); }
	  }
	
	  // invoke callbacks queued via runAfter
	  if (df._postrun.length) {
	    var postrun = df._postrun;
	    df._postrun = [];
	    postrun.forEach(function(f) {
	      try { f(df); } catch (err) { df.error(err); }
	    });
	  }
	
	  return count;
	}
	
	/**
	 * Runs the dataflow and returns a Promise that resolves when the
	 * propagation cycle completes. The standard run method may exit early
	 * if there are pending data loading operations. In contrast, this
	 * method returns a Promise to allow callers to receive notification
	 * when dataflow evaluation completes.
	 * @return {Promise} - A promise that resolves to this dataflow.
	 */
	function runAsync() {
	  return this._pending || Promise.resolve(this.run());
	}
	
	/**
	 * Schedules a callback function to be invoked after the current pulse
	 * propagation completes. If no propagation is currently occurring,
	 * the function is invoked immediately.
	 * @param {function(Dataflow)} callback - The callback function to run.
	 *   The callback will be invoked with this Dataflow instance as its
	 *   sole argument.
	 * @param {boolean} enqueue - A boolean flag indicating that the
	 *   callback should be queued up to run after the next propagation
	 *   cycle, suppressing immediate invovation when propagation is not
	 *   currently occurring.
	 */
	function runAfter(callback, enqueue) {
	  if (this._pulse || enqueue) {
	    // pulse propagation is currently running, queue to run after
	    this._postrun.push(callback);
	  } else {
	    // pulse propagation already complete, invoke immediately
	    try { callback(this); } catch (err) { this.error(err); }
	  }
	}
	
	/**
	 * Enqueue an operator into the priority queue for evaluation. The operator
	 * will be enqueued if it has no registered pulse for the current cycle, or if
	 * the force argument is true. Upon enqueue, this method also sets the
	 * operator's qrank to the current rank value.
	 * @param {Operator} op - The operator to enqueue.
	 * @param {boolean} [force] - A flag indicating if the operator should be
	 *   forceably added to the queue, even if it has already been previously
	 *   enqueued during the current pulse propagation. This is useful when the
	 *   dataflow graph is dynamically modified and the operator rank changes.
	 */
	function enqueue(op, force) {
	  var p = !this._pulses[op.id];
	  if (p) this._pulses[op.id] = this._pulse;
	  if (p || force) {
	    op.qrank = op.rank;
	    this._heap.push(op);
	  }
	}
	
	/**
	 * Provide a correct pulse for evaluating an operator. If the operator has an
	 * explicit source operator, we will try to pull the pulse(s) from it.
	 * If there is an array of source operators, we build a multi-pulse.
	 * Otherwise, we return a current pulse with correct source data.
	 * If the pulse is the pulse map has an explicit target set, we use that.
	 * Else if the pulse on the upstream source operator is current, we use that.
	 * Else we use the pulse from the pulse map, but copy the source tuple array.
	 * @param {Operator} op - The operator for which to get an input pulse.
	 * @param {string} [encode] - An (optional) encoding set name with which to
	 *   annotate the returned pulse. See {@link run} for more information.
	 */
	function getPulse(op, encode) {
	  var s = op.source,
	      stamp = this._clock,
	      p;
	
	  if (s && isArray(s)) {
	    p = s.map(function(_) { return _.pulse; });
	    return new MultiPulse(this, stamp, p, encode);
	  }
	
	  p = this._pulses[op.id];
	  if (s) {
	    s = s.pulse;
	    if (!s || s === StopPropagation) {
	      p.source = [];
	    } else if (s.stamp === stamp && p.target !== op) {
	      p = s;
	    } else {
	      p.source = s.source;
	    }
	  }
	
	  return p;
	}
	
	var NO_OPT = {skip: false, force: false};
	
	/**
	 * Touches an operator, scheduling it to be evaluated. If invoked outside of
	 * a pulse propagation, the operator will be evaluated the next time this
	 * dataflow is run. If invoked in the midst of pulse propagation, the operator
	 * will be queued for evaluation if and only if the operator has not yet been
	 * evaluated on the current propagation timestamp.
	 * @param {Operator} op - The operator to touch.
	 * @param {object} [options] - Additional options hash.
	 * @param {boolean} [options.skip] - If true, the operator will
	 *   be skipped: it will not be evaluated, but its dependents will be.
	 * @return {Dataflow}
	 */
	function touch(op, options) {
	  var opt = options || NO_OPT;
	  if (this._pulse) {
	    // if in midst of propagation, add to priority queue
	    this._enqueue(op);
	  } else {
	    // otherwise, queue for next propagation
	    this._touched.add(op);
	  }
	  if (opt.skip) op.skip(true);
	  return this;
	}
	
	/**
	 * Updates the value of the given operator.
	 * @param {Operator} op - The operator to update.
	 * @param {*} value - The value to set.
	 * @param {object} [options] - Additional options hash.
	 * @param {boolean} [options.force] - If true, the operator will
	 *   be re-evaluated even if its value has not changed.
	 * @param {boolean} [options.skip] - If true, the operator will
	 *   be skipped: it will not be evaluated, but its dependents will be.
	 * @return {Dataflow}
	 */
	function update(op, value, options) {
	  var opt = options || NO_OPT;
	  if (op.set(value) || opt.force) {
	    this.touch(op, opt);
	  }
	  return this;
	}
	
	/**
	 * Pulses an operator with a changeset of tuples. If invoked outside of
	 * a pulse propagation, the pulse will be applied the next time this
	 * dataflow is run. If invoked in the midst of pulse propagation, the pulse
	 * will be added to the set of active pulses and will be applied if and
	 * only if the target operator has not yet been evaluated on the current
	 * propagation timestamp.
	 * @param {Operator} op - The operator to pulse.
	 * @param {ChangeSet} value - The tuple changeset to apply.
	 * @param {object} [options] - Additional options hash.
	 * @param {boolean} [options.skip] - If true, the operator will
	 *   be skipped: it will not be evaluated, but its dependents will be.
	 * @return {Dataflow}
	 */
	function pulse(op, changeset, options) {
	  this.touch(op, options || NO_OPT);
	
	  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),
	      t = op.pulse && op.pulse.source || [];
	  p.target = op;
	  this._pulses[op.id] = changeset.pulse(p, t);
	
	  return this;
	}
	
	function Heap(comparator) {
	  this.cmp = comparator;
	  this.nodes = [];
	}
	
	var prototype$6 = Heap.prototype;
	
	prototype$6.size = function() {
	  return this.nodes.length;
	};
	
	prototype$6.clear = function() {
	  this.nodes = [];
	  return this;
	};
	
	prototype$6.peek = function() {
	  return this.nodes[0];
	};
	
	prototype$6.push = function(x) {
	  var array = this.nodes;
	  array.push(x);
	  return siftdown(array, 0, array.length-1, this.cmp);
	};
	
	prototype$6.pop = function() {
	  var array = this.nodes,
	      last = array.pop(),
	      item;
	
	  if (array.length) {
	    item = array[0];
	    array[0] = last;
	    siftup(array, 0, this.cmp);
	  } else {
	    item = last;
	  }
	  return item;
	};
	
	prototype$6.replace = function(item) {
	  var array = this.nodes,
	      retval = array[0];
	  array[0] = item;
	  siftup(array, 0, this.cmp);
	  return retval;
	};
	
	prototype$6.pushpop = function(item) {
	  var array = this.nodes, ref = array[0];
	  if (array.length && this.cmp(ref, item) < 0) {
	    array[0] = item;
	    item = ref;
	    siftup(array, 0, this.cmp);
	  }
	  return item;
	};
	
	function siftdown(array, start, idx, cmp) {
	  var item, parent, pidx;
	
	  item = array[idx];
	  while (idx > start) {
	    pidx = (idx - 1) >> 1;
	    parent = array[pidx];
	    if (cmp(item, parent) < 0) {
	      array[idx] = parent;
	      idx = pidx;
	      continue;
	    }
	    break;
	  }
	  return (array[idx] = item);
	}
	
	function siftup(array, idx, cmp) {
	  var start = idx,
	      end = array.length,
	      item = array[idx],
	      cidx = 2 * idx + 1, ridx;
	
	  while (cidx < end) {
	    ridx = cidx + 1;
	    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
	      cidx = ridx;
	    }
	    array[idx] = array[cidx];
	    idx = cidx;
	    cidx = 2 * idx + 1;
	  }
	  array[idx] = item;
	  return siftdown(array, start, idx, cmp);
	}
	
	/**
	 * A dataflow graph for reactive processing of data streams.
	 * @constructor
	 */
	function Dataflow() {
	  this._log = logger();
	  this.logLevel(Error$1);
	
	  this._clock = 0;
	  this._rank = 0;
	  try {
	    this._loader = loader();
	  } catch (e) {
	    // do nothing if loader module is unavailable
	  }
	
	  this._touched = UniqueList(id);
	  this._pulses = {};
	  this._pulse = null;
	
	  this._heap = new Heap(function(a, b) { return a.qrank - b.qrank; });
	  this._postrun = [];
	}
	
	var prototype = Dataflow.prototype;
	
	/**
	 * The current timestamp of this dataflow. This value reflects the
	 * timestamp of the previous dataflow run. The dataflow is initialized
	 * with a stamp value of 0. The initial run of the dataflow will have
	 * a timestap of 1, and so on. This value will match the
	 * {@link Pulse.stamp} property.
	 * @return {number} - The current timestamp value.
	 */
	prototype.stamp = function() {
	  return this._clock;
	};
	
	/**
	 * Gets or sets the loader instance to use for data file loading. A
	 * loader object must provide a "load" method for loading files and a
	 * "sanitize" method for checking URL/filename validity. Both methods
	 * should accept a URI and options hash as arguments, and return a Promise
	 * that resolves to the loaded file contents (load) or a hash containing
	 * sanitized URI data with the sanitized url assigned to the "href" property
	 * (sanitize).
	 * @param {object} _ - The loader instance to use.
	 * @return {object|Dataflow} - If no arguments are provided, returns
	 *   the current loader instance. Otherwise returns this Dataflow instance.
	 */
	prototype.loader = function(_) {
	  if (arguments.length) {
	    this._loader = _;
	    return this;
	  } else {
	    return this._loader;
	  }
	};
	
	/**
	 * Empty entry threshold for garbage cleaning. Map data structures will
	 * perform cleaning once the number of empty entries exceeds this value.
	 */
	prototype.cleanThreshold = 1e4;
	
	// OPERATOR REGISTRATION
	prototype.add = add;
	prototype.connect = connect;
	prototype.rank = rank;
	prototype.rerank = rerank;
	
	// OPERATOR UPDATES
	prototype.pulse = pulse;
	prototype.touch = touch;
	prototype.update = update;
	prototype.changeset = changeset;
	
	// DATA LOADING
	prototype.ingest = ingest$1;
	prototype.request = request;
	
	// EVENT HANDLING
	prototype.events = events;
	prototype.on = on;
	
	// PULSE PROPAGATION
	prototype.run = run;
	prototype.runAsync = runAsync;
	prototype.runAfter = runAfter;
	prototype._enqueue = enqueue;
	prototype._getPulse = getPulse;
	
	// LOGGING AND ERROR HANDLING
	
	function logMethod(method) {
	  return function() {
	    return this._log[method].apply(this, arguments);
	  };
	}
	
	/**
	 * Logs an error message. By default, logged messages are written to console
	 * output. The message will only be logged if the current log level is high
	 * enough to permit error messages.
	 */
	prototype.error = logMethod('error');
	
	/**
	 * Logs a warning message. By default, logged messages are written to console
	 * output. The message will only be logged if the current log level is high
	 * enough to permit warning messages.
	 */
	prototype.warn = logMethod('warn');
	
	/**
	 * Logs a information message. By default, logged messages are written to
	 * console output. The message will only be logged if the current log level is
	 * high enough to permit information messages.
	 */
	prototype.info = logMethod('info');
	
	/**
	 * Logs a debug message. By default, logged messages are written to console
	 * output. The message will only be logged if the current log level is high
	 * enough to permit debug messages.
	 */
	prototype.debug = logMethod('debug');
	
	/**
	 * Get or set the current log level. If an argument is provided, it
	 * will be used as the new log level.
	 * @param {number} [level] - Should be one of None, Warn, Info
	 * @return {number} - The current log level.
	 */
	prototype.logLevel = logMethod('level');
	
	/**
	 * Abstract class for operators that process data tuples.
	 * Subclasses must provide a {@link transform} method for operator processing.
	 * @constructor
	 * @param {*} [init] - The initial value for this operator.
	 * @param {object} [params] - The parameters for this operator.
	 * @param {Operator} [source] - The operator from which to receive pulses.
	 */
	function Transform(init, params) {
	  Operator.call(this, init, null, params);
	}
	
	var prototype$7 = inherits(Transform, Operator);
	
	/**
	 * Overrides {@link Operator.evaluate} for transform operators.
	 * Internally, this method calls {@link evaluate} to perform processing.
	 * If {@link evaluate} returns a falsy value, the input pulse is returned.
	 * This method should NOT be overridden, instead overrride {@link evaluate}.
	 * @param {Pulse} pulse - the current dataflow pulse.
	 * @return the output pulse for this operator (or StopPropagation)
	 */
	prototype$7.run = function(pulse) {
	  if (pulse.stamp <= this.stamp) return pulse.StopPropagation;
	
	  var rv;
	  if (this.skip()) {
	    this.skip(false);
	  } else {
	    rv = this.evaluate(pulse);
	  }
	  rv = rv || pulse;
	
	  if (rv !== pulse.StopPropagation) this.pulse = rv;
	  this.stamp = pulse.stamp;
	
	  return rv;
	};
	
	/**
	 * Overrides {@link Operator.evaluate} for transform operators.
	 * Marshalls parameter values and then invokes {@link transform}.
	 * @param {Pulse} pulse - the current dataflow pulse.
	 * @return {Pulse} The output pulse (or StopPropagation). A falsy return
	     value (including undefined) will let the input pulse pass through.
	 */
	prototype$7.evaluate = function(pulse) {
	  var params = this.marshall(pulse.stamp),
	      out = this.transform(params, pulse);
	  params.clear();
	  return out;
	};
	
	/**
	 * Process incoming pulses.
	 * Subclasses should override this method to implement transforms.
	 * @param {Parameters} _ - The operator parameter values.
	 * @param {Pulse} pulse - The current dataflow pulse.
	 * @return {Pulse} The output pulse (or StopPropagation). A falsy return
	 *   value (including undefined) will let the input pulse pass through.
	 */
	prototype$7.transform = function() {};
	
	var transforms = {};
	
	function definition(type) {
	  var t = transform$1(type);
	  return t && t.Definition || null;
	}
	
	function transform$1(type) {
	  type = type && type.toLowerCase();
	  return transforms.hasOwnProperty(type) ? transforms[type] : null;
	}
	
	// Utilities
	
	function multikey(f) {
	  return function(x) {
	    var n = f.length,
	        i = 1,
	        k = String(f[0](x));
	
	    for (; i<n; ++i) {
	      k += '|' + f[i](x);
	    }
	
	    return k;
	  };
	}
	
	function groupkey(fields) {
	  return !fields || !fields.length ? function() { return ''; }
	    : fields.length === 1 ? fields[0]
	    : multikey(fields);
	}
	
	function measureName(op, field$$1, as) {
	  return as || (op + (!field$$1 ? '' : '_' + field$$1));
	}
	
	var AggregateOps = {
	  'values': measure({
	    name: 'values',
	    init: 'cell.store = true;',
	    set:  'cell.data.values()', idx: -1
	  }),
	  'count': measure({
	    name: 'count',
	    set:  'cell.num'
	  }),
	  'missing': measure({
	    name: 'missing',
	    set:  'this.missing'
	  }),
	  'valid': measure({
	    name: 'valid',
	    set:  'this.valid'
	  }),
	  'sum': measure({
	    name: 'sum',
	    init: 'this.sum = 0;',
	    add:  'this.sum += v;',
	    rem:  'this.sum -= v;',
	    set:  'this.sum'
	  }),
	  'mean': measure({
	    name: 'mean',
	    init: 'this.mean = 0;',
	    add:  'var d = v - this.mean; this.mean += d / this.valid;',
	    rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',
	    set:  'this.mean'
	  }),
	  'average': measure({
	    name: 'average',
	    set:  'this.mean',
	    req:  ['mean'], idx: 1
	  }),
	  'variance': measure({
	    name: 'variance',
	    init: 'this.dev = 0;',
	    add:  'this.dev += d * (v - this.mean);',
	    rem:  'this.dev -= d * (v - this.mean);',
	    set:  'this.valid > 1 ? this.dev / (this.valid-1) : 0',
	    req:  ['mean'], idx: 1
	  }),
	  'variancep': measure({
	    name: 'variancep',
	    set:  'this.valid > 1 ? this.dev / this.valid : 0',
	    req:  ['variance'], idx: 2
	  }),
	  'stdev': measure({
	    name: 'stdev',
	    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : 0',
	    req:  ['variance'], idx: 2
	  }),
	  'stdevp': measure({
	    name: 'stdevp',
	    set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : 0',
	    req:  ['variance'], idx: 2
	  }),
	  'stderr': measure({
	    name: 'stderr',
	    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : 0',
	    req:  ['variance'], idx: 2
	  }),
	  'distinct': measure({
	    name: 'distinct',
	    set:  'cell.data.distinct(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'ci0': measure({
	    name: 'ci0',
	    set:  'cell.data.ci0(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'ci1': measure({
	    name: 'ci1',
	    set:  'cell.data.ci1(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'median': measure({
	    name: 'median',
	    set:  'cell.data.q2(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'q1': measure({
	    name: 'q1',
	    set:  'cell.data.q1(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'q3': measure({
	    name: 'q3',
	    set:  'cell.data.q3(this.get)',
	    req:  ['values'], idx: 3
	  }),
	  'argmin': measure({
	    name: 'argmin',
	    init: 'this.argmin = null;',
	    add:  'if (v < this.min) this.argmin = t;',
	    rem:  'if (v <= this.min) this.argmin = null;',
	    set:  'this.argmin || cell.data.argmin(this.get)',
	    req:  ['min'], str: ['values'], idx: 3
	  }),
	  'argmax': measure({
	    name: 'argmax',
	    init: 'this.argmax = null;',
	    add:  'if (v > this.max) this.argmax = t;',
	    rem:  'if (v >= this.max) this.argmax = null;',
	    set:  'this.argmax || cell.data.argmax(this.get)',
	    req:  ['max'], str: ['values'], idx: 3
	  }),
	  'min': measure({
	    name: 'min',
	    init: 'this.min = null;',
	    add:  'if (v < this.min || this.min === null) this.min = v;',
	    rem:  'if (v <= this.min) this.min = NaN;',
	    set:  'this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)',
	    str:  ['values'], idx: 4
	  }),
	  'max': measure({
	    name: 'max',
	    init: 'this.max = null;',
	    add:  'if (v > this.max || this.max === null) this.max = v;',
	    rem:  'if (v >= this.max) this.max = NaN;',
	    set:  'this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)',
	    str:  ['values'], idx: 4
	  })
	};
	
	var ValidAggregateOps = Object.keys(AggregateOps);
	
	function createMeasure(op, name) {
	  return AggregateOps[op](name);
	}
	
	function measure(base) {
	  return function(out) {
	    var m = extend({init:'', add:'', rem:'', idx:0}, base);
	    m.out = out || base.name;
	    return m;
	  };
	}
	
	function compareIndex(a, b) {
	  return a.idx - b.idx;
	}
	
	function resolve(agg, stream) {
	  function collect(m, a) {
	    function helper(r) { if (!m[r]) collect(m, m[r] = AggregateOps[r]()); }
	    if (a.req) a.req.forEach(helper);
	    if (stream && a.str) a.str.forEach(helper);
	    return m;
	  }
	  var map = agg.reduce(
	    collect,
	    agg.reduce(function(m, a) {
	      m[a.name] = a;
	      return m;
	    }, {})
	  );
	  var values = [], key$$1;
	  for (key$$1 in map) values.push(map[key$$1]);
	  return values.sort(compareIndex);
	}
	
	function compileMeasures(agg, field$$1) {
	  var get = field$$1 || identity,
	      all = resolve(agg, true), // assume streaming removes may occur
	      init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',
	      ctr = 'this.cell = cell; this.init();',
	      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',
	      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',
	      set = 'var cell = this.cell;';
	
	  all.forEach(function(a) {
	    init += a.init;
	    add += a.add;
	    rem += a.rem;
	  });
	  agg.slice().sort(compareIndex).forEach(function(a) {
	    set += 't[\'' + a.out + '\']=' + a.set + ';';
	  });
	  set += 'return t;';
	
	  ctr = Function('cell', ctr);
	  ctr.prototype.init = Function(init);
	  ctr.prototype.add = Function('v', 't', add);
	  ctr.prototype.rem = Function('v', 't', rem);
	  ctr.prototype.set = Function('t', set);
	  ctr.prototype.get = get;
	  ctr.fields = agg.map(function(_) { return _.out; });
	  return ctr;
	}
	
	var bin = function(_) {
	  // determine range
	  var maxb = _.maxbins || 20,
	      base = _.base || 10,
	      logb = Math.log(base),
	      div  = _.divide || [5, 2],
	      min  = _.extent[0],
	      max  = _.extent[1],
	      span = max - min,
	      step, level, minstep, precision, v, i, n, eps;
	
	  if (_.step) {
	    // if step size is explicitly given, use that
	    step = _.step;
	  } else if (_.steps) {
	    // if provided, limit choice to acceptable step sizes
	    v = span / maxb;
	    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);
	    step = _.steps[Math.max(0, i-1)];
	  } else {
	    // else use span to determine step size
	    level = Math.ceil(Math.log(maxb) / logb);
	    minstep = _.minstep || 0;
	    step = Math.max(
	      minstep,
	      Math.pow(base, Math.round(Math.log(span) / logb) - level)
	    );
	
	    // increase step size if too many bins
	    while (Math.ceil(span/step) > maxb) { step *= base; }
	
	    // decrease step size if allowed
	    for (i=0, n=div.length; i<n; ++i) {
	      v = step / div[i];
	      if (v >= minstep && span / v <= maxb) step = v;
	    }
	  }
	
	  // update precision, min and max
	  v = Math.log(step);
	  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;
	  eps = Math.pow(base, -precision - 1);
	  if (_.nice || _.nice === undefined) {
	    v = Math.floor(min / step + eps) * step;
	    min = min < v ? v - step : v;
	    max = Math.ceil(max / step) * step;
	  }
	
	  return {
	    start: min,
	    stop:  max,
	    step:  step
	  };
	};
	
	var numbers = function(array, f) {
	  var numbers = [],
	      n = array.length,
	      i = -1, a;
	
	  if (f == null) {
	    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
	  } else {
	    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
	  }
	  return numbers;
	};
	
	function number(x) {
	  return x === null ? NaN : +x;
	}
	
	exports.random = Math.random;
	
	function setRandom(r) {
	  exports.random = r;
	}
	
	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};
	
	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};
	
	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}
	
	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;
	
	function pair(a, b) {
	  return [a, b];
	}
	
	var number$1 = function(x) {
	  return x === null ? NaN : +x;
	};
	
	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number$1(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number$1(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	
	  if (m > 1) return sum / (m - 1);
	};
	
	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return [min, max];
	};
	
	var identity$2 = function(x) {
	  return x;
	};
	
	var sequence = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);
	
	  while (++i < n) {
	    range[i] = start + i * step;
	  }
	
	  return range;
	};
	
	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2$1 = Math.sqrt(2);
	
	var ticks = function(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;
	
	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
	
	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }
	
	  if (reverse) ticks.reverse();
	
	  return ticks;
	};
	
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2$1 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2$1 ? 2 : 1);
	}
	
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2$1) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}
	
	var thresholdSturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};
	
	var threshold = function(values, p, valueof) {
	  if (valueof == null) valueof = number$1;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};
	
	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }
	
	  return max;
	};
	
	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number$1(values[i]))) sum += value;
	      else --m;
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number$1(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }
	
	  if (m) return sum / m;
	};
	
	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number$1(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(value = number$1(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }
	
	  return threshold(numbers.sort(ascending), 0.5);
	};
	
	var merge$2 = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;
	
	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);
	
	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }
	
	  return merged;
	};
	
	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;
	
	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }
	
	  return min;
	};
	
	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};
	
	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;
	
	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }
	
	  return sum;
	};
	
	function length(d) {
	  return d.length;
	}
	
	var bootstrapCI = function(array, samples, alpha, f) {
	  var values = numbers(array, f),
	      n = values.length,
	      m = samples,
	      a, i, j, mu;
	
	  for (j=0, mu=Array(m); j<m; ++j) {
	    for (a=0, i=0; i<n; ++i) {
	      a += values[~~(exports.random() * n)];
	    }
	    mu[j] = a / n;
	  }
	
	  return [
	    threshold(mu.sort(ascending), alpha/2),
	    threshold(mu, 1-(alpha/2))
	  ];
	};
	
	var quartiles = function(array, f) {
	  var values = numbers(array, f);
	
	  return [
	    threshold(values.sort(ascending), 0.25),
	    threshold(values, 0.50),
	    threshold(values, 0.75)
	  ];
	};
	
	var integer = function(min, max) {
	  if (max == null) {
	    max = min;
	    min = 0;
	  }
	
	  var dist = {},
	      a, b, d;
	
	  dist.min = function(_) {
	    if (arguments.length) {
	      a = _ || 0;
	      d = b - a;
	      return dist;
	    } else {
	      return a;
	    }
	  };
	
	  dist.max = function(_) {
	    if (arguments.length) {
	      b = _ || 0;
	      d = b - a;
	      return dist;
	    } else {
	      return b;
	    }
	  };
	
	  dist.sample = function() {
	    return a + Math.floor(d * exports.random());
	  };
	
	  dist.pdf = function(x) {
	    return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;
	  };
	
	  dist.cdf = function(x) {
	    var v = Math.floor(x);
	    return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;
	  };
	
	  dist.icdf = function(p) {
	    return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;
	  };
	
	  return dist.min(min).max(max);
	};
	
	var randomNormal = function(mean, stdev) {
	  var mu,
	      sigma,
	      next = NaN,
	      dist = {};
	
	  dist.mean = function(_) {
	    if (arguments.length) {
	      mu = _ || 0;
	      next = NaN;
	      return dist;
	    } else {
	      return mu;
	    }
	  };
	
	  dist.stdev = function(_) {
	    if (arguments.length) {
	      sigma = _ == null ? 1 : _;
	      next = NaN;
	      return dist;
	    } else {
	      return sigma;
	    }
	  };
	
	  dist.sample = function() {
	    var x = 0, y = 0, rds, c;
	    if (next === next) {
	      x = next;
	      next = NaN;
	      return x;
	    }
	    do {
	      x = exports.random() * 2 - 1;
	      y = exports.random() * 2 - 1;
	      rds = x * x + y * y;
	    } while (rds === 0 || rds > 1);
	    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform
	    next = mu + y * c * sigma;
	    return mu + x * c * sigma;
	  };
	
	  dist.pdf = function(x) {
	    var exp = Math.exp(Math.pow(x-mu, 2) / (-2 * Math.pow(sigma, 2)));
	    return (1 / (sigma * Math.sqrt(2*Math.PI))) * exp;
	  };
	
	  // Approximation from West (2009)
	  // Better Approximations to Cumulative Normal Functions
	  dist.cdf = function(x) {
	    var cd,
	        z = (x - mu) / sigma,
	        Z = Math.abs(z);
	    if (Z > 37) {
	      cd = 0;
	    } else {
	      var sum, exp = Math.exp(-Z*Z/2);
	      if (Z < 7.07106781186547) {
	        sum = 3.52624965998911e-02 * Z + 0.700383064443688;
	        sum = sum * Z + 6.37396220353165;
	        sum = sum * Z + 33.912866078383;
	        sum = sum * Z + 112.079291497871;
	        sum = sum * Z + 221.213596169931;
	        sum = sum * Z + 220.206867912376;
	        cd = exp * sum;
	        sum = 8.83883476483184e-02 * Z + 1.75566716318264;
	        sum = sum * Z + 16.064177579207;
	        sum = sum * Z + 86.7807322029461;
	        sum = sum * Z + 296.564248779674;
	        sum = sum * Z + 637.333633378831;
	        sum = sum * Z + 793.826512519948;
	        sum = sum * Z + 440.413735824752;
	        cd = cd / sum;
	      } else {
	        sum = Z + 0.65;
	        sum = Z + 4 / sum;
	        sum = Z + 3 / sum;
	        sum = Z + 2 / sum;
	        sum = Z + 1 / sum;
	        cd = exp / sum / 2.506628274631;
	      }
	    }
	    return z > 0 ? 1 - cd : cd;
	  };
	
	  // Approximation of Probit function using inverse error function.
	  dist.icdf = function(p) {
	    if (p <= 0 || p >= 1) return NaN;
	    var x = 2*p - 1,
	        v = (8 * (Math.PI - 3)) / (3 * Math.PI * (4-Math.PI)),
	        a = (2 / (Math.PI*v)) + (Math.log(1 - Math.pow(x,2)) / 2),
	        b = Math.log(1 - (x*x)) / v,
	        s = (x > 0 ? 1 : -1) * Math.sqrt(Math.sqrt((a*a) - b) - a);
	    return mu + sigma * Math.SQRT2 * s;
	  };
	
	  return dist.mean(mean).stdev(stdev);
	};
	
	// TODO: support for additional kernels?
	var randomKDE = function(support, bandwidth) {
	  var kernel = randomNormal(),
	      dist = {},
	      n = 0;
	
	  dist.data = function(_) {
	    if (arguments.length) {
	      support = _;
	      n = _ ? _.length : 0;
	      return dist.bandwidth(bandwidth);
	    } else {
	      return support;
	    }
	  };
	
	  dist.bandwidth = function(_) {
	    if (!arguments.length) return bandwidth;
	    bandwidth = _;
	    if (!bandwidth && support) bandwidth = estimateBandwidth(support);
	    return dist;
	  };
	
	  dist.sample = function() {
	    return support[~~(exports.random() * n)] + bandwidth * kernel.sample();
	  };
	
	  dist.pdf = function(x) {
	    for (var y=0, i=0; i<n; ++i) {
	      y += kernel.pdf((x - support[i]) / bandwidth);
	    }
	    return y / bandwidth / n;
	  };
	
	  dist.cdf = function(x) {
	    for (var y=0, i=0; i<n; ++i) {
	      y += kernel.cdf((x - support[i]) / bandwidth);
	    }
	    return y / n;
	  };
	
	  dist.icdf = function() {
	    throw Error('KDE icdf not supported.');
	  };
	
	  return dist.data(support);
	};
	
	// Scott, D. W. (1992) Multivariate Density Estimation:
	// Theory, Practice, and Visualization. Wiley.
	function estimateBandwidth(array) {
	  var n = array.length,
	      q = quartiles(array),
	      h = (q[2] - q[0]) / 1.34;
	  return 1.06 * Math.min(Math.sqrt(variance(array)), h) * Math.pow(n, -0.2);
	}
	
	var randomMixture = function(dists, weights) {
	  var dist = {}, m = 0, w;
	
	  function normalize(x) {
	    var w = [], sum = 0, i;
	    for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }
	    for (i=0; i<m; ++i) { w[i] /= sum; }
	    return w;
	  }
	
	  dist.weights = function(_) {
	    if (arguments.length) {
	      w = normalize(weights = (_ || []));
	      return dist;
	    }
	    return weights;
	  };
	
	  dist.distributions = function(_) {
	    if (arguments.length) {
	      if (_) {
	        m = _.length;
	        dists = _;
	      } else {
	        m = 0;
	        dists = [];
	      }
	      return dist.weights(weights);
	    }
	    return dists;
	  };
	
	  dist.sample = function() {
	    var r = exports.random(),
	        d = dists[m-1],
	        v = w[0],
	        i = 0;
	
	    // first select distribution
	    for (; i<m-1; v += w[++i]) {
	      if (r < v) { d = dists[i]; break; }
	    }
	    // then sample from it
	    return d.sample();
	  };
	
	  dist.pdf = function(x) {
	    for (var p=0, i=0; i<m; ++i) {
	      p += w[i] * dists[i].pdf(x);
	    }
	    return p;
	  };
	
	  dist.cdf = function(x) {
	    for (var p=0, i=0; i<m; ++i) {
	      p += w[i] * dists[i].cdf(x);
	    }
	    return p;
	  };
	
	  dist.icdf = function() {
	    throw Error('Mixture icdf not supported.');
	  };
	
	  return dist.distributions(dists).weights(weights);
	};
	
	var randomUniform = function(min, max) {
	  if (max == null) {
	    max = (min == null ? 1 : min);
	    min = 0;
	  }
	
	  var dist = {},
	      a, b, d;
	
	  dist.min = function(_) {
	    if (arguments.length) {
	      a = _ || 0;
	      d = b - a;
	      return dist;
	    } else {
	      return a;
	    }
	  };
	
	  dist.max = function(_) {
	    if (arguments.length) {
	      b = _ || 0;
	      d = b - a;
	      return dist;
	    } else {
	      return b;
	    }
	  };
	
	  dist.sample = function() {
	    return a + d * exports.random();
	  };
	
	  dist.pdf = function(x) {
	    return (x >= a && x <= b) ? 1 / d : 0;
	  };
	
	  dist.cdf = function(x) {
	    return x < a ? 0 : x > b ? 1 : (x - a) / d;
	  };
	
	  dist.icdf = function(p) {
	    return (p >= 0 && p <= 1) ? a + p * d : NaN;
	  };
	
	  return dist.min(min).max(max);
	};
	
	function TupleStore(key$$1) {
	  this._key = key$$1 ? field(key$$1) : tupleid;
	  this.reset();
	}
	
	var prototype$9 = TupleStore.prototype;
	
	prototype$9.reset = function() {
	  this._add = [];
	  this._rem = [];
	  this._ext = null;
	  this._get = null;
	  this._q = null;
	};
	
	prototype$9.add = function(v) {
	  this._add.push(v);
	};
	
	prototype$9.rem = function(v) {
	  this._rem.push(v);
	};
	
	prototype$9.values = function() {
	  this._get = null;
	  if (this._rem.length === 0) return this._add;
	
	  var a = this._add,
	      r = this._rem,
	      k = this._key,
	      n = a.length,
	      m = r.length,
	      x = Array(n - m),
	      map = {}, i, j, v;
	
	  // use unique key field to clear removed values
	  for (i=0; i<m; ++i) {
	    map[k(r[i])] = 1;
	  }
	  for (i=0, j=0; i<n; ++i) {
	    if (map[k(v = a[i])]) {
	      map[k(v)] = 0;
	    } else {
	      x[j++] = v;
	    }
	  }
	
	  this._rem = [];
	  return (this._add = x);
	};
	
	// memoizing statistics methods
	
	prototype$9.distinct = function(get) {
	  var v = this.values(),
	      n = v.length,
	      map = {},
	      count = 0, s;
	
	  while (--n >= 0) {
	    s = get(v[n]) + '';
	    if (!map.hasOwnProperty(s)) {
	      map[s] = 1;
	      ++count;
	    }
	  }
	
	  return count;
	};
	
	prototype$9.extent = function(get) {
	  if (this._get !== get || !this._ext) {
	    var v = this.values(),
	        i = extentIndex(v, get);
	    this._ext = [v[i[0]], v[i[1]]];
	    this._get = get;
	  }
	  return this._ext;
	};
	
	prototype$9.argmin = function(get) {
	  return this.extent(get)[0] || {};
	};
	
	prototype$9.argmax = function(get) {
	  return this.extent(get)[1] || {};
	};
	
	prototype$9.min = function(get) {
	  var m = this.extent(get)[0];
	  return m != null ? get(m) : +Infinity;
	};
	
	prototype$9.max = function(get) {
	  var m = this.extent(get)[1];
	  return m != null ? get(m) : -Infinity;
	};
	
	prototype$9.quartile = function(get) {
	  if (this._get !== get || !this._q) {
	    this._q = quartiles(this.values(), get);
	    this._get = get;
	  }
	  return this._q;
	};
	
	prototype$9.q1 = function(get) {
	  return this.quartile(get)[0];
	};
	
	prototype$9.q2 = function(get) {
	  return this.quartile(get)[1];
	};
	
	prototype$9.q3 = function(get) {
	  return this.quartile(get)[2];
	};
	
	prototype$9.ci = function(get) {
	  if (this._get !== get || !this._ci) {
	    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);
	    this._get = get;
	  }
	  return this._ci;
	};
	
	prototype$9.ci0 = function(get) {
	  return this.ci(get)[0];
	};
	
	prototype$9.ci1 = function(get) {
	  return this.ci(get)[1];
	};
	
	/**
	 * Group-by aggregation operator.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
	 * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
	 * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
	 * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
	 * @param {boolean} [params.cross=false] - A flag indicating that the full
	 *   cross-product of groupby values should be generated, including empty cells.
	 *   If true, the drop parameter is ignored and empty cells are retained.
	 * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
	 */
	function Aggregate(params) {
	  Transform.call(this, null, params);
	
	  this._adds = []; // array of added output tuples
	  this._mods = []; // array of modified output tuples
	  this._alen = 0;  // number of active added tuples
	  this._mlen = 0;  // number of active modified tuples
	  this._drop = true;   // should empty aggregation cells be removed
	  this._cross = false; // produce full cross-product of group-by values
	
	  this._dims = [];   // group-by dimension accessors
	  this._dnames = []; // group-by dimension names
	
	  this._measures = []; // collection of aggregation monoids
	  this._countOnly = false; // flag indicating only count aggregation
	  this._counts = null; // collection of count fields
	  this._prev = null;   // previous aggregation cells
	
	  this._inputs = null;  // array of dependent input tuple field names
	  this._outputs = null; // array of output tuple field names
	}
	
	Aggregate.Definition = {
	  "type": "Aggregate",
	  "metadata": {"generates": true, "changes": true},
	  "params": [
	    { "name": "groupby", "type": "field", "array": true },
	    { "name": "ops", "type": "enum", "array": true, "values": ValidAggregateOps },
	    { "name": "fields", "type": "field", "null": true, "array": true },
	    { "name": "as", "type": "string", "null": true, "array": true },
	    { "name": "drop", "type": "boolean", "default": true },
	    { "name": "cross", "type": "boolean", "default": false },
	    { "name": "key", "type": "field" }
	  ]
	};
	
	var prototype$8 = inherits(Aggregate, Transform);
	
	prototype$8.transform = function(_, pulse) {
	  var aggr = this,
	      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
	      mod;
	
	  this.stamp = out.stamp;
	
	  if (this.value && ((mod = _.modified()) || pulse.modified(this._inputs))) {
	    this._prev = this.value;
	    this.value = mod ? this.init(_) : {};
	    pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });
	  } else {
	    this.value = this.value || this.init(_);
	    pulse.visit(pulse.REM, function(t) { aggr.rem(t); });
	    pulse.visit(pulse.ADD, function(t) { aggr.add(t); });
	  }
	
	  // Indicate output fields and return aggregate tuples.
	  out.modifies(this._outputs);
	
	  // Should empty cells be dropped?
	  aggr._drop = _.drop !== false;
	
	  // If domain cross-product requested, generate empty cells as needed
	  // and ensure that empty cells are not dropped
	  if (_.cross && aggr._dims.length > 1) {
	    aggr._drop = false;
	    this.cross();
	  }
	
	  return aggr.changes(out);
	};
	
	prototype$8.cross = function() {
	  var aggr = this,
	      curr = aggr.value,
	      dims = aggr._dnames,
	      vals = dims.map(function() { return {}; }),
	      n = dims.length;
	
	  // collect all group-by domain values
	  function collect(cells) {
	    var key$$1, i, t, v;
	    for (key$$1 in cells) {
	      t = cells[key$$1].tuple;
	      for (i=0; i<n; ++i) {
	        vals[i][(v = t[dims[i]])] = v;
	      }
	    }
	  }
	  collect(aggr._prev);
	  collect(curr);
	
	  // iterate over key cross-product, create cells as needed
	  function generate(base, tuple, index) {
	    var name = dims[index],
	        v = vals[index++],
	        k, key$$1;
	
	    for (k in v) {
	      tuple[name] = v[k];
	      key$$1 = base ? base + '|' + k : k;
	      if (index < n) generate(key$$1, tuple, index);
	      else if (!curr[key$$1]) aggr.cell(key$$1, tuple);
	    }
	  }
	  generate('', {}, 0);
	};
	
	prototype$8.init = function(_) {
	  // initialize input and output fields
	  var inputs = (this._inputs = []),
	      outputs = (this._outputs = []),
	      inputMap = {};
	
	  function inputVisit(get) {
	    var fields = array(accessorFields(get)),
	        i = 0, n = fields.length, f;
	    for (; i<n; ++i) {
	      if (!inputMap[f=fields[i]]) {
	        inputMap[f] = 1;
	        inputs.push(f);
	      }
	    }
	  }
	
	  // initialize group-by dimensions
	  this._dims = array(_.groupby);
	  this._dnames = this._dims.map(function(d) {
	    var dname = accessorName(d);
	    inputVisit(d);
	    outputs.push(dname);
	    return dname;
	  });
	  this.cellkey = _.key ? _.key : groupkey(this._dims);
	
	  // initialize aggregate measures
	  this._countOnly = true;
	  this._counts = [];
	  this._measures = [];
	
	  var fields = _.fields || [null],
	      ops = _.ops || ['count'],
	      as = _.as || [],
	      n = fields.length,
	      map = {},
	      field$$1, op, m, mname, outname, i;
	
	  if (n !== ops.length) {
	    error$1('Unmatched number of fields and aggregate ops.');
	  }
	
	  for (i=0; i<n; ++i) {
	    field$$1 = fields[i];
	    op = ops[i];
	
	    if (field$$1 == null && op !== 'count') {
	      error$1('Null aggregate field specified.');
	    }
	    mname = accessorName(field$$1);
	    outname = measureName(op, mname, as[i]);
	    outputs.push(outname);
	
	    if (op === 'count') {
	      this._counts.push(outname);
	      continue;
	    }
	
	    m = map[mname];
	    if (!m) {
	      inputVisit(field$$1);
	      m = (map[mname] = []);
	      m.field = field$$1;
	      this._measures.push(m);
	    }
	
	    if (op !== 'count') this._countOnly = false;
	    m.push(createMeasure(op, outname));
	  }
	
	  this._measures = this._measures.map(function(m) {
	    return compileMeasures(m, m.field);
	  });
	
	  return {}; // aggregation cells (this.value)
	};
	
	// -- Cell Management -----
	
	prototype$8.cellkey = groupkey();
	
	prototype$8.cell = function(key$$1, t) {
	  var cell = this.value[key$$1];
	  if (!cell) {
	    cell = this.value[key$$1] = this.newcell(key$$1, t);
	    this._adds[this._alen++] = cell;
	  } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
	    cell.stamp = this.stamp;
	    this._adds[this._alen++] = cell;
	  } else if (cell.stamp < this.stamp) {
	    cell.stamp = this.stamp;
	    this._mods[this._mlen++] = cell;
	  }
	  return cell;
	};
	
	prototype$8.newcell = function(key$$1, t) {
	  var cell = {
	    key:   key$$1,
	    num:   0,
	    agg:   null,
	    tuple: this.newtuple(t, this._prev && this._prev[key$$1]),
	    stamp: this.stamp,
	    store: false
	  };
	
	  if (!this._countOnly) {
	    var measures = this._measures,
	        n = measures.length, i;
	
	    cell.agg = Array(n);
	    for (i=0; i<n; ++i) {
	      cell.agg[i] = new measures[i](cell);
	    }
	  }
	
	  if (cell.store) {
	    cell.data = new TupleStore();
	  }
	
	  return cell;
	};
	
	prototype$8.newtuple = function(t, p) {
	  var names = this._dnames,
	      dims = this._dims,
	      x = {}, i, n;
	
	  for (i=0, n=dims.length; i<n; ++i) {
	    x[names[i]] = dims[i](t);
	  }
	
	  return p ? replace(p.tuple, x) : ingest(x);
	};
	
	// -- Process Tuples -----
	
	prototype$8.add = function(t) {
	  var key$$1 = this.cellkey(t),
	      cell = this.cell(key$$1, t),
	      agg, i, n;
	
	  cell.num += 1;
	  if (this._countOnly) return;
	
	  if (cell.store) cell.data.add(t);
	
	  agg = cell.agg;
	  for (i=0, n=agg.length; i<n; ++i) {
	    agg[i].add(agg[i].get(t), t);
	  }
	};
	
	prototype$8.rem = function(t) {
	  var key$$1 = this.cellkey(t),
	      cell = this.cell(key$$1, t),
	      agg, i, n;
	
	  cell.num -= 1;
	  if (this._countOnly) return;
	
	  if (cell.store) cell.data.rem(t);
	
	  agg = cell.agg;
	  for (i=0, n=agg.length; i<n; ++i) {
	    agg[i].rem(agg[i].get(t), t);
	  }
	};
	
	prototype$8.celltuple = function(cell) {
	  var tuple = cell.tuple,
	      counts = this._counts,
	      agg, i, n;
	
	  // consolidate stored values
	  if (cell.store) {
	    cell.data.values();
	  }
	
	  // update tuple properties
	  for (i=0, n=counts.length; i<n; ++i) {
	    tuple[counts[i]] = cell.num;
	  }
	  if (!this._countOnly) {
	    agg = cell.agg;
	    for (i=0, n=agg.length; i<n; ++i) {
	      agg[i].set(tuple);
	    }
	  }
	
	  return tuple;
	};
	
	prototype$8.changes = function(out) {
	  var adds = this._adds,
	      mods = this._mods,
	      prev = this._prev,
	      drop = this._drop,
	      add = out.add,
	      rem = out.rem,
	      mod = out.mod,
	      cell, key$$1, i, n;
	
	  if (prev) for (key$$1 in prev) {
	    cell = prev[key$$1];
	    if (!drop || cell.num) rem.push(cell.tuple);
	  }
	
	  for (i=0, n=this._alen; i<n; ++i) {
	    add.push(this.celltuple(adds[i]));
	    adds[i] = null; // for garbage collection
	  }
	
	  for (i=0, n=this._mlen; i<n; ++i) {
	    cell = mods[i];
	    (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
	    mods[i] = null; // for garbage collection
	  }
	
	  this._alen = this._mlen = 0; // reset list of active cells
	  this._prev = null;
	  return out;
	};
	
	/**
	 * Generates a binning function for discretizing data.
	 * @constructor
	 * @param {object} params - The parameters for this operator. The
	 *   provided values should be valid options for the {@link bin} function.
	 * @param {function(object): *} params.field - The data field to bin.
	 */
	function Bin(params) {
	  Transform.call(this, null, params);
	}
	
	Bin.Definition = {
	  "type": "Bin",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "field", "type": "field", "required": true },
	    { "name": "anchor", "type": "number" },
	    { "name": "maxbins", "type": "number", "default": 20 },
	    { "name": "base", "type": "number", "default": 10 },
	    { "name": "divide", "type": "number", "array": true, "default": [5, 2] },
	    { "name": "extent", "type": "number", "array": true, "length": 2, "required": true },
	    { "name": "step", "type": "number" },
	    { "name": "steps", "type": "number", "array": true },
	    { "name": "minstep", "type": "number", "default": 0 },
	    { "name": "nice", "type": "boolean", "default": true },
	    { "name": "name", "type": "string" },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["bin0", "bin1"] }
	  ]
	};
	
	var prototype$10 = inherits(Bin, Transform);
	
	prototype$10.transform = function(_, pulse) {
	  var bins = this._bins(_),
	      start = bins.start,
	      step = bins.step,
	      as = _.as || ['bin0', 'bin1'],
	      b0 = as[0],
	      b1 = as[1],
	      flag;
	
	  if (_.modified()) {
	    pulse = pulse.reflow(true);
	    flag = pulse.SOURCE;
	  } else {
	    flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;
	  }
	
	  pulse.visit(flag, function(t) {
	    var v = bins(t);
	    // minimum bin value (inclusive)
	    t[b0] = v;
	    // maximum bin value (exclusive)
	    // use convoluted math for better floating point agreement
	    // see https://github.com/vega/vega/issues/830
	    t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
	  });
	
	  return pulse.modifies(as);
	};
	
	prototype$10._bins = function(_) {
	  if (this.value && !_.modified()) {
	    return this.value;
	  }
	
	  var field$$1 = _.field,
	      bins  = bin(_),
	      start = bins.start,
	      stop  = bins.stop,
	      step  = bins.step,
	      a, d;
	
	  if ((a = _.anchor) != null) {
	    d = a - (start + step * Math.floor((a - start) / step));
	    start += d;
	    stop += d;
	  }
	
	  var f = function(t) {
	    var v = field$$1(t);
	    if (v == null) {
	      return null;
	    } else {
	      v = Math.max(start, Math.min(+v, stop - step));
	      return start + step * Math.floor((v - start) / step);
	    }
	  };
	
	  f.start = start;
	  f.stop = stop;
	  f.step = step;
	
	  return this.value = accessor(
	    f,
	    accessorFields(field$$1),
	    _.name || 'bin_' + accessorName(field$$1)
	  );
	};
	
	var SortedList = function(idFunc, source, input) {
	  var $$$1 = idFunc,
	      data = source || [],
	      add = input || [],
	      rem = {},
	      cnt = 0;
	
	  return {
	    add: function(t) { add.push(t); },
	    remove: function(t) { rem[$$$1(t)] = ++cnt; },
	    size: function() { return data.length; },
	    data: function(compare$$1, resort) {
	      if (cnt) {
	        data = data.filter(function(t) { return !rem[$$$1(t)]; });
	        rem = {};
	        cnt = 0;
	      }
	      if (resort && compare$$1) {
	        data.sort(compare$$1);
	      }
	      if (add.length) {
	        data = compare$$1
	          ? merge(compare$$1, data, add.sort(compare$$1))
	          : data.concat(add);
	        add = [];
	      }
	      return data;
	    }
	  }
	};
	
	/**
	 * Collects all data tuples that pass through this operator.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(*,*): number} [params.sort] - An optional
	 *   comparator function for additionally sorting the collected tuples.
	 */
	function Collect(params) {
	  Transform.call(this, [], params);
	}
	
	Collect.Definition = {
	  "type": "Collect",
	  "metadata": {"source": true},
	  "params": [
	    { "name": "sort", "type": "compare" }
	  ]
	};
	
	var prototype$11 = inherits(Collect, Transform);
	
	prototype$11.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.ALL),
	      list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),
	      sort = _.sort,
	      mod = pulse.changed() || (sort &&
	            (_.modified('sort') || pulse.modified(sort.fields)));
	
	  out.visit(out.REM, list.remove);
	
	  this.modified(mod);
	  this.value = out.source = list.data(sort, mod);
	  return out;
	};
	
	/**
	 * Generates a comparator function.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<string>} params.fields - The fields to compare.
	 * @param {Array<string>} [params.orders] - The sort orders.
	 *   Each entry should be one of "ascending" (default) or "descending".
	 */
	function Compare(params) {
	  Operator.call(this, null, update$1, params);
	}
	
	inherits(Compare, Operator);
	
	function update$1(_) {
	  return (this.value && !_.modified())
	    ? this.value
	    : compare(_.fields, _.orders);
	}
	
	/**
	 * Count regexp-defined pattern occurrences in a text field.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - An accessor for the text field.
	 * @param {string} [params.pattern] - RegExp string defining the text pattern.
	 * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
	 * @param {string} [params.stopwords] - RegExp string of words to ignore.
	 */
	function CountPattern(params) {
	  Transform.call(this, null, params);
	}
	
	CountPattern.Definition = {
	  "type": "CountPattern",
	  "metadata": {"generates": true, "changes": true},
	  "params": [
	    { "name": "field", "type": "field", "required": true },
	    { "name": "case", "type": "enum", "values": ["upper", "lower", "mixed"], "default": "mixed" },
	    { "name": "pattern", "type": "string", "default": "[\\w\"]+" },
	    { "name": "stopwords", "type": "string", "default": "" },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["text", "count"] }
	  ]
	};
	
	function tokenize(text, tcase, match) {
	  switch (tcase) {
	    case 'upper': text = text.toUpperCase(); break;
	    case 'lower': text = text.toLowerCase(); break;
	  }
	  return text.match(match);
	}
	
	var prototype$12 = inherits(CountPattern, Transform);
	
	prototype$12.transform = function(_, pulse) {
	  function process(update) {
	    return function(tuple) {
	      var tokens = tokenize(get(tuple), _.case, match) || [], t;
	      for (var i=0, n=tokens.length; i<n; ++i) {
	        if (!stop.test(t = tokens[i])) update(t);
	      }
	    };
	  }
	
	  var init = this._parameterCheck(_, pulse),
	      counts = this._counts,
	      match = this._match,
	      stop = this._stop,
	      get = _.field,
	      as = _.as || ['text', 'count'],
	      add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),
	      rem = process(function(t) { counts[t] -= 1; });
	
	  if (init) {
	    pulse.visit(pulse.SOURCE, add);
	  } else {
	    pulse.visit(pulse.ADD, add);
	    pulse.visit(pulse.REM, rem);
	  }
	
	  return this._finish(pulse, as); // generate output tuples
	};
	
	prototype$12._parameterCheck = function(_, pulse) {
	  var init = false;
	
	  if (_.modified('stopwords') || !this._stop) {
	    this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
	    init = true;
	  }
	
	  if (_.modified('pattern') || !this._match) {
	    this._match = new RegExp((_.pattern || '[\\w\']+'), 'g');
	    init = true;
	  }
	
	  if (_.modified('field') || pulse.modified(_.field.fields)) {
	    init = true;
	  }
	
	  if (init) this._counts = {};
	  return init;
	};
	
	prototype$12._finish = function(pulse, as) {
	  var counts = this._counts,
	      tuples = this._tuples || (this._tuples = {}),
	      text = as[0],
	      count = as[1],
	      out = pulse.fork(),
	      w, t, c;
	
	  for (w in counts) {
	    t = tuples[w];
	    c = counts[w] || 0;
	    if (!t && c) {
	      tuples[w] = (t = ingest({}));
	      t[text] = w;
	      t[count] = c;
	      out.add.push(t);
	    } else if (c === 0) {
	      if (t) out.rem.push(t);
	      counts[w] = null;
	      tuples[w] = null;
	    } else if (t[count] !== c) {
	      t[count] = c;
	      out.mod.push(t);
	    }
	  }
	
	  return out.modifies(as);
	};
	
	/**
	 * Perform a cross-product of a tuple stream with itself.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object):boolean} [params.filter] - An optional filter
	 *   function for selectively including tuples in the cross product.
	 * @param {Array<string>} [params.as] - The names of the output fields.
	 */
	function Cross(params) {
	  Transform.call(this, null, params);
	}
	
	Cross.Definition = {
	  "type": "Cross",
	  "metadata": {"source": true, "generates": true, "changes": true},
	  "params": [
	    { "name": "filter", "type": "expr" },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["a", "b"] }
	  ]
	};
	
	var prototype$13 = inherits(Cross, Transform);
	
	prototype$13.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.NO_SOURCE),
	      data = this.value,
	      as = _.as || ['a', 'b'],
	      a = as[0], b = as[1],
	      reset = !data
	          || pulse.changed(pulse.ADD_REM)
	          || _.modified('as')
	          || _.modified('filter');
	
	  if (reset) {
	    if (data) out.rem = data;
	    out.add = this.value = cross$1(pulse.source, a, b, _.filter || truthy);
	  } else {
	    out.mod = data;
	  }
	
	  out.source = this.value;
	  return out.modifies(as);
	};
	
	function cross$1(input, a, b, filter) {
	  var data = [],
	      t = {},
	      n = input.length,
	      i = 0,
	      j, left;
	
	  for (; i<n; ++i) {
	    t[a] = left = input[i];
	    for (j=0; j<n; ++j) {
	      t[b] = input[j];
	      if (filter(t)) {
	        data.push(ingest(t));
	        t = {};
	        t[a] = left;
	      }
	    }
	  }
	
	  return data;
	}
	
	var Distributions = {
	  kde:     randomKDE,
	  mixture: randomMixture,
	  normal:  randomNormal,
	  uniform: randomUniform
	};
	
	var DISTRIBUTIONS = 'distributions';
	var FUNCTION = 'function';
	var FIELD = 'field';
	
	/**
	 * Parse a parameter object for a probability distribution.
	 * @param {object} def - The distribution parameter object.
	 * @param {function():Array<object>} - A method for requesting
	 *   source data. Used for distributions (such as KDE) that
	 *   require sample data points. This method will only be
	 *   invoked if the 'from' parameter for a target data source
	 *   is not provided. Typically this method returns backing
	 *   source data for a Pulse object.
	 * @return {object} - The output distribution object.
	 */
	function parse$1(def, data) {
	  var func = def[FUNCTION];
	  if (!Distributions.hasOwnProperty(func)) {
	    error$1('Unknown distribution function: ' + func);
	  }
	
	  var d = Distributions[func]();
	
	  for (var name in def) {
	    // if data field, extract values
	    if (name === FIELD) {
	      d.data((def.from || data()).map(def[name]));
	    }
	
	    // if distribution mixture, recurse to parse each definition
	    else if (name === DISTRIBUTIONS) {
	      d[name](def[name].map(function(_) { return parse$1(_, data); }));
	    }
	
	    // otherwise, simply set the parameter
	    else if (typeof d[name] === FUNCTION) {
	      d[name](def[name]);
	    }
	  }
	
	  return d;
	}
	
	/**
	 * Grid sample points for a probability density. Given a distribution and
	 * a sampling extent, will generate points suitable for plotting either
	 * PDF (probability density function) or CDF (cumulative distribution
	 * function) curves.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {object} params.distribution - The probability distribution. This
	 *   is an object parameter dependent on the distribution type.
	 * @param {string} [params.method='pdf'] - The distribution method to sample.
	 *   One of 'pdf' or 'cdf'.
	 * @param {Array<number>} [params.extent] - The [min, max] extent over which
	 *   to sample the distribution. This argument is required in most cases, but
	 *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
	 *   that returns numerical sample points from which the extent can be deduced.
	 * @param {number} [params.steps=100] - The number of sampling steps.
	 */
	function Density(params) {
	  Transform.call(this, null, params);
	}
	
	var distributions = [
	  {
	    "key": {"function": "normal"},
	    "params": [
	      { "name": "mean", "type": "number", "default": 0 },
	      { "name": "stdev", "type": "number", "default": 1 }
	    ]
	  },
	  {
	    "key": {"function": "uniform"},
	    "params": [
	      { "name": "min", "type": "number", "default": 0 },
	      { "name": "max", "type": "number", "default": 1 }
	    ]
	  },
	  {
	    "key": {"function": "kde"},
	    "params": [
	      { "name": "field", "type": "field", "required": true },
	      { "name": "from", "type": "data" },
	      { "name": "bandwidth", "type": "number", "default": 0 }
	    ]
	  }
	];
	
	var mixture = {
	  "key": {"function": "mixture"},
	  "params": [
	    { "name": "distributions", "type": "param", "array": true,
	      "params": distributions },
	    { "name": "weights", "type": "number", "array": true }
	  ]
	};
	
	Density.Definition = {
	  "type": "Density",
	  "metadata": {"generates": true, "source": true},
	  "params": [
	    { "name": "extent", "type": "number", "array": true, "length": 2 },
	    { "name": "steps", "type": "number", "default": 100 },
	    { "name": "method", "type": "string", "default": "pdf",
	      "values": ["pdf", "cdf"] },
	    { "name": "distribution", "type": "param",
	      "params": distributions.concat(mixture) },
	    { "name": "as", "type": "string", "array": true,
	      "default": ["value", "density"] }
	  ]
	};
	
	var prototype$14 = inherits(Density, Transform);
	
	prototype$14.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
	
	  if (!this.value || pulse.changed() || _.modified()) {
	    var dist = parse$1(_.distribution, source(pulse)),
	        method = _.method || 'pdf';
	
	    if (method !== 'pdf' && method !== 'cdf') {
	      error$1('Invalid density method: ' + method);
	    }
	    if (!_.extent && !dist.data) {
	      error$1('Missing density extent parameter.');
	    }
	    method = dist[method];
	
	    var as = _.as || ['value', 'density'],
	        domain = _.extent || extent(dist.data()),
	        step = (domain[1] - domain[0]) / (_.steps || 100),
	        values = sequence(domain[0], domain[1] + step/2, step)
	          .map(function(v) {
	            var tuple = {};
	            tuple[as[0]] = v;
	            tuple[as[1]] = method(v);
	            return ingest(tuple);
	          });
	
	    if (this.value) out.rem = this.value;
	    this.value = out.add = out.source = values;
	  }
	
	  return out;
	};
	
	function source(pulse) {
	  return function() { return pulse.materialize(pulse.SOURCE).source; };
	}
	
	/**
	 * Computes extents (min/max) for a data field.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The field over which to compute extends.
	 */
	function Extent(params) {
	  Transform.call(this, [+Infinity, -Infinity], params);
	}
	
	Extent.Definition = {
	  "type": "Extent",
	  "metadata": {},
	  "params": [
	    { "name": "field", "type": "field", "required": true }
	  ]
	};
	
	var prototype$15 = inherits(Extent, Transform);
	
	prototype$15.transform = function(_, pulse) {
	  var extent = this.value,
	      field$$1 = _.field,
	      min = extent[0],
	      max = extent[1],
	      flag = pulse.ADD,
	      mod;
	
	  mod = pulse.changed()
	     || pulse.modified(field$$1.fields)
	     || _.modified('field');
	
	  if (mod) {
	    flag = pulse.SOURCE;
	    min = +Infinity;
	    max = -Infinity;
	  }
	
	  pulse.visit(flag, function(t) {
	    var v = field$$1(t);
	    if (v != null) {
	      if (v < min) min = v;
	      if (v > max) max = v;
	    }
	  });
	
	  this.value = [min, max];
	};
	
	/**
	 * Provides a bridge between a parent transform and a target subflow that
	 * consumes only a subset of the tuples that pass through the parent.
	 * @constructor
	 * @param {Pulse} pulse - A pulse to use as the value of this operator.
	 * @param {Transform} parent - The parent transform (typically a Facet instance).
	 * @param {Transform} target - A transform that receives the subflow of tuples.
	 */
	function Subflow(pulse, parent) {
	  Operator.call(this, pulse);
	  this.parent = parent;
	}
	
	var prototype$17 = inherits(Subflow, Operator);
	
	prototype$17.connect = function(target) {
	  this.targets().add(target);
	  return (target.source = this);
	};
	
	/**
	 * Add an 'add' tuple to the subflow pulse.
	 * @param {Tuple} t - The tuple being added.
	 */
	prototype$17.add = function(t) {
	  this.value.add.push(t);
	};
	
	/**
	 * Add a 'rem' tuple to the subflow pulse.
	 * @param {Tuple} t - The tuple being removed.
	 */
	prototype$17.rem = function(t) {
	  this.value.rem.push(t);
	};
	
	/**
	 * Add a 'mod' tuple to the subflow pulse.
	 * @param {Tuple} t - The tuple being modified.
	 */
	prototype$17.mod = function(t) {
	  this.value.mod.push(t);
	};
	
	/**
	 * Re-initialize this operator's pulse value.
	 * @param {Pulse} pulse - The pulse to copy from.
	 * @see Pulse.init
	 */
	prototype$17.init = function(pulse) {
	  this.value.init(pulse, pulse.NO_SOURCE);
	};
	
	/**
	 * Evaluate this operator. This method overrides the
	 * default behavior to simply return the contained pulse value.
	 * @return {Pulse}
	 */
	prototype$17.evaluate = function() {
	  // assert: this.value.stamp === pulse.stamp
	  return this.value;
	};
	
	/**
	 * Facets a dataflow into a set of subflows based on a key.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(Dataflow, string): Operator} params.subflow - A function
	 *   that generates a subflow of operators and returns its root operator.
	 * @param {function(object): *} params.key - The key field to facet by.
	 */
	function Facet(params) {
	  Transform.call(this, {}, params);
	  this._keys = fastmap(); // cache previously calculated key values
	
	  // keep track of active subflows, use as targets array for listeners
	  // this allows us to limit propagation to only updated subflows
	  var a = this._targets = [];
	  a.active = 0;
	  a.forEach = function(f) {
	    for (var i=0, n=a.active; i<n; ++i) f(a[i], i, a);
	  };
	}
	
	var prototype$16 = inherits(Facet, Transform);
	
	prototype$16.activate = function(flow) {
	  this._targets[this._targets.active++] = flow;
	};
	
	prototype$16.subflow = function(key$$1, flow, pulse, parent) {
	  var flows = this.value,
	      sf = flows.hasOwnProperty(key$$1) && flows[key$$1],
	      df, p;
	
	  if (!sf) {
	    p = parent || (p = this._group[key$$1]) && p.tuple;
	    df = pulse.dataflow;
	    sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this))
	      .connect(flow(df, key$$1, p));
	    flows[key$$1] = sf;
	    this.activate(sf);
	  } else if (sf.value.stamp < pulse.stamp) {
	    sf.init(pulse);
	    this.activate(sf);
	  }
	
	  return sf;
	};
	
	prototype$16.transform = function(_, pulse) {
	  var df = pulse.dataflow,
	      self = this,
	      key$$1 = _.key,
	      flow = _.subflow,
	      cache = this._keys,
	      rekey = _.modified('key');
	
	  function subflow(key$$1) {
	    return self.subflow(key$$1, flow, pulse);
	  }
	
	  this._group = _.group || {};
	  this._targets.active = 0; // reset list of active subflows
	
	  pulse.visit(pulse.REM, function(t) {
	    var id$$1 = tupleid(t),
	        k = cache.get(id$$1);
	    if (k !== undefined) {
	      cache.delete(id$$1);
	      subflow(k).rem(t);
	    }
	  });
	
	  pulse.visit(pulse.ADD, function(t) {
	    var k = key$$1(t);
	    cache.set(tupleid(t), k);
	    subflow(k).add(t);
	  });
	
	  if (rekey || pulse.modified(key$$1.fields)) {
	    pulse.visit(pulse.MOD, function(t) {
	      var id$$1 = tupleid(t),
	          k0 = cache.get(id$$1),
	          k1 = key$$1(t);
	      if (k0 === k1) {
	        subflow(k1).mod(t);
	      } else {
	        cache.set(id$$1, k1);
	        subflow(k0).rem(t);
	        subflow(k1).add(t);
	      }
	    });
	  } else if (pulse.changed(pulse.MOD)) {
	    pulse.visit(pulse.MOD, function(t) {
	      subflow(cache.get(tupleid(t))).mod(t);
	    });
	  }
	
	  if (rekey) {
	    pulse.visit(pulse.REFLOW, function(t) {
	      var id$$1 = tupleid(t),
	          k0 = cache.get(id$$1),
	          k1 = key$$1(t);
	      if (k0 !== k1) {
	        cache.set(id$$1, k1);
	        subflow(k0).rem(t);
	        subflow(k1).add(t);
	      }
	    });
	  }
	
	  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
	  return pulse;
	};
	
	/**
	 * Generates one or more field accessor functions.
	 * If the 'name' parameter is an array, an array of field accessors
	 * will be created and the 'as' parameter will be ignored.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {string} params.name - The field name(s) to access.
	 * @param {string} params.as - The accessor function name.
	 */
	function Field(params) {
	  Operator.call(this, null, update$2, params);
	}
	
	inherits(Field, Operator);
	
	function update$2(_) {
	  return (this.value && !_.modified()) ? this.value
	    : isArray(_.name) ? array(_.name).map(function(f) { return field(f); })
	    : field(_.name, _.as);
	}
	
	/**
	 * Filters data tuples according to a predicate function.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.expr - The predicate expression function
	 *   that determines a tuple's filter status. Truthy values pass the filter.
	 */
	function Filter(params) {
	  Transform.call(this, fastmap(), params);
	}
	
	Filter.Definition = {
	  "type": "Filter",
	  "metadata": {"changes": true},
	  "params": [
	    { "name": "expr", "type": "expr", "required": true }
	  ]
	};
	
	var prototype$18 = inherits(Filter, Transform);
	
	prototype$18.transform = function(_, pulse) {
	  var df = pulse.dataflow,
	      cache = this.value, // cache ids of filtered tuples
	      output = pulse.fork(),
	      add = output.add,
	      rem = output.rem,
	      mod = output.mod,
	      test = _.expr,
	      isMod = true;
	
	  pulse.visit(pulse.REM, function(t) {
	    var id$$1 = tupleid(t);
	    if (!cache.has(id$$1)) rem.push(t);
	    else cache.delete(id$$1);
	  });
	
	  pulse.visit(pulse.ADD, function(t) {
	    if (test(t, _)) add.push(t);
	    else cache.set(tupleid(t), 1);
	  });
	
	  function revisit(t) {
	    var id$$1 = tupleid(t),
	        b = test(t, _),
	        s = cache.get(id$$1);
	    if (b && s) {
	      cache.delete(id$$1);
	      add.push(t);
	    } else if (!b && !s) {
	      cache.set(id$$1, 1);
	      rem.push(t);
	    } else if (isMod && b && !s) {
	      mod.push(t);
	    }
	  }
	
	  pulse.visit(pulse.MOD, revisit);
	
	  if (_.modified()) {
	    isMod = false;
	    pulse.visit(pulse.REFLOW, revisit);
	  }
	
	  if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
	  return output;
	};
	
	/**
	 * Folds one more tuple fields into multiple tuples in which the field
	 * name and values are available under new 'key' and 'value' fields.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.fields - An array of field accessors
	 *   for the tuple fields that should be folded.
	 */
	function Fold(params) {
	  Transform.call(this, {}, params);
	}
	
	Fold.Definition = {
	  "type": "Fold",
	  "metadata": {"generates": true, "changes": true},
	  "params": [
	    { "name": "fields", "type": "field", "array": true, "required": true },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["key", "value"] }
	  ]
	};
	
	var prototype$19 = inherits(Fold, Transform);
	
	function keyFunction(f) {
	  return f.fields.join('|');
	}
	
	prototype$19.transform = function(_, pulse) {
	  var cache = this.value,
	      reset = _.modified('fields'),
	      fields = _.fields,
	      as = _.as || ['key', 'value'],
	      key$$1 = as[0],
	      value = as[1],
	      keys = fields.map(keyFunction),
	      n = fields.length,
	      stamp = pulse.stamp,
	      out = pulse.fork(pulse.NO_SOURCE),
	      i = 0, mask = 0, id$$1;
	
	  function add(t) {
	    var f = (cache[tupleid(t)] = Array(n)); // create cache of folded tuples
	    for (var i=0, ft; i<n; ++i) { // for each key, derive folds
	      ft = (f[i] = derive(t));
	      ft[key$$1] = keys[i];
	      ft[value] = fields[i](t);
	      out.add.push(ft);
	    }
	  }
	
	  function mod(t) {
	    var f = cache[tupleid(t)]; // get cache of folded tuples
	    for (var i=0, ft; i<n; ++i) { // for each key, rederive folds
	      if (!(mask & (1 << i))) continue; // field is unchanged
	      ft = rederive(t, f[i], stamp);
	      ft[key$$1] = keys[i];
	      ft[value] = fields[i](t);
	      out.mod.push(ft);
	    }
	  }
	
	  if (reset) {
	    // on reset, remove all folded tuples and clear cache
	    for (id$$1 in cache) out.rem.push.apply(out.rem, cache[id$$1]);
	    cache = this.value = {};
	    pulse.visit(pulse.SOURCE, add);
	  } else {
	    pulse.visit(pulse.ADD, add);
	
	    for (; i<n; ++i) {
	      if (pulse.modified(fields[i].fields)) mask |= (1 << i);
	    }
	    if (mask) pulse.visit(pulse.MOD, mod);
	
	    pulse.visit(pulse.REM, function(t) {
	      var id$$1 = tupleid(t);
	      out.rem.push.apply(out.rem, cache[id$$1]);
	      cache[id$$1] = null;
	    });
	  }
	
	  return out.modifies(as);
	};
	
	/**
	 * Invokes a function for each data tuple and saves the results as a new field.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
	 * @param {string} params.as - The field name under which to save the result.
	 * @param {boolean} [params.initonly=false] - If true, the formula is applied to
	 *   added tuples only, and does not update in response to modifications.
	 */
	function Formula(params) {
	  Transform.call(this, null, params);
	}
	
	Formula.Definition = {
	  "type": "Formula",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "expr", "type": "expr", "required": true },
	    { "name": "as", "type": "string", "required": true },
	    { "name": "initonly", "type": "boolean" }
	  ]
	};
	
	var prototype$20 = inherits(Formula, Transform);
	
	prototype$20.transform = function(_, pulse) {
	  var func = _.expr,
	      as = _.as,
	      mod = _.modified(),
	      flag = _.initonly ? pulse.ADD
	        : mod ? pulse.SOURCE
	        : pulse.modified(func.fields) ? pulse.ADD_MOD
	        : pulse.ADD;
	
	  function set(t) {
	    t[as] = func(t, _);
	  }
	
	  if (mod) {
	    // parameters updated, need to reflow
	    pulse = pulse.materialize().reflow(true);
	  }
	
	  if (!_.initonly) {
	    pulse.modifies(as);
	  }
	
	  return pulse.visit(flag, set);
	};
	
	/**
	 * Generates data tuples using a provided generator function.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(Parameters): object} params.generator - A tuple generator
	 *   function. This function is given the operator parameters as input.
	 *   Changes to any additional parameters will not trigger re-calculation
	 *   of previously generated tuples. Only future tuples are affected.
	 * @param {number} params.size - The number of tuples to produce.
	 */
	function Generate(params) {
	  Transform.call(this, [], params);
	}
	
	var prototype$21 = inherits(Generate, Transform);
	
	prototype$21.transform = function(_, pulse) {
	  var data = this.value,
	      out = pulse.fork(pulse.ALL),
	      num = _.size - data.length,
	      gen = _.generator,
	      add, rem, t;
	
	  if (num > 0) {
	    // need more tuples, generate and add
	    for (add=[]; --num >= 0;) {
	      add.push(t = ingest(gen(_)));
	      data.push(t);
	    }
	    out.add = out.add.length
	      ? out.materialize(out.ADD).add.concat(add)
	      : add;
	  } else {
	    // need fewer tuples, remove
	    rem = data.slice(0, -num);
	    out.rem = out.rem.length
	      ? out.materialize(out.REM).rem.concat(rem)
	      : rem;
	    data = data.slice(-num);
	  }
	
	  out.source = this.value = data;
	  return out;
	};
	
	var Methods = {
	  value: 'value',
	  median: median,
	  mean: mean,
	  min: min,
	  max: max
	};
	
	var Empty = [];
	
	/**
	 * Impute missing values.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to impute.
	 * @param {Array<function(object): *>} [params.groupby] - An array of
	 *   accessors to determine series within which to perform imputation.
	 * @param {function(object): *} params.key - An accessor for a key value.
	 *   Each key value should be unique within a group. New tuples will be
	 *   imputed for any key values that are not found within a group.
	 * @param {Array<*>} [params.keyvals] - Optional array of required key
	 *   values. New tuples will be imputed for any key values that are not
	 *   found within a group. In addition, these values will be automatically
	 *   augmented with the key values observed in the input data.
	 * @param {string} [method='value'] - The imputation method to use. One of
	 *   'value', 'mean', 'median', 'max', 'min'.
	 * @param {*} [value=0] - The constant value to use for imputation
	 *   when using method 'value'.
	 */
	function Impute(params) {
	  Transform.call(this, [], params);
	}
	
	Impute.Definition = {
	  "type": "Impute",
	  "metadata": {"changes": true},
	  "params": [
	    { "name": "field", "type": "field", "required": true },
	    { "name": "key", "type": "field", "required": true },
	    { "name": "keyvals", "array": true },
	    { "name": "groupby", "type": "field", "array": true },
	    { "name": "method", "type": "enum", "default": "value",
	      "values": ["value", "mean", "median", "max", "min"] },
	    { "name": "value", "default": 0 }
	  ]
	};
	
	var prototype$22 = inherits(Impute, Transform);
	
	function getValue(_) {
	  var m = _.method || Methods.value, v;
	
	  if (Methods[m] == null) {
	    error$1('Unrecognized imputation method: ' + m);
	  } else if (m === Methods.value) {
	    v = _.value !== undefined ? _.value : 0;
	    return function() { return v; };
	  } else {
	    return Methods[m];
	  }
	}
	
	function getField(_) {
	  var f = _.field;
	  return function(t) { return t ? f(t) : NaN; };
	}
	
	prototype$22.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.ALL),
	      impute = getValue(_),
	      field$$1 = getField(_),
	      fName = accessorName(_.field),
	      kName = accessorName(_.key),
	      gNames = (_.groupby || []).map(accessorName),
	      groups = partition(pulse.source, _.groupby, _.key, _.keyvals),
	      curr = [],
	      prev = this.value,
	      m = groups.domain.length,
	      group, value, gVals, kVal, g, i, j, l, n, t;
	
	  for (g=0, l=groups.length; g<l; ++g) {
	    group = groups[g];
	    gVals = group.values;
	    value = NaN;
	
	    // add tuples for missing values
	    for (j=0; j<m; ++j) {
	      if (group[j] != null) continue;
	      kVal = groups.domain[j];
	
	      t = {_impute: true};
	      for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];
	      t[kName] = kVal;
	      t[fName] = isNaN(value) ? (value = impute(group, field$$1)) : value;
	
	      curr.push(ingest(t));
	    }
	  }
	
	  // update pulse with imputed tuples
	  if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
	  if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
	  this.value = curr;
	
	  return out;
	};
	
	function partition(data, groupby, key$$1, keyvals) {
	  var get = function(f) { return f(t); },
	      groups = [],
	      domain = keyvals ? keyvals.slice() : [],
	      kMap = {},
	      gMap = {}, gVals, gKey,
	      group, i, j, k, n, t;
	
	  domain.forEach(function(k, i) { kMap[k] = i + 1; });
	
	  for (i=0, n=data.length; i<n; ++i) {
	    t = data[i];
	    k = key$$1(t);
	    j = kMap[k] || (kMap[k] = domain.push(k));
	
	    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';
	    if (!(group = gMap[gKey])) {
	      group = (gMap[gKey] = []);
	      groups.push(group);
	      group.values = gVals;
	    }
	    group[j-1] = t;
	  }
	
	  groups.domain = domain;
	  return groups;
	}
	
	/**
	 * Extend input tuples with aggregate values.
	 * Calcuates aggregate values and joins them with the input stream.
	 * @constructor
	 */
	function JoinAggregate(params) {
	  Aggregate.call(this, params);
	}
	
	JoinAggregate.Definition = {
	  "type": "JoinAggregate",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "groupby", "type": "field", "array": true },
	    { "name": "fields", "type": "field", "null": true, "array": true },
	    { "name": "ops", "type": "enum", "array": true, "values": ValidAggregateOps },
	    { "name": "as", "type": "string", "null": true, "array": true },
	    { "name": "key", "type": "field" }
	  ]
	};
	
	var prototype$23 = inherits(JoinAggregate, Aggregate);
	
	prototype$23.transform = function(_, pulse) {
	  var aggr = this,
	      mod = _.modified(),
	      cells;
	
	  // process all input tuples to calculate aggregates
	  if (aggr.value && (mod || pulse.modified(aggr._inputs))) {
	    cells = aggr.value = mod ? aggr.init(_) : {};
	    pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });
	  } else {
	    cells = aggr.value = aggr.value || this.init(_);
	    pulse.visit(pulse.REM, function(t) { aggr.rem(t); });
	    pulse.visit(pulse.ADD, function(t) { aggr.add(t); });
	  }
	
	  // update aggregation cells
	  aggr.changes();
	
	  // write aggregate values to input tuples
	  pulse.visit(pulse.SOURCE, function(t) {
	    extend(t, cells[aggr.cellkey(t)].tuple);
	  });
	
	  return pulse.reflow(mod).modifies(this._outputs);
	};
	
	prototype$23.changes = function() {
	  var adds = this._adds,
	      mods = this._mods,
	      i, n;
	
	  for (i=0, n=this._alen; i<n; ++i) {
	    this.celltuple(adds[i]);
	    adds[i] = null; // for garbage collection
	  }
	
	  for (i=0, n=this._mlen; i<n; ++i) {
	    this.celltuple(mods[i]);
	    mods[i] = null; // for garbage collection
	  }
	
	  this._alen = this._mlen = 0; // reset list of active cells
	};
	
	/**
	 * Generates a key function.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<string>} params.fields - The field name(s) for the key function.
	 * @param {boolean} params.flat - A boolean flag indicating if the field names
	 *  should be treated as flat property names, side-stepping nested field
	 *  lookups normally indicated by dot or bracket notation.
	 */
	function Key(params) {
	  Operator.call(this, null, update$3, params);
	}
	
	inherits(Key, Operator);
	
	function update$3(_) {
	  return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);
	}
	
	/**
	 * Extend tuples by joining them with values from a lookup table.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Map} params.index - The lookup table map.
	 * @param {Array<function(object): *} params.fields - The fields to lookup.
	 * @param {Array<string>} params.as - Output field names for each lookup value.
	 * @param {*} [params.default] - A default value to use if lookup fails.
	 */
	function Lookup(params) {
	  Transform.call(this, {}, params);
	}
	
	Lookup.Definition = {
	  "type": "Lookup",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "index", "type": "index", "params": [
	        {"name": "from", "type": "data", "required": true },
	        {"name": "key", "type": "field", "required": true }
	      ] },
	    { "name": "values", "type": "field", "array": true },
	    { "name": "fields", "type": "field", "array": true, "required": true },
	    { "name": "as", "type": "string", "array": true },
	    { "name": "default", "default": null }
	  ]
	};
	
	var prototype$24 = inherits(Lookup, Transform);
	
	prototype$24.transform = function(_, pulse) {
	  var out = pulse,
	      as = _.as,
	      keys = _.fields,
	      index = _.index,
	      values = _.values,
	      defaultValue = _.default==null ? null : _.default,
	      reset = _.modified(),
	      flag = reset ? pulse.SOURCE : pulse.ADD,
	      n = keys.length,
	      set, m, mods;
	
	  if (values) {
	    m = values.length;
	
	    if (n > 1 && !as) {
	      error$1('Multi-field lookup requires explicit "as" parameter.');
	    }
	    if (as && as.length !== n * m) {
	      error$1('The "as" parameter has too few output field names.');
	    }
	    as = as || values.map(accessorName);
	
	    set = function(t) {
	      for (var i=0, k=0, j, v; i<n; ++i) {
	        v = index.get(keys[i](t));
	        if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;
	        else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);
	      }
	    };
	  } else {
	    if (!as) {
	      error$1('Missing output field names.');
	    }
	
	    set = function(t) {
	      for (var i=0, v; i<n; ++i) {
	        v = index.get(keys[i](t));
	        t[as[i]] = v==null ? defaultValue : v;
	      }
	    };
	  }
	
	  if (reset) {
	    out = pulse.reflow(true);
	  } else {
	    mods = keys.some(function(k) { return pulse.modified(k.fields); });
	    flag |= (mods ? pulse.MOD : 0);
	  }
	  pulse.visit(flag, set);
	
	  return out.modifies(as);
	};
	
	/**
	 * Computes global min/max extents over a collection of extents.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<Array<number>>} params.extents - The input extents.
	 */
	function MultiExtent(params) {
	  Operator.call(this, null, update$4, params);
	}
	
	inherits(MultiExtent, Operator);
	
	function update$4(_) {
	  if (this.value && !_.modified()) {
	    return this.value;
	  }
	
	  var min = +Infinity,
	      max = -Infinity,
	      ext = _.extents,
	      i, n, e;
	
	  for (i=0, n=ext.length; i<n; ++i) {
	    e = ext[i];
	    if (e[0] < min) min = e[0];
	    if (e[1] > max) max = e[1];
	  }
	  return [min, max];
	}
	
	/**
	 * Merge a collection of value arrays.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<Array<*>>} params.values - The input value arrrays.
	 */
	function MultiValues(params) {
	  Operator.call(this, null, update$5, params);
	}
	
	inherits(MultiValues, Operator);
	
	function update$5(_) {
	  return (this.value && !_.modified())
	    ? this.value
	    : _.values.reduce(function(data, _) { return data.concat(_); }, []);
	}
	
	/**
	 * Operator whose value is simply its parameter hash. This operator is
	 * useful for enabling reactive updates to values of nested objects.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 */
	function Params(params) {
	  Transform.call(this, null, params);
	}
	
	inherits(Params, Transform);
	
	Params.prototype.transform = function(_, pulse) {
	  this.modified(_.modified());
	  this.value = _;
	  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
	};
	
	/**
	 * Partitions pre-faceted data into tuple subflows.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(Dataflow, string): Operator} params.subflow - A function
	 *   that generates a subflow of operators and returns its root operator.
	 * @param {function(object): Array<object>} params.field - The field
	 *   accessor for an array of subflow tuple objects.
	 */
	function PreFacet(params) {
	  Facet.call(this, params);
	}
	
	var prototype$25 = inherits(PreFacet, Facet);
	
	prototype$25.transform = function(_, pulse) {
	  var self = this,
	      flow = _.subflow,
	      field$$1 = _.field;
	
	  if (_.modified('field') || field$$1 && pulse.modified(accessorFields(field$$1))) {
	    error$1('PreFacet does not support field modification.');
	  }
	
	  this._targets.active = 0; // reset list of active subflows
	
	  pulse.visit(pulse.MOD, function(t) {
	    var sf = self.subflow(tupleid(t), flow, pulse, t);
	    field$$1 ? field$$1(t).forEach(function(_) { sf.mod(_); }) : sf.mod(t);
	  });
	
	  pulse.visit(pulse.ADD, function(t) {
	    var sf = self.subflow(tupleid(t), flow, pulse, t);
	    field$$1 ? field$$1(t).forEach(function(_) { sf.add(ingest(_)); }) : sf.add(t);
	  });
	
	  pulse.visit(pulse.REM, function(t) {
	    var sf = self.subflow(tupleid(t), flow, pulse, t);
	    field$$1 ? field$$1(t).forEach(function(_) { sf.rem(_); }) : sf.rem(t);
	  });
	
	  return pulse;
	};
	
	/**
	 * Performs a relational projection, copying selected fields from source
	 * tuples to a new set of derived tuples.
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<function(object): *} params.fields - The fields to project,
	 *   as an array of field accessors. If unspecified, all fields will be
	 *  copied with names unchanged.
	 * @param {Array<string>} params.as - Output field names for each projected
	 *   field. Any unspecified fields will use the field name provided by
	 *   the field accessor.
	 * @constructor
	 */
	function Project(params) {
	  Transform.call(this, null, params);
	}
	
	Project.Definition = {
	  "type": "Project",
	  "metadata": {"generates": true, "changes": true, "modifies": true},
	  "params": [
	    { "name": "fields", "type": "field", "array": true },
	    { "name": "as", "type": "string", "null": true, "array": true },
	  ]
	};
	
	var prototype$26 = inherits(Project, Transform);
	
	prototype$26.transform = function(_, pulse) {
	  var fields = _.fields,
	      as = output(_.fields, _.as || []),
	      derive$$1 = fields
	        ? function(s, t) { return project(s, t, fields, as); }
	        : rederive,
	      out, lut;
	
	  if (this.value) {
	    lut = this.value;
	  } else {
	    pulse = pulse.addAll();
	    lut = this.value = {};
	  }
	
	  out = pulse.fork();
	
	  pulse.visit(pulse.REM, function(t) {
	    var id$$1 = tupleid(t);
	    out.rem.push(lut[id$$1]);
	    lut[id$$1] = null;
	  });
	
	  pulse.visit(pulse.ADD, function(t) {
	    var dt = derive$$1(t, ingest({}));
	    lut[tupleid(t)] = dt;
	    out.add.push(dt);
	  });
	
	  pulse.visit(pulse.MOD, function(t) {
	    out.mod.push(derive$$1(t, lut[tupleid(t)]));
	  });
	
	  return out;
	};
	
	function output(fields, as) {
	  if (!fields) return null;
	  return fields.map(function(f, i) {
	    return as[i] || accessorName(f);
	  });
	}
	
	function project(s, t, fields, as) {
	  for (var i=0, n=fields.length; i<n; ++i) {
	    t[as[i]] = fields[i](s);
	  }
	  return t;
	}
	
	/**
	 * Proxy the value of another operator as a pure signal value.
	 * Ensures no tuples are propagated.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {*} params.value - The value to proxy, becomes the value of this operator.
	 */
	function Proxy(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$27 = inherits(Proxy, Transform);
	
	prototype$27.transform = function(_, pulse) {
	  this.value = _.value;
	  return _.modified('value')
	    ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)
	    : pulse.StopPropagation;
	};
	
	/**
	 * Relays a data stream between data processing pipelines.
	 * If the derive parameter is set, this transform will create derived
	 * copies of observed tuples. This provides derived data streams in which
	 * modifications to the tuples do not pollute an upstream data source.
	 * @param {object} params - The parameters for this operator.
	 * @param {number} [params.derive=false] - Boolean flag indicating if
	 *   the transform should make derived copies of incoming tuples.
	 * @constructor
	 */
	function Relay(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$28 = inherits(Relay, Transform);
	
	prototype$28.transform = function(_, pulse) {
	  var out, lut;
	
	  if (this.value) {
	    lut = this.value;
	  } else {
	    out = pulse = pulse.addAll();
	    lut = this.value = {};
	  }
	
	  if (_.derive) {
	    out = pulse.fork();
	
	    pulse.visit(pulse.REM, function(t) {
	      var id$$1 = tupleid(t);
	      out.rem.push(lut[id$$1]);
	      lut[id$$1] = null;
	    });
	
	    pulse.visit(pulse.ADD, function(t) {
	      var dt = derive(t);
	      lut[tupleid(t)] = dt;
	      out.add.push(dt);
	    });
	
	    pulse.visit(pulse.MOD, function(t) {
	      out.mod.push(rederive(t, lut[tupleid(t)]));
	    });
	  }
	
	  return out;
	};
	
	/**
	 * Samples tuples passing through this operator.
	 * Uses reservoir sampling to maintain a representative sample.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {number} [params.size=1000] - The maximum number of samples.
	 */
	function Sample(params) {
	  Transform.call(this, [], params);
	  this.count = 0;
	}
	
	Sample.Definition = {
	  "type": "Sample",
	  "metadata": {"source": true, "changes": true},
	  "params": [
	    { "name": "size", "type": "number", "default": 1000 }
	  ]
	};
	
	var prototype$29 = inherits(Sample, Transform);
	
	prototype$29.transform = function(_, pulse) {
	  var out = pulse.fork(),
	      mod = _.modified('size'),
	      num = _.size,
	      res = this.value,
	      cnt = this.count,
	      cap = 0,
	      map = res.reduce(function(m, t) {
	        m[tupleid(t)] = 1;
	        return m;
	      }, {});
	
	  // sample reservoir update function
	  function update(t) {
	    var p, idx;
	
	    if (res.length < num) {
	      res.push(t);
	    } else {
	      idx = ~~((cnt + 1) * exports.random());
	      if (idx < res.length && idx >= cap) {
	        p = res[idx];
	        if (map[tupleid(p)]) out.rem.push(p); // eviction
	        res[idx] = t;
	      }
	    }
	    ++cnt;
	  }
	
	  if (pulse.rem.length) {
	    // find all tuples that should be removed, add to output
	    pulse.visit(pulse.REM, function(t) {
	      var id$$1 = tupleid(t);
	      if (map[id$$1]) {
	        map[id$$1] = -1;
	        out.rem.push(t);
	      }
	      --cnt;
	    });
	
	    // filter removed tuples out of the sample reservoir
	    res = res.filter(function(t) { return map[tupleid(t)] !== -1; });
	  }
	
	  if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
	    // replenish sample if backing data source is available
	    cap = cnt = res.length;
	    pulse.visit(pulse.SOURCE, function(t) {
	      // update, but skip previously sampled tuples
	      if (!map[tupleid(t)]) update(t);
	    });
	    cap = -1;
	  }
	
	  if (mod && res.length > num) {
	    for (var i=0, n=res.length-num; i<n; ++i) {
	      map[tupleid(res[i])] = -1;
	      out.rem.push(res[i]);
	    }
	    res = res.slice(n);
	  }
	
	  if (pulse.mod.length) {
	    // propagate modified tuples in the sample reservoir
	    pulse.visit(pulse.MOD, function(t) {
	      if (map[tupleid(t)]) out.mod.push(t);
	    });
	  }
	
	  if (pulse.add.length) {
	    // update sample reservoir
	    pulse.visit(pulse.ADD, update);
	  }
	
	  if (pulse.add.length || cap < 0) {
	    // output newly added tuples
	    out.add = res.filter(function(t) { return !map[tupleid(t)]; });
	  }
	
	  this.count = cnt;
	  this.value = out.source = res;
	  return out;
	};
	
	/**
	 * Generates data tuples for a specified sequence range of numbers.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {number} params.start - The first number in the sequence.
	 * @param {number} params.stop - The last number (exclusive) in the sequence.
	 * @param {number} [params.step=1] - The step size between numbers in the sequence.
	 */
	function Sequence(params) {
	  Transform.call(this, null, params);
	}
	
	Sequence.Definition = {
	  "type": "Sequence",
	  "metadata": {"generates": true, "source": true},
	  "params": [
	    { "name": "start", "type": "number", "required": true },
	    { "name": "stop", "type": "number", "required": true },
	    { "name": "step", "type": "number", "default": 1 }
	  ],
	  "output": ["value"]
	};
	
	var prototype$30 = inherits(Sequence, Transform);
	
	prototype$30.transform = function(_, pulse) {
	  if (this.value && !_.modified()) return;
	
	  var out = pulse.materialize().fork(pulse.MOD);
	
	  out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;
	  out.source = this.value = sequence(_.start, _.stop, _.step || 1).map(ingest);
	  out.add = pulse.add.concat(this.value);
	  return out;
	};
	
	/**
	 * Propagates a new pulse without any tuples so long as the input
	 * pulse contains some added, removed or modified tuples.
	 * @param {object} params - The parameters for this operator.
	 * @constructor
	 */
	function Sieve(params) {
	  Transform.call(this, null, params);
	  this.modified(true); // always treat as modified
	}
	
	var prototype$31 = inherits(Sieve, Transform);
	
	prototype$31.transform = function(_, pulse) {
	  this.value = pulse.source;
	  return pulse.changed()
	    ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)
	    : pulse.StopPropagation;
	};
	
	/**
	 * An index that maps from unique, string-coerced, field values to tuples.
	 * Assumes that the field serves as a unique key with no duplicate values.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The field accessor to index.
	 */
	function TupleIndex(params) {
	  Transform.call(this, fastmap(), params);
	}
	
	var prototype$32 = inherits(TupleIndex, Transform);
	
	prototype$32.transform = function(_, pulse) {
	  var df = pulse.dataflow,
	      field$$1 = _.field,
	      index = this.value,
	      mod = true;
	
	  function set(t) { index.set(field$$1(t), t); }
	
	  if (_.modified('field') || pulse.modified(field$$1.fields)) {
	    index.clear();
	    pulse.visit(pulse.SOURCE, set);
	  } else if (pulse.changed()) {
	    pulse.visit(pulse.REM, function(t) { index.delete(field$$1(t)); });
	    pulse.visit(pulse.ADD, set);
	  } else {
	    mod = false;
	  }
	
	  this.modified(mod);
	  if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
	  return pulse.fork();
	};
	
	/**
	 * Extracts an array of values. Assumes the source data has already been
	 * reduced as needed (e.g., by an upstream Aggregate transform).
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The domain field to extract.
	 * @param {function(*,*): number} [params.sort] - An optional
	 *   comparator function for sorting the values. The comparator will be
	 *   applied to backing tuples prior to value extraction.
	 */
	function Values(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$33 = inherits(Values, Transform);
	
	prototype$33.transform = function(_, pulse) {
	  var run = !this.value
	    || _.modified('field')
	    || _.modified('sort')
	    || pulse.changed()
	    || (_.sort && pulse.modified(_.sort.fields));
	
	  if (run) {
	    this.value = (_.sort
	      ? pulse.source.slice().sort(_.sort)
	      : pulse.source).map(_.field);
	  }
	};
	
	function WindowOp(op, field$$1, param, as) {
	  var fn = WindowOps[op](field$$1, param);
	  return {
	    init:   fn.init || zero,
	    update: function(w, t) { t[as] = fn.next(w); }
	  };
	}
	
	var WindowOps = {
	  row_number: function() {
	    return {
	      next: function(w) { return w.index + 1; }
	    };
	  },
	  rank: function() {
	    var rank;
	    return {
	      init: function() { rank = 1; },
	      next: function(w) {
	        var i = w.index,
	            data = w.data;
	        return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;
	      }
	    };
	  },
	  dense_rank: function() {
	    var drank;
	    return {
	      init: function() { drank = 1; },
	      next: function(w) {
	        var i = w.index,
	            d = w.data;
	        return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;
	      }
	    };
	  },
	  percent_rank: function() {
	    var rank = WindowOps.rank(),
	        next = rank.next;
	    return {
	      init: rank.init,
	      next: function(w) {
	        return (next(w) - 1) / (w.data.length - 1);
	      }
	    };
	  },
	  cume_dist: function() {
	    var cume;
	    return {
	      init: function() { cume = 0; },
	      next: function(w) {
	        var i = w.index,
	            d = w.data,
	            c = w.compare;
	        if (cume < i) {
	          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;
	          cume = i;
	        }
	        return (1 + cume) / d.length;
	      }
	    };
	  },
	  ntile: function(field$$1, num) {
	    num = +num;
	    if (!(num > 0)) error$1('ntile num must be greater than zero.');
	    var cume = WindowOps.cume_dist(),
	        next = cume.next;
	    return {
	      init: cume.init,
	      next: function(w) { return Math.ceil(num * next(w)); }
	    };
	  },
	
	  lag: function(field$$1, offset) {
	    offset = +offset || 1;
	    return {
	      next: function(w) {
	        var i = w.index - offset;
	        return i >= 0 ? field$$1(w.data[i]) : null;
	      }
	    };
	  },
	  lead: function(field$$1, offset) {
	    offset = +offset || 1;
	    return {
	      next: function(w) {
	        var i = w.index + offset,
	            d = w.data;
	        return i < d.length ? field$$1(d[i]) : null;
	      }
	    };
	  },
	
	  first_value: function(field$$1) {
	    return {
	      next: function(w) { return field$$1(w.data[w.i0]); }
	    };
	  },
	  last_value: function(field$$1) {
	    return {
	      next: function(w) { return field$$1(w.data[w.i1 - 1]); }
	    }
	  },
	  nth_value: function(field$$1, nth) {
	    nth = +nth;
	    if (!(nth > 0)) error$1('nth_value nth must be greater than zero.');
	    return {
	      next: function(w) {
	        var i = w.i0 + (nth - 1);
	        return i < w.i1 ? field$$1(w.data[i]) : null;
	      }
	    }
	  }
	};
	
	var ValidWindowOps = Object.keys(WindowOps);
	
	function WindowState(_) {
	  var self = this,
	      ops = array(_.ops),
	      fields = array(_.fields),
	      params = array(_.params),
	      as = array(_.as),
	      outputs = self.outputs = [],
	      windows = self.windows = [],
	      inputs = {},
	      map = {},
	      countOnly = true,
	      counts = [],
	      measures = [];
	
	  function visitInputs(f) {
	    array(accessorFields(f)).forEach(function(_) { inputs[_] = 1; });
	  }
	  visitInputs(_.sort);
	
	  ops.forEach(function(op, i) {
	    var field$$1 = fields[i],
	        mname = accessorName(field$$1),
	        name = measureName(op, mname, as[i]);
	
	    visitInputs(field$$1);
	    outputs.push(name);
	
	    // Window operation
	    if (WindowOps.hasOwnProperty(op)) {
	      windows.push(WindowOp(op, fields[i], params[i], name));
	    }
	
	    // Aggregate operation
	    else {
	      if (field$$1 == null && op !== 'count') {
	        error$1('Null aggregate field specified.');
	      }
	      if (op === 'count') {
	        counts.push(name);
	        return;
	      }
	
	      countOnly = false;
	      var m = map[mname];
	      if (!m) {
	        m = (map[mname] = []);
	        m.field = field$$1;
	        measures.push(m);
	      }
	      m.push(createMeasure(op, name));
	    }
	  });
	
	  if (counts.length || measures.length) {
	    self.cell = cell(measures, counts, countOnly);
	  }
	
	  self.inputs = Object.keys(inputs);
	}
	
	var prototype$35 = WindowState.prototype;
	
	prototype$35.init = function() {
	  this.windows.forEach(function(_) { _.init(); });
	  if (this.cell) this.cell.init();
	};
	
	prototype$35.update = function(w, t) {
	  var self = this,
	      cell = self.cell,
	      wind = self.windows,
	      data = w.data,
	      m = wind && wind.length,
	      j;
	
	  if (cell) {
	    for (j=w.p0; j<w.i0; ++j) cell.rem(data[j]);
	    for (j=w.p1; j<w.i1; ++j) cell.add(data[j]);
	    cell.set(t);
	  }
	  for (j=0; j<m; ++j) wind[j].update(w, t);
	};
	
	function cell(measures, counts, countOnly) {
	  measures = measures.map(function(m) {
	    return compileMeasures(m, m.field);
	  });
	
	  var cell = {
	    num:   0,
	    agg:   null,
	    store: false,
	    count: counts
	  };
	
	  if (!countOnly) {
	    var n = measures.length,
	        a = cell.agg = Array(n),
	        i = 0;
	    for (; i<n; ++i) a[i] = new measures[i](cell);
	  }
	
	  if (cell.store) {
	    var store = cell.data = new TupleStore();
	  }
	
	  cell.add = function(t) {
	    cell.num += 1;
	    if (countOnly) return;
	    if (store) store.add(t);
	    for (var i=0; i<n; ++i) {
	      a[i].add(a[i].get(t), t);
	    }
	  };
	
	  cell.rem = function(t) {
	    cell.num -= 1;
	    if (countOnly) return;
	    if (store) store.rem(t);
	    for (var i=0; i<n; ++i) {
	      a[i].rem(a[i].get(t), t);
	    }
	  };
	
	  cell.set = function(t) {
	    var i, n;
	
	    // consolidate stored values
	    if (store) store.values();
	
	    // update tuple properties
	    for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;
	    if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);
	  };
	
	  cell.init = function() {
	    cell.num = 0;
	    if (store) store.reset();
	    for (var i=0; i<n; ++i) a[i].init();
	  };
	
	  return cell;
	}
	
	/**
	 * Perform window calculations and write results to the input stream.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
	 * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
	 * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
	 * @param {Array<function(object): *>} [params.fields] - An array of accessors
	 *   for data fields to use as inputs to window operations.
	 * @param {Array<*>} [params.params] - An array of parameter values for window operations.
	 * @param {Array<string>} [params.as] - An array of output field names for window operations.
	 * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
	 * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
	 *   number alone, ignoring peers with identical sort values. If false (default),
	 *   the window boundaries will be adjusted to include peer values.
	 */
	function Window(params) {
	  Transform.call(this, {}, params);
	  this._mlen = 0;
	  this._mods = [];
	}
	
	Window.Definition = {
	  "type": "Window",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "sort", "type": "compare" },
	    { "name": "groupby", "type": "field", "array": true },
	    { "name": "ops", "type": "enum", "array": true, "values": ValidWindowOps.concat(ValidAggregateOps) },
	    { "name": "params", "type": "number", "null": true, "array": true },
	    { "name": "fields", "type": "field", "null": true, "array": true },
	    { "name": "as", "type": "string", "null": true, "array": true },
	    { "name": "frame", "type": "number", "null": true, "array": true, "length": 2, "default": [null, 0] },
	    { "name": "ignorePeers", "type": "boolean", "default": false }
	  ]
	};
	
	var prototype$34 = inherits(Window, Transform);
	
	prototype$34.transform = function(_, pulse) {
	  var self = this,
	      state = self.state,
	      mod = _.modified(),
	      i, n;
	
	  this.stamp = pulse.stamp;
	
	  // initialize window state
	  if (!state || mod) {
	    state = self.state = new WindowState(_);
	  }
	
	  // retrieve group for a tuple
	  var key$$1 = groupkey(_.groupby);
	  function group(t) { return self.group(key$$1(t)); }
	
	  // partition input tuples
	  if (mod || pulse.modified(state.inputs)) {
	    self.value = {};
	    pulse.visit(pulse.SOURCE, function(t) { group(t).add(t); });
	  } else {
	    pulse.visit(pulse.REM, function(t) { group(t).remove(t); });
	    pulse.visit(pulse.ADD, function(t) { group(t).add(t); });
	  }
	
	  // perform window calculations for each modified partition
	  for (i=0, n=self._mlen; i<n; ++i) {
	    processPartition(self._mods[i], state, _);
	  }
	  self._mlen = 0;
	  self._mods = [];
	
	  // TODO don't reflow everything?
	  return pulse.reflow(mod).modifies(state.outputs);
	};
	
	prototype$34.group = function(key$$1) {
	  var self = this,
	      group = self.value[key$$1];
	
	  if (!group) {
	    group = self.value[key$$1] = SortedList(tupleid);
	    group.stamp = -1;
	  }
	
	  if (group.stamp < self.stamp) {
	    group.stamp = self.stamp;
	    self._mods[self._mlen++] = group;
	  }
	
	  return group;
	};
	
	function processPartition(list, state, _) {
	  var sort = _.sort,
	      range = sort && !_.ignorePeers,
	      frame = _.frame || [null, 0],
	      data = list.data(sort),
	      n = data.length,
	      i = 0,
	      b = range ? bisector(sort) : null,
	      w = {
	        i0: 0, i1: 0, p0: 0, p1: 0, index: 0,
	        data: data, compare: sort || constant(-1)
	      };
	
	  for (state.init(); i<n; ++i) {
	    setWindow(w, frame, i, n);
	    if (range) adjustRange(w, b);
	    state.update(w, data[i]);
	  }
	}
	
	function setWindow(w, f, i, n) {
	  w.p0 = w.i0;
	  w.p1 = w.i1;
	  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
	  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
	  w.index = i;
	}
	
	// if frame type is 'range', adjust window for peer values
	function adjustRange(w, bisect) {
	  var r0 = w.i0,
	      r1 = w.i1 - 1,
	      c = w.compare,
	      d = w.data,
	      n = d.length - 1;
	
	  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);
	  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);
	}
	
	
	
	var tx = Object.freeze({
		aggregate: Aggregate,
		bin: Bin,
		collect: Collect,
		compare: Compare,
		countpattern: CountPattern,
		cross: Cross,
		density: Density,
		extent: Extent,
		facet: Facet,
		field: Field,
		filter: Filter,
		fold: Fold,
		formula: Formula,
		generate: Generate,
		impute: Impute,
		joinaggregate: JoinAggregate,
		key: Key,
		lookup: Lookup,
		multiextent: MultiExtent,
		multivalues: MultiValues,
		params: Params,
		prefacet: PreFacet,
		project: Project,
		proxy: Proxy,
		relay: Relay,
		sample: Sample,
		sequence: Sequence,
		sieve: Sieve,
		subflow: Subflow,
		tupleindex: TupleIndex,
		values: Values,
		window: Window
	});
	
	function Bounds(b) {
	  this.clear();
	  if (b) this.union(b);
	}
	
	var prototype$37 = Bounds.prototype;
	
	prototype$37.clone = function() {
	  return new Bounds(this);
	};
	
	prototype$37.clear = function() {
	  this.x1 = +Number.MAX_VALUE;
	  this.y1 = +Number.MAX_VALUE;
	  this.x2 = -Number.MAX_VALUE;
	  this.y2 = -Number.MAX_VALUE;
	  return this;
	};
	
	prototype$37.empty = function() {
	  return (
	    this.x1 === +Number.MAX_VALUE &&
	    this.y1 === +Number.MAX_VALUE &&
	    this.x2 === -Number.MAX_VALUE &&
	    this.y2 === -Number.MAX_VALUE
	  );
	};
	
	prototype$37.set = function(x1, y1, x2, y2) {
	  if (x2 < x1) {
	    this.x2 = x1;
	    this.x1 = x2;
	  } else {
	    this.x1 = x1;
	    this.x2 = x2;
	  }
	  if (y2 < y1) {
	    this.y2 = y1;
	    this.y1 = y2;
	  } else {
	    this.y1 = y1;
	    this.y2 = y2;
	  }
	  return this;
	};
	
	prototype$37.add = function(x, y) {
	  if (x < this.x1) this.x1 = x;
	  if (y < this.y1) this.y1 = y;
	  if (x > this.x2) this.x2 = x;
	  if (y > this.y2) this.y2 = y;
	  return this;
	};
	
	prototype$37.expand = function(d) {
	  this.x1 -= d;
	  this.y1 -= d;
	  this.x2 += d;
	  this.y2 += d;
	  return this;
	};
	
	prototype$37.round = function() {
	  this.x1 = Math.floor(this.x1);
	  this.y1 = Math.floor(this.y1);
	  this.x2 = Math.ceil(this.x2);
	  this.y2 = Math.ceil(this.y2);
	  return this;
	};
	
	prototype$37.translate = function(dx, dy) {
	  this.x1 += dx;
	  this.x2 += dx;
	  this.y1 += dy;
	  this.y2 += dy;
	  return this;
	};
	
	prototype$37.rotate = function(angle, x, y) {
	  var cos = Math.cos(angle),
	      sin = Math.sin(angle),
	      cx = x - x*cos + y*sin,
	      cy = y - x*sin - y*cos,
	      x1 = this.x1, x2 = this.x2,
	      y1 = this.y1, y2 = this.y2;
	
	  return this.clear()
	    .add(cos*x1 - sin*y1 + cx,  sin*x1 + cos*y1 + cy)
	    .add(cos*x1 - sin*y2 + cx,  sin*x1 + cos*y2 + cy)
	    .add(cos*x2 - sin*y1 + cx,  sin*x2 + cos*y1 + cy)
	    .add(cos*x2 - sin*y2 + cx,  sin*x2 + cos*y2 + cy);
	};
	
	prototype$37.union = function(b) {
	  if (b.x1 < this.x1) this.x1 = b.x1;
	  if (b.y1 < this.y1) this.y1 = b.y1;
	  if (b.x2 > this.x2) this.x2 = b.x2;
	  if (b.y2 > this.y2) this.y2 = b.y2;
	  return this;
	};
	
	prototype$37.intersect = function(b) {
	  if (b.x1 > this.x1) this.x1 = b.x1;
	  if (b.y1 > this.y1) this.y1 = b.y1;
	  if (b.x2 < this.x2) this.x2 = b.x2;
	  if (b.y2 < this.y2) this.y2 = b.y2;
	  return this;
	};
	
	prototype$37.encloses = function(b) {
	  return b && (
	    this.x1 <= b.x1 &&
	    this.x2 >= b.x2 &&
	    this.y1 <= b.y1 &&
	    this.y2 >= b.y2
	  );
	};
	
	prototype$37.alignsWith = function(b) {
	  return b && (
	    this.x1 == b.x1 ||
	    this.x2 == b.x2 ||
	    this.y1 == b.y1 ||
	    this.y2 == b.y2
	  );
	};
	
	prototype$37.intersects = function(b) {
	  return b && !(
	    this.x2 < b.x1 ||
	    this.x1 > b.x2 ||
	    this.y2 < b.y1 ||
	    this.y1 > b.y2
	  );
	};
	
	prototype$37.contains = function(x, y) {
	  return !(
	    x < this.x1 ||
	    x > this.x2 ||
	    y < this.y1 ||
	    y > this.y2
	  );
	};
	
	prototype$37.width = function() {
	  return this.x2 - this.x1;
	};
	
	prototype$37.height = function() {
	  return this.y2 - this.y1;
	};
	
	var gradient_id = 0;
	
	var Gradient = function(p0, p1) {
	  var stops = [], gradient;
	  return gradient = {
	    id: 'gradient_' + (gradient_id++),
	    x1: p0 ? p0[0] : 0,
	    y1: p0 ? p0[1] : 0,
	    x2: p1 ? p1[0] : 1,
	    y2: p1 ? p1[1] : 0,
	    stops: stops,
	    stop: function(offset, color) {
	      stops.push({offset: offset, color: color});
	      return gradient;
	    }
	  };
	};
	
	function Item(mark) {
	  this.mark = mark;
	  this.bounds = (this.bounds || new Bounds());
	}
	
	function GroupItem(mark) {
	  Item.call(this, mark);
	  this.items = (this.items || []);
	}
	
	inherits(GroupItem, Item);
	
	function domCanvas(w, h) {
	  if (typeof document !== 'undefined' && document.createElement) {
	    var c = document.createElement('canvas');
	    if (c && c.getContext) {
	      c.width = w;
	      c.height = h;
	      return c;
	    }
	  }
	  return null;
	}
	
	function domImage() {
	  return typeof Image !== 'undefined' ? Image : null;
	}
	
	var NodeCanvas;
	
	try {
	  // try to load canvas module
	  NodeCanvas = __webpack_require__(10);
	  if (!NodeCanvas) throw 1;
	} catch (e) {
	  try {
	    // if canvas fails, try to load canvas-prebuilt
	    NodeCanvas = __webpack_require__(11);
	  } catch (e2) {
	    // if all options fail, set to null
	    NodeCanvas = null;
	  }
	}
	
	function nodeCanvas(w, h) {
	  if (NodeCanvas) {
	    try {
	      return new NodeCanvas(w, h);
	    } catch (e) {
	      // do nothing, return null on error
	    }
	  }
	  return null;
	}
	
	function nodeImage() {
	  return NodeCanvas && NodeCanvas.Image || null;
	}
	
	function canvas(w, h) {
	  return domCanvas(w, h) || nodeCanvas(w, h) || null;
	}
	
	function image() {
	  return domImage() || nodeImage() || null;
	}
	
	function ResourceLoader(customLoader) {
	  this._pending = 0;
	  this._loader = customLoader || loader();
	}
	
	var prototype$38 = ResourceLoader.prototype;
	
	prototype$38.pending = function() {
	  return this._pending;
	};
	
	function increment(loader$$1) {
	  loader$$1._pending += 1;
	}
	
	function decrement(loader$$1) {
	  loader$$1._pending -= 1;
	}
	
	prototype$38.sanitizeURL = function(uri) {
	  var loader$$1 = this;
	  increment(loader$$1);
	
	  return loader$$1._loader.sanitize(uri, {context:'href'})
	    .then(function(opt) {
	      decrement(loader$$1);
	      return opt;
	    })
	    .catch(function() {
	      decrement(loader$$1);
	      return null;
	    });
	};
	
	prototype$38.loadImage = function(uri) {
	  var loader$$1 = this,
	      Image = image();
	  increment(loader$$1);
	
	  return loader$$1._loader
	    .sanitize(uri, {context: 'image'})
	    .then(function(opt) {
	      var url = opt.href;
	      if (!url || !Image) throw {url: url};
	
	      var img = new Image();
	
	      img.onload = function() {
	        decrement(loader$$1);
	        img.loaded = true;
	      };
	
	      img.onerror = function() {
	        decrement(loader$$1);
	        img.loaded = false;
	      };
	
	      img.src = url;
	      return img;
	    })
	    .catch(function(e) {
	      decrement(loader$$1);
	      return {loaded: false, width: 0, height: 0, src: e && e.url || ''};
	    });
	};
	
	prototype$38.ready = function() {
	  var loader$$1 = this;
	  return new Promise(function(accept) {
	    function poll(value) {
	      if (!loader$$1.pending()) accept(value);
	      else setTimeout(function() { poll(true); }, 10);
	    }
	    poll(false);
	  });
	};
	
	var pi = Math.PI;
	var tau = 2 * pi;
	var epsilon = 1e-6;
	var tauEpsilon = tau - epsilon;
	
	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}
	
	function path() {
	  return new Path;
	}
	
	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon)) {}
	
	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;
	
	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }
	
	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }
	
	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	      this._ += "L" + x0 + "," + y0;
	    }
	
	    // Is this arc empty? We’re done.
	    if (!r) return;
	
	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau + tau;
	
	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }
	
	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	var constant$2 = function(x) {
	  return function constant() {
	    return x;
	  };
	};
	
	var abs = Math.abs;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var max$1 = Math.max;
	var min$1 = Math.min;
	var sin = Math.sin;
	var sqrt = Math.sqrt;
	
	var epsilon$1 = 1e-12;
	var pi$1 = Math.PI;
	var halfPi = pi$1 / 2;
	var tau$1 = 2 * pi$1;
	
	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
	}
	
	function asin(x) {
	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
	}
	
	function arcInnerRadius(d) {
	  return d.innerRadius;
	}
	
	function arcOuterRadius(d) {
	  return d.outerRadius;
	}
	
	function arcStartAngle(d) {
	  return d.startAngle;
	}
	
	function arcEndAngle(d) {
	  return d.endAngle;
	}
	
	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}
	
	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}
	
	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;
	
	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	
	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}
	
	var d3_arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant$2(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;
	
	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi,
	        a1 = endAngle.apply(this, arguments) - halfPi,
	        da = abs(a1 - a0),
	        cw = a1 > a0;
	
	    if (!context) context = buffer = path();
	
	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;
	
	    // Is it a point?
	    if (!(r1 > epsilon$1)) context.moveTo(0, 0);
	
	    // Or is it a circle or annulus?
	    else if (da > tau$1 - epsilon$1) {
	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$1) {
	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }
	
	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
	          rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;
	
	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$1) {
	        var p0 = asin(rp / r0 * sin(ap)),
	            p1 = asin(rp / r1 * sin(ap));
	        if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }
	
	      var x01 = r1 * cos(a01),
	          y01 = r1 * sin(a01),
	          x10 = r0 * cos(a10),
	          y10 = r0 * sin(a10);
	
	      // Apply rounded corners?
	      if (rc > epsilon$1) {
	        var x11 = r1 * cos(a11),
	            y11 = r1 * sin(a11),
	            x00 = r0 * cos(a00),
	            y00 = r0 * sin(a00);
	
	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$1) {
	          var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min$1(rc, (r0 - lc) / (kc - 1));
	          rc1 = min$1(rc, (r1 - lc) / (kc + 1));
	        }
	      }
	
	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$1)) context.moveTo(x01, y01);
	
	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$1) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
	
	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
	
	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);
	
	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$1) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
	
	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }
	
	    context.closePath();
	
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;
	    return [cos(a) * r, sin(a) * r];
	  };
	
	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : innerRadius;
	  };
	
	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : outerRadius;
	  };
	
	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : cornerRadius;
	  };
	
	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), arc) : padRadius;
	  };
	
	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : startAngle;
	  };
	
	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : endAngle;
	  };
	
	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : padAngle;
	  };
	
	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };
	
	  return arc;
	};
	
	function Linear(context) {
	  this._context = context;
	}
	
	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};
	
	var curveLinear = function(context) {
	  return new Linear(context);
	};
	
	function x$1(p) {
	  return p[0];
	}
	
	function y$1(p) {
	  return p[1];
	}
	
	var line$1 = function() {
	  var x = x$1,
	      y = y$1,
	      defined = constant$2(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  line.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$2(+_), line) : x;
	  };
	
	  line.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$2(+_), line) : y;
	  };
	
	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$2(!!_), line) : defined;
	  };
	
	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };
	
	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };
	
	  return line;
	};
	
	var area$1 = function() {
	  var x0 = x$1,
	      x1 = null,
	      y0 = constant$2(0),
	      y1 = y$1,
	      defined = constant$2(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  function arealine() {
	    return line$1().defined(defined).curve(curve).context(context);
	  }
	
	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), x1 = null, area) : x0;
	  };
	
	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), area) : x0;
	  };
	
	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : x1;
	  };
	
	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), y1 = null, area) : y0;
	  };
	
	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), area) : y0;
	  };
	
	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : y1;
	  };
	
	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };
	
	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };
	
	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };
	
	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$2(!!_), area) : defined;
	  };
	
	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };
	
	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };
	
	  return area;
	};
	
	var circle = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$1);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$1);
	  }
	};
	
	var d3_symbol = function() {
	  var type = constant$2(circle),
	      size = constant$2(64),
	      context = null;
	
	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant$2(_), symbol) : type;
	  };
	
	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant$2(+_), symbol) : size;
	  };
	
	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };
	
	  return symbol;
	};
	
	var noop$1 = function() {};
	
	function point(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}
	
	function Basis(context) {
	  this._context = context;
	}
	
	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var curveBasis = function(context) {
	  return new Basis(context);
	};
	
	function BasisClosed(context) {
	  this._context = context;
	}
	
	BasisClosed.prototype = {
	  areaStart: noop$1,
	  areaEnd: noop$1,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var curveBasisClosed = function(context) {
	  return new BasisClosed(context);
	};
	
	function BasisOpen(context) {
	  this._context = context;
	}
	
	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var curveBasisOpen = function(context) {
	  return new BasisOpen(context);
	};
	
	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}
	
	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;
	
	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;
	
	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }
	
	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	var curveBundle = (function custom(beta) {
	
	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }
	
	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };
	
	  return bundle;
	})(0.85);
	
	function point$1(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}
	
	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$1(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCardinal = (function custom(tension) {
	
	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	})(0);
	
	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalClosed.prototype = {
	  areaStart: noop$1,
	  areaEnd: noop$1,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCardinalClosed = (function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	})(0);
	
	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCardinalOpen = (function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	})(0);
	
	function point$2(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;
	
	  if (that._l01_a > epsilon$1) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }
	
	  if (that._l23_a > epsilon$1) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }
	
	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}
	
	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$2(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCatmullRom = (function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	})(0.5);
	
	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomClosed.prototype = {
	  areaStart: noop$1,
	  areaEnd: noop$1,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$2(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCatmullRomClosed = (function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	})(0.5);
	
	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var curveCatmullRomOpen = (function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	})(0.5);
	
	function LinearClosed(context) {
	  this._context = context;
	}
	
	LinearClosed.prototype = {
	  areaStart: noop$1,
	  areaEnd: noop$1,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};
	
	var curveLinearClosed = function(context) {
	  return new LinearClosed(context);
	};
	
	function sign(x) {
	  return x < 0 ? -1 : 1;
	}
	
	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}
	
	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}
	
	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$3(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}
	
	function MonotoneX(context) {
	  this._context = context;
	}
	
	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;
	
	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
	    }
	
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};
	
	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}
	
	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};
	
	function ReflectContext(context) {
	  this._context = context;
	}
	
	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};
	
	function monotoneX(context) {
	  return new MonotoneX(context);
	}
	
	function monotoneY(context) {
	  return new MonotoneY(context);
	}
	
	function Natural(context) {
	  this._context = context;
	}
	
	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;
	
	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }
	
	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}
	
	var curveNatural = function(context) {
	  return new Natural(context);
	};
	
	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}
	
	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};
	
	var curveStep = function(context) {
	  return new Step(context, 0.5);
	};
	
	function stepBefore(context) {
	  return new Step(context, 0);
	}
	
	function stepAfter(context) {
	  return new Step(context, 1);
	}
	
	var lookup = {
	  'basis': {
	    curve: curveBasis
	  },
	  'basis-closed': {
	    curve: curveBasisClosed
	  },
	  'basis-open': {
	    curve: curveBasisOpen
	  },
	  'bundle': {
	    curve: curveBundle,
	    tension: 'beta',
	    value: 0.85
	  },
	  'cardinal': {
	    curve: curveCardinal,
	    tension: 'tension',
	    value: 0
	  },
	  'cardinal-open': {
	    curve: curveCardinalOpen,
	    tension: 'tension',
	    value: 0
	  },
	  'cardinal-closed': {
	    curve: curveCardinalClosed,
	    tension: 'tension',
	    value: 0
	  },
	  'catmull-rom': {
	    curve: curveCatmullRom,
	    tension: 'alpha',
	    value: 0.5
	  },
	  'catmull-rom-closed': {
	    curve: curveCatmullRomClosed,
	    tension: 'alpha',
	    value: 0.5
	  },
	  'catmull-rom-open': {
	    curve: curveCatmullRomOpen,
	    tension: 'alpha',
	    value: 0.5
	  },
	  'linear': {
	    curve: curveLinear
	  },
	  'linear-closed': {
	    curve: curveLinearClosed
	  },
	  'monotone': {
	    horizontal: monotoneY,
	    vertical:   monotoneX
	  },
	  'natural': {
	    curve: curveNatural
	  },
	  'step': {
	    curve: curveStep
	  },
	  'step-after': {
	    curve: stepAfter
	  },
	  'step-before': {
	    curve: stepBefore
	  }
	};
	
	function curves(type, orientation, tension) {
	  var entry = lookup.hasOwnProperty(type) && lookup[type],
	      curve = null;
	
	  if (entry) {
	    curve = entry.curve || entry[orientation || 'vertical'];
	    if (entry.tension && tension != null) {
	      curve = curve[entry.tension](tension);
	    }
	  }
	
	  return curve;
	}
	
	// Path parsing and rendering code adapted from fabric.js -- Thanks!
	var cmdlen = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 };
	var regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];
	
	var pathParse = function(pathstr) {
	  var result = [],
	      path,
	      curr,
	      chunks,
	      parsed, param,
	      cmd, len, i, j, n, m;
	
	  // First, break path into command sequence
	  path = pathstr
	    .slice()
	    .replace(regexp[0], '###$1')
	    .split(regexp[1])
	    .slice(1);
	
	  // Next, parse each command in turn
	  for (i=0, n=path.length; i<n; ++i) {
	    curr = path[i];
	    chunks = curr
	      .slice(1)
	      .trim()
	      .replace(regexp[2],'$1###$2')
	      .split(regexp[3]);
	    cmd = curr.charAt(0);
	
	    parsed = [cmd];
	    for (j=0, m=chunks.length; j<m; ++j) {
	      if ((param = +chunks[j]) === param) { // not NaN
	        parsed.push(param);
	      }
	    }
	
	    len = cmdlen[cmd.toLowerCase()];
	    if (parsed.length-1 > len) {
	      for (j=1, m=parsed.length; j<m; j+=len) {
	        result.push([cmd].concat(parsed.slice(j, j+len)));
	      }
	    }
	    else {
	      result.push(parsed);
	    }
	  }
	
	  return result;
	};
	
	var segmentCache = {};
	var bezierCache = {};
	
	var join = [].join;
	
	// Copied from Inkscape svgtopdf, thanks!
	function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
	  var key = join.call(arguments);
	  if (segmentCache[key]) {
	    return segmentCache[key];
	  }
	
	  var th = rotateX * (Math.PI/180);
	  var sin_th = Math.sin(th);
	  var cos_th = Math.cos(th);
	  rx = Math.abs(rx);
	  ry = Math.abs(ry);
	  var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
	  var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
	  var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);
	  if (pl > 1) {
	    pl = Math.sqrt(pl);
	    rx *= pl;
	    ry *= pl;
	  }
	
	  var a00 = cos_th / rx;
	  var a01 = sin_th / rx;
	  var a10 = (-sin_th) / ry;
	  var a11 = (cos_th) / ry;
	  var x0 = a00 * ox + a01 * oy;
	  var y0 = a10 * ox + a11 * oy;
	  var x1 = a00 * x + a01 * y;
	  var y1 = a10 * x + a11 * y;
	
	  var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);
	  var sfactor_sq = 1 / d - 0.25;
	  if (sfactor_sq < 0) sfactor_sq = 0;
	  var sfactor = Math.sqrt(sfactor_sq);
	  if (sweep == large) sfactor = -sfactor;
	  var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);
	  var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);
	
	  var th0 = Math.atan2(y0-yc, x0-xc);
	  var th1 = Math.atan2(y1-yc, x1-xc);
	
	  var th_arc = th1-th0;
	  if (th_arc < 0 && sweep === 1){
	    th_arc += 2 * Math.PI;
	  } else if (th_arc > 0 && sweep === 0) {
	    th_arc -= 2 * Math.PI;
	  }
	
	  var segs = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
	  var result = [];
	  for (var i=0; i<segs; ++i) {
	    var th2 = th0 + i * th_arc / segs;
	    var th3 = th0 + (i+1) * th_arc / segs;
	    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
	  }
	
	  return (segmentCache[key] = result);
	}
	
	function bezier(params) {
	  var key = join.call(params);
	  if (bezierCache[key]) {
	    return bezierCache[key];
	  }
	
	  var cx = params[0],
	      cy = params[1],
	      th0 = params[2],
	      th1 = params[3],
	      rx = params[4],
	      ry = params[5],
	      sin_th = params[6],
	      cos_th = params[7];
	
	  var a00 = cos_th * rx;
	  var a01 = -sin_th * ry;
	  var a10 = sin_th * rx;
	  var a11 = cos_th * ry;
	
	  var cos_th0 = Math.cos(th0);
	  var sin_th0 = Math.sin(th0);
	  var cos_th1 = Math.cos(th1);
	  var sin_th1 = Math.sin(th1);
	
	  var th_half = 0.5 * (th1 - th0);
	  var sin_th_h2 = Math.sin(th_half * 0.5);
	  var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
	  var x1 = cx + cos_th0 - t * sin_th0;
	  var y1 = cy + sin_th0 + t * cos_th0;
	  var x3 = cx + cos_th1;
	  var y3 = cy + sin_th1;
	  var x2 = x3 + t * sin_th1;
	  var y2 = y3 - t * cos_th1;
	
	  return (bezierCache[key] = [
	    a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,
	    a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,
	    a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3
	  ]);
	}
	
	var temp$1 = ['l', 0, 0, 0, 0, 0, 0, 0];
	
	function scale(current, s) {
	  var c = (temp$1[0] = current[0]);
	  if (c === 'a' || c === 'A') {
	    temp$1[1] = s * current[1];
	    temp$1[2] = s * current[2];
	    temp$1[6] = s * current[6];
	    temp$1[7] = s * current[7];
	  } else {
	    for (var i=1, n=current.length; i<n; ++i) {
	      temp$1[i] = s * current[i];
	    }
	  }
	  return temp$1;
	}
	
	var pathRender = function(context, path, l, t, s) {
	  var current, // current instruction
	      previous = null,
	      x = 0, // current x
	      y = 0, // current y
	      controlX = 0, // current control point x
	      controlY = 0, // current control point y
	      tempX,
	      tempY,
	      tempControlX,
	      tempControlY;
	
	  if (l == null) l = 0;
	  if (t == null) t = 0;
	  if (s == null) s = 1;
	
	  if (context.beginPath) context.beginPath();
	
	  for (var i=0, len=path.length; i<len; ++i) {
	    current = path[i];
	    if (s !== 1) current = scale(current, s);
	
	    switch (current[0]) { // first letter
	
	      case 'l': // lineto, relative
	        x += current[1];
	        y += current[2];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'L': // lineto, absolute
	        x = current[1];
	        y = current[2];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'h': // horizontal lineto, relative
	        x += current[1];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'H': // horizontal lineto, absolute
	        x = current[1];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'v': // vertical lineto, relative
	        y += current[1];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'V': // verical lineto, absolute
	        y = current[1];
	        context.lineTo(x + l, y + t);
	        break;
	
	      case 'm': // moveTo, relative
	        x += current[1];
	        y += current[2];
	        context.moveTo(x + l, y + t);
	        break;
	
	      case 'M': // moveTo, absolute
	        x = current[1];
	        y = current[2];
	        context.moveTo(x + l, y + t);
	        break;
	
	      case 'c': // bezierCurveTo, relative
	        tempX = x + current[5];
	        tempY = y + current[6];
	        controlX = x + current[3];
	        controlY = y + current[4];
	        context.bezierCurveTo(
	          x + current[1] + l, // x1
	          y + current[2] + t, // y1
	          controlX + l, // x2
	          controlY + t, // y2
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        break;
	
	      case 'C': // bezierCurveTo, absolute
	        x = current[5];
	        y = current[6];
	        controlX = current[3];
	        controlY = current[4];
	        context.bezierCurveTo(
	          current[1] + l,
	          current[2] + t,
	          controlX + l,
	          controlY + t,
	          x + l,
	          y + t
	        );
	        break;
	
	      case 's': // shorthand cubic bezierCurveTo, relative
	        // transform to absolute x,y
	        tempX = x + current[3];
	        tempY = y + current[4];
	        // calculate reflection of previous control points
	        controlX = 2 * x - controlX;
	        controlY = 2 * y - controlY;
	        context.bezierCurveTo(
	          controlX + l,
	          controlY + t,
	          x + current[1] + l,
	          y + current[2] + t,
	          tempX + l,
	          tempY + t
	        );
	
	        // set control point to 2nd one of this command
	        // the first control point is assumed to be the reflection of
	        // the second control point on the previous command relative
	        // to the current point.
	        controlX = x + current[1];
	        controlY = y + current[2];
	
	        x = tempX;
	        y = tempY;
	        break;
	
	      case 'S': // shorthand cubic bezierCurveTo, absolute
	        tempX = current[3];
	        tempY = current[4];
	        // calculate reflection of previous control points
	        controlX = 2*x - controlX;
	        controlY = 2*y - controlY;
	        context.bezierCurveTo(
	          controlX + l,
	          controlY + t,
	          current[1] + l,
	          current[2] + t,
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        // set control point to 2nd one of this command
	        // the first control point is assumed to be the reflection of
	        // the second control point on the previous command relative
	        // to the current point.
	        controlX = current[1];
	        controlY = current[2];
	
	        break;
	
	      case 'q': // quadraticCurveTo, relative
	        // transform to absolute x,y
	        tempX = x + current[3];
	        tempY = y + current[4];
	
	        controlX = x + current[1];
	        controlY = y + current[2];
	
	        context.quadraticCurveTo(
	          controlX + l,
	          controlY + t,
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        break;
	
	      case 'Q': // quadraticCurveTo, absolute
	        tempX = current[3];
	        tempY = current[4];
	
	        context.quadraticCurveTo(
	          current[1] + l,
	          current[2] + t,
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        controlX = current[1];
	        controlY = current[2];
	        break;
	
	      case 't': // shorthand quadraticCurveTo, relative
	
	        // transform to absolute x,y
	        tempX = x + current[1];
	        tempY = y + current[2];
	
	        if (previous[0].match(/[QqTt]/) === null) {
	          // If there is no previous command or if the previous command was not a Q, q, T or t,
	          // assume the control point is coincident with the current point
	          controlX = x;
	          controlY = y;
	        }
	        else if (previous[0] === 't') {
	          // calculate reflection of previous control points for t
	          controlX = 2 * x - tempControlX;
	          controlY = 2 * y - tempControlY;
	        }
	        else if (previous[0] === 'q') {
	          // calculate reflection of previous control points for q
	          controlX = 2 * x - controlX;
	          controlY = 2 * y - controlY;
	        }
	
	        tempControlX = controlX;
	        tempControlY = controlY;
	
	        context.quadraticCurveTo(
	          controlX + l,
	          controlY + t,
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        controlX = x + current[1];
	        controlY = y + current[2];
	        break;
	
	      case 'T':
	        tempX = current[1];
	        tempY = current[2];
	
	        // calculate reflection of previous control points
	        controlX = 2 * x - controlX;
	        controlY = 2 * y - controlY;
	        context.quadraticCurveTo(
	          controlX + l,
	          controlY + t,
	          tempX + l,
	          tempY + t
	        );
	        x = tempX;
	        y = tempY;
	        break;
	
	      case 'a':
	        drawArc(context, x + l, y + t, [
	          current[1],
	          current[2],
	          current[3],
	          current[4],
	          current[5],
	          current[6] + x + l,
	          current[7] + y + t
	        ]);
	        x += current[6];
	        y += current[7];
	        break;
	
	      case 'A':
	        drawArc(context, x + l, y + t, [
	          current[1],
	          current[2],
	          current[3],
	          current[4],
	          current[5],
	          current[6] + l,
	          current[7] + t
	        ]);
	        x = current[6];
	        y = current[7];
	        break;
	
	      case 'z':
	      case 'Z':
	        context.closePath();
	        break;
	    }
	    previous = current;
	  }
	};
	
	function drawArc(context, x, y, coords) {
	  var seg = segments(
	    coords[5], // end x
	    coords[6], // end y
	    coords[0], // radius x
	    coords[1], // radius y
	    coords[3], // large flag
	    coords[4], // sweep flag
	    coords[2], // rotation
	    x, y
	  );
	  for (var i=0; i<seg.length; ++i) {
	    var bez = bezier(seg[i]);
	    context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
	  }
	}
	
	var tau$2 = 2 * Math.PI;
	var halfSqrt3 = Math.sqrt(3) / 2;
	
	var builtins = {
	  'circle': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2;
	      context.moveTo(r, 0);
	      context.arc(0, 0, r, 0, tau$2);
	    }
	  },
	  'cross': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2,
	          s = r / 2.5;
	      context.moveTo(-r, -s);
	      context.lineTo(-r, s);
	      context.lineTo(-s, s);
	      context.lineTo(-s, r);
	      context.lineTo(s, r);
	      context.lineTo(s, s);
	      context.lineTo(r, s);
	      context.lineTo(r, -s);
	      context.lineTo(s, -s);
	      context.lineTo(s, -r);
	      context.lineTo(-s, -r);
	      context.lineTo(-s, -s);
	      context.closePath();
	    }
	  },
	  'diamond': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2;
	      context.moveTo(-r, 0);
	      context.lineTo(0, -r);
	      context.lineTo(r, 0);
	      context.lineTo(0, r);
	      context.closePath();
	    }
	  },
	  'square': {
	    draw: function(context, size) {
	      var w = Math.sqrt(size),
	          x = -w / 2;
	      context.rect(x, x, w, w);
	    }
	  },
	  'triangle-up': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2,
	          h = halfSqrt3 * r;
	      context.moveTo(0, -h);
	      context.lineTo(-r, h);
	      context.lineTo(r, h);
	      context.closePath();
	    }
	  },
	  'triangle-down': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2,
	          h = halfSqrt3 * r;
	      context.moveTo(0, h);
	      context.lineTo(-r, -h);
	      context.lineTo(r, -h);
	      context.closePath();
	    }
	  },
	  'triangle-right': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2,
	          h = halfSqrt3 * r;
	      context.moveTo(h, 0);
	      context.lineTo(-h, -r);
	      context.lineTo(-h, r);
	      context.closePath();
	    }
	  },
	  'triangle-left': {
	    draw: function(context, size) {
	      var r = Math.sqrt(size) / 2,
	          h = halfSqrt3 * r;
	      context.moveTo(-h, 0);
	      context.lineTo(h, -r);
	      context.lineTo(h, r);
	      context.closePath();
	    }
	  }
	};
	
	function symbols$1(_) {
	  return builtins.hasOwnProperty(_) ? builtins[_] : customSymbol(_);
	}
	
	var custom = {};
	
	function customSymbol(path) {
	  if (!custom.hasOwnProperty(path)) {
	    var parsed = pathParse(path);
	    custom[path] = {
	      draw: function(context, size) {
	        pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
	      }
	    };
	  }
	  return custom[path];
	}
	
	function rectangleX(d) {
	  return d.x;
	}
	
	function rectangleY(d) {
	  return d.y;
	}
	
	function rectangleWidth(d) {
	  return d.width;
	}
	
	function rectangleHeight(d) {
	  return d.height;
	}
	
	function constant$3(_) {
	  return function() { return _; };
	}
	
	var vg_rect = function() {
	  var x = rectangleX,
	      y = rectangleY,
	      width = rectangleWidth,
	      height = rectangleHeight,
	      cornerRadius = constant$3(0),
	      context = null;
	
	  function rectangle(_, x0, y0) {
	    var buffer,
	        x1 = x0 != null ? x0 : +x.call(this, _),
	        y1 = y0 != null ? y0 : +y.call(this, _),
	        w  = +width.call(this, _),
	        h  = +height.call(this, _),
	        cr = +cornerRadius.call(this, _);
	
	    if (!context) context = buffer = path();
	
	    if (cr <= 0) {
	      context.rect(x1, y1, w, h);
	    } else {
	      var x2 = x1 + w,
	          y2 = y1 + h;
	      context.moveTo(x1 + cr, y1);
	      context.lineTo(x2 - cr, y1);
	      context.quadraticCurveTo(x2, y1, x2, y1 + cr);
	      context.lineTo(x2, y2 - cr);
	      context.quadraticCurveTo(x2, y2, x2 - cr, y2);
	      context.lineTo(x1 + cr, y2);
	      context.quadraticCurveTo(x1, y2, x1, y2 - cr);
	      context.lineTo(x1, y1 + cr);
	      context.quadraticCurveTo(x1, y1, x1 + cr, y1);
	      context.closePath();
	    }
	
	    if (buffer) {
	      context = null;
	      return buffer + '' || null;
	    }
	  }
	
	  rectangle.x = function(_) {
	    if (arguments.length) {
	      x = typeof _ === 'function' ? _ : constant$3(+_);
	      return rectangle;
	    } else {
	      return x;
	    }
	  };
	
	  rectangle.y = function(_) {
	    if (arguments.length) {
	      y = typeof _ === 'function' ? _ : constant$3(+_);
	      return rectangle;
	    } else {
	      return y;
	    }
	  };
	
	  rectangle.width = function(_) {
	    if (arguments.length) {
	      width = typeof _ === 'function' ? _ : constant$3(+_);
	      return rectangle;
	    } else {
	      return width;
	    }
	  };
	
	  rectangle.height = function(_) {
	    if (arguments.length) {
	      height = typeof _ === 'function' ? _ : constant$3(+_);
	      return rectangle;
	    } else {
	      return height;
	    }
	  };
	
	  rectangle.cornerRadius = function(_) {
	    if (arguments.length) {
	      cornerRadius = typeof _ === 'function' ? _ : constant$3(+_);
	      return rectangle;
	    } else {
	      return cornerRadius;
	    }
	  };
	
	  rectangle.context = function(_) {
	    if (arguments.length) {
	      context = _ == null ? null : _;
	      return rectangle;
	    } else {
	      return context;
	    }
	  };
	
	  return rectangle;
	};
	
	var pi$2 = Math.PI;
	
	var vg_trail = function() {
	  var x,
	      y,
	      size,
	      defined,
	      context = null,
	      ready, x1, y1, r1;
	
	  function point(x2, y2, w2) {
	    var r2 = w2 / 2;
	
	    if (ready) {
	      var ux = y1 - y2,
	          uy = x2 - x1;
	
	      if (ux || uy) {
	        // get normal vector
	        var ud = Math.sqrt(ux * ux + uy * uy),
	            rx = (ux /= ud) * r1,
	            ry = (uy /= ud) * r1,
	            t = Math.atan2(uy, ux);
	
	        // draw segment
	        context.moveTo(x1 - rx, y1 - ry);
	        context.lineTo(x2 - ux * r2, y2 - uy * r2);
	        context.arc(x2, y2, r2, t - pi$2, t);
	        context.lineTo(x1 + rx, y1 + ry);
	        context.arc(x1, y1, r1, t, t + pi$2);
	      } else {
	        context.arc(x2, y2, r2, 0, 2*pi$2);
	      }
	      context.closePath();
	    } else {
	      ready = 1;
	    }
	    x1 = x2;
	    y1 = y2;
	    r1 = r2;
	  }
	
	  function trail(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;
	
	    if (context == null) context = buffer = path();
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) ready = 0;
	      }
	      if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
	    }
	
	    if (buffer) {
	      context = null;
	      return buffer + '' || null;
	    }
	  }
	
	  trail.x = function(_) {
	    if (arguments.length) {
	      x = _;
	      return trail;
	    } else {
	      return x;
	    }
	  };
	
	  trail.y = function(_) {
	    if (arguments.length) {
	      y = _;
	      return trail;
	    } else {
	      return y;
	    }
	  };
	
	  trail.size = function(_) {
	    if (arguments.length) {
	      size = _;
	      return trail;
	    } else {
	      return size;
	    }
	  };
	
	  trail.defined = function(_) {
	    if (arguments.length) {
	      defined = _;
	      return trail;
	    } else {
	      return defined;
	    }
	  };
	
	  trail.context = function(_) {
	    if (arguments.length) {
	      if (_ == null) {
	        context = null;
	      } else {
	        context = _;
	      }
	      return trail;
	    } else {
	      return context;
	    }
	  };
	
	  return trail;
	};
	
	function x(item)    { return item.x || 0; }
	function y(item)    { return item.y || 0; }
	function w(item)    { return item.width || 0; }
	function ts(item)   { return item.size || 1; }
	function h(item)    { return item.height || 0; }
	function xw(item)   { return (item.x || 0) + (item.width || 0); }
	function yh(item)   { return (item.y || 0) + (item.height || 0); }
	function sa(item)   { return item.startAngle || 0; }
	function ea(item)   { return item.endAngle || 0; }
	function pa(item)   { return item.padAngle || 0; }
	function ir(item)   { return item.innerRadius || 0; }
	function or(item)   { return item.outerRadius || 0; }
	function cr(item)   { return item.cornerRadius || 0; }
	function def(item)  { return !(item.defined === false); }
	function size(item) { return item.size == null ? 64 : item.size; }
	function type$1(item) { return symbols$1(item.shape || 'circle'); }
	
	var arcShape    = d3_arc().startAngle(sa).endAngle(ea).padAngle(pa)
	                          .innerRadius(ir).outerRadius(or).cornerRadius(cr);
	var areavShape  = area$1().x(x).y1(y).y0(yh).defined(def);
	var areahShape  = area$1().y(y).x1(x).x0(xw).defined(def);
	var lineShape   = line$1().x(x).y(y).defined(def);
	var rectShape   = vg_rect().x(x).y(y).width(w).height(h).cornerRadius(cr);
	var symbolShape = d3_symbol().type(type$1).size(size);
	var trailShape  = vg_trail().x(x).y(y).defined(def).size(ts);
	
	function arc$1(context, item) {
	  return arcShape.context(context)(item);
	}
	
	function area(context, items) {
	  var item = items[0],
	      interp = item.interpolate || 'linear';
	  return (item.orient === 'horizontal' ? areahShape : areavShape)
	    .curve(curves(interp, item.orient, item.tension))
	    .context(context)(items);
	}
	
	function line(context, items) {
	  var item = items[0],
	      interp = item.interpolate || 'linear';
	  return lineShape.curve(curves(interp, item.orient, item.tension))
	    .context(context)(items);
	}
	
	function rectangle(context, item, x, y) {
	  return rectShape.context(context)(item, x, y);
	}
	
	function shape(context, item) {
	  return (item.mark.shape || item.shape)
	    .context(context)(item);
	}
	
	function symbol(context, item) {
	  return symbolShape.context(context)(item);
	}
	
	function trail(context, items) {
	  return trailShape.context(context)(items);
	}
	
	var boundStroke = function(bounds, item) {
	  if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
	    bounds.expand(item.strokeWidth != null ? +item.strokeWidth : 1);
	  }
	  return bounds;
	};
	
	var bounds;
	var tau$3 = Math.PI * 2;
	var halfPi$1 = tau$3 / 4;
	var circleThreshold = tau$3 - 1e-8;
	
	function context(_) {
	  bounds = _;
	  return context;
	}
	
	function noop$2() {}
	
	function add$1(x, y) { bounds.add(x, y); }
	
	context.beginPath = noop$2;
	
	context.closePath = noop$2;
	
	context.moveTo = add$1;
	
	context.lineTo = add$1;
	
	context.rect = function(x, y, w, h) {
	  add$1(x, y);
	  add$1(x + w, y + h);
	};
	
	context.quadraticCurveTo = function(x1, y1, x2, y2) {
	  add$1(x1, y1);
	  add$1(x2, y2);
	};
	
	context.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {
	  add$1(x1, y1);
	  add$1(x2, y2);
	  add$1(x3, y3);
	};
	
	context.arc = function(cx, cy, r, sa, ea, ccw) {
	  if (Math.abs(ea - sa) > circleThreshold) {
	    add$1(cx - r, cy - r);
	    add$1(cx + r, cy + r);
	    return;
	  }
	
	  var xmin = Infinity, xmax = -Infinity,
	      ymin = Infinity, ymax = -Infinity,
	      s, i, x, y;
	
	  function update(a) {
	    x = r * Math.cos(a);
	    y = r * Math.sin(a);
	    if (x < xmin) xmin = x;
	    if (x > xmax) xmax = x;
	    if (y < ymin) ymin = y;
	    if (y > ymax) ymax = y;
	  }
	
	  // Sample end points and interior points aligned with 90 degrees
	  update(sa);
	  update(ea);
	
	  if (ea !== sa) {
	    sa = sa % tau$3; if (sa < 0) sa += tau$3;
	    ea = ea % tau$3; if (ea < 0) ea += tau$3;
	
	    if (ea < sa) {
	      ccw = !ccw; // flip direction
	      s = sa; sa = ea; ea = s; // swap end-points
	    }
	
	    if (ccw) {
	      ea -= tau$3;
	      s = sa - (sa % halfPi$1);
	      for (i=0; i<3 && s>ea; ++i, s-=halfPi$1) update(s);
	    } else {
	      s = sa - (sa % halfPi$1) + halfPi$1;
	      for (i=0; i<3 && s<ea; ++i, s=s+halfPi$1) update(s);
	    }
	  }
	
	  add$1(cx + xmin, cy + ymin);
	  add$1(cx + xmax, cy + ymax);
	};
	
	var gradient = function(context, gradient, bounds) {
	  var w = bounds.width(),
	      h = bounds.height(),
	      x1 = bounds.x1 + gradient.x1 * w,
	      y1 = bounds.y1 + gradient.y1 * h,
	      x2 = bounds.x1 + gradient.x2 * w,
	      y2 = bounds.y1 + gradient.y2 * h,
	      stop = gradient.stops,
	      i = 0,
	      n = stop.length,
	      linearGradient = context.createLinearGradient(x1, y1, x2, y2);
	
	  for (; i<n; ++i) {
	    linearGradient.addColorStop(stop[i].offset, stop[i].color);
	  }
	
	  return linearGradient;
	};
	
	var color = function(context, item, value) {
	  return (value.id) ?
	    gradient(context, value, item.bounds) :
	    value;
	};
	
	var fill = function(context, item, opacity) {
	  opacity *= (item.fillOpacity==null ? 1 : item.fillOpacity);
	  if (opacity > 0) {
	    context.globalAlpha = opacity;
	    context.fillStyle = color(context, item, item.fill);
	    return true;
	  } else {
	    return false;
	  }
	};
	
	var Empty$1 = [];
	
	var stroke = function(context, item, opacity) {
	  var lw = (lw = item.strokeWidth) != null ? lw : 1;
	
	  if (lw <= 0) return false;
	
	  opacity *= (item.strokeOpacity==null ? 1 : item.strokeOpacity);
	  if (opacity > 0) {
	    context.globalAlpha = opacity;
	    context.strokeStyle = color(context, item, item.stroke);
	
	    context.lineWidth = lw;
	    context.lineCap = item.strokeCap || 'butt';
	    context.lineJoin = item.strokeJoin || 'miter';
	    context.miterLimit = item.strokeMiterLimit || 10;
	
	    if (context.setLineDash) {
	      context.setLineDash(item.strokeDash || Empty$1);
	      context.lineDashOffset = item.strokeDashOffset || 0;
	    }
	    return true;
	  } else {
	    return false;
	  }
	};
	
	function compare$1(a, b) {
	  return a.zindex - b.zindex || a.index - b.index;
	}
	
	function zorder(scene) {
	  if (!scene.zdirty) return scene.zitems;
	
	  var items = scene.items,
	      output = [], item, i, n;
	
	  for (i=0, n=items.length; i<n; ++i) {
	    item = items[i];
	    item.index = i;
	    if (item.zindex) output.push(item);
	  }
	
	  scene.zdirty = false;
	  return scene.zitems = output.sort(compare$1);
	}
	
	function visit(scene, visitor) {
	  var items = scene.items, i, n;
	  if (!items || !items.length) return;
	
	  var zitems = zorder(scene);
	
	  if (zitems && zitems.length) {
	    for (i=0, n=items.length; i<n; ++i) {
	      if (!items[i].zindex) visitor(items[i]);
	    }
	    items = zitems;
	  }
	
	  for (i=0, n=items.length; i<n; ++i) {
	    visitor(items[i]);
	  }
	}
	
	function pickVisit(scene, visitor) {
	  var items = scene.items, hit, i;
	  if (!items || !items.length) return null;
	
	  var zitems = zorder(scene);
	  if (zitems && zitems.length) items = zitems;
	
	  for (i=items.length; --i >= 0;) {
	    if (hit = visitor(items[i])) return hit;
	  }
	
	  if (items === zitems) {
	    for (items=scene.items, i=items.length; --i >= 0;) {
	      if (!items[i].zindex) {
	        if (hit = visitor(items[i])) return hit;
	      }
	    }
	  }
	
	  return null;
	}
	
	function drawAll(path) {
	  return function(context, scene, bounds) {
	    visit(scene, function(item) {
	      if (!bounds || bounds.intersects(item.bounds)) {
	        drawPath(path, context, item, item);
	      }
	    });
	  };
	}
	
	function drawOne(path) {
	  return function(context, scene, bounds) {
	    if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
	      drawPath(path, context, scene.items[0], scene.items);
	    }
	  };
	}
	
	function drawPath(path, context, item, items) {
	  var opacity = item.opacity == null ? 1 : item.opacity;
	  if (opacity === 0) return;
	
	  if (path(context, items)) return;
	
	  if (item.fill && fill(context, item, opacity)) {
	    context.fill();
	  }
	
	  if (item.stroke && stroke(context, item, opacity)) {
	    context.stroke();
	  }
	}
	
	var trueFunc = function() { return true; };
	
	function pick(test) {
	  if (!test) test = trueFunc;
	
	  return function(context, scene, x, y, gx, gy) {
	    if (context.pixelRatio > 1) {
	      x *= context.pixelRatio;
	      y *= context.pixelRatio;
	    }
	
	    return pickVisit(scene, function(item) {
	      var b = item.bounds;
	      // first hit test against bounding box
	      if ((b && !b.contains(gx, gy)) || !b) return;
	      // if in bounding box, perform more careful test
	      if (test(context, item, x, y, gx, gy)) return item;
	    });
	  };
	}
	
	function hitPath(path, filled) {
	  return function(context, o, x, y) {
	    var item = Array.isArray(o) ? o[0] : o,
	        fill = (filled == null) ? item.fill : filled,
	        stroke = item.stroke && context.isPointInStroke, lw, lc;
	
	    if (stroke) {
	      lw = item.strokeWidth;
	      lc = item.strokeCap;
	      context.lineWidth = lw != null ? lw : 1;
	      context.lineCap   = lc != null ? lc : 'butt';
	    }
	
	    return path(context, o) ? false :
	      (fill && context.isPointInPath(x, y)) ||
	      (stroke && context.isPointInStroke(x, y));
	  };
	}
	
	function pickPath(path) {
	  return pick(hitPath(path));
	}
	
	var translate = function(x, y) {
	  return 'translate(' + x + ',' + y + ')';
	};
	
	var translateItem = function(item) {
	  return translate(item.x || 0, item.y || 0);
	};
	
	var markItemPath = function(type, shape) {
	
	  function attr(emit, item) {
	    emit('transform', translateItem(item));
	    emit('d', shape(null, item));
	  }
	
	  function bound(bounds, item) {
	    shape(context(bounds), item);
	    return boundStroke(bounds, item)
	      .translate(item.x || 0, item.y || 0);
	  }
	
	  function draw(context$$1, item) {
	    var x = item.x || 0,
	        y = item.y || 0;
	    context$$1.translate(x, y);
	    context$$1.beginPath();
	    shape(context$$1, item);
	    context$$1.translate(-x, -y);
	  }
	
	  return {
	    type:   type,
	    tag:    'path',
	    nested: false,
	    attr:   attr,
	    bound:  bound,
	    draw:   drawAll(draw),
	    pick:   pickPath(draw)
	  };
	
	};
	
	var arc = markItemPath('arc', arc$1);
	
	var markMultiItemPath = function(type, shape) {
	
	  function attr(emit, item) {
	    var items = item.mark.items;
	    if (items.length) emit('d', shape(null, items));
	  }
	
	  function bound(bounds, mark) {
	    var items = mark.items;
	    if (items.length === 0) {
	      return bounds;
	    } else {
	      shape(context(bounds), items);
	      return boundStroke(bounds, items[0]);
	    }
	  }
	
	  function draw(context$$1, items) {
	    context$$1.beginPath();
	    shape(context$$1, items);
	  }
	
	  var hit = hitPath(draw);
	
	  function pick$$1(context$$1, scene, x, y, gx, gy) {
	    var items = scene.items,
	        b = scene.bounds;
	
	    if (!items || !items.length || b && !b.contains(gx, gy)) {
	      return null;
	    }
	
	    if (context$$1.pixelRatio > 1) {
	      x *= context$$1.pixelRatio;
	      y *= context$$1.pixelRatio;
	    }
	    return hit(context$$1, items, x, y) ? items[0] : null;
	  }
	
	  return {
	    type:   type,
	    tag:    'path',
	    nested: true,
	    attr:   attr,
	    bound:  bound,
	    draw:   drawOne(draw),
	    pick:   pick$$1
	  };
	
	};
	
	var area$2 = markMultiItemPath('area', area);
	
	var clip_id = 1;
	
	function resetSVGClipId() {
	  clip_id = 1;
	}
	
	var clip = function(renderer, item, size) {
	  var defs = renderer._defs,
	      id = item.clip_id || (item.clip_id = 'clip' + clip_id++),
	      c = defs.clipping[id] || (defs.clipping[id] = {id: id});
	  c.width = size.width || 0;
	  c.height = size.height || 0;
	  return 'url(#' + id + ')';
	};
	
	var StrokeOffset = 0.5;
	
	function attr(emit, item) {
	  emit('transform', translateItem(item));
	}
	
	function background(emit, item) {
	  var offset = item.stroke ? StrokeOffset : 0;
	  emit('class', 'background');
	  emit('d', rectangle(null, item, offset, offset));
	}
	
	function foreground(emit, item, renderer) {
	  var url = item.clip ? clip(renderer, item, item) : null;
	  emit('clip-path', url);
	}
	
	function bound(bounds, group) {
	  if (!group.clip && group.items) {
	    var items = group.items;
	    for (var j=0, m=items.length; j<m; ++j) {
	      bounds.union(items[j].bounds);
	    }
	  }
	
	  if (group.clip || group.width || group.height) {
	    boundStroke(
	      bounds.add(0, 0).add(group.width || 0, group.height || 0),
	      group
	    );
	  }
	
	  return bounds.translate(group.x || 0, group.y || 0);
	}
	
	function draw(context, scene, bounds) {
	  var renderer = this;
	
	  visit(scene, function(group) {
	    var gx = group.x || 0,
	        gy = group.y || 0,
	        w = group.width || 0,
	        h = group.height || 0,
	        offset, opacity;
	
	    // setup graphics context
	    context.save();
	    context.translate(gx, gy);
	
	    // draw group background
	    if (group.stroke || group.fill) {
	      opacity = group.opacity == null ? 1 : group.opacity;
	      if (opacity > 0) {
	        context.beginPath();
	        offset = group.stroke ? StrokeOffset : 0;
	        rectangle(context, group, offset, offset);
	        if (group.fill && fill(context, group, opacity)) {
	          context.fill();
	        }
	        if (group.stroke && stroke(context, group, opacity)) {
	          context.stroke();
	        }
	      }
	    }
	
	    // set clip and bounds
	    if (group.clip) {
	      context.beginPath();
	      context.rect(0, 0, w, h);
	      context.clip();
	    }
	    if (bounds) bounds.translate(-gx, -gy);
	
	    // draw group contents
	    visit(group, function(item) {
	      renderer.draw(context, item, bounds);
	    });
	
	    // restore graphics context
	    if (bounds) bounds.translate(gx, gy);
	    context.restore();
	  });
	}
	
	function pick$1(context, scene, x, y, gx, gy) {
	  if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
	    return null;
	  }
	
	  var handler = this;
	
	  return pickVisit(scene, function(group) {
	    var hit, dx, dy, b;
	
	    // first hit test against bounding box
	    // if a group is clipped, that should be handled by the bounds check.
	    b = group.bounds;
	    if (b && !b.contains(gx, gy)) return;
	
	    // passed bounds check, so test sub-groups
	    dx = (group.x || 0);
	    dy = (group.y || 0);
	
	    context.save();
	    context.translate(dx, dy);
	
	    dx = gx - dx;
	    dy = gy - dy;
	
	    hit = pickVisit(group, function(mark) {
	      return pickMark(mark, dx, dy)
	        ? handler.pick(mark, x, y, dx, dy)
	        : null;
	    });
	
	    context.restore();
	    if (hit) return hit;
	
	    hit = scene.interactive !== false
	      && (group.fill || group.stroke)
	      && dx >= 0
	      && dx <= group.width
	      && dy >= 0
	      && dy <= group.height;
	
	    return hit ? group : null;
	  });
	}
	
	function pickMark(mark, x, y) {
	  return (mark.interactive !== false || mark.marktype === 'group')
	    && mark.bounds && mark.bounds.contains(x, y);
	}
	
	var group = {
	  type:       'group',
	  tag:        'g',
	  nested:     false,
	  attr:       attr,
	  bound:      bound,
	  draw:       draw,
	  pick:       pick$1,
	  background: background,
	  foreground: foreground
	};
	
	function getImage(item, renderer) {
	  var image = item.image;
	  if (!image || image.url !== item.url) {
	    image = {loaded: false, width: 0, height: 0};
	    renderer.loadImage(item.url).then(function(image) {
	      item.image = image;
	      item.image.url = item.url;
	    });
	  }
	  return image;
	}
	
	function imageXOffset(align, w) {
	  return align === 'center' ? w / 2 : align === 'right' ? w : 0;
	}
	
	function imageYOffset(baseline, h) {
	  return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
	}
	
	function attr$1(emit, item, renderer) {
	  var image = getImage(item, renderer),
	      x = item.x || 0,
	      y = item.y || 0,
	      w = (item.width != null ? item.width : image.width) || 0,
	      h = (item.height != null ? item.height : image.height) || 0,
	      a = item.aspect === false ? 'none' : 'xMidYMid';
	
	  x -= imageXOffset(item.align, w);
	  y -= imageYOffset(item.baseline, h);
	
	  emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');
	  emit('transform', translate(x, y));
	  emit('width', w);
	  emit('height', h);
	  emit('preserveAspectRatio', a);
	}
	
	function bound$1(bounds, item) {
	  var image = item.image,
	      x = item.x || 0,
	      y = item.y || 0,
	      w = (item.width != null ? item.width : (image && image.width)) || 0,
	      h = (item.height != null ? item.height : (image && image.height)) || 0;
	
	  x -= imageXOffset(item.align, w);
	  y -= imageYOffset(item.baseline, h);
	
	  return bounds.set(x, y, x + w, y + h);
	}
	
	function draw$1(context, scene, bounds) {
	  var renderer = this;
	
	  visit(scene, function(item) {
	    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
	
	    var image = getImage(item, renderer),
	        x = item.x || 0,
	        y = item.y || 0,
	        w = (item.width != null ? item.width : image.width) || 0,
	        h = (item.height != null ? item.height : image.height) || 0,
	        opacity, ar0, ar1, t;
	
	    x -= imageXOffset(item.align, w);
	    y -= imageYOffset(item.baseline, h);
	
	    if (item.aspect !== false) {
	      ar0 = image.width / image.height;
	      ar1 = item.width / item.height;
	      if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
	        if (ar1 < ar0) {
	          t = w / ar0;
	          y += (h - t) / 2;
	          h = t;
	        } else {
	          t = h * ar0;
	          x += (w - t) / 2;
	          w = t;
	        }
	      }
	    }
	
	    if (image.loaded) {
	      context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
	      context.drawImage(image, x, y, w, h);
	    }
	  });
	}
	
	var image$1 = {
	  type:     'image',
	  tag:      'image',
	  nested:   false,
	  attr:     attr$1,
	  bound:    bound$1,
	  draw:     draw$1,
	  pick:     pick(),
	  get:      getImage,
	  xOffset:  imageXOffset,
	  yOffset:  imageYOffset
	};
	
	var line$2 = markMultiItemPath('line', line);
	
	function attr$2(emit, item) {
	  emit('transform', translateItem(item));
	  emit('d', item.path);
	}
	
	function path$2(context$$1, item) {
	  var path = item.path;
	  if (path == null) return true;
	
	  var cache = item.pathCache;
	  if (!cache || cache.path !== path) {
	    (item.pathCache = cache = pathParse(path)).path = path;
	  }
	  pathRender(context$$1, cache, item.x, item.y);
	}
	
	function bound$2(bounds, item) {
	  return path$2(context(bounds), item)
	    ? bounds.set(0, 0, 0, 0)
	    : boundStroke(bounds, item);
	}
	
	var path$3 = {
	  type:   'path',
	  tag:    'path',
	  nested: false,
	  attr:   attr$2,
	  bound:  bound$2,
	  draw:   drawAll(path$2),
	  pick:   pickPath(path$2)
	};
	
	function attr$3(emit, item) {
	  emit('d', rectangle(null, item));
	}
	
	function bound$3(bounds, item) {
	  var x, y;
	  return boundStroke(bounds.set(
	    x = item.x || 0,
	    y = item.y || 0,
	    (x + item.width) || 0,
	    (y + item.height) || 0
	  ), item);
	}
	
	function draw$2(context, item) {
	  context.beginPath();
	  rectangle(context, item);
	}
	
	var rect = {
	  type:   'rect',
	  tag:    'path',
	  nested: false,
	  attr:   attr$3,
	  bound:  bound$3,
	  draw:   drawAll(draw$2),
	  pick:   pickPath(draw$2)
	};
	
	function attr$4(emit, item) {
	  emit('transform', translateItem(item));
	  emit('x2', item.x2 != null ? item.x2 - (item.x||0) : 0);
	  emit('y2', item.y2 != null ? item.y2 - (item.y||0) : 0);
	}
	
	function bound$4(bounds, item) {
	  var x1, y1;
	  return boundStroke(bounds.set(
	    x1 = item.x || 0,
	    y1 = item.y || 0,
	    item.x2 != null ? item.x2 : x1,
	    item.y2 != null ? item.y2 : y1
	  ), item);
	}
	
	function path$4(context, item, opacity) {
	  var x1, y1, x2, y2;
	
	  if (item.stroke && stroke(context, item, opacity)) {
	    x1 = item.x || 0;
	    y1 = item.y || 0;
	    x2 = item.x2 != null ? item.x2 : x1;
	    y2 = item.y2 != null ? item.y2 : y1;
	    context.beginPath();
	    context.moveTo(x1, y1);
	    context.lineTo(x2, y2);
	    return true;
	  }
	  return false;
	}
	
	function draw$3(context, scene, bounds) {
	  visit(scene, function(item) {
	    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
	    var opacity = item.opacity == null ? 1 : item.opacity;
	    if (opacity && path$4(context, item, opacity)) {
	      context.stroke();
	    }
	  });
	}
	
	function hit(context, item, x, y) {
	  if (!context.isPointInStroke) return false;
	  return path$4(context, item, 1) && context.isPointInStroke(x, y);
	}
	
	var rule = {
	  type:   'rule',
	  tag:    'line',
	  nested: false,
	  attr:   attr$4,
	  bound:  bound$4,
	  draw:   draw$3,
	  pick:   pick(hit)
	};
	
	var shape$1 = markItemPath('shape', shape);
	
	var symbol$1 = markItemPath('symbol', symbol);
	
	var context$1;
	var fontHeight;
	
	var textMetrics = {
	  height: height,
	  measureWidth: measureWidth,
	  estimateWidth: estimateWidth,
	  width: estimateWidth,
	  canvas: useCanvas
	};
	
	useCanvas(true);
	
	// make dumb, simple estimate if no canvas is available
	function estimateWidth(item) {
	  fontHeight = height(item);
	  return estimate(textValue(item));
	}
	
	function estimate(text) {
	  return ~~(0.8 * text.length * fontHeight);
	}
	
	// measure text width if canvas is available
	function measureWidth(item) {
	  context$1.font = font(item);
	  return measure$1(textValue(item));
	}
	
	function measure$1(text) {
	  return context$1.measureText(text).width;
	}
	
	function height(item) {
	  return item.fontSize != null ? item.fontSize : 11;
	}
	
	function useCanvas(use) {
	  context$1 = use && (context$1 = canvas(1,1)) ? context$1.getContext('2d') : null;
	  textMetrics.width = context$1 ? measureWidth : estimateWidth;
	}
	
	function textValue(item) {
	  var s = item.text;
	  if (s == null) {
	    return '';
	  } else {
	    return item.limit > 0 ? truncate$1(item) : s + '';
	  }
	}
	
	function truncate$1(item) {
	  var limit = +item.limit,
	      text = item.text + '',
	      width;
	
	  if (context$1) {
	    context$1.font = font(item);
	    width = measure$1;
	  } else {
	    fontHeight = height(item);
	    width = estimate;
	  }
	
	  if (width(text) < limit) return text;
	
	  var ellipsis = item.ellipsis || '\u2026',
	      rtl = item.dir === 'rtl',
	      lo = 0,
	      hi = text.length, mid;
	
	  limit -= width(ellipsis);
	
	  if (rtl) {
	    while (lo < hi) {
	      mid = (lo + hi >>> 1);
	      if (width(text.slice(mid)) > limit) lo = mid + 1;
	      else hi = mid;
	    }
	    return ellipsis + text.slice(lo);
	  } else {
	    while (lo < hi) {
	      mid = 1 + (lo + hi >>> 1);
	      if (width(text.slice(0, mid)) < limit) lo = mid;
	      else hi = mid - 1;
	    }
	    return text.slice(0, lo) + ellipsis;
	  }
	}
	
	
	function font(item, quote) {
	  var font = item.font;
	  if (quote && font) {
	    font = String(font).replace(/"/g, '\'');
	  }
	  return '' +
	    (item.fontStyle ? item.fontStyle + ' ' : '') +
	    (item.fontVariant ? item.fontVariant + ' ' : '') +
	    (item.fontWeight ? item.fontWeight + ' ' : '') +
	    height(item) + 'px ' +
	    (font || 'sans-serif');
	}
	
	function offset(item) {
	  // perform our own font baseline calculation
	  // why? not all browsers support SVG 1.1 'alignment-baseline' :(
	  var baseline = item.baseline,
	      h = height(item);
	  return Math.round(
	    baseline === 'top'    ?  0.79*h :
	    baseline === 'middle' ?  0.30*h :
	    baseline === 'bottom' ? -0.21*h : 0
	  );
	}
	
	var textAlign = {
	  'left':   'start',
	  'center': 'middle',
	  'right':  'end'
	};
	
	var tempBounds = new Bounds();
	
	function attr$5(emit, item) {
	  var dx = item.dx || 0,
	      dy = (item.dy || 0) + offset(item),
	      x = item.x || 0,
	      y = item.y || 0,
	      a = item.angle || 0,
	      r = item.radius || 0, t;
	
	  if (r) {
	    t = (item.theta || 0) - Math.PI/2;
	    x += r * Math.cos(t);
	    y += r * Math.sin(t);
	  }
	
	  emit('text-anchor', textAlign[item.align] || 'start');
	
	  if (a) {
	    t = translate(x, y) + ' rotate('+a+')';
	    if (dx || dy) t += ' ' + translate(dx, dy);
	  } else {
	    t = translate(x + dx, y + dy);
	  }
	  emit('transform', t);
	}
	
	function bound$5(bounds, item, noRotate) {
	  var h = textMetrics.height(item),
	      a = item.align,
	      r = item.radius || 0,
	      x = item.x || 0,
	      y = item.y || 0,
	      dx = item.dx || 0,
	      dy = (item.dy || 0) + offset(item) - Math.round(0.8*h), // use 4/5 offset
	      w, t;
	
	  if (r) {
	    t = (item.theta || 0) - Math.PI/2;
	    x += r * Math.cos(t);
	    y += r * Math.sin(t);
	  }
	
	  // horizontal alignment
	  w = textMetrics.width(item);
	  if (a === 'center') {
	    dx -= (w / 2);
	  } else if (a === 'right') {
	    dx -= w;
	  } else {
	    // left by default, do nothing
	  }
	
	  bounds.set(dx+=x, dy+=y, dx+w, dy+h);
	  if (item.angle && !noRotate) {
	    bounds.rotate(item.angle*Math.PI/180, x, y);
	  }
	  return bounds.expand(noRotate || !w ? 0 : 1);
	}
	
	function draw$4(context, scene, bounds) {
	  visit(scene, function(item) {
	    var opacity, x, y, r, t, str;
	    if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
	    if (!(str = textValue(item))) return; // get text string
	
	    opacity = item.opacity == null ? 1 : item.opacity;
	    if (opacity === 0) return;
	
	    context.font = font(item);
	    context.textAlign = item.align || 'left';
	
	    x = item.x || 0;
	    y = item.y || 0;
	    if ((r = item.radius)) {
	      t = (item.theta || 0) - Math.PI/2;
	      x += r * Math.cos(t);
	      y += r * Math.sin(t);
	    }
	
	    if (item.angle) {
	      context.save();
	      context.translate(x, y);
	      context.rotate(item.angle * Math.PI/180);
	      x = y = 0; // reset x, y
	    }
	    x += (item.dx || 0);
	    y += (item.dy || 0) + offset(item);
	
	    if (item.fill && fill(context, item, opacity)) {
	      context.fillText(str, x, y);
	    }
	    if (item.stroke && stroke(context, item, opacity)) {
	      context.strokeText(str, x, y);
	    }
	    if (item.angle) context.restore();
	  });
	}
	
	function hit$1(context, item, x, y, gx, gy) {
	  if (item.fontSize <= 0) return false;
	  if (!item.angle) return true; // bounds sufficient if no rotation
	
	  // project point into space of unrotated bounds
	  var b = bound$5(tempBounds, item, true),
	      a = -item.angle * Math.PI / 180,
	      cos = Math.cos(a),
	      sin = Math.sin(a),
	      ix = item.x,
	      iy = item.y,
	      px = cos*gx - sin*gy + (ix - ix*cos + iy*sin),
	      py = sin*gx + cos*gy + (iy - ix*sin - iy*cos);
	
	  return b.contains(px, py);
	}
	
	var text$1 = {
	  type:   'text',
	  tag:    'text',
	  nested: false,
	  attr:   attr$5,
	  bound:  bound$5,
	  draw:   draw$4,
	  pick:   pick(hit$1)
	};
	
	var trail$1 = markMultiItemPath('trail', trail);
	
	var marks = {
	  arc:     arc,
	  area:    area$2,
	  group:   group,
	  image:   image$1,
	  line:    line$2,
	  path:    path$3,
	  rect:    rect,
	  rule:    rule,
	  shape:   shape$1,
	  symbol:  symbol$1,
	  text:    text$1,
	  trail:   trail$1
	};
	
	var boundItem$1 = function(item, func, opt) {
	  var type = marks[item.mark.marktype],
	      bound = func || type.bound;
	  if (type.nested) item = item.mark;
	
	  return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
	};
	
	var DUMMY = {mark: null};
	
	var boundMark = function(mark, bounds, opt) {
	  var type  = marks[mark.marktype],
	      bound = type.bound,
	      items = mark.items,
	      hasItems = items && items.length,
	      i, n, item, b;
	
	  if (type.nested) {
	    if (hasItems) {
	      item = items[0];
	    } else {
	      // no items, fake it
	      DUMMY.mark = mark;
	      item = DUMMY;
	    }
	    b = boundItem$1(item, bound, opt);
	    bounds = bounds && bounds.union(b) || b;
	    return bounds;
	  }
	
	  bounds = bounds
	    || mark.bounds && mark.bounds.clear()
	    || new Bounds();
	
	  if (hasItems) {
	    for (i=0, n=items.length; i<n; ++i) {
	      bounds.union(boundItem$1(items[i], bound, opt));
	    }
	  }
	
	  return mark.bounds = bounds;
	};
	
	var keys$1 = [
	  'marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex',
	  'x', 'y', 'width', 'height', 'align', 'baseline',             // layout
	  'fill', 'fillOpacity', 'opacity',                             // fill
	  'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap',        // stroke
	  'strokeDash', 'strokeDashOffset',                             // stroke dash
	  'startAngle', 'endAngle', 'innerRadius', 'outerRadius',       // arc
	  'cornerRadius', 'padAngle',                                   // arc, rect
	  'interpolate', 'tension', 'orient', 'defined',                // area, line
	  'url',                                                        // image
	  'path',                                                       // path
	  'x2', 'y2',                                                   // rule
	  'size', 'shape',                                              // symbol
	  'text', 'angle', 'theta', 'radius', 'dx', 'dy',               // text
	  'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant'  // font
	];
	
	function sceneToJSON(scene, indent) {
	  return JSON.stringify(scene, keys$1, indent);
	}
	
	function sceneFromJSON(json) {
	  var scene = (typeof json === 'string' ? JSON.parse(json) : json);
	  return initialize(scene);
	}
	
	function initialize(scene) {
	  var type = scene.marktype,
	      items = scene.items,
	      parent, i, n;
	
	  if (items) {
	    for (i=0, n=items.length; i<n; ++i) {
	      parent = type ? 'mark' : 'group';
	      items[i][parent] = scene;
	      if (items[i].zindex) items[i][parent].zdirty = true;
	      if ('group' === (type || parent)) initialize(items[i]);
	    }
	  }
	
	  if (type) boundMark(scene);
	  return scene;
	}
	
	function Scenegraph(scene) {
	  if (arguments.length) {
	    this.root = sceneFromJSON(scene);
	  } else {
	    this.root = createMark({
	      marktype: 'group',
	      name: 'root',
	      role: 'frame'
	    });
	    this.root.items = [new GroupItem(this.root)];
	  }
	}
	
	var prototype$39 = Scenegraph.prototype;
	
	prototype$39.toJSON = function(indent) {
	  return sceneToJSON(this.root, indent || 0);
	};
	
	prototype$39.mark = function(markdef, group, index) {
	  group = group || this.root.items[0];
	  var mark = createMark(markdef, group);
	  group.items[index] = mark;
	  if (mark.zindex) mark.group.zdirty = true;
	  return mark;
	};
	
	function createMark(def, group) {
	  return {
	    bounds:      new Bounds(),
	    clip:        !!def.clip,
	    group:       group,
	    interactive: def.interactive === false ? false : true,
	    items:       [],
	    marktype:    def.marktype,
	    name:        def.name || undefined,
	    role:        def.role || undefined,
	    zindex:      def.zindex || 0
	  };
	}
	
	// create a new DOM element
	function domCreate(doc, tag, ns) {
	  if (!doc && typeof document !== 'undefined' && document.createElement) {
	    doc = document;
	  }
	  return doc
	    ? (ns ? doc.createElementNS(ns, tag) : doc.createElement(tag))
	    : null;
	}
	
	// find first child element with matching tag
	function domFind(el, tag) {
	  tag = tag.toLowerCase();
	  var nodes = el.childNodes, i = 0, n = nodes.length;
	  for (; i<n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
	    return nodes[i];
	  }
	}
	
	// retrieve child element at given index
	// create & insert if doesn't exist or if tags do not match
	function domChild(el, index, tag, ns) {
	  var a = el.childNodes[index], b;
	  if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
	    b = a || null;
	    a = domCreate(el.ownerDocument, tag, ns);
	    el.insertBefore(a, b);
	  }
	  return a;
	}
	
	// remove all child elements at or above the given index
	function domClear(el, index) {
	  var nodes = el.childNodes,
	      curr = nodes.length;
	  while (curr > index) el.removeChild(nodes[--curr]);
	  return el;
	}
	
	// generate css class name for mark
	function cssClass(mark) {
	  return 'mark-' + mark.marktype
	    + (mark.role ? ' role-' + mark.role : '')
	    + (mark.name ? ' ' + mark.name : '');
	}
	
	function Handler(customLoader) {
	  this._active = null;
	  this._handlers = {};
	  this._loader = customLoader || loader();
	}
	
	var prototype$40 = Handler.prototype;
	
	prototype$40.initialize = function(el, origin, obj) {
	  this._el = el;
	  this._obj = obj || null;
	  return this.origin(origin);
	};
	
	prototype$40.element = function() {
	  return this._el;
	};
	
	prototype$40.origin = function(origin) {
	  this._origin = origin || [0, 0];
	  return this;
	};
	
	prototype$40.scene = function(scene) {
	  if (!arguments.length) return this._scene;
	  this._scene = scene;
	  return this;
	};
	
	// add an event handler
	// subclasses should override
	prototype$40.on = function(/*type, handler*/) {};
	
	// remove an event handler
	// subclasses should override
	prototype$40.off = function(/*type, handler*/) {};
	
	// return an array with all registered event handlers
	prototype$40.handlers = function() {
	  var h = this._handlers, a = [], k;
	  for (k in h) { a.push.apply(a, h[k]); }
	  return a;
	};
	
	prototype$40.eventName = function(name) {
	  var i = name.indexOf('.');
	  return i < 0 ? name : name.slice(0,i);
	};
	
	prototype$40.handleHref = function(event, item, href) {
	  this._loader
	    .sanitize(href, {context:'href'})
	    .then(function(opt) {
	      var e = new MouseEvent(event.type, event),
	          a = domCreate(null, 'a');
	      for (var name in opt) a.setAttribute(name, opt[name]);
	      a.dispatchEvent(e);
	    })
	    .catch(function() { /* do nothing */ });
	};
	
	prototype$40.handleTooltip = function(event, item, tooltipText) {
	  this._el.setAttribute('title', tooltipText || '');
	};
	
	/**
	 * Create a new Renderer instance.
	 * @param {object} [loader] - Optional loader instance for
	 *   image and href URL sanitization. If not specified, a
	 *   standard loader instance will be generated.
	 * @constructor
	 */
	function Renderer(loader) {
	  this._el = null;
	  this._bgcolor = null;
	  this._loader = new ResourceLoader(loader);
	}
	
	var prototype$41 = Renderer.prototype;
	
	/**
	 * Initialize a new Renderer instance.
	 * @param {DOMElement} el - The containing DOM element for the display.
	 * @param {number} width - The coordinate width of the display, in pixels.
	 * @param {number} height - The coordinate height of the display, in pixels.
	 * @param {Array<number>} origin - The origin of the display, in pixels.
	 *   The coordinate system will be translated to this point.
	 * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
	 *   the width and height to determine the final pixel size.
	 * @return {Renderer} - This renderer instance;
	 */
	prototype$41.initialize = function(el, width, height, origin, scaleFactor) {
	  this._el = el;
	  return this.resize(width, height, origin, scaleFactor);
	};
	
	/**
	 * Returns the parent container element for a visualization.
	 * @return {DOMElement} - The containing DOM element.
	 */
	prototype$41.element = function() {
	  return this._el;
	};
	
	/**
	 * Returns the scene element (e.g., canvas or SVG) of the visualization
	 * Subclasses must override if the first child is not the scene element.
	 * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
	 */
	prototype$41.scene = function() {
	  return this._el && this._el.firstChild;
	};
	
	/**
	 * Get / set the background color.
	 */
	prototype$41.background = function(bgcolor) {
	  if (arguments.length === 0) return this._bgcolor;
	  this._bgcolor = bgcolor;
	  return this;
	};
	
	/**
	 * Resize the display.
	 * @param {number} width - The new coordinate width of the display, in pixels.
	 * @param {number} height - The new coordinate height of the display, in pixels.
	 * @param {Array<number>} origin - The new origin of the display, in pixels.
	 *   The coordinate system will be translated to this point.
	 * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
	 *   the width and height to determine the final pixel size.
	 * @return {Renderer} - This renderer instance;
	 */
	prototype$41.resize = function(width, height, origin, scaleFactor) {
	  this._width = width;
	  this._height = height;
	  this._origin = origin || [0, 0];
	  this._scale = scaleFactor || 1;
	  return this;
	};
	
	/**
	 * Report a dirty item whose bounds should be redrawn.
	 * This base class method does nothing. Subclasses that perform
	 * incremental should implement this method.
	 * @param {Item} item - The dirty item whose bounds should be redrawn.
	 */
	prototype$41.dirty = function(/*item*/) {
	};
	
	/**
	 * Render an input scenegraph, potentially with a set of dirty items.
	 * This method will perform an immediate rendering with available resources.
	 * The renderer may also need to perform image loading to perform a complete
	 * render. This process can lead to asynchronous re-rendering of the scene
	 * after this method returns. To receive notification when rendering is
	 * complete, use the renderAsync method instead.
	 * @param {object} scene - The root mark of a scenegraph to render.
	 * @return {Renderer} - This renderer instance.
	 */
	prototype$41.render = function(scene) {
	  var r = this;
	
	  // bind arguments into a render call, and cache it
	  // this function may be subsequently called for async redraw
	  r._call = function() { r._render(scene); };
	
	  // invoke the renderer
	  r._call();
	
	  // clear the cached call for garbage collection
	  // async redraws will stash their own copy
	  r._call = null;
	
	  return r;
	};
	
	/**
	 * Internal rendering method. Renderer subclasses should override this
	 * method to actually perform rendering.
	 * @param {object} scene - The root mark of a scenegraph to render.
	 */
	prototype$41._render = function(/*scene*/) {
	  // subclasses to override
	};
	
	/**
	 * Asynchronous rendering method. Similar to render, but returns a Promise
	 * that resolves when all rendering is completed. Sometimes a renderer must
	 * perform image loading to get a complete rendering. The returned
	 * Promise will not resolve until this process completes.
	 * @param {object} scene - The root mark of a scenegraph to render.
	 * @return {Promise} - A Promise that resolves when rendering is complete.
	 */
	prototype$41.renderAsync = function(scene) {
	  var r = this.render(scene);
	  return this._ready
	    ? this._ready.then(function() { return r; })
	    : Promise.resolve(r);
	};
	
	/**
	 * Internal method for asynchronous resource loading.
	 * Proxies method calls to the ImageLoader, and tracks loading
	 * progress to invoke a re-render once complete.
	 * @param {string} method - The method name to invoke on the ImageLoader.
	 * @param {string} uri - The URI for the requested resource.
	 * @return {Promise} - A Promise that resolves to the requested resource.
	 */
	prototype$41._load = function(method, uri) {
	  var r = this,
	      p = r._loader[method](uri);
	
	  if (!r._ready) {
	    // re-render the scene when loading completes
	    var call = r._call;
	    r._ready = r._loader.ready()
	      .then(function(redraw) {
	        if (redraw) call();
	        r._ready = null;
	      });
	  }
	
	  return p;
	};
	
	/**
	 * Sanitize a URL to include as a hyperlink in the rendered scene.
	 * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
	 * image loading progress and invokes a re-render once complete.
	 * @param {string} uri - The URI string to sanitize.
	 * @return {Promise} - A Promise that resolves to the sanitized URL.
	 */
	prototype$41.sanitizeURL = function(uri) {
	  return this._load('sanitizeURL', uri);
	};
	
	/**
	 * Requests an image to include in the rendered scene.
	 * This method proxies a call to ImageLoader.loadImage, but also tracks
	 * image loading progress and invokes a re-render once complete.
	 * @param {string} uri - The URI string of the image.
	 * @return {Promise} - A Promise that resolves to the loaded Image.
	 */
	prototype$41.loadImage = function(uri) {
	  return this._load('loadImage', uri);
	};
	
	var point$4 = function(event, el) {
	  var rect = el.getBoundingClientRect();
	  return [
	    event.clientX - rect.left - (el.clientLeft || 0),
	    event.clientY - rect.top - (el.clientTop || 0)
	  ];
	};
	
	function CanvasHandler(loader) {
	  Handler.call(this, loader);
	  this._down = null;
	  this._touch = null;
	  this._first = true;
	}
	
	var prototype$42 = inherits(CanvasHandler, Handler);
	
	prototype$42.initialize = function(el, origin, obj) {
	  // add event listeners
	  var canvas = this._canvas = el && domFind(el, 'canvas');
	  if (canvas) {
	    var that = this;
	    this.events.forEach(function(type) {
	      canvas.addEventListener(type, function(evt) {
	        if (prototype$42[type]) {
	          prototype$42[type].call(that, evt);
	        } else {
	          that.fire(type, evt);
	        }
	      });
	    });
	  }
	
	  return Handler.prototype.initialize.call(this, el, origin, obj);
	};
	
	prototype$42.canvas = function() {
	  return this._canvas;
	};
	
	// retrieve the current canvas context
	prototype$42.context = function() {
	  return this._canvas.getContext('2d');
	};
	
	// supported events
	prototype$42.events = [
	  'keydown',
	  'keypress',
	  'keyup',
	  'dragenter',
	  'dragleave',
	  'dragover',
	  'mousedown',
	  'mouseup',
	  'mousemove',
	  'mouseout',
	  'mouseover',
	  'click',
	  'dblclick',
	  'wheel',
	  'mousewheel',
	  'touchstart',
	  'touchmove',
	  'touchend'
	];
	
	// to keep old versions of firefox happy
	prototype$42.DOMMouseScroll = function(evt) {
	  this.fire('mousewheel', evt);
	};
	
	function move(moveEvent, overEvent, outEvent) {
	  return function(evt) {
	    var a = this._active,
	        p = this.pickEvent(evt);
	
	    if (p === a) {
	      // active item and picked item are the same
	      this.fire(moveEvent, evt); // fire move
	    } else {
	      // active item and picked item are different
	      if (!a || !a.exit) {
	        // fire out for prior active item
	        // suppress if active item was removed from scene
	        this.fire(outEvent, evt);
	      }
	      this._active = p;          // set new active item
	      this.fire(overEvent, evt); // fire over for new active item
	      this.fire(moveEvent, evt); // fire move for new active item
	    }
	  };
	}
	
	function inactive(type) {
	  return function(evt) {
	    this.fire(type, evt);
	    this._active = null;
	  };
	}
	
	prototype$42.mousemove = move('mousemove', 'mouseover', 'mouseout');
	prototype$42.dragover  = move('dragover', 'dragenter', 'dragleave');
	
	prototype$42.mouseout  = inactive('mouseout');
	prototype$42.dragleave = inactive('dragleave');
	
	prototype$42.mousedown = function(evt) {
	  this._down = this._active;
	  this.fire('mousedown', evt);
	};
	
	prototype$42.click = function(evt) {
	  if (this._down === this._active) {
	    this.fire('click', evt);
	    this._down = null;
	  }
	};
	
	prototype$42.touchstart = function(evt) {
	  this._touch = this.pickEvent(evt.changedTouches[0]);
	
	  if (this._first) {
	    this._active = this._touch;
	    this._first = false;
	  }
	
	  this.fire('touchstart', evt, true);
	};
	
	prototype$42.touchmove = function(evt) {
	  this.fire('touchmove', evt, true);
	};
	
	prototype$42.touchend = function(evt) {
	  this.fire('touchend', evt, true);
	  this._touch = null;
	};
	
	// fire an event
	prototype$42.fire = function(type, evt, touch) {
	  var a = touch ? this._touch : this._active,
	      h = this._handlers[type], i, len;
	
	  // if hyperlinked, handle link first
	  if (type === 'click' && a && a.href) {
	    this.handleHref(evt, a, a.href);
	  } else if ((type === 'mouseover' || type === 'mouseout') && a && a.tooltip) {
	    this.handleTooltip(evt, a, type === 'mouseover' ? a.tooltip : null);
	  }
	
	  // invoke all registered handlers
	  if (h) {
	    evt.vegaType = type;
	    for (i=0, len=h.length; i<len; ++i) {
	      h[i].handler.call(this._obj, evt, a);
	    }
	  }
	};
	
	// add an event handler
	prototype$42.on = function(type, handler) {
	  var name = this.eventName(type),
	      h = this._handlers;
	  (h[name] || (h[name] = [])).push({
	    type: type,
	    handler: handler
	  });
	  return this;
	};
	
	// remove an event handler
	prototype$42.off = function(type, handler) {
	  var name = this.eventName(type),
	      h = this._handlers[name], i;
	  if (!h) return;
	  for (i=h.length; --i>=0;) {
	    if (h[i].type !== type) continue;
	    if (!handler || h[i].handler === handler) h.splice(i, 1);
	  }
	  return this;
	};
	
	prototype$42.pickEvent = function(evt) {
	  var p = point$4(evt, this._canvas),
	      o = this._origin;
	  return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
	};
	
	// find the scenegraph item at the current mouse position
	// x, y -- the absolute x, y mouse coordinates on the canvas element
	// gx, gy -- the relative coordinates within the current group
	prototype$42.pick = function(scene, x, y, gx, gy) {
	  var g = this.context(),
	      mark = marks[scene.marktype];
	  return mark.pick.call(this, g, scene, x, y, gx, gy);
	};
	
	var clip$1 = function(context, scene) {
	  var group = scene.group;
	  context.save();
	  context.beginPath();
	  context.rect(0, 0, group.width || 0, group.height || 0);
	  context.clip();
	};
	
	var devicePixelRatio = typeof window !== 'undefined'
	  ? window.devicePixelRatio || 1 : 1;
	
	var resize = function(canvas, width, height, origin, scaleFactor) {
	  var inDOM = typeof HTMLElement !== 'undefined'
	    && canvas instanceof HTMLElement
	    && canvas.parentNode != null;
	
	  var context = canvas.getContext('2d'),
	      ratio = inDOM ? devicePixelRatio : scaleFactor;
	
	  canvas.width = width * ratio;
	  canvas.height = height * ratio;
	
	  if (inDOM && ratio !== 1) {
	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }
	
	  context.pixelRatio = ratio;
	  context.setTransform(
	    ratio, 0, 0, ratio,
	    ratio * origin[0],
	    ratio * origin[1]
	  );
	
	  return canvas;
	};
	
	function CanvasRenderer(loader) {
	  Renderer.call(this, loader);
	  this._redraw = false;
	  this._dirty = new Bounds();
	}
	
	var prototype$43 = inherits(CanvasRenderer, Renderer);
	var base = Renderer.prototype;
	var tempBounds$1 = new Bounds();
	
	prototype$43.initialize = function(el, width, height, origin, scaleFactor) {
	  this._canvas = canvas(1, 1); // instantiate a small canvas
	  if (el) {
	    domClear(el, 0).appendChild(this._canvas);
	    this._canvas.setAttribute('class', 'marks');
	  }
	  // this method will invoke resize to size the canvas appropriately
	  return base.initialize.call(this, el, width, height, origin, scaleFactor);
	};
	
	prototype$43.resize = function(width, height, origin, scaleFactor) {
	  base.resize.call(this, width, height, origin, scaleFactor);
	  resize(this._canvas, this._width, this._height, this._origin, this._scale);
	  this._redraw = true;
	  return this;
	};
	
	prototype$43.canvas = function() {
	  return this._canvas;
	};
	
	prototype$43.context = function() {
	  return this._canvas ? this._canvas.getContext('2d') : null;
	};
	
	prototype$43.dirty = function(item) {
	  var b = translate$1(item.bounds, item.mark.group);
	  this._dirty.union(b);
	};
	
	function clipToBounds(g, b, origin) {
	  // expand bounds by 1 pixel, then round to pixel boundaries
	  b.expand(1).round();
	
	  // to avoid artifacts translate if origin has fractional pixels
	  b.translate(-(origin[0] % 1), -(origin[1] % 1));
	
	  // set clipping path
	  g.beginPath();
	  g.rect(b.x1, b.y1, b.width(), b.height());
	  g.clip();
	
	  return b;
	}
	
	function translate$1(bounds, group) {
	  if (group == null) return bounds;
	  var b = tempBounds$1.clear().union(bounds);
	  for (; group != null; group = group.mark.group) {
	    b.translate(group.x || 0, group.y || 0);
	  }
	  return b;
	}
	
	prototype$43._render = function(scene) {
	  var g = this.context(),
	      o = this._origin,
	      w = this._width,
	      h = this._height,
	      b = this._dirty;
	
	  // setup
	  g.save();
	  if (this._redraw || b.empty()) {
	    this._redraw = false;
	    b = null;
	  } else {
	    b = clipToBounds(g, b, o);
	  }
	
	  this.clear(-o[0], -o[1], w, h);
	
	  // render
	  this.draw(g, scene, b);
	
	  // takedown
	  g.restore();
	
	  this._dirty.clear();
	  return this;
	};
	
	prototype$43.draw = function(ctx, scene, bounds) {
	  var mark = marks[scene.marktype];
	  if (scene.clip) clip$1(ctx, scene);
	  mark.draw.call(this, ctx, scene, bounds);
	  if (scene.clip) ctx.restore();
	};
	
	prototype$43.clear = function(x, y, w, h) {
	  var g = this.context();
	  g.clearRect(x, y, w, h);
	  if (this._bgcolor != null) {
	    g.fillStyle = this._bgcolor;
	    g.fillRect(x, y, w, h);
	  }
	};
	
	function SVGHandler(loader) {
	  Handler.call(this, loader);
	  var h = this;
	  h._hrefHandler = listener(h, function(evt, item) {
	    if (item && item.href) h.handleHref(evt, item, item.href);
	  });
	  h._tooltipHandler = listener(h, function(evt, item) {
	    if (item && item.tooltip) {
	      h.handleTooltip(evt, item, evt.type === 'mouseover' ? item.tooltip : null);
	    }
	  });
	}
	
	var prototype$44 = inherits(SVGHandler, Handler);
	
	prototype$44.initialize = function(el, origin, obj) {
	  var svg = this._svg;
	  if (svg) {
	    svg.removeEventListener('click', this._hrefHandler);
	    svg.removeEventListener('mouseover', this._tooltipHandler);
	    svg.removeEventListener('mouseout', this._tooltipHandler);
	  }
	  this._svg = svg = el && domFind(el, 'svg');
	  if (svg) {
	    svg.addEventListener('click', this._hrefHandler);
	    svg.addEventListener('mouseover', this._tooltipHandler);
	    svg.addEventListener('mouseout', this._tooltipHandler);
	  }
	  return Handler.prototype.initialize.call(this, el, origin, obj);
	};
	
	prototype$44.svg = function() {
	  return this._svg;
	};
	
	// wrap an event listener for the SVG DOM
	function listener(context, handler) {
	  return function(evt) {
	    var target = evt.target,
	        item = target.__data__;
	    evt.vegaType = evt.type;
	    item = Array.isArray(item) ? item[0] : item;
	    handler.call(context._obj, evt, item);
	  };
	}
	
	// add an event handler
	prototype$44.on = function(type, handler) {
	  var name = this.eventName(type),
	      h = this._handlers,
	      x = {
	        type:     type,
	        handler:  handler,
	        listener: listener(this, handler)
	      };
	
	  (h[name] || (h[name] = [])).push(x);
	
	  if (this._svg) {
	    this._svg.addEventListener(name, x.listener);
	  }
	
	  return this;
	};
	
	// remove an event handler
	prototype$44.off = function(type, handler) {
	  var name = this.eventName(type),
	      svg = this._svg,
	      h = this._handlers[name], i;
	
	  if (!h) return;
	
	  for (i=h.length; --i>=0;) {
	    if (h[i].type === type && !handler || h[i].handler === handler) {
	      if (this._svg) {
	        svg.removeEventListener(name, h[i].listener);
	      }
	      h.splice(i, 1);
	    }
	  }
	
	  return this;
	};
	
	// generate string for an opening xml tag
	// tag: the name of the xml tag
	// attr: hash of attribute name-value pairs to include
	// raw: additional raw string to include in tag markup
	function openTag(tag, attr, raw) {
	  var s = '<' + tag, key, val;
	  if (attr) {
	    for (key in attr) {
	      val = attr[key];
	      if (val != null) {
	        s += ' ' + key + '="' + val + '"';
	      }
	    }
	  }
	  if (raw) s += ' ' + raw;
	  return s + '>';
	}
	
	// generate string for closing xml tag
	// tag: the name of the xml tag
	function closeTag(tag) {
	  return '</' + tag + '>';
	}
	
	var metadata = {
	  'version': '1.1',
	  'xmlns': 'http://www.w3.org/2000/svg',
	  'xmlns:xlink': 'http://www.w3.org/1999/xlink'
	};
	
	var styles = {
	  'fill':             'fill',
	  'fillOpacity':      'fill-opacity',
	  'stroke':           'stroke',
	  'strokeOpacity':    'stroke-opacity',
	  'strokeWidth':      'stroke-width',
	  'strokeCap':        'stroke-linecap',
	  'strokeJoin':       'stroke-linejoin',
	  'strokeDash':       'stroke-dasharray',
	  'strokeDashOffset': 'stroke-dashoffset',
	  'strokeMiterLimit': 'stroke-miterlimit',
	  'opacity':          'opacity'
	};
	
	var styleProperties = Object.keys(styles);
	
	var ns = metadata.xmlns;
	
	function SVGRenderer(loader) {
	  Renderer.call(this, loader);
	  this._dirtyID = 1;
	  this._dirty = [];
	  this._svg = null;
	  this._root = null;
	  this._defs = null;
	}
	
	var prototype$45 = inherits(SVGRenderer, Renderer);
	var base$1 = Renderer.prototype;
	
	prototype$45.initialize = function(el, width, height, padding) {
	  if (el) {
	    this._svg = domChild(el, 0, 'svg', ns);
	    this._svg.setAttribute('class', 'marks');
	    domClear(el, 1);
	    // set the svg root group
	    this._root = domChild(this._svg, 0, 'g', ns);
	    domClear(this._svg, 1);
	  }
	
	  // create the svg definitions cache
	  this._defs = {
	    gradient: {},
	    clipping: {}
	  };
	
	  // set background color if defined
	  this.background(this._bgcolor);
	
	  return base$1.initialize.call(this, el, width, height, padding);
	};
	
	prototype$45.background = function(bgcolor) {
	  if (arguments.length && this._svg) {
	    this._svg.style.setProperty('background-color', bgcolor);
	  }
	  return base$1.background.apply(this, arguments);
	};
	
	prototype$45.resize = function(width, height, origin, scaleFactor) {
	  base$1.resize.call(this, width, height, origin, scaleFactor);
	
	  if (this._svg) {
	    this._svg.setAttribute('width', this._width * this._scale);
	    this._svg.setAttribute('height', this._height * this._scale);
	    this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);
	    this._root.setAttribute('transform', 'translate(' + this._origin + ')');
	  }
	
	  this._dirty = [];
	
	  return this;
	};
	
	prototype$45.svg = function() {
	  if (!this._svg) return null;
	
	  var attr = {
	    class:   'marks',
	    width:   this._width * this._scale,
	    height:  this._height * this._scale,
	    viewBox: '0 0 ' + this._width + ' ' + this._height
	  };
	  for (var key$$1 in metadata) {
	    attr[key$$1] = metadata[key$$1];
	  }
	
	  var bg = !this._bgcolor ? ''
	    : (openTag('rect', {
	        width:  this._width,
	        height: this._height,
	        style:  'fill: ' + this._bgcolor + ';'
	      }) + closeTag('rect'));
	
	  return openTag('svg', attr) + bg + this._svg.innerHTML + closeTag('svg');
	};
	
	
	// -- Render entry point --
	
	prototype$45._render = function(scene) {
	  // perform spot updates and re-render markup
	  if (this._dirtyCheck()) {
	    if (this._dirtyAll) this._resetDefs();
	    this.draw(this._root, scene);
	    domClear(this._root, 1);
	  }
	
	  this.updateDefs();
	
	  this._dirty = [];
	  ++this._dirtyID;
	
	  return this;
	};
	
	// -- Manage SVG definitions ('defs') block --
	
	prototype$45.updateDefs = function() {
	  var svg = this._svg,
	      defs = this._defs,
	      el = defs.el,
	      index = 0, id$$1;
	
	  for (id$$1 in defs.gradient) {
	    if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));
	    updateGradient(el, defs.gradient[id$$1], index++);
	  }
	
	  for (id$$1 in defs.clipping) {
	    if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));
	    updateClipping(el, defs.clipping[id$$1], index++);
	  }
	
	  // clean-up
	  if (el) {
	    if (index === 0) {
	      svg.removeChild(el);
	      defs.el = null;
	    } else {
	      domClear(el, index);
	    }
	  }
	};
	
	function updateGradient(el, grad, index) {
	  var i, n, stop;
	
	  el = domChild(el, index, 'linearGradient', ns);
	  el.setAttribute('id', grad.id);
	  el.setAttribute('x1', grad.x1);
	  el.setAttribute('x2', grad.x2);
	  el.setAttribute('y1', grad.y1);
	  el.setAttribute('y2', grad.y2);
	
	  for (i=0, n=grad.stops.length; i<n; ++i) {
	    stop = domChild(el, i, 'stop', ns);
	    stop.setAttribute('offset', grad.stops[i].offset);
	    stop.setAttribute('stop-color', grad.stops[i].color);
	  }
	  domClear(el, i);
	}
	
	function updateClipping(el, clip$$1, index) {
	  var rect;
	
	  el = domChild(el, index, 'clipPath', ns);
	  el.setAttribute('id', clip$$1.id);
	  rect = domChild(el, 0, 'rect', ns);
	  rect.setAttribute('x', 0);
	  rect.setAttribute('y', 0);
	  rect.setAttribute('width', clip$$1.width);
	  rect.setAttribute('height', clip$$1.height);
	}
	
	prototype$45._resetDefs = function() {
	  var def = this._defs;
	  def.gradient = {};
	  def.clipping = {};
	};
	
	
	// -- Manage rendering of items marked as dirty --
	
	prototype$45.dirty = function(item) {
	  if (item.dirty !== this._dirtyID) {
	    item.dirty = this._dirtyID;
	    this._dirty.push(item);
	  }
	};
	
	prototype$45.isDirty = function(item) {
	  return this._dirtyAll
	    || !item._svg
	    || item.dirty === this._dirtyID;
	};
	
	prototype$45._dirtyCheck = function() {
	  this._dirtyAll = true;
	  var items = this._dirty;
	  if (!items.length) return true;
	
	  var id$$1 = ++this._dirtyID,
	      item, mark, type, mdef, i, n, o;
	
	  for (i=0, n=items.length; i<n; ++i) {
	    item = items[i];
	    mark = item.mark;
	
	    if (mark.marktype !== type) {
	      // memoize mark instance lookup
	      type = mark.marktype;
	      mdef = marks[type];
	    }
	
	    if (mark.zdirty && mark.dirty !== id$$1) {
	      this._dirtyAll = false;
	      mark.dirty = id$$1;
	      dirtyParents(mark.group, id$$1);
	    }
	
	    if (item.exit) { // EXIT
	      if (mdef.nested && mark.items.length) {
	        // if nested mark with remaining points, update instead
	        o = mark.items[0];
	        if (o._svg) this._update(mdef, o._svg, o);
	      } else if (item._svg) {
	        // otherwise remove from DOM
	        o = item._svg.parentNode;
	        if (o) o.removeChild(item._svg);
	      }
	      item._svg = null;
	      continue;
	    }
	
	    item = (mdef.nested ? mark.items[0] : item);
	    if (item._update === id$$1) continue; // already visited
	
	    if (!item._svg || !item._svg.ownerSVGElement) {
	      // ENTER
	      this._dirtyAll = false;
	      dirtyParents(item, id$$1);
	    } else {
	      // IN-PLACE UPDATE
	      this._update(mdef, item._svg, item);
	    }
	    item._update = id$$1;
	  }
	  return !this._dirtyAll;
	};
	
	function dirtyParents(item, id$$1) {
	  for (; item && item.dirty !== id$$1; item=item.mark.group) {
	    item.dirty = id$$1;
	    if (item.mark && item.mark.dirty !== id$$1) {
	      item.mark.dirty = id$$1;
	    } else return;
	  }
	}
	
	
	// -- Construct & maintain scenegraph to SVG mapping ---
	
	// Draw a mark container.
	prototype$45.draw = function(el, scene, prev) {
	  if (!this.isDirty(scene)) return scene._svg;
	
	  var renderer = this,
	      mdef = marks[scene.marktype],
	      events = scene.interactive === false ? 'none' : null,
	      isGroup = mdef.tag === 'g',
	      sibling = null,
	      i = 0,
	      parent;
	
	  parent = bind(scene, el, prev, 'g');
	  parent.setAttribute('class', cssClass(scene));
	  if (!isGroup && events) {
	    parent.style.setProperty('pointer-events', events);
	  }
	  if (scene.clip) {
	    parent.setAttribute('clip-path', clip(renderer, scene, scene.group));
	  }
	
	  function process(item) {
	    var dirty = renderer.isDirty(item),
	        node = bind(item, parent, sibling, mdef.tag);
	
	    if (dirty) {
	      renderer._update(mdef, node, item);
	      if (isGroup) recurse(renderer, node, item);
	    }
	
	    sibling = node;
	    ++i;
	  }
	
	  if (mdef.nested) {
	    if (scene.items.length) process(scene.items[0]);
	  } else {
	    visit(scene, process);
	  }
	
	  domClear(parent, i);
	  return parent;
	};
	
	// Recursively process group contents.
	function recurse(renderer, el, group) {
	  el = el.lastChild;
	  var prev, idx = 0;
	
	  visit(group, function(item) {
	    prev = renderer.draw(el, item, prev);
	    ++idx;
	  });
	
	  // remove any extraneous DOM elements
	  domClear(el, 1 + idx);
	}
	
	// Bind a scenegraph item to an SVG DOM element.
	// Create new SVG elements as needed.
	function bind(item, el, sibling, tag) {
	  var node = item._svg, doc;
	
	  // create a new dom node if needed
	  if (!node) {
	    doc = el.ownerDocument;
	    node = domCreate(doc, tag, ns);
	    item._svg = node;
	
	    if (item.mark) {
	      node.__data__ = item;
	      node.__values__ = {fill: 'default'};
	
	      // if group, create background and foreground elements
	      if (tag === 'g') {
	        var bg = domCreate(doc, 'path', ns);
	        bg.setAttribute('class', 'background');
	        node.appendChild(bg);
	        bg.__data__ = item;
	
	        var fg = domCreate(doc, 'g', ns);
	        node.appendChild(fg);
	        fg.__data__ = item;
	      }
	    }
	  }
	
	  if (doc || node.previousSibling !== sibling || !sibling) {
	    el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
	  }
	
	  return node;
	}
	
	
	// -- Set attributes & styles on SVG elements ---
	
	var element = null;
	var values$1 = null;  // temp var for current values hash
	
	// Extra configuration for certain mark types
	var mark_extras = {
	  group: function(mdef, el, item) {
	    values$1 = el.__values__; // use parent's values hash
	
	    element = el.childNodes[1];
	    mdef.foreground(emit, item, this);
	
	    element = el.childNodes[0];
	    mdef.background(emit, item, this);
	
	    var value = item.mark.interactive === false ? 'none' : null;
	    if (value !== values$1.events) {
	      element.style.setProperty('pointer-events', value);
	      values$1.events = value;
	    }
	  },
	  text: function(mdef, el, item) {
	    var str = textValue(item);
	    if (str !== values$1.text) {
	      el.textContent = str;
	      values$1.text = str;
	    }
	    str = font(item);
	    if (str !== values$1.font) {
	      el.style.setProperty('font', str);
	      values$1.font = str;
	    }
	  }
	};
	
	prototype$45._update = function(mdef, el, item) {
	  // set dom element and values cache
	  // provides access to emit method
	  element = el;
	  values$1 = el.__values__;
	
	  // apply svg attributes
	  mdef.attr(emit, item, this);
	
	  // some marks need special treatment
	  var extra = mark_extras[mdef.type];
	  if (extra) extra.call(this, mdef, el, item);
	
	  // apply svg css styles
	  // note: element may be modified by 'extra' method
	  this.style(element, item);
	};
	
	function emit(name, value, ns) {
	  // early exit if value is unchanged
	  if (value === values$1[name]) return;
	
	  if (value != null) {
	    // if value is provided, update DOM attribute
	    if (ns) {
	      element.setAttributeNS(ns, name, value);
	    } else {
	      element.setAttribute(name, value);
	    }
	  } else {
	    // else remove DOM attribute
	    if (ns) {
	      element.removeAttributeNS(ns, name);
	    } else {
	      element.removeAttribute(name);
	    }
	  }
	
	  // note current value for future comparison
	  values$1[name] = value;
	}
	
	prototype$45.style = function(el, o) {
	  if (o == null) return;
	  var i, n, prop, name, value;
	
	  for (i=0, n=styleProperties.length; i<n; ++i) {
	    prop = styleProperties[i];
	    value = o[prop];
	    if (value === values$1[prop]) continue;
	
	    name = styles[prop];
	    if (value == null) {
	      if (name === 'fill') {
	        el.style.setProperty(name, 'none');
	      } else {
	        el.style.removeProperty(name);
	      }
	    } else {
	      if (value.id) {
	        // ensure definition is included
	        this._defs.gradient[value.id] = value;
	        value = 'url(' + href() + '#' + value.id + ')';
	      }
	      el.style.setProperty(name, value+'');
	    }
	
	    values$1[prop] = value;
	  }
	};
	
	function href() {
	  var loc;
	  return typeof window === 'undefined' ? ''
	    : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length)
	    : loc.href;
	}
	
	function SVGStringRenderer(loader) {
	  Renderer.call(this, loader);
	
	  this._text = {
	    head: '',
	    bg:   '',
	    root: '',
	    foot: '',
	    defs: '',
	    body: ''
	  };
	
	  this._defs = {
	    gradient: {},
	    clipping: {}
	  };
	}
	
	var prototype$46 = inherits(SVGStringRenderer, Renderer);
	var base$2 = Renderer.prototype;
	
	prototype$46.resize = function(width, height, origin, scaleFactor) {
	  base$2.resize.call(this, width, height, origin, scaleFactor);
	  var o = this._origin,
	      t = this._text;
	
	  var attr = {
	    class:   'marks',
	    width:   this._width * this._scale,
	    height:  this._height * this._scale,
	    viewBox: '0 0 ' + this._width + ' ' + this._height
	  };
	  for (var key$$1 in metadata) {
	    attr[key$$1] = metadata[key$$1];
	  }
	
	  t.head = openTag('svg', attr);
	
	  var bg = this._bgcolor;
	  if (bg === 'transparent' || bg === 'none') bg = null;
	
	  if (bg) {
	    t.bg = openTag('rect', {
	      width:  this._width,
	      height: this._height,
	      style:  'fill: ' + bg + ';'
	    }) + closeTag('rect');
	  } else {
	    t.bg = '';
	  }
	
	  t.root = openTag('g', {
	    transform: 'translate(' + o + ')'
	  });
	
	  t.foot = closeTag('g') + closeTag('svg');
	
	  return this;
	};
	
	prototype$46.background = function() {
	  var rv = base$2.background.apply(this, arguments);
	  if (arguments.length && this._text.head) {
	    this.resize(this._width, this._height, this._origin, this._scale);
	  }
	  return rv;
	};
	
	prototype$46.svg = function() {
	  var t = this._text;
	  return t.head + t.bg + t.defs + t.root + t.body + t.foot;
	};
	
	prototype$46._render = function(scene) {
	  this._text.body = this.mark(scene);
	  this._text.defs = this.buildDefs();
	  return this;
	};
	
	prototype$46.buildDefs = function() {
	  var all = this._defs,
	      defs = '',
	      i, id$$1, def, stops;
	
	  for (id$$1 in all.gradient) {
	    def = all.gradient[id$$1];
	    stops = def.stops;
	
	    defs += openTag('linearGradient', {
	      id: id$$1,
	      x1: def.x1,
	      x2: def.x2,
	      y1: def.y1,
	      y2: def.y2
	    });
	
	    for (i=0; i<stops.length; ++i) {
	      defs += openTag('stop', {
	        offset: stops[i].offset,
	        'stop-color': stops[i].color
	      }) + closeTag('stop');
	    }
	
	    defs += closeTag('linearGradient');
	  }
	
	  for (id$$1 in all.clipping) {
	    def = all.clipping[id$$1];
	
	    defs += openTag('clipPath', {id: id$$1});
	
	    defs += openTag('rect', {
	      x: 0,
	      y: 0,
	      width: def.width,
	      height: def.height
	    }) + closeTag('rect');
	
	    defs += closeTag('clipPath');
	  }
	
	  return (defs.length > 0) ? openTag('defs') + defs + closeTag('defs') : '';
	};
	
	var object$1;
	
	function emit$1(name, value, ns, prefixed) {
	  object$1[prefixed || name] = value;
	}
	
	prototype$46.attributes = function(attr, item) {
	  object$1 = {};
	  attr(emit$1, item, this);
	  return object$1;
	};
	
	prototype$46.href = function(item) {
	  var that = this,
	      href = item.href,
	      attr;
	
	  if (href) {
	    if (attr = that._hrefs && that._hrefs[href]) {
	      return attr;
	    } else {
	      that.sanitizeURL(href).then(function(attr) {
	        // rewrite to use xlink namespace
	        // note that this will be deprecated in SVG 2.0
	        attr['xlink:href'] = attr.href;
	        attr.href = null;
	        (that._hrefs || (that._hrefs = {}))[href] = attr;
	      });
	    }
	  }
	  return null;
	};
	
	prototype$46.mark = function(scene) {
	  var renderer = this,
	      mdef = marks[scene.marktype],
	      tag  = mdef.tag,
	      defs = this._defs,
	      str = '',
	      style;
	
	  if (tag !== 'g' && scene.interactive === false) {
	    style = 'style="pointer-events: none;"';
	  }
	
	  // render opening group tag
	  str += openTag('g', {
	    'class': cssClass(scene),
	    'clip-path': scene.clip ? clip(renderer, scene, scene.group) : null
	  }, style);
	
	  // render contained elements
	  function process(item) {
	    var href = renderer.href(item);
	    if (href) str += openTag('a', href);
	
	    style = (tag !== 'g') ? applyStyles(item, scene, tag, defs) : null;
	    str += openTag(tag, renderer.attributes(mdef.attr, item), style);
	
	    if (tag === 'text') {
	      str += escape_text(textValue(item));
	    } else if (tag === 'g') {
	      str += openTag('path', renderer.attributes(mdef.background, item),
	        applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');
	
	      str += openTag('g', renderer.attributes(mdef.foreground, item))
	        + renderer.markGroup(item)
	        + closeTag('g');
	    }
	
	    str += closeTag(tag);
	    if (href) str += closeTag('a');
	  }
	
	  if (mdef.nested) {
	    if (scene.items && scene.items.length) process(scene.items[0]);
	  } else {
	    visit(scene, process);
	  }
	
	  // render closing group tag
	  return str + closeTag('g');
	};
	
	prototype$46.markGroup = function(scene) {
	  var renderer = this,
	      str = '';
	
	  visit(scene, function(item) {
	    str += renderer.mark(item);
	  });
	
	  return str;
	};
	
	function applyStyles(o, mark, tag, defs) {
	  if (o == null) return '';
	  var i, n, prop, name, value, s = '';
	
	  if (tag === 'bgrect' && mark.interactive === false) {
	    s += 'pointer-events: none; ';
	  }
	
	  if (tag === 'text') {
	    s += 'font: ' + font(o) + '; ';
	  }
	
	  for (i=0, n=styleProperties.length; i<n; ++i) {
	    prop = styleProperties[i];
	    name = styles[prop];
	    value = o[prop];
	
	    if (value == null) {
	      if (name === 'fill') {
	        s += 'fill: none; ';
	      }
	    } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {
	      // transparent is not a legal SVG value, so map to none instead
	      s += name + ': none; ';
	    } else {
	      if (value.id) {
	        // ensure definition is included
	        defs.gradient[value.id] = value;
	        value = 'url(#' + value.id + ')';
	      }
	      s += name + ': ' + value + '; ';
	    }
	  }
	
	  return s ? 'style="' + s.trim() + '"' : null;
	}
	
	function escape_text(s) {
	  return s.replace(/&/g, '&amp;')
	          .replace(/</g, '&lt;')
	          .replace(/>/g, '&gt;');
	}
	
	var Canvas = 'canvas';
	var PNG = 'png';
	var SVG = 'svg';
	var None$1 = 'none';
	
	var RenderType = {
	  Canvas: Canvas,
	  PNG:    PNG,
	  SVG:    SVG,
	  None:   None$1
	};
	
	var modules = {};
	
	modules[Canvas] = modules[PNG] = {
	  renderer: CanvasRenderer,
	  headless: CanvasRenderer,
	  handler:  CanvasHandler
	};
	
	modules[SVG] = {
	  renderer: SVGRenderer,
	  headless: SVGStringRenderer,
	  handler:  SVGHandler
	};
	
	modules[None$1] = {};
	
	function renderModule(name, _) {
	  name = String(name || '').toLowerCase();
	  if (arguments.length > 1) {
	    modules[name] = _;
	    return this;
	  } else {
	    return modules[name];
	  }
	}
	
	var TOLERANCE = 1e-9;
	
	function sceneEqual(a, b, key$$1) {
	  return (a === b) ? true
	    : (key$$1 === 'path') ? pathEqual(a, b)
	    : (a instanceof Date && b instanceof Date) ? +a === +b
	    : (isNumber(a) && isNumber(b)) ? Math.abs(a - b) <= TOLERANCE
	    : (!a || !b || !isObject(a) && !isObject(b)) ? a == b
	    : (a == null || b == null) ? false
	    : objectEqual(a, b);
	}
	
	function pathEqual(a, b) {
	  return sceneEqual(pathParse(a), pathParse(b));
	}
	
	function objectEqual(a, b) {
	  var ka = Object.keys(a),
	      kb = Object.keys(b),
	      key$$1, i;
	
	  if (ka.length !== kb.length) return false;
	
	  ka.sort();
	  kb.sort();
	
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) return false;
	  }
	
	  for (i = ka.length - 1; i >= 0; i--) {
	    key$$1 = ka[i];
	    if (!sceneEqual(a[key$$1], b[key$$1], key$$1)) return false;
	  }
	
	  return typeof a === typeof b;
	}
	
	/**
	 * Calculate bounding boxes for scenegraph items.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {object} params.mark - The scenegraph mark instance to bound.
	 */
	function Bound(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$36 = inherits(Bound, Transform);
	var temp = new Bounds();
	
	prototype$36.transform = function(_, pulse) {
	  var view = pulse.dataflow,
	      mark = _.mark,
	      type = mark.marktype,
	      entry = marks[type],
	      bound = entry.bound,
	      clip = mark.clip,
	      markBounds = mark.bounds, rebound;
	
	  if (entry.nested) {
	    // multi-item marks have a single bounds instance
	    if (mark.items.length) view.dirty(mark.items[0]);
	    markBounds = boundItem(mark, bound);
	    mark.items.forEach(function(item) {
	      item.bounds.clear().union(markBounds);
	    });
	  }
	
	  else if (type === 'group' || _.modified()) {
	    // operator parameters modified -> re-bound all items
	    // updates group bounds in response to modified group content
	    pulse.visit(pulse.MOD, function(item) { view.dirty(item); });
	    markBounds.clear();
	    mark.items.forEach(function(item) {
	      markBounds.union(boundItem(item, bound));
	    });
	  }
	
	  else {
	    // incrementally update bounds, re-bound mark as needed
	    rebound = pulse.changed(pulse.REM);
	
	    pulse.visit(pulse.ADD, function(item) {
	      markBounds.union(boundItem(item, bound));
	    });
	
	    pulse.visit(pulse.MOD, function(item) {
	      rebound = rebound || markBounds.alignsWith(item.bounds);
	      view.dirty(item);
	      markBounds.union(boundItem(item, bound));
	    });
	
	    if (rebound && !clip) {
	      markBounds.clear();
	      mark.items.forEach(function(item) { markBounds.union(item.bounds); });
	    }
	  }
	
	  if (clip) {
	    markBounds.intersect(temp.set(0, 0, mark.group.width, mark.group.height));
	  }
	
	  return pulse.modifies('bounds');
	};
	
	function boundItem(item, bound, opt) {
	  return bound(item.bounds.clear(), item, opt);
	}
	
	var COUNTER_NAME = ':vega_identifier:';
	
	/**
	 * Adds a unique identifier to all added tuples.
	 * This transform creates a new signal that serves as an id counter.
	 * As a result, the id counter is shared across all instances of this
	 * transform, generating unique ids across multiple data streams. In
	 * addition, this signal value can be included in a snapshot of the
	 * dataflow state, enabling correct resumption of id allocation.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {string} params.as - The field name for the generated identifier.
	 */
	function Identifier(params) {
	  Transform.call(this, 0, params);
	}
	
	Identifier.Definition = {
	  "type": "Identifier",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "as", "type": "string", "required": true }
	  ]
	};
	
	var prototype$47 = inherits(Identifier, Transform);
	
	prototype$47.transform = function(_, pulse) {
	  var counter = getCounter(pulse.dataflow),
	      id$$1 = counter.value,
	      as = _.as;
	
	  pulse.visit(pulse.ADD, function(t) {
	    if (!t[as]) t[as] = ++id$$1;
	  });
	
	  counter.set(this.value = id$$1);
	  return pulse;
	};
	
	function getCounter(view) {
	  var counter = view._signals[COUNTER_NAME];
	  if (!counter) {
	    view._signals[COUNTER_NAME] = (counter = view.add(0));
	  }
	  return counter;
	}
	
	/**
	 * Bind scenegraph items to a scenegraph mark instance.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {object} params.markdef - The mark definition for creating the mark.
	 *   This is an object of legal scenegraph mark properties which *must* include
	 *   the 'marktype' property.
	 * @param {Array<number>} params.scenepath - Scenegraph tree coordinates for the mark.
	 *   The path is an array of integers, each indicating the index into
	 *   a successive chain of items arrays.
	 */
	function Mark(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$48 = inherits(Mark, Transform);
	
	prototype$48.transform = function(_, pulse) {
	  var mark = this.value;
	
	  // acquire mark on first invocation, bind context and group
	  if (!mark) {
	    mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$1(_), _.index);
	    mark.group.context = _.context;
	    if (!_.context.group) _.context.group = mark.group;
	    mark.source = this;
	    this.value = mark;
	  }
	
	  // initialize entering items
	  var Init = mark.marktype === 'group' ? GroupItem : Item;
	  pulse.visit(pulse.ADD, function(item) { Init.call(item, mark); });
	
	  // bind items array to scenegraph mark
	  mark.items = pulse.source;
	  return pulse;
	};
	
	function lookup$1(_) {
	  var g = _.groups, p = _.parent;
	  return g && g.size === 1 ? g.get(Object.keys(g.object)[0])
	    : g && p ? g.lookup(p)
	    : null;
	}
	
	var Top = 'top';
	var Left = 'left';
	var Right = 'right';
	var Bottom = 'bottom';
	
	/**
	 * Analyze items for overlap, changing opacity to hide items with
	 * overlapping bounding boxes. This transform will preserve at least
	 * two items (e.g., first and last) even if overlap persists.
	 * @param {object} params - The parameters for this operator.
	 * @param {function(*,*): number} [params.sort] - A comparator
	 *   function for sorting items.
	 * @param {object} [params.method] - The overlap removal method to apply.
	 *   One of 'parity' (default, hide every other item until there is no
	 *   more overlap) or 'greedy' (sequentially scan and hide and items that
	 *   overlap with the last visible item).
	 * @param {object} [params.boundScale] - A scale whose range should be used
	 *   to bound the items. Items exceeding the bounds of the scale range
	 *   will be treated as overlapping. If null or undefined, no bounds check
	 *   will be applied.
	 * @param {object} [params.boundOrient] - The orientation of the scale
	 *   (top, bottom, left, or right) used to bound items. This parameter is
	 *   ignored if boundScale is null or undefined.
	 * @param {object} [params.boundTolerance] - The tolerance in pixels for
	 *   bound inclusion testing (default 1). This specifies by how many pixels
	 *   an item's bounds may exceed the scale range bounds and not be culled.
	 * @constructor
	 */
	function Overlap(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$49 = inherits(Overlap, Transform);
	
	var methods = {
	  parity: function(items) {
	    return items.filter(function(item, i) {
	      return i % 2 ? (item.opacity = 0) : 1;
	    });
	  },
	  greedy: function(items) {
	    var a;
	    return items.filter(function(b, i) {
	      if (!i || !intersect$1(a.bounds, b.bounds)) {
	        a = b;
	        return 1;
	      } else {
	        return b.opacity = 0;
	      }
	    });
	  }
	};
	
	// compute bounding box intersection
	// allow 1 pixel of overlap tolerance
	function intersect$1(a, b) {
	  return !(
	    a.x2 - 1 < b.x1 ||
	    a.x1 + 1 > b.x2 ||
	    a.y2 - 1 < b.y1 ||
	    a.y1 + 1 > b.y2
	  );
	}
	
	function hasOverlap(items) {
	  for (var i=1, n=items.length, a=items[0].bounds, b; i<n; a=b, ++i) {
	    if (intersect$1(a, b = items[i].bounds)) return true;
	  }
	}
	
	function hasBounds(item) {
	  var b = item.bounds;
	  return b.width() > 1 && b.height() > 1;
	}
	
	function boundTest(scale, orient, tolerance) {
	  var range = scale.range(),
	      b = new Bounds();
	
	  if (orient === Top || orient === Bottom) {
	    b.set(range[0], -Infinity, range[1], +Infinity);
	  } else {
	    b.set(-Infinity, range[0], +Infinity, range[1]);
	  }
	  b.expand(tolerance || 1);
	
	  return function(item) {
	    return b.encloses(item.bounds);
	  };
	}
	
	prototype$49.transform = function(_, pulse) {
	  var reduce = methods[_.method] || methods.parity,
	      source = pulse.materialize(pulse.SOURCE).source;
	
	  if (!source) return;
	
	  if (_.sort) {
	    source = source.slice().sort(_.sort);
	  }
	
	  if (_.method === 'greedy') {
	    source = source.filter(hasBounds);
	  }
	
	  // reset all items to be fully opaque
	  source.forEach(function(item) { item.opacity = 1; });
	
	  var items = source;
	
	  if (items.length >= 3 && hasOverlap(items)) {
	    pulse = pulse.reflow(_.modified()).modifies('opacity');
	    do {
	      items = reduce(items);
	    } while (items.length >= 3 && hasOverlap(items));
	
	    if (items.length < 3 && !peek(source).opacity) {
	      if (items.length > 1) peek(items).opacity = 0;
	      peek(source).opacity = 1;
	    }
	  }
	
	  if (_.boundScale) {
	    var test = boundTest(_.boundScale, _.boundOrient, _.boundTolerance);
	    source.forEach(function(item) {
	      if (!test(item)) item.opacity = 0;
	    });
	  }
	
	  return pulse;
	};
	
	/**
	 * Queue modified scenegraph items for rendering.
	 * @constructor
	 */
	function Render(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$50 = inherits(Render, Transform);
	
	prototype$50.transform = function(_, pulse) {
	  var view = pulse.dataflow;
	
	  pulse.visit(pulse.ALL, function(item) { view.dirty(item); });
	
	  // set z-index dirty flag as needed
	  if (pulse.fields && pulse.fields['zindex']) {
	    var item = pulse.source && pulse.source[0];
	    if (item) item.mark.zdirty = true;
	  }
	};
	
	var AxisRole$1 = 'axis';
	var LegendRole$1 = 'legend';
	var RowHeader$1 = 'row-header';
	var RowFooter$1 = 'row-footer';
	var RowTitle  = 'row-title';
	var ColHeader$1 = 'column-header';
	var ColFooter$1 = 'column-footer';
	var ColTitle  = 'column-title';
	
	function extractGroups(group) {
	  var groups = group.items,
	      n = groups.length,
	      i = 0, mark, items;
	
	  var views = {
	    marks:      [],
	    rowheaders: [],
	    rowfooters: [],
	    colheaders: [],
	    colfooters: [],
	    rowtitle: null,
	    coltitle: null
	  };
	
	  // layout axes, gather legends, collect bounds
	  for (; i<n; ++i) {
	    mark = groups[i];
	    items = mark.items;
	    if (mark.marktype === 'group') {
	      switch (mark.role) {
	        case AxisRole$1:
	        case LegendRole$1:
	          break;
	        case RowHeader$1: addAll(items, views.rowheaders); break;
	        case RowFooter$1: addAll(items, views.rowfooters); break;
	        case ColHeader$1: addAll(items, views.colheaders); break;
	        case ColFooter$1: addAll(items, views.colfooters); break;
	        case RowTitle:  views.rowtitle = items[0]; break;
	        case ColTitle:  views.coltitle = items[0]; break;
	        default:        addAll(items, views.marks);
	      }
	    }
	  }
	
	  return views;
	}
	
	function addAll(items, array$$1) {
	  for (var i=0, n=items.length; i<n; ++i) {
	    array$$1.push(items[i]);
	  }
	}
	
	function bboxFlush(item) {
	  return {x1: 0, y1: 0, x2: item.width || 0, y2: item.height || 0};
	}
	
	function bboxFull(item) {
	  var b = item.bounds.clone();
	  return b.empty()
	    ? b.set(0, 0, 0, 0)
	    : b.translate(-(item.x||0), -(item.y||0));
	}
	
	function boundFlush(item, field$$1) {
	  return field$$1 === 'x1' ? (item.x || 0)
	    : field$$1 === 'y1' ? (item.y || 0)
	    : field$$1 === 'x2' ? (item.x || 0) + (item.width || 0)
	    : field$$1 === 'y2' ? (item.y || 0) + (item.height || 0)
	    : undefined;
	}
	
	function boundFull(item, field$$1) {
	  return item.bounds[field$$1];
	}
	
	function get$1(opt, key$$1, d) {
	  var v = isObject(opt) ? opt[key$$1] : opt;
	  return v != null ? v : (d !== undefined ? d : 0);
	}
	
	function offsetValue(v) {
	  return v < 0 ? Math.ceil(-v) : 0;
	}
	
	function gridLayout(view, group, opt) {
	  var views = extractGroups(group, opt),
	      groups = views.marks,
	      flush = opt.bounds === 'flush',
	      bbox = flush ? bboxFlush : bboxFull,
	      bounds = new Bounds(0, 0, 0, 0),
	      alignCol = get$1(opt.align, 'column'),
	      alignRow = get$1(opt.align, 'row'),
	      padCol = get$1(opt.padding, 'column'),
	      padRow = get$1(opt.padding, 'row'),
	      off = opt.offset,
	      ncols = group.columns || opt.columns || groups.length,
	      nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
	      cells = nrows * ncols,
	      xOffset = [], xExtent = [], xInit = 0,
	      yOffset = [], yExtent = [], yInit = 0,
	      n = groups.length,
	      m, i, c, r, b, g, px, py, x, y, band, extent, offset;
	
	  for (i=0; i<ncols; ++i) {
	    xExtent[i] = 0;
	  }
	  for (i=0; i<nrows; ++i) {
	    yExtent[i] = 0;
	  }
	
	  // determine offsets for each group
	  for (i=0; i<n; ++i) {
	    b = bbox(groups[i]);
	    c = i % ncols;
	    r = ~~(i / ncols);
	    px = c ? Math.ceil(bbox(groups[i-1]).x2): 0;
	    py = r ? Math.ceil(bbox(groups[i-ncols]).y2): 0;
	    xExtent[c] = Math.max(xExtent[c], px);
	    yExtent[r] = Math.max(yExtent[r], py);
	    xOffset.push(padCol + offsetValue(b.x1));
	    yOffset.push(padRow + offsetValue(b.y1));
	    view.dirty(groups[i]);
	  }
	
	  // set initial alignment offsets
	  for (i=0; i<n; ++i) {
	    if (i % ncols === 0) xOffset[i] = xInit;
	    if (i < ncols) yOffset[i] = yInit;
	  }
	
	  // enforce column alignment constraints
	  if (alignCol === 'each') {
	    for (c=1; c<ncols; ++c) {
	      for (offset=0, i=c; i<n; i += ncols) {
	        if (offset < xOffset[i]) offset = xOffset[i];
	      }
	      for (i=c; i<n; i += ncols) {
	        xOffset[i] = offset + xExtent[c];
	      }
	    }
	  } else if (alignCol === 'all') {
	    for (extent=0, c=1; c<ncols; ++c) {
	      if (extent < xExtent[c]) extent = xExtent[c];
	    }
	    for (offset=0, i=0; i<n; ++i) {
	      if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
	    }
	    for (i=0; i<n; ++i) {
	      if (i % ncols) xOffset[i] = offset + extent;
	    }
	  } else {
	    for (c=1; c<ncols; ++c) {
	      for (i=c; i<n; i += ncols) {
	        xOffset[i] += xExtent[c];
	      }
	    }
	  }
	
	  // enforce row alignment constraints
	  if (alignRow === 'each') {
	    for (r=1; r<nrows; ++r) {
	      for (offset=0, i=r*ncols, m=i+ncols; i<m; ++i) {
	        if (offset < yOffset[i]) offset = yOffset[i];
	      }
	      for (i=r*ncols; i<m; ++i) {
	        yOffset[i] = offset + yExtent[r];
	      }
	    }
	  } else if (alignRow === 'all') {
	    for (extent=0, r=1; r<nrows; ++r) {
	      if (extent < yExtent[r]) extent = yExtent[r];
	    }
	    for (offset=0, i=ncols; i<n; ++i) {
	      if (offset < yOffset[i]) offset = yOffset[i];
	    }
	    for (i=ncols; i<n; ++i) {
	      yOffset[i] = offset + extent;
	    }
	  } else {
	    for (r=1; r<nrows; ++r) {
	      for (i=r*ncols, m=i+ncols; i<m; ++i) {
	        yOffset[i] += yExtent[r];
	      }
	    }
	  }
	
	  // perform horizontal grid layout
	  for (x=0, i=0; i<n; ++i) {
	    g = groups[i];
	    px = g.x || 0;
	    g.x = (x = xOffset[i] + (i % ncols ? x : 0));
	    g.bounds.translate(x - px, 0);
	  }
	
	  // perform vertical grid layout
	  for (c=0; c<ncols; ++c) {
	    for (y=0, i=c; i<n; i += ncols) {
	      g = groups[i];
	      py = g.y || 0;
	      g.y = (y += yOffset[i]);
	      g.bounds.translate(0, y - py);
	    }
	  }
	
	  // update mark bounds, mark dirty
	  for (i=0; i<n; ++i) groups[i].mark.bounds.clear();
	  for (i=0; i<n; ++i) {
	    g = groups[i];
	    view.dirty(g);
	    bounds.union(g.mark.bounds.union(g.bounds));
	  }
	
	  // -- layout grid headers and footers --
	
	  // aggregation functions for grid margin determination
	  function min(a, b) { return Math.floor(Math.min(a, b)); }
	  function max(a, b) { return Math.ceil(Math.max(a, b)); }
	
	  // bounding box calculation methods
	  bbox = flush ? boundFlush : boundFull;
	
	  // perform row header layout
	  band = get$1(opt.headerBand, 'row', null);
	  x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$1(off, 'rowHeader'),    min, 0, bbox, 'x1', 0, ncols, 1, band);
	
	  // perform column header layout
	  band = get$1(opt.headerBand, 'column', null);
	  y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$1(off, 'columnHeader'), min, 1, bbox, 'y1', 0, 1, ncols, band);
	
	  // perform row footer layout
	  band = get$1(opt.footerBand, 'row', null);
	  layoutHeaders(    view, views.rowfooters, groups, ncols, nrows,  get$1(off, 'rowFooter'),    max, 0, bbox, 'x2', ncols-1, ncols, 1, band);
	
	  // perform column footer layout
	  band = get$1(opt.footerBand, 'column', null);
	  layoutHeaders(    view, views.colfooters, groups, ncols, ncols,  get$1(off, 'columnFooter'), max, 1, bbox, 'y2', cells-ncols, 1, ncols, band);
	
	  // perform row title layout
	  if (views.rowtitle) {
	    offset = x - get$1(off, 'rowTitle');
	    band = get$1(opt.titleBand, 'row', 0.5);
	    layoutTitle$1(view, views.rowtitle, offset, 0, bounds, band);
	  }
	
	  // perform column title layout
	  if (views.coltitle) {
	    offset = y - get$1(off, 'columnTitle');
	    band = get$1(opt.titleBand, 'column', 0.5);
	    layoutTitle$1(view, views.coltitle, offset, 1, bounds, band);
	  }
	}
	
	function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
	  var n = groups.length,
	      init = 0,
	      edge = 0,
	      i, j, k, m, b, h, g, x, y;
	
	  // if no groups, early exit and return 0
	  if (!n) return init;
	
	  // compute margin
	  for (i=start; i<n; i+=stride) {
	    if (groups[i]) init = agg(init, bound(groups[i], bf));
	  }
	
	  // if no headers, return margin calculation
	  if (!headers.length) return init;
	
	  // check if number of headers exceeds number of rows or columns
	  if (headers.length > limit) {
	    view.warn('Grid headers exceed limit: ' + limit);
	    headers = headers.slice(0, limit);
	  }
	
	  // apply offset
	  init += offset;
	
	  // clear mark bounds for all headers
	  for (j=0, m=headers.length; j<m; ++j) {
	    view.dirty(headers[j]);
	    headers[j].mark.bounds.clear();
	  }
	
	  // layout each header
	  for (i=start, j=0, m=headers.length; j<m; ++j, i+=stride) {
	    h = headers[j];
	    b = h.mark.bounds;
	
	    // search for nearest group to align to
	    // necessary if table has empty cells
	    for (k=i; k >= 0 && (g = groups[k]) == null; k-=back);
	
	    // assign coordinates and update bounds
	    if (isX) {
	      x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
	      y = init;
	    } else {
	      x = init;
	      y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
	    }
	    b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
	    h.x = x;
	    h.y = y;
	    view.dirty(h);
	
	    // update current edge of layout bounds
	    edge = agg(edge, b[bf]);
	  }
	
	  return edge;
	}
	
	function layoutTitle$1(view, g, offset, isX, bounds, band) {
	  if (!g) return;
	  view.dirty(g);
	
	  // compute title coordinates
	  var x = offset, y = offset;
	  isX
	    ? (x = Math.round(bounds.x1 + band * bounds.width()))
	    : (y = Math.round(bounds.y1 + band * bounds.height()));
	
	  // assign coordinates and update bounds
	  g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
	  g.mark.bounds.clear().union(g.bounds);
	  g.x = x;
	  g.y = y;
	
	  // queue title for redraw
	  view.dirty(g);
	}
	
	var Fit = 'fit';
	var Pad = 'pad';
	var None$2 = 'none';
	var Padding = 'padding';
	
	var AxisRole = 'axis';
	var TitleRole = 'title';
	var FrameRole = 'frame';
	var LegendRole = 'legend';
	var ScopeRole = 'scope';
	var RowHeader = 'row-header';
	var RowFooter = 'row-footer';
	var ColHeader = 'column-header';
	var ColFooter = 'column-footer';
	
	var AxisOffset = 0.5;
	var tempBounds$2 = new Bounds();
	
	/**
	 * Layout view elements such as axes and legends.
	 * Also performs size adjustments.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {object} params.mark - Scenegraph mark of groups to layout.
	 */
	function ViewLayout(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$51 = inherits(ViewLayout, Transform);
	
	prototype$51.transform = function(_, pulse) {
	  // TODO incremental update, output?
	  var view = pulse.dataflow;
	  _.mark.items.forEach(function(group) {
	    if (_.layout) gridLayout(view, group, _.layout);
	    layoutGroup(view, group, _);
	  });
	  return pulse;
	};
	
	function layoutGroup(view, group, _) {
	  var items = group.items,
	      width = Math.max(0, group.width || 0),
	      height = Math.max(0, group.height || 0),
	      viewBounds = new Bounds().set(0, 0, width, height),
	      axisBounds = viewBounds.clone(),
	      xBounds = viewBounds.clone(),
	      yBounds = viewBounds.clone(),
	      legends = [], title,
	      mark, flow, b, i, n;
	
	  // layout axes, gather legends, collect bounds
	  for (i=0, n=items.length; i<n; ++i) {
	    mark = items[i];
	    switch (mark.role) {
	      case AxisRole:
	        axisBounds.union(b = layoutAxis(view, mark, width, height));
	        (isYAxis(mark) ? xBounds : yBounds).union(b);
	        break;
	      case TitleRole:
	        title = mark; break;
	      case LegendRole:
	        legends.push(mark); break;
	      case FrameRole:
	      case ScopeRole:
	      case RowHeader:
	      case RowFooter:
	      case ColHeader:
	      case ColFooter:
	        xBounds.union(mark.bounds);
	        yBounds.union(mark.bounds);
	        break;
	      default:
	        viewBounds.union(mark.bounds);
	    }
	  }
	
	  // layout title, adjust bounds
	  if (title) {
	    axisBounds.union(b = layoutTitle(view, title, axisBounds));
	    (isYAxis(title) ? xBounds : yBounds).union(b);
	  }
	
	  // layout legends, adjust viewBounds
	  if (legends.length) {
	    flow = {left: 0, right: 0, top: 0, bottom: 0, margin: _.legendMargin || 8};
	
	    for (i=0, n=legends.length; i<n; ++i) {
	      b = layoutLegend(view, legends[i], flow, xBounds, yBounds, width, height);
	      if (_.autosize && _.autosize.type === Fit) {
	        // for autosize fit, incorporate the orthogonal dimension only
	        // legends that overrun the chart area will then be clipped
	        // otherwise the chart area gets reduced to nothing!
	        var orient = legends[i].items[0].datum.orient;
	        if (orient === Left || orient === Right) {
	          viewBounds.add(b.x1, 0).add(b.x2, 0);
	        } else if (orient === Top || orient === Bottom) {
	          viewBounds.add(0, b.y1).add(0, b.y2);
	        }
	      } else {
	        viewBounds.union(b);
	      }
	    }
	  }
	
	  // perform size adjustment
	  viewBounds.union(xBounds).union(yBounds).union(axisBounds);
	  layoutSize(view, group, viewBounds, _);
	}
	
	function set$3(item, property, value) {
	  if (item[property] === value) {
	    return 0;
	  } else {
	    item[property] = value;
	    return 1;
	  }
	}
	
	function isYAxis(mark) {
	  var orient = mark.items[0].datum.orient;
	  return orient === Left || orient === Right;
	}
	
	function axisIndices(datum) {
	  var index = +datum.grid;
	  return [
	    datum.ticks  ? index++ : -1, // ticks index
	    datum.labels ? index++ : -1, // labels index
	    index + (+datum.domain)      // title index
	  ];
	}
	
	function layoutAxis(view, axis, width, height) {
	  var item = axis.items[0],
	      datum = item.datum,
	      orient = datum.orient,
	      indices = axisIndices(datum),
	      range = item.range,
	      offset = item.offset,
	      position = item.position,
	      minExtent = item.minExtent,
	      maxExtent = item.maxExtent,
	      title = datum.title && item.items[indices[2]].items[0],
	      titlePadding = item.titlePadding,
	      bounds = item.bounds,
	      x = 0, y = 0, i, s;
	
	  tempBounds$2.clear().union(bounds);
	  bounds.clear();
	  if ((i=indices[0]) > -1) bounds.union(item.items[i].bounds);
	  if ((i=indices[1]) > -1) bounds.union(item.items[i].bounds);
	
	  // position axis group and title
	  switch (orient) {
	    case Top:
	      x = position || 0;
	      y = -offset;
	      s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
	      if (title) {
	        if (title.auto) {
	          s += titlePadding;
	          title.y = -s;
	          s += title.bounds.height();
	          bounds.add(title.bounds.x1, 0)
	                .add(title.bounds.x2, 0);
	        } else {
	          bounds.union(title.bounds);
	        }
	      }
	      bounds.add(0, -s).add(range, 0);
	      break;
	    case Left:
	      x = -offset;
	      y = position || 0;
	      s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
	      if (title) {
	        if (title.auto) {
	          s += titlePadding;
	          title.x = -s;
	          s += title.bounds.width();
	          bounds.add(0, title.bounds.y1)
	                .add(0, title.bounds.y2);
	        } else {
	          bounds.union(title.bounds);
	        }
	      }
	      bounds.add(-s, 0).add(0, range);
	      break;
	    case Right:
	      x = width + offset;
	      y = position || 0;
	      s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
	      if (title) {
	        if (title.auto) {
	          s += titlePadding;
	          title.x = s;
	          s += title.bounds.width();
	          bounds.add(0, title.bounds.y1)
	                .add(0, title.bounds.y2);
	        } else {
	          bounds.union(title.bounds);
	        }
	      }
	      bounds.add(0, 0).add(s, range);
	      break;
	    case Bottom:
	      x = position || 0;
	      y = height + offset;
	      s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
	      if (title) if (title.auto) {
	        s += titlePadding;
	        title.y = s;
	        s += title.bounds.height();
	        bounds.add(title.bounds.x1, 0)
	              .add(title.bounds.x2, 0);
	      } else {
	        bounds.union(title.bounds);
	      }
	      bounds.add(0, 0).add(range, s);
	      break;
	    default:
	      x = item.x;
	      y = item.y;
	  }
	
	  // update bounds
	  boundStroke(bounds.translate(x, y), item);
	
	  if (set$3(item, 'x', x + AxisOffset) | set$3(item, 'y', y + AxisOffset)) {
	    item.bounds = tempBounds$2;
	    view.dirty(item);
	    item.bounds = bounds;
	    view.dirty(item);
	  }
	
	  return item.mark.bounds.clear().union(bounds);
	}
	
	function layoutTitle(view, title, axisBounds) {
	  var item = title.items[0],
	      datum = item.datum,
	      orient = datum.orient,
	      offset = item.offset,
	      bounds = item.bounds,
	      x = 0, y = 0;
	
	  tempBounds$2.clear().union(bounds);
	
	  // position axis group and title
	  switch (orient) {
	    case Top:
	      x = item.x;
	      y = axisBounds.y1 - offset;
	      break;
	    case Left:
	      x = axisBounds.x1 - offset;
	      y = item.y;
	      break;
	    case Right:
	      x = axisBounds.x2 + offset;
	      y = item.y;
	      break;
	    case Bottom:
	      x = item.x;
	      y = axisBounds.y2 + offset;
	      break;
	    default:
	      x = item.x;
	      y = item.y;
	  }
	
	  bounds.translate(x - item.x, y - item.y);
	  if (set$3(item, 'x', x) | set$3(item, 'y', y)) {
	    item.bounds = tempBounds$2;
	    view.dirty(item);
	    item.bounds = bounds;
	    view.dirty(item);
	  }
	
	  // update bounds
	  return title.bounds.clear().union(bounds);
	}
	
	function layoutLegend(view, legend, flow, xBounds, yBounds, width, height) {
	  var item = legend.items[0],
	      datum = item.datum,
	      orient = datum.orient,
	      offset = item.offset,
	      bounds = item.bounds,
	      x = 0,
	      y = 0,
	      w, h, axisBounds;
	
	  if (orient === Top || orient === Bottom) {
	    axisBounds = yBounds,
	    x = flow[orient];
	  } else if (orient === Left || orient === Right) {
	    axisBounds = xBounds;
	    y = flow[orient];
	  }
	
	  tempBounds$2.clear().union(bounds);
	  bounds.clear();
	
	  // aggregate bounds to determine size
	  // shave off 1 pixel because it looks better...
	  item.items.forEach(function(_) { bounds.union(_.bounds); });
	  w = Math.round(bounds.width()) + 2 * item.padding - 1;
	  h = Math.round(bounds.height()) + 2 * item.padding - 1;
	
	  switch (orient) {
	    case Left:
	      x -= w + offset - Math.floor(axisBounds.x1);
	      flow.left += h + flow.margin;
	      break;
	    case Right:
	      x += offset + Math.ceil(axisBounds.x2);
	      flow.right += h + flow.margin;
	      break;
	    case Top:
	      y -= h + offset - Math.floor(axisBounds.y1);
	      flow.top += w + flow.margin;
	      break;
	    case Bottom:
	      y += offset + Math.ceil(axisBounds.y2);
	      flow.bottom += w + flow.margin;
	      break;
	    case 'top-left':
	      x += offset;
	      y += offset;
	      break;
	    case 'top-right':
	      x += width - w - offset;
	      y += offset;
	      break;
	    case 'bottom-left':
	      x += offset;
	      y += height - h - offset;
	      break;
	    case 'bottom-right':
	      x += width - w - offset;
	      y += height - h - offset;
	      break;
	    default:
	      x = item.x;
	      y = item.y;
	  }
	
	  // update bounds
	  boundStroke(bounds.set(x, y, x + w, y + h), item);
	
	  // update legend layout
	  if (set$3(item, 'x', x) | set$3(item, 'width', w) |
	      set$3(item, 'y', y) | set$3(item, 'height', h)) {
	    item.bounds = tempBounds$2;
	    view.dirty(item);
	    item.bounds = bounds;
	    view.dirty(item);
	  }
	
	  return item.mark.bounds.clear().union(bounds);
	}
	
	function layoutSize(view, group, viewBounds, _) {
	  var auto = _.autosize || {},
	      type = auto.type,
	      viewWidth = view._width,
	      viewHeight = view._height,
	      padding = view.padding();
	
	  if (view._autosize < 1 || !type) return;
	
	  var width  = Math.max(0, group.width || 0),
	      left   = Math.max(0, Math.ceil(-viewBounds.x1)),
	      right  = Math.max(0, Math.ceil(viewBounds.x2 - width)),
	      height = Math.max(0, group.height || 0),
	      top    = Math.max(0, Math.ceil(-viewBounds.y1)),
	      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));
	
	  if (auto.contains === Padding) {
	    viewWidth -= padding.left + padding.right;
	    viewHeight -= padding.top + padding.bottom;
	  }
	
	  if (type === None$2) {
	    left = 0;
	    top = 0;
	    width = viewWidth;
	    height = viewHeight;
	  }
	
	  else if (type === Fit) {
	    width = Math.max(0, viewWidth - left - right);
	    height = Math.max(0, viewHeight - top - bottom);
	  }
	
	  else if (type === Pad) {
	    viewWidth = width + left + right;
	    viewHeight = height + top + bottom;
	  }
	
	  view._resizeView(
	    viewWidth, viewHeight,
	    width, height,
	    [left, top],
	    auto.resize
	  );
	}
	
	
	
	var vtx = Object.freeze({
		bound: Bound,
		identifier: Identifier,
		mark: Mark,
		overlap: Overlap,
		render: Render,
		viewlayout: ViewLayout
	});
	
	var Log = 'log';
	var Pow = 'pow';
	var Utc = 'utc';
	var Sqrt = 'sqrt';
	var Band = 'band';
	var Time = 'time';
	var Point = 'point';
	var Linear$1 = 'linear';
	var Ordinal = 'ordinal';
	var Quantile = 'quantile';
	var Quantize = 'quantize';
	var Threshold = 'threshold';
	var BinLinear = 'bin-linear';
	var BinOrdinal = 'bin-ordinal';
	var Sequential = 'sequential';
	
	var invertRange = function(scale) {
	  return function(_) {
	    var lo = _[0],
	        hi = _[1],
	        t;
	
	    if (hi < lo) {
	      t = lo;
	      lo = hi;
	      hi = t;
	    }
	
	    return [
	      scale.invert(lo),
	      scale.invert(hi)
	    ];
	  }
	};
	
	var invertRangeExtent = function(scale) {
	  return function(_) {
	    var range = scale.range(),
	        lo = _[0],
	        hi = _[1],
	        min = -1, max, t, i, n;
	
	    if (hi < lo) {
	      t = lo;
	      lo = hi;
	      hi = t;
	    }
	
	    for (i=0, n=range.length; i<n; ++i) {
	      if (range[i] >= lo && range[i] <= hi) {
	        if (min < 0) min = i;
	        max = i;
	      }
	    }
	
	    if (min < 0) return undefined;
	
	    lo = scale.invertExtent(range[min]);
	    hi = scale.invertExtent(range[max]);
	
	    return [
	      lo[0] === undefined ? lo[1] : lo[0],
	      hi[1] === undefined ? hi[0] : hi[1]
	    ];
	  }
	};
	
	var bandSpace = function(count, paddingInner, paddingOuter) {
	  var space = count - paddingInner + paddingOuter * 2;
	  return count ? (space > 0 ? space : 1) : 0;
	};
	
	var array$2 = Array.prototype;
	
	var map$3 = array$2.map;
	var slice$2 = array$2.slice;
	
	var implicit = {name: "implicit"};
	
	function ordinal(range) {
	  var index = map(),
	      domain = [],
	      unknown = implicit;
	
	  range = range == null ? [] : slice$2.call(range);
	
	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$2.call(_), scale) : range.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return scale;
	}
	
	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};
	
	function extend$1(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}
	
	function Color() {}
	
	var darker = 0.7;
	var brighter = 1 / darker;
	
	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	
	define(Color, color$1, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});
	
	function color$1(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}
	
	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}
	
	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}
	
	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color$1(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Rgb, rgb, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	
	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}
	
	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color$1(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}
	
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hsl, hsl, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));
	
	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}
	
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;
	
	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0$1 = 4 / 29;
	var t1$1 = 6 / 29;
	var t2 = 3 * t1$1 * t1$1;
	var t3 = t1$1 * t1$1 * t1$1;
	
	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}
	
	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}
	
	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Lab, lab, extend$1(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));
	
	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$1;
	}
	
	function lab2xyz(t) {
	  return t > t1$1 ? t * t * t : t2 * (t - t0$1);
	}
	
	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}
	
	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}
	
	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}
	
	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hcl, hcl, extend$1(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));
	
	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;
	
	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}
	
	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Cubehelix, cubehelix, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));
	
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}
	
	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var constant$4 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function linear$1(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}
	
	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	
	function hue(a, b) {
	  var d = b - a;
	  return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$4(isNaN(a) ? b : a);
	}
	
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$4(isNaN(a) ? b : a);
	  };
	}
	
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear$1(a, d) : constant$4(isNaN(a) ? b : a);
	}
	
	var rgb$1 = (function rgbGamma(y) {
	  var color$$1 = gamma(y);
	
	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	
	  rgb$$1.gamma = rgbGamma;
	
	  return rgb$$1;
	})(1);
	
	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}
	
	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);
	
	var array$3 = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;
	
	  for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];
	
	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};
	
	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};
	
	var reinterpolate = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};
	
	var object$2 = function(a, b) {
	  var i = {},
	      c = {},
	      k;
	
	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};
	
	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolate(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }
	
	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};
	
	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");
	
	function zero$1(b) {
	  return function() {
	    return b;
	  };
	}
	
	function one$1(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}
	
	var string = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators
	
	  // Coerce inputs to strings.
	  a = a + "", b = b + "";
	
	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: reinterpolate(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }
	
	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }
	
	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one$1(q[0].x)
	      : zero$1(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};
	
	var interpolate = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$4(b)
	      : (t === "number" ? reinterpolate
	      : t === "string" ? ((c = color$1(b)) ? (b = c, rgb$1) : string)
	      : b instanceof color$1 ? rgb$1
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$3
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$2
	      : reinterpolate)(a, b);
	};
	
	var interpolateRound = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};
	
	var degrees = 180 / Math.PI;
	
	var identity$5 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	
	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};
	
	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;
	
	function parseCss(value) {
	  if (value === "none") return identity$5;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	
	function parseSvg(value) {
	  if (value == null) return identity$5;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$5;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}
	
	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }
	
	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }
	
	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }
	
	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }
	
	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }
	
	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}
	
	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
	
	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;
	
	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}
	
	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}
	
	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}
	
	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var zoom$1 = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;
	
	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }
	
	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }
	
	  i.duration = S * 1000;
	
	  return i;
	};
	
	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);
	
	function lab$1(start, end) {
	  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}
	
	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);
	
	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;
	
	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }
	
	    cubehelix$$1.gamma = cubehelixGamma;
	
	    return cubehelix$$1;
	  })(1);
	}
	
	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);
	
	var quantize$1 = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};
	
	
	
	var $$1 = Object.freeze({
		interpolate: interpolate,
		interpolateArray: array$3,
		interpolateBasis: basis$1,
		interpolateBasisClosed: basisClosed,
		interpolateDate: date,
		interpolateNumber: reinterpolate,
		interpolateObject: object$2,
		interpolateRound: interpolateRound,
		interpolateString: string,
		interpolateTransformCss: interpolateTransformCss,
		interpolateTransformSvg: interpolateTransformSvg,
		interpolateZoom: zoom$1,
		interpolateRgb: rgb$1,
		interpolateRgbBasis: rgbBasis,
		interpolateRgbBasisClosed: rgbBasisClosed,
		interpolateHsl: hsl$2,
		interpolateHslLong: hslLong,
		interpolateLab: lab$1,
		interpolateHcl: hcl$2,
		interpolateHclLong: hclLong,
		interpolateCubehelix: cubehelix$2,
		interpolateCubehelixLong: cubehelixLong,
		quantize: quantize$1
	});
	
	var constant$5 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var number$2 = function(x) {
	  return +x;
	};
	
	var unit = [0, 1];
	
	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$5(b);
	}
	
	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}
	
	function reinterpolateClamp(reinterpolate$$1) {
	  return function(a, b) {
	    var r = reinterpolate$$1(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}
	
	function bimap(domain, range, deinterpolate, reinterpolate$$1) {
	  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate$$1(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate$$1(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}
	
	function polymap(domain, range, deinterpolate, reinterpolate$$1) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;
	
	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }
	
	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate$$1(range[i], range[i + 1]);
	  }
	
	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}
	
	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}
	
	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate$$1) {
	  var domain = unit,
	      range = unit,
	      interpolate$$1 = interpolate,
	      clamp = false,
	      piecewise,
	      output,
	      input;
	
	  function rescale() {
	    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }
	
	  function scale(x) {
	    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }
	
	  scale.invert = function(y) {
	    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate$$1) : reinterpolate$$1)))(+y);
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$2), rescale()) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$2.call(_), rescale()) : range.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range = slice$2.call(_), interpolate$$1 = interpolateRound, rescale();
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };
	
	  return rescale();
	}
	
	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);
	
	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};
	
	var exponent = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};
	
	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;
	
	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }
	
	    return t.reverse().join(thousands);
	  };
	};
	
	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};
	
	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);
	
	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }
	
	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};
	
	var prefixExponent;
	
	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};
	
	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};
	
	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};
	
	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
	
	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}
	
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
	
	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	
	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";
	
	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";
	
	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";
	
	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";
	
	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}
	
	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};
	
	var identity$6 = function(x) {
	  return x;
	};
	
	var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];
	
	var formatLocale$1 = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$6,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$6,
	      percent = locale.percent || "%";
	
	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;
	
	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";
	
	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);
	
	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));
	
	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;
	
	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;
	
	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);
	
	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;
	
	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
	
	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }
	
	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);
	
	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";
	
	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
	
	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }
	
	      return numerals(value);
	    }
	
	    format.toString = function() {
	      return specifier + "";
	    };
	
	    return format;
	  }
	
	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }
	
	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};
	
	var locale$2;
	var format;
	var formatPrefix;
	
	defaultLocale$1({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	
	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  format = locale$2.format;
	  formatPrefix = locale$2.formatPrefix;
	  return locale$2;
	}
	
	var precisionFixed = function(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	};
	
	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	};
	
	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	};
	
	var tickFormat$1 = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return format(specifier);
	};
	
	function linearish(scale) {
	  var domain = scale.domain;
	
	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return tickFormat$1(domain(), count, specifier);
	  };
	
	  scale.nice = function(count) {
	    if (count == null) count = 10;
	
	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;
	
	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }
	
	    step = tickIncrement(start, stop, count);
	
	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = tickIncrement(start, stop, count);
	    }
	
	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }
	
	    return scale;
	  };
	
	  return scale;
	}
	
	function linear() {
	  var scale = continuous(deinterpolateLinear, reinterpolate);
	
	  scale.copy = function() {
	    return copy(scale, linear());
	  };
	
	  return linearish(scale);
	}
	
	function identity$4() {
	  var domain = [0, 1];
	
	  function scale(x) {
	    return +x;
	  }
	
	  scale.invert = scale;
	
	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$2), scale) : domain.slice();
	  };
	
	  scale.copy = function() {
	    return identity$4().domain(domain);
	  };
	
	  return linearish(scale);
	}
	
	var nice = function(domain, interval) {
	  domain = domain.slice();
	
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;
	
	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }
	
	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};
	
	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$5(b);
	}
	
	function reinterpolate$1(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}
	
	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}
	
	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}
	
	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}
	
	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}
	
	function log$2() {
	  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);
	
	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }
	
	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	
	    if (r = v < u) i = u, u = v, v = i;
	
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];
	
	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }
	
	    return r ? z.reverse() : z;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };
	
	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };
	
	  scale.copy = function() {
	    return copy(scale, log$2().base(base));
	  };
	
	  return scale;
	}
	
	function raise(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}
	
	function pow$1() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;
	
	  function deinterpolate(a, b) {
	    return (b = raise(b, exponent) - (a = raise(a, exponent)))
	        ? function(x) { return (raise(x, exponent) - a) / b; }
	        : constant$5(b);
	  }
	
	  function reinterpolate(a, b) {
	    b = raise(b, exponent) - (a = raise(a, exponent));
	    return function(t) { return raise(a + b * t, 1 / exponent); };
	  }
	
	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };
	
	  scale.copy = function() {
	    return copy(scale, pow$1().exponent(exponent));
	  };
	
	  return linearish(scale);
	}
	
	function sqrt$1() {
	  return pow$1().exponent(0.5);
	}
	
	function quantile() {
	  var domain = [],
	      range = [],
	      thresholds = [];
	
	  function rescale() {
	    var i = 0, n = Math.max(1, range.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }
	
	  function scale(x) {
	    if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];
	  }
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$2.call(_), rescale()) : range.slice();
	  };
	
	  scale.quantiles = function() {
	    return thresholds.slice();
	  };
	
	  scale.copy = function() {
	    return quantile()
	        .domain(domain)
	        .range(range);
	  };
	
	  return scale;
	}
	
	function quantize$2() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range = [0, 1];
	
	  function scale(x) {
	    if (x <= x) return range[bisectRight(domain, x, 0, n)];
	  }
	
	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (n = (range = slice$2.call(_)).length - 1, rescale()) : range.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return quantize$2()
	        .domain([x0, x1])
	        .range(range);
	  };
	
	  return linearish(scale);
	}
	
	function threshold$1() {
	  var domain = [0.5],
	      range = [0, 1],
	      n = 1;
	
	  function scale(x) {
	    if (x <= x) return range[bisectRight(domain, x, 0, n)];
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$2.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$2.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range);
	  };
	
	  return scale;
	}
	
	var durationSecond$1 = 1000;
	var durationMinute$1 = durationSecond$1 * 60;
	var durationHour$1 = durationMinute$1 * 60;
	var durationDay$1 = durationHour$1 * 24;
	var durationWeek$1 = durationDay$1 * 7;
	var durationMonth = durationDay$1 * 30;
	var durationYear = durationDay$1 * 365;
	
	function date$1(t) {
	  return new Date(t);
	}
	
	function number$3(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}
	
	function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, reinterpolate),
	      invert = scale.invert,
	      domain = scale.domain;
	
	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");
	
	  var tickIntervals = [
	    [second$$1,  1,      durationSecond$1],
	    [second$$1,  5,  5 * durationSecond$1],
	    [second$$1, 15, 15 * durationSecond$1],
	    [second$$1, 30, 30 * durationSecond$1],
	    [minute$$1,  1,      durationMinute$1],
	    [minute$$1,  5,  5 * durationMinute$1],
	    [minute$$1, 15, 15 * durationMinute$1],
	    [minute$$1, 30, 30 * durationMinute$1],
	    [  hour$$1,  1,      durationHour$1  ],
	    [  hour$$1,  3,  3 * durationHour$1  ],
	    [  hour$$1,  6,  6 * durationHour$1  ],
	    [  hour$$1, 12, 12 * durationHour$1  ],
	    [   day$$1,  1,      durationDay$1   ],
	    [   day$$1,  2,  2 * durationDay$1   ],
	    [  week,  1,      durationWeek$1  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];
	
	  function tickFormat(date$$1) {
	    return (second$$1(date$$1) < date$$1 ? formatMillisecond
	        : minute$$1(date$$1) < date$$1 ? formatSecond
	        : hour$$1(date$$1) < date$$1 ? formatMinute
	        : day$$1(date$$1) < date$$1 ? formatHour
	        : month$$1(date$$1) < date$$1 ? (week(date$$1) < date$$1 ? formatDay : formatWeek)
	        : year$$1(date$$1) < date$$1 ? formatMonth
	        : formatYear)(date$$1);
	  }
	
	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;
	
	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = Math.max(tickStep(start, stop, interval), 1);
	        interval = millisecond$$1;
	      }
	    }
	
	    return step == null ? interval : interval.every(step);
	  }
	
	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? domain(map$3.call(_, number$3)) : domain().map(date$1);
	  };
	
	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };
	
	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };
	
	  scale.copy = function() {
	    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };
	
	  return scale;
	}
	
	var time = function() {
	  return calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};
	
	var utcTime = function() {
	  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};
	
	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};
	
	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
	
	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
	
	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
	
	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
	
	cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));
	
	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var rainbow = cubehelix();
	
	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}
	
	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
	
	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
	
	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
	
	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
	
	function band$$1() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;
	
	  delete scale.unknown;
	
	  function rescale() {
	    var n = domain().length,
	        reverse = range[1] < range[0],
	        start = range[reverse - 0],
	        stop = range[1 - reverse],
	        space = bandSpace(n, paddingInner, paddingOuter);
	
	    step = (stop - start) / (space || 1);
	    if (round) {
	      step = Math.floor(step);
	    }
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) {
	      start = Math.round(start);
	      bandwidth = Math.round(bandwidth);
	    }
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }
	
	  scale.domain = function(_) {
	    if (arguments.length) {
	      domain(_);
	      return rescale();
	    } else {
	      return domain();
	    }
	  };
	
	  scale.range = function(_) {
	    if (arguments.length) {
	      range = [+_[0], +_[1]];
	      return rescale();
	    } else {
	      return range.slice();
	    }
	  };
	
	  scale.rangeRound = function(_) {
	    range = [+_[0], +_[1]];
	    round = true;
	    return rescale();
	  };
	
	  scale.bandwidth = function() {
	    return bandwidth;
	  };
	
	  scale.step = function() {
	    return step;
	  };
	
	  scale.round = function(_) {
	    if (arguments.length) {
	      round = !!_;
	      return rescale();
	    } else {
	      return round;
	    }
	  };
	
	  scale.padding = function(_) {
	    if (arguments.length) {
	      paddingOuter = Math.max(0, Math.min(1, _));
	      paddingInner = paddingOuter;
	      return rescale();
	    } else {
	      return paddingInner;
	    }
	  };
	
	  scale.paddingInner = function(_) {
	    if (arguments.length) {
	      paddingInner = Math.max(0, Math.min(1, _));
	      return rescale();
	    } else {
	      return paddingInner;
	    }
	  };
	
	  scale.paddingOuter = function(_) {
	    if (arguments.length) {
	      paddingOuter = Math.max(0, Math.min(1, _));
	      return rescale();
	    } else {
	      return paddingOuter;
	    }
	  };
	
	  scale.align = function(_) {
	    if (arguments.length) {
	      align = Math.max(0, Math.min(1, _));
	      return rescale();
	    } else {
	      return align;
	    }
	  };
	
	  scale.invertRange = function(_) {
	    // bail if range has null or undefined values
	    if (_[0] == null || _[1] == null) return;
	
	    var lo = +_[0],
	        hi = +_[1],
	        reverse = range[1] < range[0],
	        values = reverse ? ordinalRange().reverse() : ordinalRange(),
	        n = values.length - 1, a, b, t;
	
	    // bail if either range endpoint is invalid
	    if (lo !== lo || hi !== hi) return;
	
	    // order range inputs, bail if outside of scale range
	    if (hi < lo) {
	      t = lo;
	      lo = hi;
	      hi = t;
	    }
	    if (hi < values[0] || lo > range[1-reverse]) return;
	
	    // binary search to index into scale range
	    a = Math.max(0, bisectRight(values, lo) - 1);
	    b = lo===hi ? a : bisectRight(values, hi) - 1;
	
	    // increment index a if lo is within padding gap
	    if (lo - values[a] > bandwidth + 1e-10) ++a;
	
	    if (reverse) {
	      // map + swap
	      t = a;
	      a = n - b;
	      b = n - t;
	    }
	    return (a > b) ? undefined : domain().slice(a, b+1);
	  };
	
	  scale.invert = function(_) {
	    var value = scale.invertRange([_, _]);
	    return value ? value[0] : value;
	  };
	
	  scale.copy = function() {
	    return band$$1()
	        .domain(domain())
	        .range(range)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };
	
	  return rescale();
	}
	
	function pointish(scale) {
	  var copy = scale.copy;
	
	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	
	  scale.copy = function() {
	    return pointish(copy());
	  };
	
	  return scale;
	}
	
	function point$5() {
	  return pointish(band$$1().paddingInner(1));
	}
	
	var map$4 = Array.prototype.map;
	var slice$3 = Array.prototype.slice;
	
	function numbers$1(_) {
	  return map$4.call(_, function(x) { return +x; });
	}
	
	function binLinear() {
	  var linear$$1 = linear(),
	      domain = [];
	
	  function scale(x) {
	    return linear$$1(x);
	  }
	
	  function setDomain(_) {
	    domain = numbers$1(_);
	    linear$$1.domain([domain[0], peek(domain)]);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (setDomain(_), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (linear$$1.range(_), scale) : linear$$1.range();
	  };
	
	  scale.rangeRound = function(_) {
	    return arguments.length ? (linear$$1.rangeRound(_), scale) : linear$$1.rangeRound();
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (linear$$1.interpolate(_), scale) : linear$$1.interpolate();
	  };
	
	  scale.invert = function(_) {
	    return linear$$1.invert(_);
	  };
	
	  scale.ticks = function(count) {
	    var n = domain.length,
	        stride = ~~(n / (count || n));
	
	    return stride < 2
	      ? scale.domain()
	      : domain.filter(function(x, i) { return !(i % stride); });
	  };
	
	  scale.tickFormat = function() {
	    return linear$$1.tickFormat.apply(linear$$1, arguments);
	  };
	
	  scale.copy = function() {
	    return binLinear().domain(scale.domain()).range(scale.range());
	  };
	
	  return scale;
	}
	
	function binOrdinal() {
	  var domain = [],
	      range = [];
	
	  function scale(x) {
	    return x == null || x !== x
	      ? undefined
	      : range[(bisectRight(domain, x) - 1) % range.length];
	  }
	
	  scale.domain = function(_) {
	    if (arguments.length) {
	      domain = numbers$1(_);
	      return scale;
	    } else {
	      return domain.slice();
	    }
	  };
	
	  scale.range = function(_) {
	    if (arguments.length) {
	      range = slice$3.call(_);
	      return scale;
	    } else {
	      return range.slice();
	    }
	  };
	
	  scale.copy = function() {
	    return binOrdinal().domain(scale.domain()).range(scale.range());
	  };
	
	  return scale;
	}
	
	function sequential$1(interpolator) {
	  var linear$$1 = linear(),
	      x0 = 0,
	      dx = 1,
	      clamp = false;
	
	  function update() {
	    var domain = linear$$1.domain();
	    x0 = domain[0];
	    dx = peek(domain) - x0;
	  }
	
	  function scale(x) {
	    var t = (x - x0) / dx;
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }
	
	  scale.clamp = function(_) {
	    if (arguments.length) {
	      clamp = !!_;
	      return scale;
	    } else {
	      return clamp;
	    }
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (linear$$1.domain(_), update(), scale) : linear$$1.domain();
	  };
	
	  scale.interpolator = function(_) {
	    if (arguments.length) {
	      interpolator = _;
	      return scale;
	    } else {
	      return interpolator;
	    }
	  };
	
	  scale.copy = function() {
	    return sequential$1().domain(linear$$1.domain()).clamp(clamp).interpolator(interpolator);
	  };
	
	  scale.ticks = function(count) {
	    return linear$$1.ticks(count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return linear$$1.tickFormat(count, specifier);
	  };
	
	  scale.nice = function(count) {
	    return linear$$1.nice(count), update(), scale;
	  };
	
	  return scale;
	}
	
	/**
	 * Augment scales with their type and needed inverse methods.
	 */
	function create(type, constructor) {
	  return function scale() {
	    var s = constructor();
	
	    if (!s.invertRange) {
	      s.invertRange = s.invert ? invertRange(s)
	        : s.invertExtent ? invertRangeExtent(s)
	        : undefined;
	    }
	
	    s.type = type;
	    return s;
	  };
	}
	
	function scale$1(type, scale) {
	  if (arguments.length > 1) {
	    scales[type] = create(type, scale);
	    return this;
	  } else {
	    return scales.hasOwnProperty(type) ? scales[type] : undefined;
	  }
	}
	
	var scales = {
	  // base scale types
	  identity:      identity$4,
	  linear:        linear,
	  log:           log$2,
	  ordinal:       ordinal,
	  pow:           pow$1,
	  sqrt:          sqrt$1,
	  quantile:      quantile,
	  quantize:      quantize$2,
	  threshold:     threshold$1,
	  time:          time,
	  utc:           utcTime,
	
	  // extended scale types
	  band:          band$$1,
	  point:         point$5,
	  sequential:    sequential$1,
	  'bin-linear':  binLinear,
	  'bin-ordinal': binOrdinal
	};
	
	for (var key$1 in scales) {
	  scale$1(key$1, scales[key$1]);
	}
	
	function colors$1(specifier) {
	  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
	  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
	  return colors;
	}
	
	var tableau10 = colors$1(
	  '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac'
	);
	
	var tableau20 = colors$1(
	  '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5'
	);
	
	var blueOrange = new Array(3).concat(
	  "67a9cff7f7f7f1a340",
	  "0571b092c5defdb863e66101",
	  "0571b092c5def7f7f7fdb863e66101",
	  "2166ac67a9cfd1e5f0fee0b6f1a340b35806",
	  "2166ac67a9cfd1e5f0f7f7f7fee0b6f1a340b35806",
	  "2166ac4393c392c5ded1e5f0fee0b6fdb863e08214b35806",
	  "2166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b35806",
	  "0530612166ac4393c392c5ded1e5f0fee0b6fdb863e08214b358067f3b08",
	  "0530612166ac4393c392c5ded1e5f0f7f7f7fee0b6fdb863e08214b358067f3b08"
	).map(colors$1);
	
	var colors$2 = function(specifier) {
	  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
	  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
	  return colors;
	};
	
	var Accent = colors$2("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
	
	var Dark2 = colors$2("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
	
	var Paired = colors$2("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
	
	var Pastel1 = colors$2("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
	
	var Pastel2 = colors$2("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
	
	var Set1 = colors$2("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
	
	var Set2 = colors$2("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
	
	var Set3 = colors$2("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
	
	var ramp$1 = function(scheme) {
	  return rgbBasis(scheme[scheme.length - 1]);
	};
	
	var scheme = new Array(3).concat(
	  "d8b365f5f5f55ab4ac",
	  "a6611adfc27d80cdc1018571",
	  "a6611adfc27df5f5f580cdc1018571",
	  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
	  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
	  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
	  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
	  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
	  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
	).map(colors$2);
	
	var BrBG = ramp$1(scheme);
	
	var scheme$1 = new Array(3).concat(
	  "af8dc3f7f7f77fbf7b",
	  "7b3294c2a5cfa6dba0008837",
	  "7b3294c2a5cff7f7f7a6dba0008837",
	  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
	  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
	  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
	  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
	  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
	  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
	).map(colors$2);
	
	var PRGn = ramp$1(scheme$1);
	
	var scheme$2 = new Array(3).concat(
	  "e9a3c9f7f7f7a1d76a",
	  "d01c8bf1b6dab8e1864dac26",
	  "d01c8bf1b6daf7f7f7b8e1864dac26",
	  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
	  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
	  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
	  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
	  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
	  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
	).map(colors$2);
	
	var PiYG = ramp$1(scheme$2);
	
	var scheme$3 = new Array(3).concat(
	  "998ec3f7f7f7f1a340",
	  "5e3c99b2abd2fdb863e66101",
	  "5e3c99b2abd2f7f7f7fdb863e66101",
	  "542788998ec3d8daebfee0b6f1a340b35806",
	  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
	  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
	  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
	  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
	  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
	).map(colors$2);
	
	var PuOr = ramp$1(scheme$3);
	
	var scheme$4 = new Array(3).concat(
	  "ef8a62f7f7f767a9cf",
	  "ca0020f4a58292c5de0571b0",
	  "ca0020f4a582f7f7f792c5de0571b0",
	  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
	  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
	  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
	  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
	  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
	  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
	).map(colors$2);
	
	var RdBu = ramp$1(scheme$4);
	
	var scheme$5 = new Array(3).concat(
	  "ef8a62ffffff999999",
	  "ca0020f4a582bababa404040",
	  "ca0020f4a582ffffffbababa404040",
	  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
	  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
	  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
	  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
	  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
	  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
	).map(colors$2);
	
	var RdGy = ramp$1(scheme$5);
	
	var scheme$6 = new Array(3).concat(
	  "fc8d59ffffbf91bfdb",
	  "d7191cfdae61abd9e92c7bb6",
	  "d7191cfdae61ffffbfabd9e92c7bb6",
	  "d73027fc8d59fee090e0f3f891bfdb4575b4",
	  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
	  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
	  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
	  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
	  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
	).map(colors$2);
	
	var RdYlBu = ramp$1(scheme$6);
	
	var scheme$7 = new Array(3).concat(
	  "fc8d59ffffbf91cf60",
	  "d7191cfdae61a6d96a1a9641",
	  "d7191cfdae61ffffbfa6d96a1a9641",
	  "d73027fc8d59fee08bd9ef8b91cf601a9850",
	  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
	  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
	  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
	  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
	  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
	).map(colors$2);
	
	var RdYlGn = ramp$1(scheme$7);
	
	var scheme$8 = new Array(3).concat(
	  "fc8d59ffffbf99d594",
	  "d7191cfdae61abdda42b83ba",
	  "d7191cfdae61ffffbfabdda42b83ba",
	  "d53e4ffc8d59fee08be6f59899d5943288bd",
	  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
	  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
	  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
	  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
	  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
	).map(colors$2);
	
	var Spectral = ramp$1(scheme$8);
	
	var scheme$9 = new Array(3).concat(
	  "e5f5f999d8c92ca25f",
	  "edf8fbb2e2e266c2a4238b45",
	  "edf8fbb2e2e266c2a42ca25f006d2c",
	  "edf8fbccece699d8c966c2a42ca25f006d2c",
	  "edf8fbccece699d8c966c2a441ae76238b45005824",
	  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
	  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
	).map(colors$2);
	
	var BuGn = ramp$1(scheme$9);
	
	var scheme$10 = new Array(3).concat(
	  "e0ecf49ebcda8856a7",
	  "edf8fbb3cde38c96c688419d",
	  "edf8fbb3cde38c96c68856a7810f7c",
	  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
	  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
	  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
	  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
	).map(colors$2);
	
	var BuPu = ramp$1(scheme$10);
	
	var scheme$11 = new Array(3).concat(
	  "e0f3dba8ddb543a2ca",
	  "f0f9e8bae4bc7bccc42b8cbe",
	  "f0f9e8bae4bc7bccc443a2ca0868ac",
	  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
	  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
	  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
	  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
	).map(colors$2);
	
	var GnBu = ramp$1(scheme$11);
	
	var scheme$12 = new Array(3).concat(
	  "fee8c8fdbb84e34a33",
	  "fef0d9fdcc8afc8d59d7301f",
	  "fef0d9fdcc8afc8d59e34a33b30000",
	  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
	  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
	  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
	  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
	).map(colors$2);
	
	var OrRd = ramp$1(scheme$12);
	
	var scheme$13 = new Array(3).concat(
	  "ece2f0a6bddb1c9099",
	  "f6eff7bdc9e167a9cf02818a",
	  "f6eff7bdc9e167a9cf1c9099016c59",
	  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
	  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
	  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
	  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
	).map(colors$2);
	
	var PuBuGn = ramp$1(scheme$13);
	
	var scheme$14 = new Array(3).concat(
	  "ece7f2a6bddb2b8cbe",
	  "f1eef6bdc9e174a9cf0570b0",
	  "f1eef6bdc9e174a9cf2b8cbe045a8d",
	  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
	  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
	  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
	  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
	).map(colors$2);
	
	var PuBu = ramp$1(scheme$14);
	
	var scheme$15 = new Array(3).concat(
	  "e7e1efc994c7dd1c77",
	  "f1eef6d7b5d8df65b0ce1256",
	  "f1eef6d7b5d8df65b0dd1c77980043",
	  "f1eef6d4b9dac994c7df65b0dd1c77980043",
	  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
	  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
	  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
	).map(colors$2);
	
	var PuRd = ramp$1(scheme$15);
	
	var scheme$16 = new Array(3).concat(
	  "fde0ddfa9fb5c51b8a",
	  "feebe2fbb4b9f768a1ae017e",
	  "feebe2fbb4b9f768a1c51b8a7a0177",
	  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
	  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
	  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
	  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
	).map(colors$2);
	
	var RdPu = ramp$1(scheme$16);
	
	var scheme$17 = new Array(3).concat(
	  "edf8b17fcdbb2c7fb8",
	  "ffffcca1dab441b6c4225ea8",
	  "ffffcca1dab441b6c42c7fb8253494",
	  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
	  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
	  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
	  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
	).map(colors$2);
	
	var YlGnBu = ramp$1(scheme$17);
	
	var scheme$18 = new Array(3).concat(
	  "f7fcb9addd8e31a354",
	  "ffffccc2e69978c679238443",
	  "ffffccc2e69978c67931a354006837",
	  "ffffccd9f0a3addd8e78c67931a354006837",
	  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
	  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
	  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
	).map(colors$2);
	
	var YlGn = ramp$1(scheme$18);
	
	var scheme$19 = new Array(3).concat(
	  "fff7bcfec44fd95f0e",
	  "ffffd4fed98efe9929cc4c02",
	  "ffffd4fed98efe9929d95f0e993404",
	  "ffffd4fee391fec44ffe9929d95f0e993404",
	  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
	  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
	  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
	).map(colors$2);
	
	var YlOrBr = ramp$1(scheme$19);
	
	var scheme$20 = new Array(3).concat(
	  "ffeda0feb24cf03b20",
	  "ffffb2fecc5cfd8d3ce31a1c",
	  "ffffb2fecc5cfd8d3cf03b20bd0026",
	  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
	  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
	  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
	  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
	).map(colors$2);
	
	var YlOrRd = ramp$1(scheme$20);
	
	var scheme$21 = new Array(3).concat(
	  "deebf79ecae13182bd",
	  "eff3ffbdd7e76baed62171b5",
	  "eff3ffbdd7e76baed63182bd08519c",
	  "eff3ffc6dbef9ecae16baed63182bd08519c",
	  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
	  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
	  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
	).map(colors$2);
	
	var Blues = ramp$1(scheme$21);
	
	var scheme$22 = new Array(3).concat(
	  "e5f5e0a1d99b31a354",
	  "edf8e9bae4b374c476238b45",
	  "edf8e9bae4b374c47631a354006d2c",
	  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
	  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
	  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
	  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
	).map(colors$2);
	
	var Greens = ramp$1(scheme$22);
	
	var scheme$23 = new Array(3).concat(
	  "f0f0f0bdbdbd636363",
	  "f7f7f7cccccc969696525252",
	  "f7f7f7cccccc969696636363252525",
	  "f7f7f7d9d9d9bdbdbd969696636363252525",
	  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
	  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
	  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
	).map(colors$2);
	
	var Greys = ramp$1(scheme$23);
	
	var scheme$24 = new Array(3).concat(
	  "efedf5bcbddc756bb1",
	  "f2f0f7cbc9e29e9ac86a51a3",
	  "f2f0f7cbc9e29e9ac8756bb154278f",
	  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
	  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
	  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
	  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
	).map(colors$2);
	
	var Purples = ramp$1(scheme$24);
	
	var scheme$25 = new Array(3).concat(
	  "fee0d2fc9272de2d26",
	  "fee5d9fcae91fb6a4acb181d",
	  "fee5d9fcae91fb6a4ade2d26a50f15",
	  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
	  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
	  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
	  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
	).map(colors$2);
	
	var Reds = ramp$1(scheme$25);
	
	var scheme$26 = new Array(3).concat(
	  "fee6cefdae6be6550d",
	  "feeddefdbe85fd8d3cd94701",
	  "feeddefdbe85fd8d3ce6550da63603",
	  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
	  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
	  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
	  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
	).map(colors$2);
	
	var Oranges = ramp$1(scheme$26);
	
	
	
	var _ = Object.freeze({
		schemeAccent: Accent,
		schemeDark2: Dark2,
		schemePaired: Paired,
		schemePastel1: Pastel1,
		schemePastel2: Pastel2,
		schemeSet1: Set1,
		schemeSet2: Set2,
		schemeSet3: Set3,
		interpolateBrBG: BrBG,
		schemeBrBG: scheme,
		interpolatePRGn: PRGn,
		schemePRGn: scheme$1,
		interpolatePiYG: PiYG,
		schemePiYG: scheme$2,
		interpolatePuOr: PuOr,
		schemePuOr: scheme$3,
		interpolateRdBu: RdBu,
		schemeRdBu: scheme$4,
		interpolateRdGy: RdGy,
		schemeRdGy: scheme$5,
		interpolateRdYlBu: RdYlBu,
		schemeRdYlBu: scheme$6,
		interpolateRdYlGn: RdYlGn,
		schemeRdYlGn: scheme$7,
		interpolateSpectral: Spectral,
		schemeSpectral: scheme$8,
		interpolateBuGn: BuGn,
		schemeBuGn: scheme$9,
		interpolateBuPu: BuPu,
		schemeBuPu: scheme$10,
		interpolateGnBu: GnBu,
		schemeGnBu: scheme$11,
		interpolateOrRd: OrRd,
		schemeOrRd: scheme$12,
		interpolatePuBuGn: PuBuGn,
		schemePuBuGn: scheme$13,
		interpolatePuBu: PuBu,
		schemePuBu: scheme$14,
		interpolatePuRd: PuRd,
		schemePuRd: scheme$15,
		interpolateRdPu: RdPu,
		schemeRdPu: scheme$16,
		interpolateYlGnBu: YlGnBu,
		schemeYlGnBu: scheme$17,
		interpolateYlGn: YlGn,
		schemeYlGn: scheme$18,
		interpolateYlOrBr: YlOrBr,
		schemeYlOrBr: scheme$19,
		interpolateYlOrRd: YlOrRd,
		schemeYlOrRd: scheme$20,
		interpolateBlues: Blues,
		schemeBlues: scheme$21,
		interpolateGreens: Greens,
		schemeGreens: scheme$22,
		interpolateGreys: Greys,
		schemeGreys: scheme$23,
		interpolatePurples: Purples,
		schemePurples: scheme$24,
		interpolateReds: Reds,
		schemeReds: scheme$25,
		interpolateOranges: Oranges,
		schemeOranges: scheme$26
	});
	
	var discrete = {
	  blueorange:  blueOrange
	};
	
	var schemes = {
	  // d3 built-in categorical palettes
	  category10:  category10,
	  category20:  category20,
	  category20b: category20b,
	  category20c: category20c,
	
	  // extended categorical palettes
	  accent:      Accent,
	  dark2:       Dark2,
	  paired:      Paired,
	  pastel1:     Pastel1,
	  pastel2:     Pastel2,
	  set1:        Set1,
	  set2:        Set2,
	  set3:        Set3,
	  tableau10:   tableau10,
	  tableau20:   tableau20,
	
	  // d3 built-in interpolators
	  viridis:     viridis,
	  magma:       magma,
	  inferno:     inferno,
	  plasma:      plasma,
	
	  // extended interpolators
	  blueorange:  rgbBasis(peek(blueOrange))
	};
	
	function add$2(name, suffix) {
	  schemes[name] = _['interpolate' + suffix];
	  discrete[name] = _['scheme' + suffix];
	}
	
	// sequential single-hue
	add$2('blues',    'Blues');
	add$2('greens',   'Greens');
	add$2('greys',    'Greys');
	add$2('purples',  'Purples');
	add$2('reds',     'Reds');
	add$2('oranges',  'Oranges');
	
	// diverging
	add$2('brownbluegreen',    'BrBG');
	add$2('purplegreen',       'PRGn');
	add$2('pinkyellowgreen',   'PiYG');
	add$2('purpleorange',      'PuOr');
	add$2('redblue',           'RdBu');
	add$2('redgrey',           'RdGy');
	add$2('redyellowblue',     'RdYlBu');
	add$2('redyellowgreen',    'RdYlGn');
	add$2('spectral',          'Spectral');
	
	// sequential multi-hue
	add$2('bluegreen',         'BuGn');
	add$2('bluepurple',        'BuPu');
	add$2('greenblue',         'GnBu');
	add$2('orangered',         'OrRd');
	add$2('purplebluegreen',   'PuBuGn');
	add$2('purpleblue',        'PuBu');
	add$2('purplered',         'PuRd');
	add$2('redpurple',         'RdPu');
	add$2('yellowgreenblue',   'YlGnBu');
	add$2('yellowgreen',       'YlGn');
	add$2('yelloworangebrown', 'YlOrBr');
	add$2('yelloworangered',   'YlOrRd');
	
	var getScheme = function(name, scheme$$1) {
	  if (arguments.length > 1) {
	    schemes[name] = scheme$$1;
	    return this;
	  }
	
	  var part = name.split('-');
	  name = part[0];
	  part = +part[1] + 1;
	
	  return part && discrete.hasOwnProperty(name) ? discrete[name][part-1]
	    : !part && schemes.hasOwnProperty(name) ? schemes[name]
	    : undefined;
	};
	
	function interpolateRange(interpolator, range) {
	  var start = range[0],
	      span = peek(range) - start;
	  return function(i) { return interpolator(start + i * span); };
	}
	
	function scaleFraction(scale, min, max) {
	  var delta = max - min;
	  return !delta ? constant(0)
	    : scale.type === 'linear' || scale.type === 'sequential'
	      ? function(_) { return (_ - min) / delta; }
	      : scale.copy().domain([min, max]).range([0, 1]).interpolate(lerp);
	}
	
	function lerp(a, b) {
	  var span = b - a;
	  return function(i) { return a + i * span; }
	}
	
	function interpolate$1(type, gamma) {
	  var interp = $$1[method(type)];
	  return (gamma != null && interp && interp.gamma)
	    ? interp.gamma(gamma)
	    : interp;
	}
	
	function method(type) {
	  return 'interpolate' + type.toLowerCase()
	    .split('-')
	    .map(function(s) { return s[0].toUpperCase() + s.slice(1); })
	    .join('');
	}
	
	var time$1 = {
	  millisecond: millisecond,
	  second:      second,
	  minute:      minute,
	  hour:        hour,
	  day:         day,
	  week:        sunday,
	  month:       month,
	  year:        year
	};
	
	var utc = {
	  millisecond: millisecond,
	  second:      second,
	  minute:      utcMinute,
	  hour:        utcHour,
	  day:         utcDay,
	  week:        utcSunday,
	  month:       utcMonth,
	  year:        utcYear
	};
	
	function timeInterval(name) {
	  return time$1.hasOwnProperty(name) && time$1[name];
	}
	
	function utcInterval(name) {
	  return utc.hasOwnProperty(name) && utc[name];
	}
	
	/**
	 * Determine the tick count or interval function.
	 * @param {Scale} scale - The scale for which to generate tick values.
	 * @param {*} count - The desired tick count or interval specifier.
	 * @return {*} - The tick count or interval function.
	 */
	function tickCount(scale$$1, count) {
	  var step;
	
	  if (isObject(count)) {
	    step = count.step;
	    count = count.interval;
	  }
	
	  if (isString(count)) {
	    count = scale$$1.type === 'time' ? timeInterval(count)
	      : scale$$1.type === 'utc' ? utcInterval(count)
	      : error$1('Only time and utc scales accept interval strings.');
	    if (step) count = count.every(step);
	  }
	
	  return count;
	}
	
	/**
	 * Filter a set of candidate tick values, ensuring that only tick values
	 * that lie within the scale range are included.
	 * @param {Scale} scale - The scale for which to generate tick values.
	 * @param {Array<*>} ticks - The candidate tick values.
	 * @param {*} count - The tick count or interval function.
	 * @return {Array<*>} - The filtered tick values.
	 */
	function validTicks(scale$$1, ticks, count) {
	  var range = scale$$1.range(),
	      lo = range[0],
	      hi = peek(range);
	  if (lo > hi) {
	    range = hi;
	    hi = lo;
	    lo = range;
	  }
	
	  ticks = ticks.filter(function(v) {
	    v = scale$$1(v);
	    return !(v < lo || v > hi)
	  });
	
	  if (count > 0 && ticks.length > 1) {
	    var endpoints = [ticks[0], peek(ticks)];
	    while (ticks.length > count && ticks.length >= 3) {
	      ticks = ticks.filter(function(_, i) { return !(i % 2); });
	    }
	    if (ticks.length < 3) {
	      ticks = endpoints;
	    }
	  }
	
	  return ticks;
	}
	
	/**
	 * Generate tick values for the given scale and approximate tick count or
	 * interval value. If the scale has a 'ticks' method, it will be used to
	 * generate the ticks, with the count argument passed as a parameter. If the
	 * scale lacks a 'ticks' method, the full scale domain will be returned.
	 * @param {Scale} scale - The scale for which to generate tick values.
	 * @param {*} [count] - The approximate number of desired ticks.
	 * @return {Array<*>} - The generated tick values.
	 */
	function tickValues(scale$$1, count) {
	  return scale$$1.ticks ? scale$$1.ticks(count) : scale$$1.domain();
	}
	
	/**
	 * Generate a label format function for a scale. If the scale has a
	 * 'tickFormat' method, it will be used to generate the formatter, with the
	 * count and specifier arguments passed as parameters. If the scale lacks a
	 * 'tickFormat' method, the returned formatter performs simple string coercion.
	 * If the input scale is a logarithmic scale and the format specifier does not
	 * indicate a desired decimal precision, a special variable precision formatter
	 * that automatically trims trailing zeroes will be generated.
	 * @param {Scale} scale - The scale for which to generate the label formatter.
	 * @param {*} [count] - The approximate number of desired ticks.
	 * @param {string} [specifier] - The format specifier. Must be a legal d3 4.0
	 *   specifier string (see https://github.com/d3/d3-format#formatSpecifier).
	 * @return {function(*):string} - The generated label formatter.
	 */
	function tickFormat(scale$$1, count, specifier) {
	  var format$$1 = scale$$1.tickFormat
	    ? scale$$1.tickFormat(count, specifier)
	    : String;
	
	  return (scale$$1.type === Log)
	    ? filter$1(format$$1, variablePrecision(specifier))
	    : format$$1;
	}
	
	function filter$1(sourceFormat, targetFormat) {
	  return function(_) {
	    return sourceFormat(_) ? targetFormat(_) : '';
	  };
	}
	
	function variablePrecision(specifier) {
	  var s = formatSpecifier(specifier || ',');
	
	  if (s.precision == null) {
	    s.precision = 12;
	    switch (s.type) {
	      case '%': s.precision -= 2; break;
	      case 'e': s.precision -= 1; break;
	    }
	    return trimZeroes(
	      format(s),          // number format
	      format('.1f')(1)[1] // decimal point character
	    );
	  } else {
	    return format(s);
	  }
	}
	
	function trimZeroes(format$$1, decimalChar) {
	  return function(x) {
	    var str = format$$1(x),
	        dec = str.indexOf(decimalChar),
	        idx, end;
	
	    if (dec < 0) return str;
	
	    idx = rightmostDigit(str, dec);
	    end = idx < str.length ? str.slice(idx) : '';
	    while (--idx > dec) if (str[idx] !== '0') { ++idx; break; }
	
	    return str.slice(0, idx) + end;
	  };
	}
	
	function rightmostDigit(str, dec) {
	  var i = str.lastIndexOf('e'), c;
	  if (i > 0) return i;
	  for (i=str.length; --i > dec;) {
	    c = str.charCodeAt(i);
	    if (c >= 48 && c <= 57) return i + 1; // is digit
	  }
	}
	
	/**
	 * Generates axis ticks for visualizing a spatial scale.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Scale} params.scale - The scale to generate ticks for.
	 * @param {*} [params.count=10] - The approximate number of ticks, or
	 *   desired tick interval, to use.
	 * @param {Array<*>} [params.values] - The exact tick values to use.
	 *   These must be legal domain values for the provided scale.
	 *   If provided, the count argument is ignored.
	 * @param {function(*):string} [params.formatSpecifier] - A format specifier
	 *   to use in conjunction with scale.tickFormat. Legal values are
	 *   any valid d3 4.0 format specifier.
	 * @param {function(*):string} [params.format] - The format function to use.
	 *   If provided, the formatSpecifier argument is ignored.
	 */
	function AxisTicks(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$52 = inherits(AxisTicks, Transform);
	
	prototype$52.transform = function(_, pulse) {
	  if (this.value && !_.modified()) {
	    return pulse.StopPropagation;
	  }
	
	  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
	      ticks = this.value,
	      scale = _.scale,
	      count = _.count == null ? (_.values ? _.values.length : 10) : tickCount(scale, _.count),
	      format = _.format || tickFormat(scale, count, _.formatSpecifier),
	      values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);
	
	  if (ticks) out.rem = ticks;
	
	  ticks = values.map(function(value, i) {
	    return ingest({
	      index: i / (values.length - 1),
	      value: value,
	      label: format(value)
	    });
	  });
	
	  if (_.extra) {
	    // add an extra tick pegged to the initial domain value
	    // this is used to generate axes with 'binned' domains
	    ticks.push(ingest({
	      index: -1,
	      extra: {value: ticks[0].value},
	      label: ''
	    }));
	  }
	
	  out.source = ticks;
	  out.add = ticks;
	  this.value = ticks;
	
	  return out;
	};
	
	/**
	 * Joins a set of data elements against a set of visual items.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): object} [params.item] - An item generator function.
	 * @param {function(object): *} [params.key] - The key field associating data and visual items.
	 */
	function DataJoin(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$53 = inherits(DataJoin, Transform);
	
	function defaultItemCreate() {
	  return ingest({});
	}
	
	function isExit(t) {
	  return t.exit;
	}
	
	prototype$53.transform = function(_, pulse) {
	  var df = pulse.dataflow,
	      out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
	      item = _.item || defaultItemCreate,
	      key$$1 = _.key || tupleid,
	      map = this.value;
	
	  // prevent transient (e.g., hover) requests from
	  // cascading across marks derived from marks
	  if (isArray(out.encode)) {
	    out.encode = null;
	  }
	
	  if (map && (_.modified('key') || pulse.modified(key$$1))) {
	    error$1('DataJoin does not support modified key function or fields.');
	  }
	
	  if (!map) {
	    pulse = pulse.addAll();
	    this.value = map = fastmap().test(isExit);
	    map.lookup = function(t) { return map.get(key$$1(t)); };
	  }
	
	  pulse.visit(pulse.ADD, function(t) {
	    var k = key$$1(t),
	        x = map.get(k);
	
	    if (x) {
	      if (x.exit) {
	        map.empty--;
	        out.add.push(x);
	      } else {
	        out.mod.push(x);
	      }
	    } else {
	      map.set(k, (x = item(t)));
	      out.add.push(x);
	    }
	
	    x.datum = t;
	    x.exit = false;
	  });
	
	  pulse.visit(pulse.MOD, function(t) {
	    var k = key$$1(t),
	        x = map.get(k);
	
	    if (x) {
	      x.datum = t;
	      out.mod.push(x);
	    }
	  });
	
	  pulse.visit(pulse.REM, function(t) {
	    var k = key$$1(t),
	        x = map.get(k);
	
	    if (t === x.datum && !x.exit) {
	      out.rem.push(x);
	      x.exit = true;
	      ++map.empty;
	    }
	  });
	
	  if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');
	
	  if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);
	
	  return out;
	};
	
	/**
	 * Invokes encoding functions for visual items.
	 * @constructor
	 * @param {object} params - The parameters to the encoding functions. This
	 *   parameter object will be passed through to all invoked encoding functions.
	 * @param {object} param.encoders - The encoding functions
	 * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
	 * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
	 * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
	 */
	function Encode(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$54 = inherits(Encode, Transform);
	
	prototype$54.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.ADD_REM),
	      encoders = _.encoders,
	      encode = pulse.encode;
	
	  // if an array, the encode directive includes additional sets
	  // that must be defined in order for the primary set to be invoked
	  // e.g., only run the update set if the hover set is defined
	  if (isArray(encode)) {
	    if (out.changed() || encode.every(function(e) { return encoders[e]; })) {
	      encode = encode[0];
	    } else {
	      return pulse.StopPropagation;
	    }
	  }
	
	  // marshall encoder functions
	  var reenter = encode === 'enter',
	      update = encoders.update || falsy,
	      enter = encoders.enter || falsy,
	      exit = encoders.exit || falsy,
	      set = (encode && !reenter ? encoders[encode] : update) || falsy;
	
	  if (pulse.changed(pulse.ADD)) {
	    pulse.visit(pulse.ADD, function(t) {
	      enter(t, _);
	      update(t, _);
	      if (set !== falsy && set !== update) set(t, _);
	    });
	    out.modifies(enter.output);
	    out.modifies(update.output);
	    if (set !== falsy && set !== update) out.modifies(set.output);
	  }
	
	  if (pulse.changed(pulse.REM) && exit !== falsy) {
	    pulse.visit(pulse.REM, function(t) { exit(t, _); });
	    out.modifies(exit.output);
	  }
	
	  if (reenter || set !== falsy) {
	    var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);
	    if (reenter) {
	      pulse.visit(flag, function(t) {
	        var mod = enter(t, _);
	        if (set(t, _) || mod) out.mod.push(t);
	      });
	      if (out.mod.length) out.modifies(enter.output);
	    } else {
	      pulse.visit(flag, function(t) {
	        if (set(t, _)) out.mod.push(t);
	      });
	    }
	    if (out.mod.length) out.modifies(set.output);
	  }
	
	  return out.changed() ? out : pulse.StopPropagation;
	};
	
	var discrete$1 = {};
	discrete$1[Quantile] = quantile$1;
	discrete$1[Quantize] = quantize$3;
	discrete$1[Threshold] = threshold$2;
	discrete$1[BinLinear] = bin$1;
	discrete$1[BinOrdinal] = bin$1;
	
	function labelValues(scale, count, gradient) {
	  if (gradient) return scale.domain();
	  var values = discrete$1[scale.type];
	  return values ? values(scale) : tickValues(scale, count);
	}
	
	function quantize$3(scale) {
	  var domain = scale.domain(),
	      x0 = domain[0],
	      x1 = peek(domain),
	      n = scale.range().length,
	      values = new Array(n),
	      i = 0;
	
	  values[0] = -Infinity;
	  while (++i < n) values[i] = (i * x1 - (i - n) * x0) / n;
	  values.max = +Infinity;
	
	  return values;
	}
	
	function quantile$1(scale) {
	  var values = [-Infinity].concat(scale.quantiles());
	  values.max = +Infinity;
	
	  return values;
	}
	
	function threshold$2(scale) {
	  var values = [-Infinity].concat(scale.domain());
	  values.max = +Infinity;
	
	  return values;
	}
	
	function bin$1(scale) {
	  var values = scale.domain();
	  values.max = values.pop();
	
	  return values;
	}
	
	function labelFormat(scale, format) {
	  return discrete$1[scale.type] ? formatRange(format) : formatPoint(format);
	}
	
	function formatRange(format) {
	  return function(value, index, array$$1) {
	    var limit = array$$1[index + 1] || array$$1.max || +Infinity,
	        lo = formatValue(value, format),
	        hi = formatValue(limit, format);
	    return lo && hi ? lo + '\u2013' + hi : hi ? '< ' + hi : '\u2265 ' + lo;
	  };
	}
	
	function formatValue(value, format) {
	  return isFinite(value) ? format(value) : null;
	}
	
	function formatPoint(format) {
	  return function(value) {
	    return format(value);
	  };
	}
	
	/**
	 * Generates legend entries for visualizing a scale.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Scale} params.scale - The scale to generate items for.
	 * @param {*} [params.count=10] - The approximate number of items, or
	 *   desired tick interval, to use.
	 * @param {Array<*>} [params.values] - The exact tick values to use.
	 *   These must be legal domain values for the provided scale.
	 *   If provided, the count argument is ignored.
	 * @param {function(*):string} [params.formatSpecifier] - A format specifier
	 *   to use in conjunction with scale.tickFormat. Legal values are
	 *   any valid d3 4.0 format specifier.
	 * @param {function(*):string} [params.format] - The format function to use.
	 *   If provided, the formatSpecifier argument is ignored.
	 */
	function LegendEntries(params) {
	  Transform.call(this, [], params);
	}
	
	var prototype$55 = inherits(LegendEntries, Transform);
	
	prototype$55.transform = function(_, pulse) {
	  if (this.value != null && !_.modified()) {
	    return pulse.StopPropagation;
	  }
	
	  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
	      total = 0,
	      items = this.value,
	      grad  = _.type === 'gradient',
	      scale = _.scale,
	      count = _.count == null ? 5 : tickCount(scale, _.count),
	      format = _.format || tickFormat(scale, count, _.formatSpecifier),
	      values = _.values || labelValues(scale, count, grad);
	
	  format = labelFormat(scale, format);
	  if (items) out.rem = items;
	
	  if (grad) {
	    var domain = _.values ? scale.domain() : values,
	        fraction = scaleFraction(scale, domain[0], peek(domain));
	  } else {
	    var size = _.size,
	        offset;
	    if (isFunction(size)) {
	      // if first value maps to size zero, remove from list (vega#717)
	      if (!_.values && scale(values[0]) === 0) {
	        values = values.slice(1);
	      }
	      // compute size offset for legend entries
	      offset = values.reduce(function(max, value) {
	        return Math.max(max, size(value, _));
	      }, 0);
	    } else {
	      size = constant(offset = size || 8);
	    }
	  }
	
	  items = values.map(function(value, index) {
	    var t = ingest({
	      index: index,
	      label: format(value, index, values),
	      value: value
	    });
	
	    if (grad) {
	      t.perc = fraction(value);
	    } else {
	      t.offset = offset;
	      t.size = size(value, _);
	      t.total = Math.round(total);
	      total += t.size;
	    }
	    return t;
	  });
	
	  out.source = items;
	  out.add = items;
	  this.value = items;
	
	  return out;
	};
	
	var Paths = fastmap({
	  'line': line$3,
	  'line-radial': lineR,
	  'arc': arc$2,
	  'arc-radial': arcR,
	  'curve': curve,
	  'curve-radial': curveR,
	  'orthogonal-horizontal': orthoX,
	  'orthogonal-vertical': orthoY,
	  'orthogonal-radial': orthoR,
	  'diagonal-horizontal': diagonalX,
	  'diagonal-vertical': diagonalY,
	  'diagonal-radial': diagonalR
	});
	
	function sourceX(t) { return t.source.x; }
	function sourceY(t) { return t.source.y; }
	function targetX(t) { return t.target.x; }
	function targetY(t) { return t.target.y; }
	
	 /**
	  * Layout paths linking source and target elements.
	  * @constructor
	  * @param {object} params - The parameters for this operator.
	  */
	function LinkPath(params) {
	  Transform.call(this, {}, params);
	}
	
	LinkPath.Definition = {
	  "type": "LinkPath",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "sourceX", "type": "field", "default": "source.x" },
	    { "name": "sourceY", "type": "field", "default": "source.y" },
	    { "name": "targetX", "type": "field", "default": "target.x" },
	    { "name": "targetY", "type": "field", "default": "target.y" },
	    { "name": "orient", "type": "enum", "default": "vertical",
	      "values": ["horizontal", "vertical", "radial"] },
	    { "name": "shape", "type": "enum", "default": "line",
	      "values": ["line", "arc", "curve", "diagonal", "orthogonal"] },
	    { "name": "as", "type": "string", "default": "path" }
	  ]
	};
	
	var prototype$56 = inherits(LinkPath, Transform);
	
	prototype$56.transform = function(_, pulse) {
	  var sx = _.sourceX || sourceX,
	      sy = _.sourceY || sourceY,
	      tx = _.targetX || targetX,
	      ty = _.targetY || targetY,
	      as = _.as || 'path',
	      orient = _.orient || 'vertical',
	      shape = _.shape || 'line',
	      path = Paths.get(shape + '-' + orient) || Paths.get(shape);
	
	  if (!path) {
	    error$1('LinkPath unsupported type: ' + _.shape
	      + (_.orient ? '-' + _.orient : ''));
	  }
	
	  pulse.visit(pulse.SOURCE, function(t) {
	    t[as] = path(sx(t), sy(t), tx(t), ty(t));
	  });
	
	  return pulse.reflow(_.modified()).modifies(as);
	};
	
	// -- Link Path Generation Methods -----
	
	function line$3(sx, sy, tx, ty) {
	  return 'M' + sx + ',' + sy +
	         'L' + tx + ',' + ty;
	}
	
	function lineR(sa, sr, ta, tr) {
	  return line$3(
	    sr * Math.cos(sa), sr * Math.sin(sa),
	    tr * Math.cos(ta), tr * Math.sin(ta)
	  );
	}
	
	function arc$2(sx, sy, tx, ty) {
	  var dx = tx - sx,
	      dy = ty - sy,
	      rr = Math.sqrt(dx * dx + dy * dy) / 2,
	      ra = 180 * Math.atan2(dy, dx) / Math.PI;
	  return 'M' + sx + ',' + sy +
	         'A' + rr + ',' + rr +
	         ' ' + ra + ' 0 1' +
	         ' ' + tx + ',' + ty;
	}
	
	function arcR(sa, sr, ta, tr) {
	  return arc$2(
	    sr * Math.cos(sa), sr * Math.sin(sa),
	    tr * Math.cos(ta), tr * Math.sin(ta)
	  );
	}
	
	function curve(sx, sy, tx, ty) {
	  var dx = tx - sx,
	      dy = ty - sy,
	      ix = 0.2 * (dx + dy),
	      iy = 0.2 * (dy - dx);
	  return 'M' + sx + ',' + sy +
	         'C' + (sx+ix) + ',' + (sy+iy) +
	         ' ' + (tx+iy) + ',' + (ty-ix) +
	         ' ' + tx + ',' + ty;
	}
	
	function curveR(sa, sr, ta, tr) {
	  return curve(
	    sr * Math.cos(sa), sr * Math.sin(sa),
	    tr * Math.cos(ta), tr * Math.sin(ta)
	  );
	}
	
	function orthoX(sx, sy, tx, ty) {
	  return 'M' + sx + ',' + sy +
	         'V' + ty + 'H' + tx;
	}
	
	function orthoY(sx, sy, tx, ty) {
	  return 'M' + sx + ',' + sy +
	         'H' + tx + 'V' + ty;
	}
	
	function orthoR(sa, sr, ta, tr) {
	  var sc = Math.cos(sa),
	      ss = Math.sin(sa),
	      tc = Math.cos(ta),
	      ts = Math.sin(ta),
	      sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
	  return 'M' + (sr*sc) + ',' + (sr*ss) +
	         'A' + sr + ',' + sr + ' 0 0,' + (sf?1:0) +
	         ' ' + (sr*tc) + ',' + (sr*ts) +
	         'L' + (tr*tc) + ',' + (tr*ts);
	}
	
	function diagonalX(sx, sy, tx, ty) {
	  var m = (sx + tx) / 2;
	  return 'M' + sx + ',' + sy +
	         'C' + m  + ',' + sy +
	         ' ' + m  + ',' + ty +
	         ' ' + tx + ',' + ty;
	}
	
	function diagonalY(sx, sy, tx, ty) {
	  var m = (sy + ty) / 2;
	  return 'M' + sx + ',' + sy +
	         'C' + sx + ',' + m +
	         ' ' + tx + ',' + m +
	         ' ' + tx + ',' + ty;
	}
	
	function diagonalR(sa, sr, ta, tr) {
	  var sc = Math.cos(sa),
	      ss = Math.sin(sa),
	      tc = Math.cos(ta),
	      ts = Math.sin(ta),
	      mr = (sr + tr) / 2;
	  return 'M' + (sr*sc) + ',' + (sr*ss) +
	         'C' + (mr*sc) + ',' + (mr*ss) +
	         ' ' + (mr*tc) + ',' + (mr*ts) +
	         ' ' + (tr*tc) + ',' + (tr*ts);
	}
	
	/**
	 * Pie and donut chart layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to size pie segments.
	 * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
	 * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
	 * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
	 */
	function Pie(params) {
	  Transform.call(this, null, params);
	}
	
	Pie.Definition = {
	  "type": "Pie",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "startAngle", "type": "number", "default": 0 },
	    { "name": "endAngle", "type": "number", "default": 6.283185307179586 },
	    { "name": "sort", "type": "boolean", "default": false },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["startAngle", "endAngle"] }
	  ]
	};
	
	var prototype$57 = inherits(Pie, Transform);
	
	prototype$57.transform = function(_, pulse) {
	  var as = _.as || ['startAngle', 'endAngle'],
	      startAngle = as[0],
	      endAngle = as[1],
	      field$$1 = _.field || one,
	      start = _.startAngle || 0,
	      stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,
	      data = pulse.source,
	      values = data.map(field$$1),
	      n = values.length,
	      a = start,
	      k = (stop - start) / sum(values),
	      index = sequence(n),
	      i, t, v;
	
	  if (_.sort) {
	    index.sort(function(a, b) {
	      return values[a] - values[b];
	    });
	  }
	
	  for (i=0; i<n; ++i) {
	    v = values[index[i]];
	    t = data[index[i]];
	    t[startAngle] = a;
	    t[endAngle] = (a += v * k);
	  }
	
	  this.value = values;
	  return pulse.reflow(_.modified()).modifies(as);
	};
	
	var DEFAULT_COUNT = 5;
	
	var INCLUDE_ZERO = toSet([Linear$1, Pow, Sqrt]);
	
	var INCLUDE_PAD = toSet([Linear$1, Log, Pow, Sqrt, Time, Utc]);
	
	var SKIP$2 = toSet([
	  'set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount',
	  'domain', 'domainMin', 'domainMid', 'domainMax', 'domainRaw', 'nice', 'zero',
	  'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma'
	]);
	
	/**
	 * Maintains a scale function mapping data values to visual channels.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 */
	function Scale(params) {
	  Transform.call(this, null, params);
	  this.modified(true); // always treat as modified
	}
	
	var prototype$58 = inherits(Scale, Transform);
	
	prototype$58.transform = function(_, pulse) {
	  var df = pulse.dataflow,
	      scale = this.value,
	      prop;
	
	  if (!scale || _.modified('type')) {
	    this.value = scale = scale$1((_.type || Linear$1).toLowerCase())();
	  }
	
	  for (prop in _) if (!SKIP$2[prop]) {
	    // padding is a scale property for band/point but not others
	    if (prop === 'padding' && INCLUDE_PAD[scale.type]) continue;
	    // invoke scale property setter, raise warning if not found
	    isFunction(scale[prop])
	      ? scale[prop](_[prop])
	      : df.warn('Unsupported scale property: ' + prop);
	  }
	
	  configureRange(scale, _, configureDomain(scale, _, df));
	
	  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
	};
	
	function configureDomain(scale, _, df) {
	  // check raw domain, if provided use that and exit early
	  var raw = rawDomain(scale, _.domainRaw);
	  if (raw > -1) return raw;
	
	  var domain = _.domain,
	      type = scale.type,
	      zero$$1 = _.zero || (_.zero === undefined && INCLUDE_ZERO[type]),
	      n, mid;
	
	  if (!domain) return 0;
	
	  // adjust continuous domain for minimum pixel padding
	  if (INCLUDE_PAD[type] && _.padding && domain[0] !== peek(domain)) {
	    domain = padDomain(type, domain, _.range, _.padding, _.exponent);
	  }
	
	  // adjust domain based on zero, min, max settings
	  if (zero$$1 || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
	    n = ((domain = domain.slice()).length - 1) || 1;
	    if (zero$$1) {
	      if (domain[0] > 0) domain[0] = 0;
	      if (domain[n] < 0) domain[n] = 0;
	    }
	    if (_.domainMin != null) domain[0] = _.domainMin;
	    if (_.domainMax != null) domain[n] = _.domainMax;
	
	    if (_.domainMid != null) {
	      mid = _.domainMid;
	      if (mid < domain[0] || mid > domain[n]) {
	        df.warn('Scale domainMid exceeds domain min or max.', mid);
	      }
	      domain.splice(n, 0, mid);
	    }
	  }
	
	  // set the scale domain
	  scale.domain(domain);
	
	  // perform 'nice' adjustment as requested
	  if (_.nice && scale.nice) {
	    scale.nice((_.nice !== true && tickCount(scale, _.nice)) || null);
	  }
	
	  // return the cardinality of the domain
	  return domain.length;
	}
	
	function rawDomain(scale, raw) {
	  if (raw) {
	    scale.domain(raw);
	    return raw.length;
	  } else {
	    return -1;
	  }
	}
	
	function padDomain(type, domain, range, pad$$1, exponent) {
	  var span = Math.abs(peek(range) - range[0]),
	      frac = span / (span - 2 * pad$$1),
	      d = type === Log  ? zoomLog(domain, null, frac)
	        : type === Sqrt ? zoomPow(domain, null, frac, 0.5)
	        : type === Pow  ? zoomPow(domain, null, frac, exponent)
	        : zoomLinear(domain, null, frac);
	
	  domain = domain.slice();
	  domain[0] = d[0];
	  domain[domain.length-1] = d[1];
	  return domain;
	}
	
	function configureRange(scale, _, count) {
	  var round = _.round || false,
	      range = _.range;
	
	  // if range step specified, calculate full range extent
	  if (_.rangeStep != null) {
	    range = configureRangeStep(scale.type, _, count);
	  }
	
	  // else if a range scheme is defined, use that
	  else if (_.scheme) {
	    range = configureScheme(scale.type, _, count);
	    if (isFunction(range)) return scale.interpolator(range);
	  }
	
	  // given a range array for a sequential scale, convert to interpolator
	  else if (range && scale.type === Sequential) {
	    return scale.interpolator(rgbBasis(flip(range, _.reverse)));
	  }
	
	  // configure rounding / interpolation
	  if (range && _.interpolate && scale.interpolate) {
	    scale.interpolate(interpolate$1(_.interpolate, _.interpolateGamma));
	  } else if (isFunction(scale.round)) {
	    scale.round(round);
	  } else if (isFunction(scale.rangeRound)) {
	    scale.interpolate(round ? interpolateRound : interpolate);
	  }
	
	  if (range) scale.range(flip(range, _.reverse));
	}
	
	function configureRangeStep(type, _, count) {
	  if (type !== Band && type !== Point) {
	    error$1('Only band and point scales support rangeStep.');
	  }
	
	  // calculate full range based on requested step size and padding
	  var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,
	      inner = type === Point ? 1
	            : ((_.paddingInner != null ? _.paddingInner : _.padding) || 0);
	  return [0, _.rangeStep * bandSpace(count, inner, outer)];
	}
	
	function configureScheme(type, _, count) {
	  var name = _.scheme.toLowerCase(),
	      scheme = getScheme(name),
	      extent = _.schemeExtent,
	      discrete;
	
	  if (!scheme) {
	    error$1('Unrecognized scheme name: ' + _.scheme);
	  }
	
	  // determine size for potential discrete range
	  count = (type === Threshold) ? count + 1
	    : (type === BinOrdinal) ? count - 1
	    : (type === Quantile || type === Quantize) ? (+_.schemeCount || DEFAULT_COUNT)
	    : count;
	
	  // adjust and/or quantize scheme as appropriate
	  return type === Sequential ? adjustScheme(scheme, extent, _.reverse)
	    : !extent && (discrete = getScheme(name + '-' + count)) ? discrete
	    : isFunction(scheme) ? quantize$4(adjustScheme(scheme, extent), count)
	    : type === Ordinal ? scheme : scheme.slice(0, count);
	}
	
	function adjustScheme(scheme, extent, reverse) {
	  return (isFunction(scheme) && (extent || reverse))
	    ? interpolateRange(scheme, flip(extent || [0, 1], reverse))
	    : scheme;
	}
	
	function flip(array$$1, reverse) {
	  return reverse ? array$$1.slice().reverse() : array$$1;
	}
	
	function quantize$4(interpolator, count) {
	  var samples = new Array(count),
	      n = (count - 1) || 1;
	  for (var i = 0; i < count; ++i) samples[i] = interpolator(i / n);
	  return samples;
	}
	
	/**
	 * Sorts scenegraph items in the pulse source array.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(*,*): number} [params.sort] - A comparator
	 *   function for sorting tuples.
	 */
	function SortItems(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$59 = inherits(SortItems, Transform);
	
	prototype$59.transform = function(_, pulse) {
	  var mod = _.modified('sort')
	         || pulse.changed(pulse.ADD)
	         || pulse.modified(_.sort.fields)
	         || pulse.modified('datum');
	
	  if (mod) pulse.source.sort(_.sort);
	
	  this.modified(mod);
	  return pulse;
	};
	
	var Center = 'center';
	var Normalize = 'normalize';
	
	/**
	 * Stack layout for visualization elements.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to stack.
	 * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
	 * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
	 * @param {string} [offset='zero'] - One of 'zero', 'center', 'normalize'.
	 */
	function Stack(params) {
	  Transform.call(this, null, params);
	}
	
	Stack.Definition = {
	  "type": "Stack",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "groupby", "type": "field", "array": true },
	    { "name": "sort", "type": "compare" },
	    { "name": "offset", "type": "enum", "default": "zero", "values": ["zero", "center", "normalize"] },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["y0", "y1"] }
	  ]
	};
	
	var prototype$60 = inherits(Stack, Transform);
	
	prototype$60.transform = function(_, pulse) {
	  var as = _.as || ['y0', 'y1'],
	      y0 = as[0],
	      y1 = as[1],
	      field$$1 = _.field || one,
	      stack = _.offset === Center ? stackCenter
	            : _.offset === Normalize ? stackNormalize
	            : stackZero,
	      groups, i, n, max;
	
	  // partition, sum, and sort the stack groups
	  groups = partition$1(pulse.source, _.groupby, _.sort, field$$1);
	
	  // compute stack layouts per group
	  for (i=0, n=groups.length, max=groups.max; i<n; ++i) {
	    stack(groups[i], max, field$$1, y0, y1);
	  }
	
	  return pulse.reflow(_.modified()).modifies(as);
	};
	
	function stackCenter(group, max, field$$1, y0, y1) {
	  var last = (max - group.sum) / 2,
	      m = group.length,
	      j = 0, t;
	
	  for (; j<m; ++j) {
	    t = group[j];
	    t[y0] = last;
	    t[y1] = (last += Math.abs(field$$1(t)));
	  }
	}
	
	function stackNormalize(group, max, field$$1, y0, y1) {
	  var scale = 1 / group.sum,
	      last = 0,
	      m = group.length,
	      j = 0, v = 0, t;
	
	  for (; j<m; ++j) {
	    t = group[j];
	    t[y0] = last;
	    t[y1] = last = scale * (v += Math.abs(field$$1(t)));
	  }
	}
	
	function stackZero(group, max, field$$1, y0, y1) {
	  var lastPos = 0,
	      lastNeg = 0,
	      m = group.length,
	      j = 0, v, t;
	
	  for (; j<m; ++j) {
	    t = group[j];
	    v = field$$1(t);
	    if (v < 0) {
	      t[y0] = lastNeg;
	      t[y1] = (lastNeg += v);
	    } else {
	      t[y0] = lastPos;
	      t[y1] = (lastPos += v);
	    }
	  }
	}
	
	function partition$1(data, groupby, sort, field$$1) {
	  var groups = [],
	      get = function(f) { return f(t); },
	      map, i, n, m, t, k, g, s, max;
	
	  // partition data points into stack groups
	  if (groupby == null) {
	    groups.push(data.slice());
	  } else {
	    for (map={}, i=0, n=data.length; i<n; ++i) {
	      t = data[i];
	      k = groupby.map(get);
	      g = map[k];
	      if (!g) {
	        map[k] = (g = []);
	        groups.push(g);
	      }
	      g.push(t);
	    }
	  }
	
	  // compute sums of groups, sort groups as needed
	  for (k=0, max=0, m=groups.length; k<m; ++k) {
	    g = groups[k];
	    for (i=0, s=0, n=g.length; i<n; ++i) {
	      s += Math.abs(field$$1(g[i]));
	    }
	    g.sum = s;
	    if (s > max) max = s;
	    if (sort) g.sort(sort);
	  }
	  groups.max = max;
	
	  return groups;
	}
	
	
	
	var encode = Object.freeze({
		axisticks: AxisTicks,
		datajoin: DataJoin,
		encode: Encode,
		legendentries: LegendEntries,
		linkpath: LinkPath,
		pie: Pie,
		scale: Scale,
		sortitems: SortItems,
		stack: Stack,
		validTicks: validTicks
	});
	
	var array$4 = Array.prototype;
	
	var slice$4 = array$4.slice;
	
	var ascending$2 = function(a, b) {
	  return a - b;
	};
	
	var area$3 = function(ring) {
	  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
	  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
	  return area;
	};
	
	var constant$6 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var contains = function(ring, hole) {
	  var i = -1, n = hole.length, c;
	  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
	  return 0;
	};
	
	function ringContains(ring, point) {
	  var x = point[0], y = point[1], contains = -1;
	  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
	    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
	    if (segmentContains(pi, pj, point)) return 0;
	    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
	  }
	  return contains;
	}
	
	function segmentContains(a, b, c) {
	  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
	}
	
	function collinear(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
	}
	
	function within(p, q, r) {
	  return p <= q && q <= r || r <= q && q <= p;
	}
	
	var noop$3 = function() {};
	
	var cases = [
	  [],
	  [[[1.0, 1.5], [0.5, 1.0]]],
	  [[[1.5, 1.0], [1.0, 1.5]]],
	  [[[1.5, 1.0], [0.5, 1.0]]],
	  [[[1.0, 0.5], [1.5, 1.0]]],
	  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
	  [[[1.0, 0.5], [1.0, 1.5]]],
	  [[[1.0, 0.5], [0.5, 1.0]]],
	  [[[0.5, 1.0], [1.0, 0.5]]],
	  [[[1.0, 1.5], [1.0, 0.5]]],
	  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
	  [[[1.5, 1.0], [1.0, 0.5]]],
	  [[[0.5, 1.0], [1.5, 1.0]]],
	  [[[1.0, 1.5], [1.5, 1.0]]],
	  [[[0.5, 1.0], [1.0, 1.5]]],
	  []
	];
	
	var contours = function() {
	  var dx = 1,
	      dy = 1,
	      threshold$$1 = thresholdSturges,
	      smooth = smoothLinear;
	
	  function contours(values) {
	    var tz = threshold$$1(values);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      var domain = extent(values), start = domain[0], stop = domain[1];
	      tz = tickStep(start, stop, tz);
	      tz = sequence(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
	    } else {
	      tz = tz.slice().sort(ascending$2);
	    }
	
	    // Accumulate, smooth contour rings, assign holes to exterior rings.
	    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
	    var layers = tz.map(function(value) {
	      var polygons = [],
	          holes = [];
	
	      isorings(values, value, function(ring) {
	        smooth(ring, values, value);
	        if (area$3(ring) > 0) polygons.push([ring]);
	        else holes.push(ring);
	      });
	
	      holes.forEach(function(hole) {
	        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
	          if (contains((polygon = polygons[i])[0], hole) !== -1) {
	            polygon.push(hole);
	            return;
	          }
	        }
	      });
	
	      return polygons;
	    });
	
	    return layers.map(function(polygons, i) {
	      return {
	        type: "MultiPolygon",
	        value: tz[i],
	        coordinates: polygons
	      };
	    });
	  }
	
	  // Marching squares with isolines stitched into rings.
	  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
	  function isorings(values, value, callback) {
	    var fragmentByStart = new Array,
	        fragmentByEnd = new Array,
	        x, y, t0, t1, t2, t3;
	
	    // Special case for the first row (y = -1, t2 = t3 = 0).
	    x = y = -1;
	    t1 = values[0] >= value;
	    cases[t1 << 1].forEach(stitch);
	    while (++x < dx - 1) {
	      t0 = t1, t1 = values[x + 1] >= value;
	      cases[t0 | t1 << 1].forEach(stitch);
	    }
	    cases[t1 << 0].forEach(stitch);
	
	    // General case for the intermediate rows.
	    while (++y < dy - 1) {
	      x = -1;
	      t1 = values[y * dx + dx] >= value;
	      t2 = values[y * dx] >= value;
	      cases[t1 << 1 | t2 << 2].forEach(stitch);
	      while (++x < dx - 1) {
	        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
	        t3 = t2, t2 = values[y * dx + x + 1] >= value;
	        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
	      }
	      cases[t1 | t2 << 3].forEach(stitch);
	    }
	
	    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
	    x = -1;
	    t2 = values[y * dx] >= value;
	    cases[t2 << 2].forEach(stitch);
	    while (++x < dx - 1) {
	      t3 = t2, t2 = values[y * dx + x + 1] >= value;
	      cases[t2 << 2 | t3 << 3].forEach(stitch);
	    }
	    cases[t2 << 3].forEach(stitch);
	
	    function stitch(line) {
	      var start = [line[0][0] + x, line[0][1] + y],
	          end = [line[1][0] + x, line[1][1] + y],
	          startIndex = index(start),
	          endIndex = index(end),
	          f, g;
	      if (f = fragmentByEnd[startIndex]) {
	        if (g = fragmentByStart[endIndex]) {
	          delete fragmentByEnd[f.end];
	          delete fragmentByStart[g.start];
	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
	          }
	        } else {
	          delete fragmentByEnd[f.end];
	          f.ring.push(end);
	          fragmentByEnd[f.end = endIndex] = f;
	        }
	      } else if (f = fragmentByStart[endIndex]) {
	        if (g = fragmentByEnd[startIndex]) {
	          delete fragmentByStart[f.start];
	          delete fragmentByEnd[g.end];
	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
	          }
	        } else {
	          delete fragmentByStart[f.start];
	          f.ring.unshift(start);
	          fragmentByStart[f.start = startIndex] = f;
	        }
	      } else {
	        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
	      }
	    }
	  }
	
	  function index(point) {
	    return point[0] * 2 + point[1] * (dx + 1) * 4;
	  }
	
	  function smoothLinear(ring, values, value) {
	    ring.forEach(function(point) {
	      var x = point[0],
	          y = point[1],
	          xt = x | 0,
	          yt = y | 0,
	          v0,
	          v1 = values[yt * dx + xt];
	      if (x > 0 && x < dx && xt === x) {
	        v0 = values[yt * dx + xt - 1];
	        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
	      }
	      if (y > 0 && y < dy && yt === y) {
	        v0 = values[(yt - 1) * dx + xt];
	        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
	      }
	    });
	  }
	
	  contours.size = function(_) {
	    if (!arguments.length) return [dx, dy];
	    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
	    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
	    return dx = _0, dy = _1, contours;
	  };
	
	  contours.thresholds = function(_) {
	    return arguments.length ? (threshold$$1 = typeof _ === "function" ? _ : Array.isArray(_) ? constant$6(slice$4.call(_)) : constant$6(_), contours) : threshold$$1;
	  };
	
	  contours.smooth = function(_) {
	    return arguments.length ? (smooth = _ ? smoothLinear : noop$3, contours) : smooth === smoothLinear;
	  };
	
	  return contours;
	};
	
	// TODO Optimize edge cases.
	// TODO Optimize index calculation.
	// TODO Optimize arguments.
	function blurX(source, target, r) {
	  var n = source.width,
	      m = source.height,
	      w = (r << 1) + 1;
	  for (var j = 0; j < m; ++j) {
	    for (var i = 0, sr = 0; i < n + r; ++i) {
	      if (i < n) {
	        sr += source.data[i + j * n];
	      }
	      if (i >= r) {
	        if (i >= w) {
	          sr -= source.data[i - w + j * n];
	        }
	        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
	      }
	    }
	  }
	}
	
	// TODO Optimize edge cases.
	// TODO Optimize index calculation.
	// TODO Optimize arguments.
	function blurY(source, target, r) {
	  var n = source.width,
	      m = source.height,
	      w = (r << 1) + 1;
	  for (var i = 0; i < n; ++i) {
	    for (var j = 0, sr = 0; j < m + r; ++j) {
	      if (j < m) {
	        sr += source.data[i + j * n];
	      }
	      if (j >= r) {
	        if (j >= w) {
	          sr -= source.data[i + (j - w) * n];
	        }
	        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
	      }
	    }
	  }
	}
	
	function defaultX(d) {
	  return d[0];
	}
	
	function defaultY(d) {
	  return d[1];
	}
	
	var contourDensity = function() {
	  var x = defaultX,
	      y = defaultY,
	      dx = 960,
	      dy = 500,
	      r = 20, // blur radius
	      k = 2, // log2(grid cell size)
	      o = r * 3, // grid offset, to pad for blur
	      n = (dx + o * 2) >> k, // grid width
	      m = (dy + o * 2) >> k, // grid height
	      threshold$$1 = constant$6(20);
	
	  function density(data) {
	    var values0 = new Float32Array(n * m),
	        values1 = new Float32Array(n * m);
	
	    data.forEach(function(d, i, data) {
	      var xi = (x(d, i, data) + o) >> k,
	          yi = (y(d, i, data) + o) >> k;
	      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
	        ++values0[xi + yi * n];
	      }
	    });
	
	    // TODO Optimize.
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
	
	    var tz = threshold$$1(values0);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      var stop = max(values0);
	      tz = tickStep(0, stop, tz);
	      tz = sequence(0, Math.floor(stop / tz) * tz, tz);
	      tz.shift();
	    }
	
	    return contours()
	        .thresholds(tz)
	        .size([n, m])
	      (values0)
	        .map(transform);
	  }
	
	  function transform(geometry) {
	    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
	    geometry.coordinates.forEach(transformPolygon);
	    return geometry;
	  }
	
	  function transformPolygon(coordinates) {
	    coordinates.forEach(transformRing);
	  }
	
	  function transformRing(coordinates) {
	    coordinates.forEach(transformPoint);
	  }
	
	  // TODO Optimize.
	  function transformPoint(coordinates) {
	    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
	    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
	  }
	
	  function resize() {
	    o = r * 3;
	    n = (dx + o * 2) >> k;
	    m = (dy + o * 2) >> k;
	    return density;
	  }
	
	  density.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), density) : x;
	  };
	
	  density.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), density) : y;
	  };
	
	  density.size = function(_) {
	    if (!arguments.length) return [dx, dy];
	    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
	    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
	    return dx = _0, dy = _1, resize();
	  };
	
	  density.cellSize = function(_) {
	    if (!arguments.length) return 1 << k;
	    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
	    return k = Math.floor(Math.log(_) / Math.LN2), resize();
	  };
	
	  density.thresholds = function(_) {
	    return arguments.length ? (threshold$$1 = typeof _ === "function" ? _ : Array.isArray(_) ? constant$6(slice$4.call(_)) : constant$6(_), density) : threshold$$1;
	  };
	
	  density.bandwidth = function(_) {
	    if (!arguments.length) return Math.sqrt(r * (r + 1));
	    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
	    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
	  };
	
	  return density;
	};
	
	var CONTOUR_PARAMS = ['values', 'size'];
	var DENSITY_PARAMS = ['x', 'y', 'size', 'cellSize', 'bandwidth'];
	
	/**
	 * Generate contours based on kernel-density estimation of point data.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
	 *  If the values parameter is provided, this must be the dimensions of the input data.
	 *  If density estimation is performed, this is the output view dimensions in pixels.
	 * @param {Array<number>} [params.values] - An array of numeric values representing an
	 *  width x height grid of values over which to compute contours. If unspecified, this
	 *  transform will instead attempt to compute contours for the kernel density estimate
	 *  using values drawn from data tuples in the input pulse.
	 * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
	 * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
	 * @param {number} [params.cellSize] - Contour density calculation cell size.
	 * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
	 * @param {Array<number>} [params.thresholds] - Contour threshold array. If
	 *   this parameter is set, the count and nice parameters will be ignored.
	 * @param {number} [params.count] - The desired number of contours.
	 * @param {boolean} [params.nice] - Boolean flag indicating if the contour
	 *   threshold values should be automatically aligned to "nice"
	 *   human-friendly values. Setting this flag may cause the number of
	 *   thresholds to deviate from the specified count.
	 */
	function Contour(params) {
	  Transform.call(this, null, params);
	}
	
	Contour.Definition = {
	  "type": "Contour",
	  "metadata": {"generates": true, "source": true},
	  "params": [
	    { "name": "size", "type": "number", "array": true, "length": 2, "required": true },
	    { "name": "values", "type": "number", "array": true },
	    { "name": "x", "type": "field" },
	    { "name": "y", "type": "field" },
	    { "name": "cellSize", "type": "number" },
	    { "name": "bandwidth", "type": "number" },
	    { "name": "count", "type": "number" },
	    { "name": "nice", "type": "number", "default": false },
	    { "name": "thresholds", "type": "number", "array": true }
	  ]
	};
	
	var prototype$61 = inherits(Contour, Transform);
	
	prototype$61.transform = function(_, pulse) {
	  if (this.value && !pulse.changed() && !_.modified())
	    return pulse.StopPropagation;
	
	  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
	      count = _.count || 10,
	      contour, params, values;
	
	  if (_.values) {
	    contour = contours();
	    params = CONTOUR_PARAMS;
	    values = _.values;
	  } else {
	    contour = contourDensity();
	    params = DENSITY_PARAMS;
	    values = pulse.materialize(pulse.SOURCE).source;
	  }
	
	  // set threshold parameter
	  contour.thresholds(_.thresholds || (_.nice ? count : quantize$5(count)));
	
	  // set all other parameters
	  params.forEach(function(param) {
	    if (_[param] != null) contour[param](_[param]);
	  });
	
	  if (this.value) out.rem = this.value;
	  this.value = out.source = out.add = contour(values).map(ingest);
	
	  return out;
	};
	
	function quantize$5(k) {
	  return function(values) {
	    var ex = extent(values), x0 = ex[0], dx = ex[1] - x0,
	        t = [], i = 1;
	    for (; i<=k; ++i) t.push(x0 + dx * i / (k + 1));
	    return t;
	  };
	}
	
	var Feature = 'Feature';
	var FeatureCollection = 'FeatureCollection';
	var MultiPoint = 'MultiPoint';
	
	/**
	 * Consolidate an array of [longitude, latitude] points or GeoJSON features
	 * into a combined GeoJSON object. This transform is particularly useful for
	 * combining geo data for a Projection's fit argument. The resulting GeoJSON
	 * data is available as this transform's value. Input pulses are unchanged.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<function(object): *>} [params.fields] - A two-element array
	 *   of field accessors for the longitude and latitude values.
	 * @param {function(object): *} params.geojson - A field accessor for
	 *   retrieving GeoJSON feature data.
	 */
	function GeoJSON(params) {
	  Transform.call(this, null, params);
	}
	
	GeoJSON.Definition = {
	  "type": "GeoJSON",
	  "metadata": {},
	  "params": [
	    { "name": "fields", "type": "field", "array": true, "length": 2 },
	    { "name": "geojson", "type": "field" },
	  ]
	};
	
	var prototype$62 = inherits(GeoJSON, Transform);
	
	prototype$62.transform = function(_, pulse) {
	  var features = this._features,
	      points = this._points,
	      fields = _.fields,
	      lon = fields && fields[0],
	      lat = fields && fields[1],
	      geojson = _.geojson,
	      flag = pulse.ADD,
	      mod;
	
	  mod = _.modified()
	    || pulse.changed(pulse.REM)
	    || pulse.modified(accessorFields(geojson))
	    || (lon && (pulse.modified(accessorFields(lon))))
	    || (lat && (pulse.modified(accessorFields(lat))));
	
	  if (!this.value || mod) {
	    flag = pulse.SOURCE;
	    this._features = (features = []);
	    this._points = (points = []);
	  }
	
	  if (geojson) {
	    pulse.visit(flag, function(t) {
	      features.push(geojson(t));
	    });
	  }
	
	  if (lon && lat) {
	    pulse.visit(flag, function(t) {
	      var x = lon(t),
	          y = lat(t);
	      if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
	        points.push([x, y]);
	      }
	    });
	    features = features.concat({
	      type: Feature,
	      geometry: {
	        type: MultiPoint,
	        coordinates: points
	      }
	    });
	  }
	
	  this.value = {
	    type: FeatureCollection,
	    features: features
	  };
	};
	
	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/
	
	var adder = function() {
	  return new Adder;
	};
	
	function Adder() {
	  this.reset();
	}
	
	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add$3(temp$2, y, this.t);
	    add$3(this, temp$2.s, this.s);
	    if (this.s) this.t += temp$2.t;
	    else this.s = temp$2.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};
	
	var temp$2 = new Adder;
	
	function add$3(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}
	
	var epsilon$2 = 1e-6;
	
	var pi$3 = Math.PI;
	var halfPi$2 = pi$3 / 2;
	var quarterPi = pi$3 / 4;
	var tau$4 = pi$3 * 2;
	
	var degrees$1 = 180 / pi$3;
	var radians = pi$3 / 180;
	
	var abs$1 = Math.abs;
	var atan = Math.atan;
	var atan2$1 = Math.atan2;
	var cos$1 = Math.cos;
	var ceil = Math.ceil;
	var exp$1 = Math.exp;
	
	var log$3 = Math.log;
	var pow$2 = Math.pow;
	var sin$1 = Math.sin;
	var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt$2 = Math.sqrt;
	var tan = Math.tan;
	
	function acos$1(x) {
	  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
	}
	
	function asin$1(x) {
	  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
	}
	
	function noop$4() {}
	
	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}
	
	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};
	
	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};
	
	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}
	
	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}
	
	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};
	
	var areaRingSum = adder();
	
	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;
	
	function spherical(cartesian) {
	  return [atan2$1(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
	}
	
	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
	  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
	}
	
	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	
	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}
	
	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}
	
	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}
	
	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt$2(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}
	
	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range;
	
	var W0;
	var X0;
	var Y0;
	var Z0; // previous point
	
	var compose = function(a, b) {
	
	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }
	
	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };
	
	  return compose;
	};
	
	function rotationIdentity(lambda, phi) {
	  return [lambda > pi$3 ? lambda - tau$4 : lambda < -pi$3 ? lambda + tau$4 : lambda, phi];
	}
	
	rotationIdentity.invert = rotationIdentity;
	
	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}
	
	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$4 : lambda < -pi$3 ? lambda + tau$4 : lambda, phi];
	  };
	}
	
	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}
	
	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos$1(deltaPhi),
	      sinDeltaPhi = sin$1(deltaPhi),
	      cosDeltaGamma = cos$1(deltaGamma),
	      sinDeltaGamma = sin$1(deltaGamma);
	
	  function rotation(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }
	
	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };
	
	  return rotation;
	}
	
	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
	
	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }
	
	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };
	
	  return forward;
	};
	
	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos$1(radius),
	      sinRadius = sin$1(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau$4;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
	    stream.point(point[0], point[1]);
	  }
	}
	
	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos$1(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$2) % tau$4;
	}
	
	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$4,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};
	
	var pointEqual = function(a, b) {
	  return abs$1(a[0] - b[0]) < epsilon$2 && abs$1(a[1] - b[1]) < epsilon$2;
	};
	
	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}
	
	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipRejoin = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;
	
	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;
	
	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }
	
	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });
	
	  if (!subject.length) return;
	
	  clip.sort(compareIntersection);
	  link$1(subject);
	  link$1(clip);
	
	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }
	
	  var start = subject[0],
	      points,
	      point;
	
	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};
	
	function link$1(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}
	
	var sum$2 = adder();
	
	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin$1(lambda), -cos$1(lambda), 0],
	      angle = 0,
	      winding = 0;
	
	  sum$2.reset();
	
	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin$1(phi0),
	        cosPhi0 = cos$1(phi0);
	
	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin$1(phi1),
	          cosPhi1 = cos$1(phi1),
	          delta = lambda1 - lambda0,
	          sign = delta >= 0 ? 1 : -1,
	          absDelta = sign * delta,
	          antimeridian = absDelta > pi$3,
	          k = sinPhi0 * sinPhi1;
	
	      sum$2.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
	      angle += antimeridian ? delta + sign * tau$4 : delta;
	
	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }
	
	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.
	
	  return (angle < -epsilon$2 || angle < epsilon$2 && sum$2 < -epsilon$2) ^ (winding & 1);
	};
	
	var clip$2 = function(pointVisible, clipLine, interpolate, start) {
	  return function(sink) {
	    var line = clipLine(sink),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;
	
	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge$2(segments);
	        var startInside = polygonContains(polygon, start);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };
	
	    function point(lambda, phi) {
	      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
	    }
	
	    function pointLine(lambda, phi) {
	      line.point(lambda, phi);
	    }
	
	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }
	
	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }
	
	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      ringSink.point(lambda, phi);
	    }
	
	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }
	
	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();
	
	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;
	
	      ring.pop();
	      polygon.push(ring);
	      ring = null;
	
	      if (!n) return;
	
	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }
	
	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	
	      segments.push(ringSegments.filter(validSegment));
	    }
	
	    return clip;
	  };
	};
	
	function validSegment(segment) {
	  return segment.length > 1;
	}
	
	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
	}
	
	var clipAntimeridian = clip$2(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi$3, -halfPi$2]
	);
	
	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections
	
	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
	          delta = abs$1(lambda1 - lambda0);
	      if (abs$1(delta - pi$3) < epsilon$2) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
	        if (abs$1(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
	        if (abs$1(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}
	
	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
	  return abs$1(sinLambda0Lambda1) > epsilon$2
	      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
	          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}
	
	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi$2;
	    stream.point(-pi$3, phi);
	    stream.point(0, phi);
	    stream.point(pi$3, phi);
	    stream.point(pi$3, 0);
	    stream.point(pi$3, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$3, -phi);
	    stream.point(-pi$3, 0);
	    stream.point(-pi$3, phi);
	  } else if (abs$1(from[0] - to[0]) > epsilon$2) {
	    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}
	
	var clipCircle = function(radius) {
	  var cr = cos$1(radius),
	      delta = 6 * radians,
	      smallRadius = cr > 0,
	      notHemisphere = abs$1(cr) > epsilon$2; // TODO optimise for this common case
	
	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }
	
	  function visible(lambda, phi) {
	    return cos$1(lambda) * cos$1(phi) > cr;
	  }
	
	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon$2;
	            point1[1] += epsilon$2;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }
	
	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);
	
	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;
	
	    // Two polar points.
	    if (!determinant) return !two && a;
	
	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);
	
	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);
	
	    if (t2 < 0) return;
	
	    var t = sqrt$2(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);
	
	    if (!two) return q;
	
	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;
	
	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
	
	    var delta = lambda1 - lambda0,
	        polar = abs$1(delta - pi$3) < epsilon$2,
	        meridian = polar || delta < epsilon$2;
	
	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
	
	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }
	
	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$3 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }
	
	  return clip$2(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
	};
	
	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};
	
	var clipMax = 1e9;
	var clipMin = -clipMax;
	
	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
	
	function clipRectangle(x0, y0, x1, y1) {
	
	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }
	
	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }
	
	  function corner(p, direction) {
	    return abs$1(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
	        : abs$1(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
	        : abs$1(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }
	
	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }
	
	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }
	
	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;
	
	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };
	
	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }
	
	    function polygonInside() {
	      var winding = 0;
	
	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }
	
	      return winding;
	    }
	
	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }
	
	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge$2(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }
	
	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }
	
	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }
	
	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }
	
	    return clipStream;
	  };
	}
	
	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;
	
	var lengthStream = {
	  sphere: noop$4,
	  point: noop$4,
	  lineStart: lengthLineStart,
	  lineEnd: noop$4,
	  polygonStart: noop$4,
	  polygonEnd: noop$4
	};
	
	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}
	
	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop$4;
	}
	
	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
	  lengthStream.point = lengthPoint;
	}
	
	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin$1(phi),
	      cosPhi = cos$1(phi),
	      delta = abs$1(lambda - lambda0$2),
	      cosDelta = cos$1(delta),
	      sinDelta = sin$1(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2$1(sqrt$2(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}
	
	var length$1 = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};
	
	var coordinates = [null, null];
	var object$3 = {type: "LineString", coordinates: coordinates};
	
	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length$1(object$3);
	};
	
	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};
	
	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}
	
	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}
	
	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon$2;
	}
	
	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}
	
	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}
	
	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}
	
	function graticuleX(y0, y1, dy) {
	  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}
	
	function graticuleY(x0, x1, dx) {
	  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}
	
	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;
	
	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }
	
	  function lines() {
	    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$1(x % DX) > epsilon$2; }).map(x))
	        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$1(y % DY) > epsilon$2; }).map(y));
	  }
	
	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };
	
	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };
	
	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };
	
	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };
	
	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };
	
	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };
	
	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };
	
	  return graticule
	      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
	      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
	}
	
	var identity$7 = function(x) {
	  return x;
	};
	
	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;
	
	var areaStream$1 = {
	  point: noop$4,
	  lineStart: noop$4,
	  lineEnd: noop$4,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$4;
	    areaSum$1.add(abs$1(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};
	
	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}
	
	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}
	
	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}
	
	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}
	
	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;
	
	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop$4,
	  lineEnd: noop$4,
	  polygonStart: noop$4,
	  polygonEnd: noop$4,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};
	
	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}
	
	// TODO Enforce positive area for exterior, negative area for interior?
	
	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;
	
	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};
	
	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}
	
	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}
	
	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt$2(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}
	
	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}
	
	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}
	
	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}
	
	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt$2(dx * dx + dy * dy);
	
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	
	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function PathContext(context) {
	  this._context = context;
	}
	
	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau$4);
	        break;
	      }
	    }
	  },
	  result: noop$4
	};
	
	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;
	
	var lengthStream$1 = {
	  point: noop$4,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop$4;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};
	
	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}
	
	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt$2(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}
	
	function PathString() {
	  this._string = [];
	}
	
	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle$2(4.5),
	  pointRadius: function(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        if (this._circle == null) this._circle = circle$2(this._radius);
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};
	
	function circle$2(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}
	
	var geoPath = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;
	
	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }
	
	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };
	
	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };
	
	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };
	
	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };
	
	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$7) : (projection = _).stream, path) : projection;
	  };
	
	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };
	
	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };
	
	  return path.projection(projection).context(context);
	};
	
	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}
	
	function TransformStream() {}
	
	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};
	
	function fit(projection, fitBounds, object) {
	  var clip = projection.clipExtent && projection.clipExtent();
	  projection.scale(150).translate([0, 0]);
	  if (clip != null) projection.clipExtent(null);
	  geoStream(object, projection.stream(boundsStream$1));
	  fitBounds(boundsStream$1.result());
	  if (clip != null) projection.clipExtent(clip);
	  return projection;
	}
	
	function fitExtent(projection, extent, object) {
	  return fit(projection, function(b) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	
	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}
	
	function fitWidth(projection, width, object) {
	  return fit(projection, function(b) {
	    var w = +width,
	        k = w / (b[1][0] - b[0][0]),
	        x = (w - k * (b[1][0] + b[0][0])) / 2,
	        y = -k * b[0][1];
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	
	function fitHeight(projection, height, object) {
	  return fit(projection, function(b) {
	    var h = +height,
	        k = h / (b[1][1] - b[0][1]),
	        x = -k * b[0][0],
	        y = (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}
	
	var maxDepth = 16;
	var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)
	
	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};
	
	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}
	
	function resample$1(project, delta2) {
	
	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt$2(a * a + b * b + c * c),
	          phi2 = asin$1(c /= m),
	          lambda2 = abs$1(abs$1(c) - 1) < epsilon$2 || abs$1(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point
	
	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };
	
	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }
	
	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }
	
	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }
	
	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }
	
	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }
	
	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }
	
	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }
	
	    return resampleStream;
	  };
	}
	
	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});
	
	function transformRotate(rotate) {
	  return transformer({
	    point: function(x, y) {
	      var r = rotate(x, y);
	      return this.stream.point(r[0], r[1]);
	    }
	  });
	}
	
	function projection$1(project) {
	  return projectionMutator(function() { return project; })();
	}
	
	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity$7, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;
	
	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }
	
	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }
	
	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }
	
	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
	  };
	
	  projection.preclip = function(_) {
	    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
	  };
	
	  projection.postclip = function(_) {
	    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	  };
	
	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };
	
	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };
	
	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };
	
	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };
	
	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };
	
	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };
	
	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$2(delta2);
	  };
	
	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };
	
	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };
	
	  projection.fitWidth = function(width, object) {
	    return fitWidth(projection, width, object);
	  };
	
	  projection.fitHeight = function(height, object) {
	    return fitHeight(projection, height, object);
	  };
	
	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }
	
	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }
	
	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}
	
	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi$3 / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);
	
	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
	  };
	
	  return p;
	}
	
	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos$1(phi0);
	
	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
	  }
	
	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin$1(y * cosPhi0)];
	  };
	
	  return forward;
	}
	
	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;
	
	  // Are the parallels symmetrical around the Equator?
	  if (abs$1(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);
	
	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$2(c) / n;
	
	  function project(x, y) {
	    var r = sqrt$2(c - 2 * n * sin$1(y)) / n;
	    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
	  }
	
	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2$1(x, abs$1(r0y)) / n * sign$1(r0y), asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };
	
	  return project;
	}
	
	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};
	
	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};
	
	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}
	
	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var geoAlbersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};
	
	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }
	
	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };
	
	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };
	
	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };
	
	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };
	
	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];
	
	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);
	
	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    return reset();
	  };
	
	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };
	
	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };
	
	  albersUsa.fitWidth = function(width, object) {
	    return fitWidth(albersUsa, width, object);
	  };
	
	  albersUsa.fitHeight = function(height, object) {
	    return fitHeight(albersUsa, height, object);
	  };
	
	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }
	
	  return albersUsa.scale(1070);
	};
	
	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos$1(x),
	        cy = cos$1(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin$1(x),
	      k * sin$1(y)
	    ];
	  }
	}
	
	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt$2(x * x + y * y),
	        c = angle(z),
	        sc = sin$1(c),
	        cc = cos$1(c);
	    return [
	      atan2$1(x * sc, z * cc),
	      asin$1(z && y * sc / z)
	    ];
	  }
	}
	
	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt$2(2 / (1 + cxcy));
	});
	
	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin$1(z / 2);
	});
	
	var geoAzimuthalEqualArea = function() {
	  return projection$1(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};
	
	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos$1(c)) && c / sin$1(c);
	});
	
	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});
	
	var geoAzimuthalEquidistant = function() {
	  return projection$1(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};
	
	function mercatorRaw(lambda, phi) {
	  return [lambda, log$3(tan((halfPi$2 + phi) / 2))];
	}
	
	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp$1(y)) - halfPi$2];
	};
	
	var geoMercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau$4);
	};
	
	function mercatorProjection(project) {
	  var m = projection$1(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent
	
	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };
	
	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };
	
	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };
	
	  m.clipExtent = function(_) {
	    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };
	
	  function reclip() {
	    var k = pi$3 * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }
	
	  return reclip();
	}
	
	function tany(y) {
	  return tan((halfPi$2 + y) / 2);
	}
	
	function conicConformalRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : log$3(cy0 / cos$1(y1)) / log$3(tany(y1) / tany(y0)),
	      f = cy0 * pow$2(tany(y0), n) / n;
	
	  if (!n) return mercatorRaw;
	
	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
	    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
	    var r = f / pow$2(tany(y), n);
	    return [r * sin$1(n * x), f - r * cos$1(n * x)];
	  }
	
	  project.invert = function(x, y) {
	    var fy = f - y, r = sign$1(n) * sqrt$2(x * x + fy * fy);
	    return [atan2$1(x, abs$1(fy)) / n * sign$1(fy), 2 * atan(pow$2(f / r, 1 / n)) - halfPi$2];
	  };
	
	  return project;
	}
	
	var geoConicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};
	
	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}
	
	equirectangularRaw.invert = equirectangularRaw;
	
	var geoEquirectangular = function() {
	  return projection$1(equirectangularRaw)
	      .scale(152.63);
	};
	
	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
	      g = cy0 / n + y0;
	
	  if (abs$1(n) < epsilon$2) return equirectangularRaw;
	
	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin$1(nx), g - gy * cos$1(nx)];
	  }
	
	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2$1(x, abs$1(gy)) / n * sign$1(gy), g - sign$1(n) * sqrt$2(x * x + gy * gy)];
	  };
	
	  return project;
	}
	
	var geoConicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};
	
	function gnomonicRaw(x, y) {
	  var cy = cos$1(y), k = cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	gnomonicRaw.invert = azimuthalInvert(atan);
	
	var geoGnomonic = function() {
	  return projection$1(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};
	
	function orthographicRaw(x, y) {
	  return [cos$1(y) * sin$1(x), sin$1(y)];
	}
	
	orthographicRaw.invert = azimuthalInvert(asin$1);
	
	var geoOrthographic = function() {
	  return projection$1(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon$2);
	};
	
	function stereographicRaw(x, y) {
	  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});
	
	var geoStereographic = function() {
	  return projection$1(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};
	
	function transverseMercatorRaw(lambda, phi) {
	  return [log$3(tan((halfPi$2 + phi) / 2)), -lambda];
	}
	
	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp$1(x)) - halfPi$2];
	};
	
	var geoTransverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;
	
	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };
	
	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };
	
	  return rotate([0, 0, 90])
	      .scale(159.155);
	};
	
	var defaultPath = geoPath();
	
	var projectionProperties = [
	  // standard properties in d3-geo
	  'clipAngle',
	  'clipExtent',
	  'scale',
	  'translate',
	  'center',
	  'rotate',
	  'parallels',
	  'precision',
	
	  // extended properties in d3-geo-projections
	  'coefficient',
	  'distance',
	  'fraction',
	  'lobes',
	  'parallel',
	  'radius',
	  'ratio',
	  'spacing',
	  'tilt'
	];
	
	/**
	 * Augment projections with their type and a copy method.
	 */
	function create$1(type, constructor) {
	  return function projection$$1() {
	    var p = constructor();
	
	    p.type = type;
	
	    p.path = geoPath().projection(p);
	
	    p.copy = p.copy || function() {
	      var c = projection$$1();
	      projectionProperties.forEach(function(prop) {
	        if (p.hasOwnProperty(prop)) c[prop](p[prop]());
	      });
	      c.path.pointRadius(p.path.pointRadius());
	      return c;
	    };
	
	    return p;
	  };
	}
	
	function projection$$1(type, proj) {
	  if (arguments.length > 1) {
	    projections[type] = create$1(type, proj);
	    return this;
	  } else {
	    return projections.hasOwnProperty(type) ? projections[type] : null;
	  }
	}
	
	function getProjectionPath(proj) {
	  return (proj && proj.path) || defaultPath;
	}
	
	var projections = {
	  // base d3-geo projection types
	  albers:               albers,
	  albersusa:            geoAlbersUsa,
	  azimuthalequalarea:   geoAzimuthalEqualArea,
	  azimuthalequidistant: geoAzimuthalEquidistant,
	  conicconformal:       geoConicConformal,
	  conicequalarea:       conicEqualArea,
	  conicequidistant:     geoConicEquidistant,
	  equirectangular:      geoEquirectangular,
	  gnomonic:             geoGnomonic,
	  mercator:             geoMercator,
	  orthographic:         geoOrthographic,
	  stereographic:        geoStereographic,
	  transversemercator:   geoTransverseMercator
	};
	
	for (var key$2 in projections) {
	  projection$$1(key$2, projections[key$2]);
	}
	
	/**
	 * Map GeoJSON data to an SVG path string.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(number, number): *} params.projection - The cartographic
	 *   projection to apply.
	 * @param {function(object): *} [params.field] - The field with GeoJSON data,
	 *   or null if the tuple itself is a GeoJSON feature.
	 * @param {string} [params.as='path'] - The output field in which to store
	 *   the generated path data (default 'path').
	 */
	function GeoPath(params) {
	  Transform.call(this, null, params);
	}
	
	GeoPath.Definition = {
	  "type": "GeoPath",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "projection", "type": "projection" },
	    { "name": "field", "type": "field" },
	    { "name": "as", "type": "string", "default": "path" }
	  ]
	};
	
	var prototype$63 = inherits(GeoPath, Transform);
	
	prototype$63.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.ALL),
	      path = this.value,
	      field$$1 = _.field || identity,
	      as = _.as || 'path',
	      mod;
	
	  function set(t) { t[as] = path(field$$1(t)); }
	
	  if (!path || _.modified()) {
	    // parameters updated, reset and reflow
	    this.value = path = getProjectionPath(_.projection).context(null);
	    out.materialize().reflow().visit(out.SOURCE, set);
	  } else {
	    path.context(null);
	    mod = field$$1 === identity || pulse.modified(field$$1.fields);
	    out.visit(mod ? out.ADD_MOD : out.ADD, set);
	  }
	
	  return out.modifies(as);
	};
	
	/**
	 * Geo-code a longitude/latitude point to an x/y coordinate.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(number, number): *} params.projection - The cartographic
	 *   projection to apply.
	 * @param {Array<function(object): *>} params.fields - A two-element array of
	 *   field accessors for the longitude and latitude values.
	 * @param {Array<string>} [params.as] - A two-element array of field names
	 *   under which to store the result. Defaults to ['x','y'].
	 */
	function GeoPoint(params) {
	  Transform.call(this, null, params);
	}
	
	GeoPoint.Definition = {
	  "type": "GeoPoint",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "projection", "type": "projection", "required": true },
	    { "name": "fields", "type": "field", "array": true, "required": true, "length": 2 },
	    { "name": "as", "type": "string", "array": true, "length": 2, "default": ["x", "y"] }
	  ]
	};
	
	var prototype$64 = inherits(GeoPoint, Transform);
	
	prototype$64.transform = function(_, pulse) {
	  var proj = _.projection,
	      lon = _.fields[0],
	      lat = _.fields[1],
	      as = _.as || ['x', 'y'],
	      x = as[0],
	      y = as[1],
	      mod;
	
	  function set(t) {
	    var xy = proj([lon(t), lat(t)]);
	    if (xy) {
	      t[x] = xy[0];
	      t[y] = xy[1];
	    } else {
	      t[x] = undefined;
	      t[y] = undefined;
	    }
	  }
	
	  if (_.modified()) {
	    // parameters updated, reflow
	    pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
	  } else {
	    mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
	    pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
	  }
	
	  return pulse.modifies(as);
	};
	
	/**
	 * Annotate items with a geopath shape generator.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(number, number): *} params.projection - The cartographic
	 *   projection to apply.
	 * @param {function(object): *} [params.field] - The field with GeoJSON data,
	 *   or null if the tuple itself is a GeoJSON feature.
	 * @param {string} [params.as='shape'] - The output field in which to store
	 *   the generated path data (default 'shape').
	 */
	function GeoShape(params) {
	  Transform.call(this, null, params);
	}
	
	GeoShape.Definition = {
	  "type": "GeoShape",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "projection", "type": "projection" },
	    { "name": "field", "type": "field", "default": "datum" },
	    { "name": "as", "type": "string", "default": "shape" }
	  ]
	};
	
	var prototype$65 = inherits(GeoShape, Transform);
	
	prototype$65.transform = function(_, pulse) {
	  var out = pulse.fork(pulse.ALL),
	      shape = this.value,
	      datum = _.field || field('datum'),
	      as = _.as || 'shape',
	      flag = out.ADD_MOD;
	
	  if (!shape || _.modified()) {
	    // parameters updated, reset and reflow
	    this.value = shape = shapeGenerator(
	      getProjectionPath(_.projection), datum);
	    out.materialize().reflow();
	    flag = out.SOURCE;
	  }
	
	  out.visit(flag, function(t) { t[as] = shape; });
	
	  return out.modifies(as);
	};
	
	function shapeGenerator(path, field$$1) {
	  var shape = function(_) {
	    return path(field$$1(_));
	  };
	  shape.context = function(_) {
	    path.context(_);
	    return shape;
	  };
	
	  return shape;
	}
	
	/**
	 * GeoJSON feature generator for creating graticules.
	 * @constructor
	 */
	function Graticule(params) {
	  Transform.call(this, [], params);
	  this.generator = graticule();
	}
	
	Graticule.Definition = {
	  "type": "Graticule",
	  "metadata": {"source": true, "generates": true, "changes": true},
	  "params": [
	    { "name": "extent", "type": "array", "array": true, "length": 2,
	      "content": {"type": "number", "array": true, "length": 2} },
	    { "name": "extentMajor", "type": "array", "array": true, "length": 2,
	      "content": {"type": "number", "array": true, "length": 2} },
	    { "name": "extentMinor", "type": "array", "array": true, "length": 2,
	      "content": {"type": "number", "array": true, "length": 2} },
	    { "name": "step", "type": "number", "array": true, "length": 2 },
	    { "name": "stepMajor", "type": "number", "array": true, "length": 2, "default": [90, 360] },
	    { "name": "stepMinor", "type": "number", "array": true, "length": 2, "default": [10, 10] },
	    { "name": "precision", "type": "number", "default": 2.5 }
	  ]
	};
	
	var prototype$66 = inherits(Graticule, Transform);
	
	prototype$66.transform = function(_, pulse) {
	  var out = pulse.fork(),
	      src = this.value,
	      gen = this.generator, t;
	
	  if (!src.length || _.modified()) {
	    for (var prop in _) {
	      if (isFunction(gen[prop])) {
	        gen[prop](_[prop]);
	      }
	    }
	  }
	
	  t = gen();
	  if (src.length) {
	    out.mod.push(replace(src[0], t));
	  } else {
	    out.add.push(ingest(t));
	  }
	  src[0] = t;
	  out.source = src;
	
	  return out;
	};
	
	/**
	 * Maintains a cartographic projection.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 */
	function Projection(params) {
	  Transform.call(this, null, params);
	  this.modified(true); // always treat as modified
	}
	
	var prototype$67 = inherits(Projection, Transform);
	
	prototype$67.transform = function(_, pulse) {
	  var proj = this.value;
	
	  if (!proj || _.modified('type')) {
	    this.value = (proj = create$2(_.type));
	    projectionProperties.forEach(function(prop) {
	      if (_[prop] != null) set$4(proj, prop, _[prop]);
	    });
	  } else {
	    projectionProperties.forEach(function(prop) {
	      if (_.modified(prop)) set$4(proj, prop, _[prop]);
	    });
	  }
	
	  if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
	  if (_.fit) fit$1(proj, _);
	
	  return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
	};
	
	function fit$1(proj, _) {
	  var data = collectGeoJSON(_.fit);
	  _.extent ? proj.fitExtent(_.extent, data)
	    : _.size ? proj.fitSize(_.size, data) : 0;
	}
	
	function create$2(type) {
	  var constructor = projection$$1((type || 'mercator').toLowerCase());
	  if (!constructor) error$1('Unrecognized projection type: ' + type);
	  return constructor();
	}
	
	function set$4(proj, key$$1, value) {
	   if (isFunction(proj[key$$1])) proj[key$$1](value);
	}
	
	function collectGeoJSON(features) {
	  features = array(features);
	  return features.length === 1
	    ? features[0]
	    : {
	        type: FeatureCollection,
	        features: features.reduce(function(list, f) {
	            (f && f.type === FeatureCollection) ? list.push.apply(list, f.features)
	              : isArray(f) ? list.push.apply(list, f)
	              : list.push(f);
	            return list;
	          }, [])
	      };
	}
	
	
	
	var geo = Object.freeze({
		contour: Contour,
		geojson: GeoJSON,
		geopath: GeoPath,
		geopoint: GeoPoint,
		geoshape: GeoShape,
		graticule: Graticule,
		projection: Projection
	});
	
	var forceCenter = function(x, y) {
	  var nodes;
	
	  if (x == null) x = 0;
	  if (y == null) y = 0;
	
	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }
	
	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };
	
	  return force;
	};
	
	var constant$8 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};
	
	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add$4(this.cover(x, y), x, y, d);
	};
	
	function add$4(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
	
	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;
	
	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }
	
	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
	
	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}
	
	function addAll$1(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;
	
	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }
	
	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;
	
	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);
	
	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add$4(this, xz[i], yz[i], data[i]);
	  }
	
	  return this;
	}
	
	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
	
	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;
	
	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }
	
	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;
	
	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }
	
	    if (this._root && this._root.length) this._root = node;
	  }
	
	  // If the quadtree covers the point already, just return.
	  else return this;
	
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};
	
	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};
	
	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};
	
	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};
	
	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;
	
	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }
	
	  while (q = quads.pop()) {
	
	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;
	
	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;
	
	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );
	
	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }
	
	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }
	
	  return data;
	};
	
	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
	
	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;
	
	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }
	
	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;
	
	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;
	
	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;
	
	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];
	
	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }
	
	  return this;
	};
	
	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}
	
	var tree_root = function() {
	  return this._root;
	};
	
	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};
	
	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};
	
	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};
	
	function defaultX$1(d) {
	  return d[0];
	}
	
	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};
	
	function defaultY$1(d) {
	  return d[1];
	}
	
	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};
	
	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}
	
	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}
	
	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}
	
	var treeProto = quadtree.prototype = Quadtree.prototype;
	
	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;
	
	  if (!node) return copy;
	
	  if (!node.length) return copy._root = leaf_copy(node), copy;
	
	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }
	
	  return copy;
	};
	
	treeProto.add = tree_add;
	treeProto.addAll = addAll$1;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;
	
	function x$2(d) {
	  return d.x + d.vx;
	}
	
	function y$2(d) {
	  return d.y + d.vy;
	}
	
	var forceCollide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;
	
	  if (typeof radius !== "function") radius = constant$8(radius == null ? 1 : +radius);
	
	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;
	
	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x$2, y$2).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }
	
	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }
	
	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };
	
	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : radius;
	  };
	
	  return force;
	};
	
	function index(d) {
	  return d.index;
	}
	
	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}
	
	var forceLink = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant$8(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;
	
	  if (links == null) links = [];
	
	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }
	
	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	
	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = map(nodes, id),
	        link;
	
	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }
	
	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }
	
	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }
	
	  function initializeStrength() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }
	
	  function initializeDistance() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };
	
	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$8(+_), initializeStrength(), force) : strength;
	  };
	
	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$8(+_), initializeDistance(), force) : distance;
	  };
	
	  return force;
	};
	
	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };
	
	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}
	
	function clearNow() {
	  clockNow = 0;
	}
	
	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}
	
	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};
	
	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}
	
	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}
	
	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}
	
	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}
	
	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}
	
	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}
	
	function x$3(d) {
	  return d.x;
	}
	
	function y$3(d) {
	  return d.y;
	}
	
	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));
	
	var forceSimulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = map(),
	      stepper = timer(step),
	      event = dispatch("tick", "end");
	
	  if (nodes == null) nodes = [];
	
	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }
	
	  function tick() {
	    var i, n = nodes.length, node;
	
	    alpha += (alphaTarget - alpha) * alphaDecay;
	
	    forces.each(function(force) {
	      force(alpha);
	    });
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }
	
	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }
	
	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }
	
	  initializeNodes();
	
	  return simulation = {
	    tick: tick,
	
	    restart: function() {
	      return stepper.restart(step), simulation;
	    },
	
	    stop: function() {
	      return stepper.stop(), simulation;
	    },
	
	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },
	
	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },
	
	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },
	
	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },
	
	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },
	
	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },
	
	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },
	
	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;
	
	      if (radius == null) radius = Infinity;
	      else radius *= radius;
	
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }
	
	      return closest;
	    },
	
	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};
	
	var forceManyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant$8(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;
	
	  function force(_) {
	    var i, n = nodes.length, tree = quadtree(nodes, x$3, y$3).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }
	
	  function accumulate(quad) {
	    var strength = 0, q, c, weight = 0, x, y, i;
	
	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x = y = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = Math.abs(q.value))) {
	          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
	        }
	      }
	      quad.x = x / weight;
	      quad.y = y / weight;
	    }
	
	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }
	
	    quad.value = strength;
	  }
	
	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;
	
	    var x = quad.x - node.x,
	        y = quad.y - node.y,
	        w = x2 - x1,
	        l = x * x + y * y;
	
	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x === 0) x = jiggle(), l += x * x;
	        if (y === 0) y = jiggle(), l += y * y;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x * quad.value * alpha / l;
	        node.vy += y * quad.value * alpha / l;
	      }
	      return true;
	    }
	
	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;
	
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x === 0) x = jiggle(), l += x * x;
	      if (y === 0) y = jiggle(), l += y * y;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }
	
	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x * w;
	      node.vy += y * w;
	    } while (quad = quad.next);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : strength;
	  };
	
	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };
	
	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };
	
	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };
	
	  return force;
	};
	
	var forceX = function(x) {
	  var strength = constant$8(0.1),
	      nodes,
	      strengths,
	      xz;
	
	  if (typeof x !== "function") x = constant$8(x == null ? 0 : +x);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : strength;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : x;
	  };
	
	  return force;
	};
	
	var forceY = function(y) {
	  var strength = constant$8(0.1),
	      nodes,
	      strengths,
	      yz;
	
	  if (typeof y !== "function") y = constant$8(y == null ? 0 : +y);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : strength;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$8(+_), initialize(), force) : y;
	  };
	
	  return force;
	};
	
	var ForceMap = {
	  center: forceCenter,
	  collide: forceCollide,
	  nbody: forceManyBody,
	  link: forceLink,
	  x: forceX,
	  y: forceY
	};
	
	var Forces = 'forces';
	var ForceParams = [
	      'alpha', 'alphaMin', 'alphaTarget',
	      'velocityDecay', 'forces'
	    ];
	var ForceConfig = ['static', 'iterations'];
	var ForceOutput = ['x', 'y', 'vx', 'vy'];
	
	/**
	 * Force simulation layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<object>} params.forces - The forces to apply.
	 */
	function Force(params) {
	  Transform.call(this, null, params);
	}
	
	Force.Definition = {
	  "type": "Force",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "static", "type": "boolean", "default": false },
	    { "name": "restart", "type": "boolean", "default": false },
	    { "name": "iterations", "type": "number", "default": 300 },
	    { "name": "alpha", "type": "number", "default": 1 },
	    { "name": "alphaMin", "type": "number", "default": 0.001 },
	    { "name": "alphaTarget", "type": "number", "default": 0 },
	    { "name": "velocityDecay", "type": "number", "default": 0.4 },
	    { "name": "forces", "type": "param", "array": true,
	      "params": [
	        {
	          "key": {"force": "center"},
	          "params": [
	            { "name": "x", "type": "number", "default": 0 },
	            { "name": "y", "type": "number", "default": 0 }
	          ]
	        },
	        {
	          "key": {"force": "collide"},
	          "params": [
	            { "name": "radius", "type": "number", "expr": true },
	            { "name": "strength", "type": "number", "default": 0.7 },
	            { "name": "iterations", "type": "number", "default": 1 }
	          ]
	        },
	        {
	          "key": {"force": "nbody"},
	          "params": [
	            { "name": "strength", "type": "number", "default": -30 },
	            { "name": "theta", "type": "number", "default": 0.9 },
	            { "name": "distanceMin", "type": "number", "default": 1 },
	            { "name": "distanceMax", "type": "number" }
	          ]
	        },
	        {
	          "key": {"force": "link"},
	          "params": [
	            { "name": "links", "type": "data" },
	            { "name": "id", "type": "field" },
	            { "name": "distance", "type": "number", "default": 30, "expr": true },
	            { "name": "strength", "type": "number", "expr": true },
	            { "name": "iterations", "type": "number", "default": 1 }
	          ]
	        },
	        {
	          "key": {"force": "x"},
	          "params": [
	            { "name": "strength", "type": "number", "default": 0.1 },
	            { "name": "x", "type": "field" }
	          ]
	        },
	        {
	          "key": {"force": "y"},
	          "params": [
	            { "name": "strength", "type": "number", "default": 0.1 },
	            { "name": "y", "type": "field" }
	          ]
	        }
	      ] },
	    {
	      "name": "as", "type": "string", "array": true, "modify": false,
	      "default": ForceOutput
	    }
	  ]
	};
	
	var prototype$68 = inherits(Force, Transform);
	
	prototype$68.transform = function(_, pulse) {
	  var sim = this.value,
	      change = pulse.changed(pulse.ADD_REM),
	      params = _.modified(ForceParams),
	      iters = _.iterations || 300;
	
	  // configure simulation
	  if (!sim) {
	    this.value = sim = simulation(pulse.source, _);
	    sim.on('tick', rerun(pulse.dataflow, this));
	    if (!_.static) {
	      change = true;
	      sim.tick(); // ensure we run on init
	    }
	    pulse.modifies('index');
	  } else {
	    if (change) {
	      pulse.modifies('index');
	      sim.nodes(pulse.source);
	    }
	    if (params || pulse.changed(pulse.MOD)) {
	      setup(sim, _, 0, pulse);
	    }
	  }
	
	  // run simulation
	  if (params || change || _.modified(ForceConfig)
	      || (pulse.changed() && _.restart))
	  {
	    sim.alpha(Math.max(sim.alpha(), _.alpha || 1))
	       .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));
	
	    if (_.static) {
	      for (sim.stop(); --iters >= 0;) sim.tick();
	    } else {
	      if (sim.stopped()) sim.restart();
	      if (!change) return pulse.StopPropagation; // defer to sim ticks
	    }
	  }
	
	  return this.finish(_, pulse);
	};
	
	prototype$68.finish = function(_, pulse) {
	  var dataflow = pulse.dataflow;
	
	  // inspect dependencies, touch link source data
	  for (var args=this._argops, j=0, m=args.length, arg; j<m; ++j) {
	    arg = args[j];
	    if (arg.name !== Forces || arg.op._argval.force !== 'link') {
	      continue;
	    }
	    for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {
	      if (ops[i].name === 'links' && (op = ops[i].op.source)) {
	        dataflow.pulse(op, dataflow.changeset().reflow());
	        break;
	      }
	    }
	  }
	
	  // reflow all nodes
	  return pulse.reflow(_.modified()).modifies(ForceOutput);
	};
	
	function rerun(df, op) {
	  return function() { df.touch(op).run(); }
	}
	
	function simulation(nodes, _) {
	  var sim = forceSimulation(nodes),
	      stopped = false,
	      stop = sim.stop,
	      restart = sim.restart;
	
	  sim.stopped = function() {
	    return stopped;
	  };
	  sim.restart = function() {
	    stopped = false;
	    return restart();
	  };
	  sim.stop = function() {
	    stopped = true;
	    return stop();
	  };
	
	  return setup(sim, _, true).on('end', function() { stopped = true; });
	}
	
	function setup(sim, _, init, pulse) {
	  var f = array(_.forces), i, n, p, name;
	
	  for (i=0, n=ForceParams.length; i<n; ++i) {
	    p = ForceParams[i];
	    if (p !== Forces && _.modified(p)) sim[p](_[p]);
	  }
	
	  for (i=0, n=f.length; i<n; ++i) {
	    name = Forces + i;
	    p = init || _.modified(Forces, i) ? getForce(f[i])
	      : pulse && modified(f[i], pulse) ? sim.force(name)
	      : null;
	    if (p) sim.force(name, p);
	  }
	
	  for (n=(sim.numForces || 0); i<n; ++i) {
	    sim.force(Forces + i, null); // remove
	  }
	
	  sim.numForces = f.length;
	  return sim;
	}
	
	function modified(f, pulse) {
	  var k, v;
	  for (k in f) {
	    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v)))
	      return 1;
	  }
	  return 0;
	}
	
	function getForce(_) {
	  var f, p;
	
	  if (!ForceMap.hasOwnProperty(_.force)) {
	    error$1('Unrecognized force: ' + _.force);
	  }
	  f = ForceMap[_.force]();
	
	  for (p in _) {
	    if (isFunction(f[p])) setForceParam(f[p], _[p], _);
	  }
	
	  return f;
	}
	
	function setForceParam(f, v, _) {
	  f(isFunction(v) ? function(d) { return v(d, _); } : v);
	}
	
	
	
	var force = Object.freeze({
		force: Force
	});
	
	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}
	
	function meanXReduce(x, c) {
	  return x + c.x;
	}
	
	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}
	
	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}
	
	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}
	
	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}
	
	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;
	
	  function cluster(root) {
	    var previousNode,
	        x = 0;
	
	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });
	
	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;
	
	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }
	
	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };
	
	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };
	
	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return cluster;
	};
	
	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}
	
	var node_count = function() {
	  return this.eachAfter(count);
	};
	
	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};
	
	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};
	
	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};
	
	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};
	
	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};
	
	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};
	
	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}
	
	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};
	
	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};
	
	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};
	
	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};
	
	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;
	
	  if (children == null) children = defaultChildren;
	
	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }
	
	  return root.eachBefore(computeHeight);
	}
	
	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}
	
	function defaultChildren(d) {
	  return d.children;
	}
	
	function copyData(node) {
	  node.data = node.data.data;
	}
	
	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}
	
	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}
	
	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};
	
	var slice$5 = Array.prototype.slice;
	
	function shuffle$1(array) {
	  var m = array.length,
	      t,
	      i;
	
	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m];
	    array[m] = array[i];
	    array[i] = t;
	  }
	
	  return array;
	}
	
	var enclose = function(circles) {
	  var i = 0, n = (circles = shuffle$1(slice$5.call(circles))).length, B = [], p, e;
	
	  while (i < n) {
	    p = circles[i];
	    if (e && enclosesWeak(e, p)) ++i;
	    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
	  }
	
	  return e;
	};
	
	function extendBasis(B, p) {
	  var i, j;
	
	  if (enclosesWeakAll(p, B)) return [p];
	
	  // If we get here then B must have at least one element.
	  for (i = 0; i < B.length; ++i) {
	    if (enclosesNot(p, B[i])
	        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
	      return [B[i], p];
	    }
	  }
	
	  // If we get here then B must have at least two elements.
	  for (i = 0; i < B.length - 1; ++i) {
	    for (j = i + 1; j < B.length; ++j) {
	      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
	          && enclosesNot(encloseBasis2(B[i], p), B[j])
	          && enclosesNot(encloseBasis2(B[j], p), B[i])
	          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
	        return [B[i], B[j], p];
	      }
	    }
	  }
	
	  // If we get here then something is very wrong.
	  throw new Error;
	}
	
	function enclosesNot(a, b) {
	  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
	  return dr < 0 || dr * dr < dx * dx + dy * dy;
	}
	
	function enclosesWeak(a, b) {
	  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}
	
	function enclosesWeakAll(a, B) {
	  for (var i = 0; i < B.length; ++i) {
	    if (!enclosesWeak(a, B[i])) {
	      return false;
	    }
	  }
	  return true;
	}
	
	function encloseBasis(B) {
	  switch (B.length) {
	    case 1: return encloseBasis1(B[0]);
	    case 2: return encloseBasis2(B[0], B[1]);
	    case 3: return encloseBasis3(B[0], B[1], B[2]);
	  }
	}
	
	function encloseBasis1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}
	
	function encloseBasis2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}
	
	function encloseBasis3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = x1 - x2,
	      a3 = x1 - x3,
	      b2 = y1 - y2,
	      b3 = y1 - y3,
	      c2 = r2 - r1,
	      c3 = r3 - r1,
	      d1 = x1 * x1 + y1 * y1 - r1 * r1,
	      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
	      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (r1 + xa * xb + ya * yb),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
	  return {
	    x: x1 + xa + xb * r,
	    y: y1 + ya + yb * r,
	    r: r
	  };
	}
	
	function place(a, b, c) {
	  var ax = a.x,
	      ay = a.y,
	      da = b.r + c.r,
	      db = a.r + c.r,
	      dx = b.x - ax,
	      dy = b.y - ay,
	      dc = dx * dx + dy * dy;
	  if (dc) {
	    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
	        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	    c.x = ax + x * dx + y * dy;
	    c.y = ay + x * dy - y * dx;
	  } else {
	    c.x = ax + db;
	    c.y = ay;
	  }
	}
	
	function intersects(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r + b.r;
	  return dr * dr - 1e-6 > dx * dx + dy * dy;
	}
	
	function score(node) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab,
	      dy = (a.y * b.r + b.y * a.r) / ab;
	  return dx * dx + dy * dy;
	}
	
	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}
	
	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;
	
	  var a, b, c, n, aa, ca, i, j, k, sj, sk;
	
	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;
	
	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;
	
	  // Place the third circle.
	  place(b, a, c = circles[2]);
	
	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;
	
	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);
	
	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);
	
	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;
	
	    // Compute the new closest circle pair to the centroid.
	    aa = score(a);
	    while ((c = c.next) !== b) {
	      if ((ca = score(c)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }
	
	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);
	
	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;
	
	  return c.r;
	}
	
	function optional(f) {
	  return f == null ? null : required(f);
	}
	
	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}
	
	function constantZero() {
	  return 0;
	}
	
	var constant$9 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function defaultRadius(d) {
	  return Math.sqrt(d.value);
	}
	
	var pack$1 = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;
	
	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }
	
	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };
	
	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };
	
	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant$9(+x), pack) : padding;
	  };
	
	  return pack;
	};
	
	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}
	
	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;
	
	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}
	
	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}
	
	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};
	
	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};
	
	var partition$2 = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;
	
	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }
	
	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };
	
	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };
	
	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };
	
	  return partition;
	};
	
	var keyPrefix = "$";
	var preroot = {depth: -1};
	var ambiguous = {};
	
	function defaultId(d) {
	  return d.id;
	}
	
	function defaultParentId(d) {
	  return d.parentId;
	}
	
	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;
	
	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};
	
	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }
	
	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");
	
	    return root;
	  }
	
	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };
	
	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };
	
	  return stratify;
	};
	
	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }
	
	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}
	
	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}
	
	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}
	
	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}
	
	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}
	
	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}
	
	TreeNode.prototype = Object.create(Node.prototype);
	
	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;
	
	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }
	
	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}
	
	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree$1 = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;
	
	  function tree(root) {
	    var t = treeRoot(root);
	
	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);
	
	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);
	
	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }
	
	    return root;
	  }
	
	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }
	
	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }
	
	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }
	
	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }
	
	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };
	
	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };
	
	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return tree;
	};
	
	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};
	
	var phi = (1 + Math.sqrt(5)) / 2;
	
	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;
	
	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;
	
	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);
	
	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }
	
	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }
	
	  return rows;
	}
	
	var treemapSquarify = (function custom(ratio) {
	
	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }
	
	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return squarify;
	})(phi);
	
	var treemap = function() {
	  var tile = treemapSquarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;
	
	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }
	
	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };
	
	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };
	
	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };
	
	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };
	
	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$9(+x), treemap) : paddingInner;
	  };
	
	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };
	
	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$9(+x), treemap) : paddingTop;
	  };
	
	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$9(+x), treemap) : paddingRight;
	  };
	
	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$9(+x), treemap) : paddingBottom;
	  };
	
	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$9(+x), treemap) : paddingLeft;
	  };
	
	  return treemap;
	};
	
	var treemapBinary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);
	
	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }
	
	  partition(0, n, parent.value, x0, y0, x1, y1);
	
	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }
	
	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;
	
	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }
	
	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;
	
	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;
	
	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	};
	
	var treemapSliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};
	
	var treemapResquarify = (function custom(ratio) {
	
	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;
	
	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }
	
	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return resquarify;
	})(phi);
	
	/**
	  * Nest tuples into a tree structure, grouped by key values.
	  * @constructor
	  * @param {object} params - The parameters for this operator.
	  * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
	  * @param {function(object): *} [params.key] - Unique key field for each tuple.
	  *   If not provided, the tuple id field is used.
	  * @param {boolean} [params.generate=false] - A boolean flag indicating if
	  *   non-leaf nodes generated by this transform should be included in the
	  *   output. The default (false) includes only the input data (leaf nodes)
	  *   in the data stream.
	  */
	function Nest(params) {
	  Transform.call(this, null, params);
	}
	
	Nest.Definition = {
	  "type": "Nest",
	  "metadata": {"treesource": true, "source": true, "generates": true, "changes": true},
	  "params": [
	    { "name": "keys", "type": "field", "array": true },
	    { "name": "key", "type": "field" },
	    { "name": "generate", "type": "boolean" }
	  ]
	};
	
	var prototype$69 = inherits(Nest, Transform);
	
	function children(n) {
	  return n.values;
	}
	
	prototype$69.transform = function(_, pulse) {
	  if (!pulse.source) {
	    error$1('Nest transform requires an upstream data source.');
	  }
	
	  var key$$1 = _.key || tupleid,
	      gen = _.generate,
	      mod = _.modified(),
	      out = gen || mod ? pulse.fork(pulse.ALL) : pulse,
	      root, tree, map$$1;
	
	  if (!this.value || mod || pulse.changed()) {
	    // collect nodes to remove
	    if (gen && this.value) {
	      out.materialize(out.REM);
	      this.value.each(function(node) {
	        if (node.children) out.rem.push(node);
	      });
	    }
	
	    // generate new tree structure
	    root = array(_.keys)
	      .reduce(function(n, k) { n.key(k); return n; }, nest())
	      .entries(pulse.source);
	    this.value = tree = hierarchy({values: root}, children);
	
	    // collect nodes to add
	    if (gen) {
	      out.materialize(out.ADD);
	      out.source = out.source.slice();
	      tree.each(function(node) {
	        if (node.children) {
	          node = ingest(node.data);
	          out.add.push(node);
	          out.source.push(node);
	        }
	      });
	    }
	
	    // build lookup table
	    map$$1 = tree.lookup = {};
	    tree.each(function(node) {
	      if (tupleid(node.data) != null) {
	        map$$1[key$$1(node.data)] = node;
	      }
	    });
	  }
	
	  out.source.root = this.value;
	  return out;
	};
	
	/**
	 * Abstract class for tree layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 */
	function HierarchyLayout(params) {
	  Transform.call(this, null, params);
	}
	
	var prototype$71 = inherits(HierarchyLayout, Transform);
	
	prototype$71.transform = function(_, pulse) {
	  if (!pulse.source || !pulse.source.root) {
	    error$1(this.constructor.name
	      + ' transform requires a backing tree data source.');
	  }
	
	  var layout = this.layout(_.method),
	      fields = this.fields,
	      root = pulse.source.root,
	      as = _.as || fields;
	
	  if (_.field) root.sum(_.field);
	  if (_.sort) root.sort(_.sort);
	
	  setParams(layout, this.params, _);
	  try {
	    this.value = layout(root);
	  } catch (err) {
	    error$1(err);
	  }
	  root.each(function(node) { setFields(node, fields, as); });
	
	  return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
	};
	
	function setParams(layout, params, _) {
	  for (var p, i=0, n=params.length; i<n; ++i) {
	    p = params[i];
	    if (p in _) layout[p](_[p]);
	  }
	}
	
	function setFields(node, fields, as) {
	  var t = node.data;
	  for (var i=0, n=fields.length-1; i<n; ++i) {
	    t[as[i]] = node[fields[i]];
	  }
	  t[as[n]] = node.children ? node.children.length : 0;
	}
	
	var Output = ['x', 'y', 'r', 'depth', 'children'];
	
	/**
	 * Packed circle tree layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to size nodes.
	 */
	function Pack(params) {
	  HierarchyLayout.call(this, params);
	}
	
	Pack.Definition = {
	  "type": "Pack",
	  "metadata": {"tree": true, "modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "sort", "type": "compare" },
	    { "name": "padding", "type": "number", "default": 0 },
	    { "name": "radius", "type": "field", "default": null },
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "as", "type": "string", "array": true, "length": 3, "default": Output }
	  ]
	};
	
	var prototype$70 = inherits(Pack, HierarchyLayout);
	
	prototype$70.layout = pack$1;
	
	prototype$70.params = ['size', 'padding'];
	
	prototype$70.fields = Output;
	
	var Output$1 = ["x0", "y0", "x1", "y1", "depth", "children"];
	
	/**
	 * Partition tree layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to size nodes.
	 */
	function Partition(params) {
	  HierarchyLayout.call(this, params);
	}
	
	Partition.Definition = {
	  "type": "Partition",
	  "metadata": {"tree": true, "modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "sort", "type": "compare" },
	    { "name": "padding", "type": "number", "default": 0 },
	    { "name": "round", "type": "boolean", "default": false },
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "as", "type": "string", "array": true, "length": 4, "default": Output$1 }
	  ]
	};
	
	var prototype$72 = inherits(Partition, HierarchyLayout);
	
	prototype$72.layout = partition$2;
	
	prototype$72.params = ['size', 'round', 'padding'];
	
	prototype$72.fields = Output$1;
	
	/**
	  * Stratify a collection of tuples into a tree structure based on
	  * id and parent id fields.
	  * @constructor
	  * @param {object} params - The parameters for this operator.
	  * @param {function(object): *} params.key - Unique key field for each tuple.
	  * @param {function(object): *} params.parentKey - Field with key for parent tuple.
	  */
	function Stratify(params) {
	  Transform.call(this, null, params);
	}
	
	Stratify.Definition = {
	  "type": "Stratify",
	  "metadata": {"treesource": true},
	  "params": [
	    { "name": "key", "type": "field", "required": true },
	    { "name": "parentKey", "type": "field", "required": true  }
	  ]
	};
	
	var prototype$73 = inherits(Stratify, Transform);
	
	prototype$73.transform = function(_, pulse) {
	  if (!pulse.source) {
	    error$1('Stratify transform requires an upstream data source.');
	  }
	
	  var mod = _.modified(), tree, map,
	      run = !this.value
	         || mod
	         || pulse.changed(pulse.ADD_REM)
	         || pulse.modified(_.key.fields)
	         || pulse.modified(_.parentKey.fields);
	
	  if (run) {
	    tree = stratify().id(_.key).parentId(_.parentKey)(pulse.source);
	    map = tree.lookup = {};
	    tree.each(function(node) { map[_.key(node.data)] = node; });
	    this.value = tree;
	  }
	
	  pulse.source.root = this.value;
	  return mod ? pulse.fork(pulse.ALL) : pulse;
	};
	
	var Layouts = {
	  tidy: tree$1,
	  cluster: cluster
	};
	
	var Output$2 = ["x", "y", "depth", "children"];
	
	/**
	 * Tree layout. Depending on the method parameter, performs either
	 * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 */
	function Tree(params) {
	  HierarchyLayout.call(this, params);
	}
	
	Tree.Definition = {
	  "type": "Tree",
	  "metadata": {"tree": true, "modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "sort", "type": "compare" },
	    { "name": "method", "type": "enum", "default": "tidy", "values": ["tidy", "cluster"] },
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "nodeSize", "type": "number", "array": true, "length": 2 },
	    { "name": "as", "type": "string", "array": true, "length": 4, "default": Output$2 }
	  ]
	};
	
	var prototype$74 = inherits(Tree, HierarchyLayout);
	
	/**
	 * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
	 */
	prototype$74.layout = function(method) {
	  var m = method || 'tidy';
	  if (Layouts.hasOwnProperty(m)) return Layouts[m]();
	  else error$1('Unrecognized Tree layout method: ' + m);
	};
	
	prototype$74.params = ['size', 'nodeSize', 'separation'];
	
	prototype$74.fields = Output$2;
	
	/**
	  * Generate tuples representing links between tree nodes.
	  * The resulting tuples will contain 'source' and 'target' fields,
	  * which point to parent and child node tuples, respectively.
	  * @constructor
	  * @param {object} params - The parameters for this operator.
	  * @param {function(object): *} [params.key] - Unique key field for each tuple.
	  *   If not provided, the tuple id field is used.
	  */
	function TreeLinks(params) {
	  Transform.call(this, {}, params);
	}
	
	TreeLinks.Definition = {
	  "type": "TreeLinks",
	  "metadata": {"tree": true, "generates": true, "changes": true},
	  "params": [
	    { "name": "key", "type": "field" }
	  ]
	};
	
	var prototype$75 = inherits(TreeLinks, Transform);
	
	function parentTuple(node) {
	  var p;
	  return node.parent
	      && (p=node.parent.data)
	      && (tupleid(p) != null) && p;
	}
	
	prototype$75.transform = function(_, pulse) {
	  if (!pulse.source || !pulse.source.root) {
	    error$1('TreeLinks transform requires a backing tree data source.');
	  }
	
	  var root = pulse.source.root,
	      nodes = root.lookup,
	      links = this.value,
	      key$$1 = _.key || tupleid,
	      mods = {},
	      out = pulse.fork();
	
	  function modify(id$$1) {
	    var link = links[id$$1];
	    if (link) {
	      mods[id$$1] = 1;
	      out.mod.push(link);
	    }
	  }
	
	  // process removed tuples
	  // assumes that if a parent node is removed the child will be, too.
	  pulse.visit(pulse.REM, function(t) {
	    var id$$1 = key$$1(t),
	        link = links[id$$1];
	    if (link) {
	      delete links[id$$1];
	      out.rem.push(link);
	    }
	  });
	
	  // create new link instances for added nodes with valid parents
	  pulse.visit(pulse.ADD, function(t) {
	    var id$$1 = key$$1(t), p;
	    if (p = parentTuple(nodes[id$$1])) {
	      out.add.push(links[id$$1] = ingest({source: p, target: t}));
	      mods[id$$1] = 1;
	    }
	  });
	
	  // process modified nodes and their children
	  pulse.visit(pulse.MOD, function(t) {
	    var id$$1 = key$$1(t),
	        node = nodes[id$$1],
	        kids = node.children;
	
	    modify(id$$1);
	    if (kids) for (var i=0, n=kids.length; i<n; ++i) {
	      if (!mods[(id$$1=key$$1(kids[i].data))]) modify(id$$1);
	    }
	  });
	
	  return out;
	};
	
	var Tiles = {
	  binary: treemapBinary,
	  dice: treemapDice,
	  slice: treemapSlice,
	  slicedice: treemapSliceDice,
	  squarify: treemapSquarify,
	  resquarify: treemapResquarify
	};
	
	var Output$3 = ["x0", "y0", "x1", "y1", "depth", "children"];
	
	/**
	 * Treemap layout.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {function(object): *} params.field - The value field to size nodes.
	 */
	function Treemap(params) {
	  HierarchyLayout.call(this, params);
	}
	
	Treemap.Definition = {
	  "type": "Treemap",
	  "metadata": {"tree": true, "modifies": true},
	  "params": [
	    { "name": "field", "type": "field" },
	    { "name": "sort", "type": "compare" },
	    { "name": "method", "type": "enum", "default": "squarify",
	      "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"] },
	    { "name": "padding", "type": "number", "default": 0 },
	    { "name": "paddingInner", "type": "number", "default": 0 },
	    { "name": "paddingOuter", "type": "number", "default": 0 },
	    { "name": "paddingTop", "type": "number", "default": 0 },
	    { "name": "paddingRight", "type": "number", "default": 0 },
	    { "name": "paddingBottom", "type": "number", "default": 0 },
	    { "name": "paddingLeft", "type": "number", "default": 0 },
	    { "name": "ratio", "type": "number", "default": 1.618033988749895 },
	    { "name": "round", "type": "boolean", "default": false },
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "as", "type": "string", "array": true, "length": 4, "default": Output$3 }
	  ]
	};
	
	var prototype$76 = inherits(Treemap, HierarchyLayout);
	
	/**
	 * Treemap layout generator. Adds 'method' and 'ratio' parameters
	 * to configure the underlying tile method.
	 */
	prototype$76.layout = function() {
	  var x = treemap();
	  x.ratio = function(_) {
	    var t = x.tile();
	    if (t.ratio) x.tile(t.ratio(_));
	  };
	  x.method = function(_) {
	    if (Tiles.hasOwnProperty(_)) x.tile(Tiles[_]);
	    else error$1('Unrecognized Treemap layout method: ' + _);
	  };
	  return x;
	};
	
	prototype$76.params = [
	  'method', 'ratio', 'size', 'round',
	  'padding', 'paddingInner', 'paddingOuter',
	  'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'
	];
	
	prototype$76.fields = Output$3;
	
	
	
	var tree = Object.freeze({
		nest: Nest,
		pack: Pack,
		partition: Partition,
		stratify: Stratify,
		tree: Tree,
		treelinks: TreeLinks,
		treemap: Treemap
	});
	
	var constant$10 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function x$4(d) {
	  return d[0];
	}
	
	function y$4(d) {
	  return d[1];
	}
	
	function RedBlackTree() {
	  this._ = null; // root node
	}
	
	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}
	
	RedBlackTree.prototype = {
	  constructor: RedBlackTree,
	
	  insert: function(after, node) {
	    var parent, grandpa, uncle;
	
	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;
	
	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },
	
	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;
	
	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;
	
	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);
	
	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }
	
	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }
	
	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }
	
	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);
	
	    if (node) node.C = false;
	  }
	};
	
	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}
	
	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}
	
	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}
	
	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}
	
	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}
	
	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}
	
	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?
	
	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}
	
	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;
	
	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;
	
	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }
	
	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}
	
	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;
	
	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
	      delete edges[i];
	    }
	  }
	}
	
	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}
	
	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}
	
	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}
	
	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}
	
	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}
	
	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;
	
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;
	
	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }
	
	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]
	              : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]
	              : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }
	
	      if (nHalfedges) cover = false;
	    }
	  }
	
	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;
	
	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }
	
	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }
	
	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}
	
	var circlePool = [];
	
	var firstCircle;
	
	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}
	
	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;
	
	  if (!lArc || !rArc) return;
	
	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;
	
	  if (lSite === rSite) return;
	
	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;
	
	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2$2) return;
	
	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;
	
	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom
	
	  arc.circle = circle;
	
	  var before = null,
	      node = circles._;
	
	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }
	
	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}
	
	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}
	
	var beachPool = [];
	
	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}
	
	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}
	
	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}
	
	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];
	
	  detachBeach(beach);
	
	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon$3
	      && Math.abs(y - lArc.circle.cy) < epsilon$3) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }
	
	  disappearing.unshift(lArc);
	  detachCircle(lArc);
	
	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon$3
	      && Math.abs(y - rArc.circle.cy) < epsilon$3) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }
	
	  disappearing.push(rArc);
	  detachCircle(rArc);
	
	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }
	
	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
	
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;
	
	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon$3) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon$3) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon$3) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon$3) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }
	
	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);
	
	  if (!lArc && !rArc) return;
	
	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }
	
	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }
	
	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);
	
	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
	
	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;
	
	  if (!pby2) return rfocx;
	
	  var lArc = arc.P;
	  if (!lArc) return -Infinity;
	
	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;
	
	  if (!plby2) return lfocx;
	
	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;
	
	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	
	  return (rfocx + lfocx) / 2;
	}
	
	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}
	
	var epsilon$3 = 1e-6;
	var epsilon2$2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;
	
	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}
	
	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}
	
	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;
	
	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;
	
	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }
	
	  sortCellHalfedges();
	
	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }
	
	  this.edges = edges;
	  this.cells = cells;
	
	  beaches =
	  circles =
	  edges =
	  cells = null;
	}
	
	Diagram.prototype = {
	  constructor: Diagram,
	
	  polygons: function() {
	    var edges = this.edges;
	
	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },
	
	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;
	
	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;
	
	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });
	
	    return triangles;
	  },
	
	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },
	
	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;
	
	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;
	
	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);
	
	    that._found = i0;
	
	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};
	
	var voronoi$1 = function() {
	  var x = x$4,
	      y = y$4,
	      extent = null;
	
	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }
	
	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };
	
	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };
	
	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };
	
	  voronoi.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$10(+_), voronoi) : x;
	  };
	
	  voronoi.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$10(+_), voronoi) : y;
	  };
	
	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };
	
	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };
	
	  return voronoi;
	};
	
	function Voronoi(params) {
	  Transform.call(this, null, params);
	}
	
	Voronoi.Definition = {
	  "type": "Voronoi",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "x", "type": "field", "required": true },
	    { "name": "y", "type": "field", "required": true },
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "extent", "type": "array", "array": true, "length": 2,
	      "default": [[-1e5, -1e5], [1e5, 1e5]],
	      "content": {"type": "number", "array": true, "length": 2} },
	    { "name": "as", "type": "string", "default": "path" }
	  ]
	};
	
	var prototype$77 = inherits(Voronoi, Transform);
	
	var defaultExtent = [[-1e5, -1e5], [1e5, 1e5]];
	
	prototype$77.transform = function(_, pulse) {
	  var as = _.as || 'path',
	      data = pulse.source,
	      diagram, polygons, i, n;
	
	  // configure and construct voronoi diagram
	  diagram = voronoi$1().x(_.x).y(_.y);
	  if (_.size) diagram.size(_.size);
	  else diagram.extent(_.extent || defaultExtent);
	
	  this.value = (diagram = diagram(data));
	
	  // map polygons to paths
	  polygons = diagram.polygons();
	  for (i=0, n=data.length; i<n; ++i) {
	    data[i][as] = polygons[i]
	      ? 'M' + polygons[i].join('L') + 'Z'
	      : null;
	  }
	
	  return pulse.reflow(_.modified()).modifies(as);
	};
	
	
	
	var voronoi = Object.freeze({
		voronoi: Voronoi
	});
	
	/*
	Copyright (c) 2013, Jason Davies.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	
	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.
	
	  * The name Jason Davies may not be used to endorse or promote products
	    derived from this software without specific prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
	ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
	// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
	
	var cloudRadians = Math.PI / 180;
	var cw = 1 << 11 >> 5;
	var ch = 1 << 11;
	
	var cloud = function() {
	  var size = [256, 256],
	      text,
	      font,
	      fontSize,
	      fontStyle,
	      fontWeight,
	      rotate,
	      padding,
	      spiral = archimedeanSpiral,
	      words = [],
	      random = Math.random,
	      cloud = {};
	
	  cloud.layout = function() {
	    var contextAndRatio = getContext(canvas()),
	        board = zeroArray((size[0] >> 5) * size[1]),
	        bounds = null,
	        n = words.length,
	        i = -1,
	        tags = [],
	        data = words.map(function(d) {
	          return {
	            text: text(d),
	            font: font(d),
	            style: fontStyle(d),
	            weight: fontWeight(d),
	            rotate: rotate(d),
	            size: ~~fontSize(d),
	            padding: padding(d),
	            xoff: 0,
	            yoff: 0,
	            x1: 0,
	            y1: 0,
	            x0: 0,
	            y0: 0,
	            hasText: false,
	            sprite: null,
	            datum: d
	          };
	        }).sort(function(a, b) { return b.size - a.size; });
	
	    while (++i < n) {
	      var d = data[i];
	      d.x = (size[0] * (random() + .5)) >> 1;
	      d.y = (size[1] * (random() + .5)) >> 1;
	      cloudSprite(contextAndRatio, d, data, i);
	      if (d.hasText && place(board, d, bounds)) {
	        tags.push(d);
	        if (bounds) cloudBounds(bounds, d);
	        else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];
	        // Temporary hack
	        d.x -= size[0] >> 1;
	        d.y -= size[1] >> 1;
	      }
	    }
	
	    return tags;
	  };
	
	  function getContext(canvas$$1) {
	    canvas$$1.width = canvas$$1.height = 1;
	    var ratio = Math.sqrt(canvas$$1.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
	    canvas$$1.width = (cw << 5) / ratio;
	    canvas$$1.height = ch / ratio;
	
	    var context = canvas$$1.getContext("2d");
	    context.fillStyle = context.strokeStyle = "red";
	    context.textAlign = "center";
	
	    return {context: context, ratio: ratio};
	  }
	
	  function place(board, tag, bounds) {
	    var startX = tag.x,
	        startY = tag.y,
	        maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
	        s = spiral(size),
	        dt = random() < .5 ? 1 : -1,
	        t = -dt,
	        dxdy,
	        dx,
	        dy;
	
	    while (dxdy = s(t += dt)) {
	      dx = ~~dxdy[0];
	      dy = ~~dxdy[1];
	
	      if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;
	
	      tag.x = startX + dx;
	      tag.y = startY + dy;
	
	      if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||
	          tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
	      // TODO only check for collisions within current bounds.
	      if (!bounds || !cloudCollide(tag, board, size[0])) {
	        if (!bounds || collideRects(tag, bounds)) {
	          var sprite = tag.sprite,
	              w = tag.width >> 5,
	              sw = size[0] >> 5,
	              lx = tag.x - (w << 4),
	              sx = lx & 0x7f,
	              msx = 32 - sx,
	              h = tag.y1 - tag.y0,
	              x = (tag.y + tag.y0) * sw + (lx >> 5),
	              last;
	          for (var j = 0; j < h; j++) {
	            last = 0;
	            for (var i = 0; i <= w; i++) {
	              board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
	            }
	            x += sw;
	          }
	          tag.sprite = null;
	          return true;
	        }
	      }
	    }
	    return false;
	  }
	
	  cloud.words = function(_) {
	    if (arguments.length) {
	      words = _;
	      return cloud;
	    } else {
	      return words;
	    }
	  };
	
	  cloud.size = function(_) {
	    if (arguments.length) {
	      size = [+_[0], +_[1]];
	      return cloud;
	    } else {
	      return size;
	    }
	  };
	
	  cloud.font = function(_) {
	    if (arguments.length) {
	      font = functor(_);
	      return cloud;
	    } else {
	      return font;
	    }
	  };
	
	  cloud.fontStyle = function(_) {
	    if (arguments.length) {
	      fontStyle = functor(_);
	      return cloud;
	    } else {
	      return fontStyle;
	    }
	  };
	
	  cloud.fontWeight = function(_) {
	    if (arguments.length) {
	      fontWeight = functor(_);
	      return cloud;
	    } else {
	      return fontWeight;
	    }
	  };
	
	  cloud.rotate = function(_) {
	    if (arguments.length) {
	      rotate = functor(_);
	      return cloud;
	    } else {
	      return rotate;
	    }
	  };
	
	  cloud.text = function(_) {
	    if (arguments.length) {
	      text = functor(_);
	      return cloud;
	    } else {
	      return text;
	    }
	  };
	
	  cloud.spiral = function(_) {
	    if (arguments.length) {
	      spiral = spirals[_] || _;
	      return cloud;
	    } else {
	      return spiral;
	    }
	  };
	
	  cloud.fontSize = function(_) {
	    if (arguments.length) {
	      fontSize = functor(_);
	      return cloud;
	    } else {
	      return fontSize;
	    }
	  };
	
	  cloud.padding = function(_) {
	    if (arguments.length) {
	      padding = functor(_);
	      return cloud;
	    } else {
	      return padding;
	    }
	  };
	
	  cloud.random = function(_) {
	    if (arguments.length) {
	      random = _;
	      return cloud;
	    } else {
	      return random;
	    }
	  };
	
	  return cloud;
	};
	
	// Fetches a monochrome sprite bitmap for the specified text.
	// Load in batches for speed.
	function cloudSprite(contextAndRatio, d, data, di) {
	  if (d.sprite) return;
	  var c = contextAndRatio.context,
	      ratio = contextAndRatio.ratio;
	
	  c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
	  var x = 0,
	      y = 0,
	      maxh = 0,
	      n = data.length,
	      w, w32, h, i, j;
	  --di;
	  while (++di < n) {
	    d = data[di];
	    c.save();
	    c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
	    w = c.measureText(d.text + "m").width * ratio;
	    h = d.size << 1;
	    if (d.rotate) {
	      var sr = Math.sin(d.rotate * cloudRadians),
	          cr = Math.cos(d.rotate * cloudRadians),
	          wcr = w * cr,
	          wsr = w * sr,
	          hcr = h * cr,
	          hsr = h * sr;
	      w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;
	      h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
	    } else {
	      w = (w + 0x1f) >> 5 << 5;
	    }
	    if (h > maxh) maxh = h;
	    if (x + w >= (cw << 5)) {
	      x = 0;
	      y += maxh;
	      maxh = 0;
	    }
	    if (y + h >= ch) break;
	    c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
	    if (d.rotate) c.rotate(d.rotate * cloudRadians);
	    c.fillText(d.text, 0, 0);
	    if (d.padding) {
	      c.lineWidth = 2 * d.padding;
	      c.strokeText(d.text, 0, 0);
	    }
	    c.restore();
	    d.width = w;
	    d.height = h;
	    d.xoff = x;
	    d.yoff = y;
	    d.x1 = w >> 1;
	    d.y1 = h >> 1;
	    d.x0 = -d.x1;
	    d.y0 = -d.y1;
	    d.hasText = true;
	    x += w;
	  }
	  var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
	      sprite = [];
	  while (--di >= 0) {
	    d = data[di];
	    if (!d.hasText) continue;
	    w = d.width;
	    w32 = w >> 5;
	    h = d.y1 - d.y0;
	    // Zero the buffer
	    for (i = 0; i < h * w32; i++) sprite[i] = 0;
	    x = d.xoff;
	    if (x == null) return;
	    y = d.yoff;
	    var seen = 0,
	        seenRow = -1;
	    for (j = 0; j < h; j++) {
	      for (i = 0; i < w; i++) {
	        var k = w32 * j + (i >> 5),
	            m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;
	        sprite[k] |= m;
	        seen |= m;
	      }
	      if (seen) seenRow = j;
	      else {
	        d.y0++;
	        h--;
	        j--;
	        y++;
	      }
	    }
	    d.y1 = d.y0 + seenRow;
	    d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
	  }
	}
	
	// Use mask-based collision detection.
	function cloudCollide(tag, board, sw) {
	  sw >>= 5;
	  var sprite = tag.sprite,
	      w = tag.width >> 5,
	      lx = tag.x - (w << 4),
	      sx = lx & 0x7f,
	      msx = 32 - sx,
	      h = tag.y1 - tag.y0,
	      x = (tag.y + tag.y0) * sw + (lx >> 5),
	      last;
	  for (var j = 0; j < h; j++) {
	    last = 0;
	    for (var i = 0; i <= w; i++) {
	      if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))
	          & board[x + i]) return true;
	    }
	    x += sw;
	  }
	  return false;
	}
	
	function cloudBounds(bounds, d) {
	  var b0 = bounds[0],
	      b1 = bounds[1];
	  if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
	  if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
	  if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
	  if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
	}
	
	function collideRects(a, b) {
	  return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
	}
	
	function archimedeanSpiral(size) {
	  var e = size[0] / size[1];
	  return function(t) {
	    return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
	  };
	}
	
	function rectangularSpiral(size) {
	  var dy = 4,
	      dx = dy * size[0] / size[1],
	      x = 0,
	      y = 0;
	  return function(t) {
	    var sign = t < 0 ? -1 : 1;
	    // See triangular numbers: T_n = n * (n + 1) / 2.
	    switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {
	      case 0:  x += dx; break;
	      case 1:  y += dy; break;
	      case 2:  x -= dx; break;
	      default: y -= dy; break;
	    }
	    return [x, y];
	  };
	}
	
	// TODO reuse arrays?
	function zeroArray(n) {
	  var a = [],
	      i = -1;
	  while (++i < n) a[i] = 0;
	  return a;
	}
	
	function functor(d) {
	  return typeof d === "function" ? d : function() { return d; };
	}
	
	var spirals = {
	  archimedean: archimedeanSpiral,
	  rectangular: rectangularSpiral
	};
	
	var Output$4 = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];
	
	var Params$1 = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];
	
	function Wordcloud(params) {
	  Transform.call(this, cloud(), params);
	}
	
	Wordcloud.Definition = {
	  "type": "Wordcloud",
	  "metadata": {"modifies": true},
	  "params": [
	    { "name": "size", "type": "number", "array": true, "length": 2 },
	    { "name": "font", "type": "string", "expr": true, "default": "sans-serif" },
	    { "name": "fontStyle", "type": "string", "expr": true, "default": "normal" },
	    { "name": "fontWeight", "type": "string", "expr": true, "default": "normal" },
	    { "name": "fontSize", "type": "number", "expr": true, "default": 14 },
	    { "name": "fontSizeRange", "type": "number", "array": "nullable", "default": [10, 50] },
	    { "name": "rotate", "type": "number", "expr": true, "default": 0 },
	    { "name": "text", "type": "field" },
	    { "name": "spiral", "type": "string", "values": ["archimedean", "rectangular"] },
	    { "name": "padding", "type": "number", "expr": true },
	    { "name": "as", "type": "string", "array": true, "length": 7, "default": Output$4 }
	  ]
	};
	
	var prototype$78 = inherits(Wordcloud, Transform);
	
	prototype$78.transform = function(_, pulse) {
	  function modp(param) {
	    var p = _[param];
	    return isFunction(p) && pulse.modified(p.fields);
	  }
	
	  var mod = _.modified();
	  if (!(mod || pulse.changed(pulse.ADD_REM) || Params$1.some(modp))) return;
	
	  var data = pulse.materialize(pulse.SOURCE).source,
	      layout = this.value,
	      as = _.as || Output$4,
	      fontSize = _.fontSize || 14,
	      range;
	
	  isFunction(fontSize)
	    ? (range = _.fontSizeRange)
	    : (fontSize = constant(fontSize));
	
	  // create font size scaling function as needed
	  if (range) {
	    var fsize = fontSize,
	        sizeScale = scale$1('sqrt')()
	          .domain(extent$2(fsize, data))
	          .range(range);
	    fontSize = function(x) { return sizeScale(fsize(x)); };
	  }
	
	  data.forEach(function(t) {
	    t[as[0]] = NaN;
	    t[as[1]] = NaN;
	    t[as[3]] = 0;
	  });
	
	  // configure layout
	  var words = layout
	    .words(data)
	    .text(_.text)
	    .size(_.size || [500, 500])
	    .padding(_.padding || 1)
	    .spiral(_.spiral || 'archimedean')
	    .rotate(_.rotate || 0)
	    .font(_.font || 'sans-serif')
	    .fontStyle(_.fontStyle || 'normal')
	    .fontWeight(_.fontWeight || 'normal')
	    .fontSize(fontSize)
	    .random(exports.random)
	    .layout();
	
	  var size = layout.size(),
	      dx = size[0] >> 1,
	      dy = size[1] >> 1,
	      i = 0,
	      n = words.length,
	      w, t;
	
	  for (; i<n; ++i) {
	    w = words[i];
	    t = w.datum;
	    t[as[0]] = w.x + dx;
	    t[as[1]] = w.y + dy;
	    t[as[2]] = w.font;
	    t[as[3]] = w.size;
	    t[as[4]] = w.style;
	    t[as[5]] = w.weight;
	    t[as[6]] = w.rotate;
	  }
	
	  return pulse.reflow(mod).modifies(as);
	};
	
	function extent$2(field$$1, data) {
	  var min = +Infinity,
	      max = -Infinity,
	      i = 0,
	      n = data.length,
	      v;
	
	  for (; i<n; ++i) {
	    v = field$$1(data[i]);
	    if (v < min) min = v;
	    if (v > max) max = v;
	  }
	
	  return [min, max];
	}
	
	
	
	var wordcloud = Object.freeze({
		wordcloud: Wordcloud
	});
	
	function array8(n) { return new Uint8Array(n); }
	
	function array16(n) { return new Uint16Array(n); }
	
	function array32(n) { return new Uint32Array(n); }
	
	/**
	 * Maintains CrossFilter state.
	 */
	function Bitmaps() {
	
	  var width = 8,
	      data = [],
	      seen = array32(0),
	      curr = array$5(0, width),
	      prev = array$5(0, width);
	
	  return {
	
	    data: function() { return data; },
	
	    seen: function() {
	      return (seen = lengthen(seen, data.length));
	    },
	
	    add: function(array) {
	      for (var i=0, j=data.length, n=array.length, t; i<n; ++i) {
	        t = array[i];
	        t._index = j++;
	        data.push(t);
	      }
	    },
	
	    remove: function(num, map) { // map: index -> boolean (true => remove)
	      var n = data.length,
	          copy = Array(n - num),
	          reindex = data, // reuse old data array for index map
	          t, i, j;
	
	      // seek forward to first removal
	      for (i=0; !map[i] && i<n; ++i) {
	        copy[i] = data[i];
	        reindex[i] = i;
	      }
	
	      // condense arrays
	      for (j=i; i<n; ++i) {
	        t = data[i];
	        if (!map[i]) {
	          reindex[i] = j;
	          curr[j] = curr[i];
	          prev[j] = prev[i];
	          copy[j] = t;
	          t._index = j++;
	        } else {
	          reindex[i] = -1;
	        }
	        curr[i] = 0; // clear unused bits
	      }
	
	      data = copy;
	      return reindex;
	    },
	
	    size: function() { return data.length; },
	
	    curr: function() { return curr; },
	
	    prev: function() { return prev; },
	
	    reset: function(k) { prev[k] = curr[k]; },
	
	    all: function() {
	      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;
	    },
	
	    set: function(k, one) { curr[k] |= one; },
	
	    clear: function(k, one) { curr[k] &= ~one; },
	
	    resize: function(n, m) {
	      var k = curr.length;
	      if (n > k || m > width) {
	        width = Math.max(m, width);
	        curr = array$5(n, width, curr);
	        prev = array$5(n, width);
	      }
	    }
	  };
	}
	
	function lengthen(array, length, copy) {
	  if (array.length >= length) return array;
	  copy = copy || new array.constructor(length);
	  copy.set(array);
	  return copy;
	}
	
	function array$5(n, m, array) {
	  var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
	  if (array) copy.set(array);
	  return copy;
	}
	
	var Dimension = function(index, i, query) {
	  var bit = (1 << i);
	
	  return {
	    one:     bit,
	    zero:    ~bit,
	    range:   query.slice(),
	    bisect:  index.bisect,
	    index:   index.index,
	    size:    index.size,
	
	    onAdd: function(added, curr) {
	      var dim = this,
	          range = dim.bisect(dim.range, added.value),
	          idx = added.index,
	          lo = range[0],
	          hi = range[1],
	          n1 = idx.length, i;
	
	      for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;
	      for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;
	      return dim;
	    }
	  };
	};
	
	/**
	 * Maintains a list of values, sorted by key.
	 */
	function SortedIndex() {
	  var index = array32(0),
	      value = [],
	      size = 0;
	
	  function insert(key, data, base) {
	    if (!data.length) return [];
	
	    var n0 = size,
	        n1 = data.length,
	        addv = Array(n1),
	        addi = array32(n1),
	        oldv, oldi, i;
	
	    for (i=0; i<n1; ++i) {
	      addv[i] = key(data[i]);
	      addi[i] = i;
	    }
	    addv = sort(addv, addi);
	
	    if (n0) {
	      oldv = value;
	      oldi = index;
	      value = Array(n0 + n1);
	      index = array32(n0 + n1);
	      merge$3(base, oldv, oldi, n0, addv, addi, n1, value, index);
	    } else {
	      if (base > 0) for (i=0; i<n1; ++i) {
	        addi[i] += base;
	      }
	      value = addv;
	      index = addi;
	    }
	    size = n0 + n1;
	
	    return {index: addi, value: addv};
	  }
	
	  function remove(num, map) {
	    // map: index -> remove
	    var n = size,
	        idx, i, j;
	
	    // seek forward to first removal
	    for (i=0; !map[index[i]] && i<n; ++i);
	
	    // condense index and value arrays
	    for (j=i; i<n; ++i) {
	      if (!map[idx=index[i]]) {
	        index[j] = idx;
	        value[j] = value[i];
	        ++j;
	      }
	    }
	
	    size = n - num;
	  }
	
	  function reindex(map) {
	    for (var i=0, n=size; i<n; ++i) {
	      index[i] = map[index[i]];
	    }
	  }
	
	  function bisect(range, array) {
	    var n;
	    if (array) {
	      n = array.length;
	    } else {
	      array = value;
	      n = size;
	    }
	    return [
	      bisectLeft(array, range[0], 0, n),
	      bisectRight(array, range[1], 0, n)
	    ];
	  }
	
	  return {
	    insert:  insert,
	    remove:  remove,
	    bisect:  bisect,
	    reindex: reindex,
	    index:   function() { return index; },
	    size:    function() { return size; }
	  };
	}
	
	function sort(values, index) {
	  values.sort.call(index, function(a, b) {
	    var x = values[a],
	        y = values[b];
	    return x < y ? -1 : x > y ? 1 : 0;
	  });
	  return permute(values, index);
	}
	
	function merge$3(base, value0, index0, n0, value1, index1, n1, value, index) {
	  var i0 = 0, i1 = 0, i;
	
	  for (i=0; i0 < n0 && i1 < n1; ++i) {
	    if (value0[i0] < value1[i1]) {
	      value[i] = value0[i0];
	      index[i] = index0[i0++];
	    } else {
	      value[i] = value1[i1];
	      index[i] = index1[i1++] + base;
	    }
	  }
	
	  for (; i0 < n0; ++i0, ++i) {
	    value[i] = value0[i0];
	    index[i] = index0[i0];
	  }
	
	  for (; i1 < n1; ++i1, ++i) {
	    value[i] = value1[i1];
	    index[i] = index1[i1] + base;
	  }
	}
	
	/**
	 * An indexed multi-dimensional filter.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
	 * @param {Array} params.query - An array of per-dimension range queries.
	 */
	function CrossFilter(params) {
	  Transform.call(this, Bitmaps(), params);
	  this._indices = null;
	  this._dims = null;
	}
	
	CrossFilter.Definition = {
	  "type": "CrossFilter",
	  "metadata": {},
	  "params": [
	    { "name": "fields", "type": "field", "array": true, "required": true },
	    { "name": "query", "type": "array", "array": true, "required": true,
	      "content": {"type": "number", "array": true, "length": 2} }
	  ]
	};
	
	var prototype$79 = inherits(CrossFilter, Transform);
	
	prototype$79.transform = function(_, pulse) {
	  if (!this._dims) {
	    return this.init(_, pulse);
	  } else {
	    var init = _.modified('fields')
	          || _.fields.some(function(f) { return pulse.modified(f.fields); });
	
	    return init
	      ? this.reinit(_, pulse)
	      : this.eval(_, pulse);
	  }
	};
	
	prototype$79.init = function(_, pulse) {
	  var fields = _.fields,
	      query = _.query,
	      indices = this._indices = {},
	      dims = this._dims = [],
	      m = query.length,
	      i = 0, key$$1, index;
	
	  // instantiate indices and dimensions
	  for (; i<m; ++i) {
	    key$$1 = fields[i].fname;
	    index = indices[key$$1] || (indices[key$$1] = SortedIndex());
	    dims.push(Dimension(index, i, query[i]));
	  }
	
	  return this.eval(_, pulse);
	};
	
	prototype$79.reinit = function(_, pulse) {
	  var output = pulse.materialize().fork(),
	      fields = _.fields,
	      query = _.query,
	      indices = this._indices,
	      dims = this._dims,
	      bits = this.value,
	      curr = bits.curr(),
	      prev = bits.prev(),
	      all = bits.all(),
	      out = (output.rem = output.add),
	      mod = output.mod,
	      m = query.length,
	      adds = {}, add, index, key$$1,
	      mods, remMap, modMap, i, n, f;
	
	  // set prev to current state
	  prev.set(curr);
	
	  // if pulse has remove tuples, process them first
	  if (pulse.rem.length) {
	    remMap = this.remove(_, pulse, output);
	  }
	
	  // if pulse has added tuples, add them to state
	  if (pulse.add.length) {
	    bits.add(pulse.add);
	  }
	
	  // if pulse has modified tuples, create an index map
	  if (pulse.mod.length) {
	    modMap = {};
	    for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {
	      modMap[mods[i]._index] = 1;
	    }
	  }
	
	  // re-initialize indices as needed, update curr bitmap
	  for (i=0; i<m; ++i) {
	    f = fields[i];
	    if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
	      key$$1 = f.fname;
	      if (!(add = adds[key$$1])) {
	        indices[key$$1] = index = SortedIndex();
	        adds[key$$1] = add = index.insert(f, pulse.source, 0);
	      }
	      dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
	    }
	  }
	
	  // visit each tuple
	  // if filter state changed, push index to add/rem
	  // else if in mod and passes a filter, push index to mod
	  for (i=0, n=bits.data().length; i<n; ++i) {
	    if (remMap[i]) { // skip if removed tuple
	      continue;
	    } else if (prev[i] !== curr[i]) { // add if state changed
	      out.push(i);
	    } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through
	      mod.push(i);
	    }
	  }
	
	  bits.mask = (1 << m) - 1;
	  return output;
	};
	
	prototype$79.eval = function(_, pulse) {
	  var output = pulse.materialize().fork(),
	      m = this._dims.length,
	      mask = 0;
	
	  if (pulse.rem.length) {
	    this.remove(_, pulse, output);
	    mask |= (1 << m) - 1;
	  }
	
	  if (_.modified('query') && !_.modified('fields')) {
	    mask |= this.update(_, pulse, output);
	  }
	
	  if (pulse.add.length) {
	    this.insert(_, pulse, output);
	    mask |= (1 << m) - 1;
	  }
	
	  if (pulse.mod.length) {
	    this.modify(pulse, output);
	    mask |= (1 << m) - 1;
	  }
	
	  this.value.mask = mask;
	  return output;
	};
	
	prototype$79.insert = function(_, pulse, output) {
	  var tuples = pulse.add,
	      bits = this.value,
	      dims = this._dims,
	      indices = this._indices,
	      fields = _.fields,
	      adds = {},
	      out = output.add,
	      k = bits.size(),
	      n = k + tuples.length,
	      m = dims.length, j, key$$1, add;
	
	  // resize bitmaps and add tuples as needed
	  bits.resize(n, m);
	  bits.add(tuples);
	
	  var curr = bits.curr(),
	      prev = bits.prev(),
	      all  = bits.all();
	
	  // add to dimensional indices
	  for (j=0; j<m; ++j) {
	    key$$1 = fields[j].fname;
	    add = adds[key$$1] || (adds[key$$1] = indices[key$$1].insert(fields[j], tuples, k));
	    dims[j].onAdd(add, curr);
	  }
	
	  // set previous filters, output if passes at least one filter
	  for (; k<n; ++k) {
	    prev[k] = all;
	    if (curr[k] !== all) out.push(k);
	  }
	};
	
	prototype$79.modify = function(pulse, output) {
	  var out = output.mod,
	      bits = this.value,
	      curr = bits.curr(),
	      all  = bits.all(),
	      tuples = pulse.mod,
	      i, n, k;
	
	  for (i=0, n=tuples.length; i<n; ++i) {
	    k = tuples[i]._index;
	    if (curr[k] !== all) out.push(k);
	  }
	};
	
	prototype$79.remove = function(_, pulse, output) {
	  var indices = this._indices,
	      bits = this.value,
	      curr = bits.curr(),
	      prev = bits.prev(),
	      all  = bits.all(),
	      map = {},
	      out = output.rem,
	      tuples = pulse.rem,
	      i, n, k, f;
	
	  // process tuples, output if passes at least one filter
	  for (i=0, n=tuples.length; i<n; ++i) {
	    k = tuples[i]._index;
	    map[k] = 1; // build index map
	    prev[k] = (f = curr[k]);
	    curr[k] = all;
	    if (f !== all) out.push(k);
	  }
	
	  // remove from dimensional indices
	  for (k in indices) {
	    indices[k].remove(n, map);
	  }
	
	  this.reindex(pulse, n, map);
	  return map;
	};
	
	// reindex filters and indices after propagation completes
	prototype$79.reindex = function(pulse, num, map) {
	  var indices = this._indices,
	      bits = this.value;
	
	  pulse.runAfter(function() {
	    var indexMap = bits.remove(num, map);
	    for (var key$$1 in indices) indices[key$$1].reindex(indexMap);
	  });
	};
	
	prototype$79.update = function(_, pulse, output) {
	  var dims = this._dims,
	      query = _.query,
	      stamp = pulse.stamp,
	      m = dims.length,
	      mask = 0, i, q;
	
	  // survey how many queries have changed
	  output.filters = 0;
	  for (q=0; q<m; ++q) {
	    if (_.modified('query', q)) { i = q; ++mask; }
	  }
	
	  if (mask === 1) {
	    // only one query changed, use more efficient update
	    mask = dims[i].one;
	    this.incrementOne(dims[i], query[i], output.add, output.rem);
	  } else {
	    // multiple queries changed, perform full record keeping
	    for (q=0, mask=0; q<m; ++q) {
	      if (!_.modified('query', q)) continue;
	      mask |= dims[q].one;
	      this.incrementAll(dims[q], query[q], stamp, output.add);
	      output.rem = output.add; // duplicate add/rem for downstream resolve
	    }
	  }
	
	  return mask;
	};
	
	prototype$79.incrementAll = function(dim, query, stamp, out) {
	  var bits = this.value,
	      seen = bits.seen(),
	      curr = bits.curr(),
	      prev = bits.prev(),
	      index = dim.index(),
	      old = dim.bisect(dim.range),
	      range = dim.bisect(query),
	      lo1 = range[0],
	      hi1 = range[1],
	      lo0 = old[0],
	      hi0 = old[1],
	      one$$1 = dim.one,
	      i, j, k;
	
	  // Fast incremental update based on previous lo index.
	  if (lo1 < lo0) {
	    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
	      k = index[i];
	      if (seen[k] !== stamp) {
	        prev[k] = curr[k];
	        seen[k] = stamp;
	        out.push(k);
	      }
	      curr[k] ^= one$$1;
	    }
	  } else if (lo1 > lo0) {
	    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
	      k = index[i];
	      if (seen[k] !== stamp) {
	        prev[k] = curr[k];
	        seen[k] = stamp;
	        out.push(k);
	      }
	      curr[k] ^= one$$1;
	    }
	  }
	
	  // Fast incremental update based on previous hi index.
	  if (hi1 > hi0) {
	    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
	      k = index[i];
	      if (seen[k] !== stamp) {
	        prev[k] = curr[k];
	        seen[k] = stamp;
	        out.push(k);
	      }
	      curr[k] ^= one$$1;
	    }
	  } else if (hi1 < hi0) {
	    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
	      k = index[i];
	      if (seen[k] !== stamp) {
	        prev[k] = curr[k];
	        seen[k] = stamp;
	        out.push(k);
	      }
	      curr[k] ^= one$$1;
	    }
	  }
	
	  dim.range = query.slice();
	};
	
	prototype$79.incrementOne = function(dim, query, add, rem) {
	  var bits = this.value,
	      curr = bits.curr(),
	      index = dim.index(),
	      old = dim.bisect(dim.range),
	      range = dim.bisect(query),
	      lo1 = range[0],
	      hi1 = range[1],
	      lo0 = old[0],
	      hi0 = old[1],
	      one$$1 = dim.one,
	      i, j, k;
	
	  // Fast incremental update based on previous lo index.
	  if (lo1 < lo0) {
	    for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
	      k = index[i];
	      curr[k] ^= one$$1;
	      add.push(k);
	    }
	  } else if (lo1 > lo0) {
	    for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
	      k = index[i];
	      curr[k] ^= one$$1;
	      rem.push(k);
	    }
	  }
	
	  // Fast incremental update based on previous hi index.
	  if (hi1 > hi0) {
	    for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
	      k = index[i];
	      curr[k] ^= one$$1;
	      add.push(k);
	    }
	  } else if (hi1 < hi0) {
	    for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
	      k = index[i];
	      curr[k] ^= one$$1;
	      rem.push(k);
	    }
	  }
	
	  dim.range = query.slice();
	};
	
	/**
	 * Selectively filters tuples by resolving against a filter bitmap.
	 * Useful for processing the output of a cross-filter transform.
	 * @constructor
	 * @param {object} params - The parameters for this operator.
	 * @param {object} params.ignore - A bit mask indicating which filters to ignore.
	 * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
	 *   parameter value is a reference to a {@link CrossFilter} transform.
	 */
	function ResolveFilter(params) {
	  Transform.call(this, null, params);
	}
	
	ResolveFilter.Definition = {
	  "type": "ResolveFilter",
	  "metadata": {},
	  "params": [
	    { "name": "ignore", "type": "number", "required": true,
	      "description": "A bit mask indicating which filters to ignore." },
	    { "name": "filter", "type": "object", "required": true,
	      "description": "Per-tuple filter bitmaps from a CrossFilter transform." }
	  ]
	};
	
	var prototype$80 = inherits(ResolveFilter, Transform);
	
	prototype$80.transform = function(_, pulse) {
	  var ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore
	      bitmap = _.filter,
	      mask = bitmap.mask;
	
	  // exit early if no relevant filter changes
	  if ((mask & ignore) === 0) return pulse.StopPropagation;
	
	  var output = pulse.fork(pulse.ALL),
	      data = bitmap.data(),
	      curr = bitmap.curr(),
	      prev = bitmap.prev(),
	      pass = function(k) {
	        return !(curr[k] & ignore) ? data[k] : null;
	      };
	
	  // propagate all mod tuples that pass the filter
	  output.filter(output.MOD, pass);
	
	  // determine add & rem tuples via filter functions
	  // for efficiency, we do *not* populate new arrays,
	  // instead we add filter functions applied downstream
	
	  if (!(mask & (mask-1))) { // only one filter changed
	    output.filter(output.ADD, pass);
	    output.filter(output.REM, function(k) {
	      return (curr[k] & ignore) === mask ? data[k] : null;
	    });
	
	  } else { // multiple filters changed
	    output.filter(output.ADD, function(k) {
	      var c = curr[k] & ignore,
	          f = !c && (c ^ (prev[k] & ignore));
	      return f ? data[k] : null;
	    });
	    output.filter(output.REM, function(k) {
	      var c = curr[k] & ignore,
	          f = c && !(c ^ (c ^ (prev[k] & ignore)));
	      return f ? data[k] : null;
	    });
	  }
	
	  // add filter to source data in case of reflow...
	  return output.filter(output.SOURCE, function(t) { return pass(t._index); });
	};
	
	
	
	var xf = Object.freeze({
		crossfilter: CrossFilter,
		resolvefilter: ResolveFilter
	});
	
	var version = "3.0.10";
	
	var Default = 'default';
	
	var cursor = function(view) {
	  var cursor = view._signals.cursor;
	
	  // add cursor signal to dataflow, if needed
	  if (!cursor) {
	    view._signals.cursor = (cursor = view.add({user: Default, item: null}));
	  }
	
	  // evaluate cursor on each mousemove event
	  view.on(view.events('view', 'mousemove'), cursor,
	    function(_, event) {
	      var value = cursor.value,
	          user = value ? (isString(value) ? value : value.user) : Default,
	          item = event.item && event.item.cursor || null;
	
	      return (value && user === value.user && item == value.item) ? value
	        : {user: user, item: item};
	    }
	  );
	
	  // when cursor signal updates, set visible cursor
	  view.add(null, function(_) {
	    var user = _.cursor,
	        item = this.value;
	
	    if (!isString(user)) {
	      item = user.item;
	      user = user.user;
	    }
	
	    setCursor(user && user !== Default ? user : (item || user));
	
	    return item;
	  }, {cursor: cursor});
	};
	
	function setCursor(cursor) {
	  // set cursor on document body
	  // this ensures cursor applies even if dragging out of view
	  if (typeof document !== 'undefined' && document.body) {
	    document.body.style.cursor = cursor;
	  }
	}
	
	function dataref(view, name) {
	  var data = view._runtime.data;
	  if (!data.hasOwnProperty(name)) {
	    error$1('Unrecognized data set: ' + name);
	  }
	  return data[name];
	}
	
	function data(name) {
	  return dataref(this, name).values.value;
	}
	
	function change(name, changes) {
	  if (!isChangeSet(changes)) {
	    error$1('Second argument to changes must be a changeset.');
	  }
	  var dataset = dataref(this, name);
	  dataset.modified = true;
	  return this.pulse(dataset.input, changes);
	}
	
	function insert(name, _) {
	  return change.call(this, name, changeset().insert(_));
	}
	
	function remove(name, _) {
	  return change.call(this, name, changeset().remove(_));
	}
	
	function width(view) {
	  var padding = view.padding();
	  return Math.max(0, view._viewWidth + padding.left + padding.right);
	}
	
	function height$1(view) {
	  var padding = view.padding();
	  return Math.max(0, view._viewHeight + padding.top + padding.bottom);
	}
	
	function offset$1(view) {
	  var padding = view.padding(),
	      origin = view._origin;
	  return [
	    padding.left + origin[0],
	    padding.top + origin[1]
	  ];
	}
	
	function resizeRenderer(view) {
	  var origin = offset$1(view);
	  view._renderer.background(view._background);
	  view._renderer.resize(width(view), height$1(view), origin);
	  view._handler.origin(origin);
	}
	
	/**
	 * Extend an event with additional view-specific methods.
	 * Adds a new property ('vega') to an event that provides a number
	 * of methods for querying information about the current interaction.
	 * The vega object provides the following methods:
	 *   view - Returns the backing View instance.
	 *   item - Returns the currently active scenegraph item (if any).
	 *   group - Returns the currently active scenegraph group (if any).
	 *     This method accepts a single string-typed argument indicating the name
	 *     of the desired parent group. The scenegraph will be traversed from
	 *     the item up towards the root to search for a matching group. If no
	 *     argument is provided the enclosing group for the active item is
	 *     returned, unless the item it itself a group, in which case it is
	 *     returned directly.
	 *   xy - Returns a two-element array containing the x and y coordinates for
	 *     mouse or touch events. For touch events, this is based on the first
	 *     elements in the changedTouches array. This method accepts a single
	 *     argument: either an item instance or mark name that should serve as
	 *     the reference coordinate system. If no argument is provided the
	 *     top-level view coordinate system is assumed.
	 *   x - Returns the current x-coordinate, accepts the same arguments as xy.
	 *   y - Returns the current y-coordinate, accepts the same arguments as xy.
	 * @param {Event} event - The input event to extend.
	 * @param {Item} item - The currently active scenegraph item (if any).
	 * @return {Event} - The extended input event.
	 */
	var eventExtend = function(view, event, item) {
	  var el = view._renderer.scene(),
	      p, e, translate;
	
	  if (el) {
	    translate = offset$1(view);
	    e = event.changedTouches ? event.changedTouches[0] : event;
	    p = point$4(e, el);
	    p[0] -= translate[0];
	    p[1] -= translate[1];
	  }
	
	  event.dataflow = view;
	  event.vega = extension(view, item, p);
	  event.item = item;
	  return event;
	};
	
	function extension(view, item, point) {
	  var itemGroup = item
	    ? item.mark.marktype === 'group' ? item : item.mark.group
	    : null;
	
	  function group(name) {
	    var g = itemGroup, i;
	    if (name) for (i = item; i; i = i.mark.group) {
	      if (i.mark.name === name) { g = i; break; }
	    }
	    return g && g.mark && g.mark.interactive ? g : {};
	  }
	
	  function xy(item) {
	    if (!item) return point;
	    if (isString(item)) item = group(item);
	
	    var p = point.slice();
	    while (item) {
	      p[0] -= item.x || 0;
	      p[1] -= item.y || 0;
	      item = item.mark && item.mark.group;
	    }
	    return p;
	  }
	
	  return {
	    view:  constant(view),
	    item:  constant(item || {}),
	    group: group,
	    xy:    xy,
	    x:     function(item) { return xy(item)[0]; },
	    y:     function(item) { return xy(item)[1]; }
	  };
	}
	
	var VIEW = 'view';
	var WINDOW = 'window';
	
	/**
	 * Initialize event handling configuration.
	 * @param {object} config - The configuration settings.
	 * @return {object}
	 */
	function initializeEventConfig(config) {
	  config = extend({}, config);
	
	  var def = config.defaults;
	  if (def) {
	    if (isArray(def.prevent)) {
	      def.prevent = toSet(def.prevent);
	    }
	    if (isArray(def.allow)) {
	      def.allow = toSet(def.allow);
	    }
	  }
	
	  return config;
	}
	
	function prevent(view, type) {
	  var def = view._eventConfig.defaults,
	      prevent = def && def.prevent,
	      allow = def && def.allow;
	
	  return prevent === false || allow === true ? false
	    : prevent === true || allow === false ? true
	    : prevent ? prevent[type]
	    : allow ? !allow[type]
	    : view.preventDefault();
	}
	
	/**
	 * Create a new event stream from an event source.
	 * @param {object} source - The event source to monitor.
	 * @param {string} type - The event type.
	 * @param {function(object): boolean} [filter] - Event filter function.
	 * @return {EventStream}
	 */
	function events$1(source, type, filter) {
	  var view = this,
	      s = new EventStream(filter),
	      send = function(e, item) {
	        if (source === VIEW && prevent(view, type)) {
	          e.preventDefault();
	        }
	        try {
	          s.receive(eventExtend(view, e, item));
	        } catch (error) {
	          view.error(error);
	        } finally {
	          view.run();
	        }
	      },
	      sources;
	
	  if (source === VIEW) {
	    view.addEventListener(type, send);
	    return s;
	  }
	
	  if (source === WINDOW) {
	    if (typeof window !== 'undefined') sources = [window];
	  } else if (typeof document !== 'undefined') {
	    sources = document.querySelectorAll(source);
	  }
	
	  if (!sources) {
	    view.warn('Can not resolve event source: ' + source);
	    return s;
	  }
	
	  for (var i=0, n=sources.length; i<n; ++i) {
	    sources[i].addEventListener(type, send);
	  }
	
	  view._eventListeners.push({
	    type:    type,
	    sources: sources,
	    handler: send
	  });
	
	  return s;
	}
	
	function itemFilter(event) {
	  return event.item;
	}
	
	function markTarget(event) {
	  // grab upstream collector feeding the mark operator
	  var source = event.item.mark.source;
	  return source.source || source;
	}
	
	function invoke(name) {
	  return function(_, event) {
	    return event.vega.view()
	      .changeset()
	      .encode(event.item, name);
	  };
	}
	
	var hover = function(hoverSet, leaveSet) {
	  hoverSet = [hoverSet || 'hover'];
	  leaveSet = [leaveSet || 'update', hoverSet];
	
	  // invoke hover set upon mouseover
	  this.on(
	    this.events('view', 'mouseover', itemFilter),
	    markTarget,
	    invoke(hoverSet)
	  );
	
	  // invoke leave set upon mouseout
	  this.on(
	    this.events('view', 'mouseout', itemFilter),
	    markTarget,
	    invoke(leaveSet)
	  );
	
	  return this;
	};
	
	/**
	 * Remove all external event listeners.
	 */
	var finalize = function() {
	  var listeners = this._eventListeners,
	      n = listeners.length, m, e;
	
	  while (--n >= 0) {
	    e = listeners[n];
	    m = e.sources.length;
	    while (--m >= 0) {
	      e.sources[m].removeEventListener(e.type, e.handler);
	    }
	  }
	};
	
	var element$1 = function(tag, attr, text) {
	  var el = document.createElement(tag);
	  for (var key in attr) el.setAttribute(key, attr[key]);
	  if (text != null) el.textContent = text;
	  return el;
	};
	
	var BindClass = 'vega-bind';
	var NameClass = 'vega-bind-name';
	var RadioClass = 'vega-bind-radio';
	var OptionClass = 'vega-option-';
	
	/**
	 * Bind a signal to an external HTML input element. The resulting two-way
	 * binding will propagate input changes to signals, and propagate signal
	 * changes to the input element state. If this view instance has no parent
	 * element, we assume the view is headless and no bindings are created.
	 * @param {Element|string} el - The parent DOM element to which the input
	 *   element should be appended as a child. If string-valued, this argument
	 *   will be treated as a CSS selector. If null or undefined, the parent
	 *   element of this view will be used as the element.
	 * @param {object} param - The binding parameters which specify the signal
	 *   to bind to, the input element type, and type-specific configuration.
	 * @return {View} - This view instance.
	 */
	var bind$1 = function(view, el, binding) {
	  if (!el) return;
	
	  var param = binding.param,
	      bind = binding.state;
	
	  if (!bind) {
	    bind = binding.state = {
	      elements: null,
	      active: false,
	      set: null,
	      update: function(value) {
	        bind.source = true;
	        view.signal(param.signal, value).run();
	      }
	    };
	    if (param.debounce) {
	      bind.update = debounce(param.debounce, bind.update);
	    }
	  }
	
	  generate(bind, el, param, view.signal(param.signal));
	
	  if (!bind.active) {
	    view.on(view._signals[param.signal], null, function() {
	      bind.source
	        ? (bind.source = false)
	        : bind.set(view.signal(param.signal));
	    });
	    bind.active = true;
	  }
	
	  return bind;
	};
	
	/**
	 * Generate an HTML input form element and bind it to a signal.
	 */
	function generate(bind, el, param, value) {
	  var div = element$1('div', {'class': BindClass});
	
	  div.appendChild(element$1('span',
	    {'class': NameClass},
	    (param.name || param.signal)
	  ));
	
	  el.appendChild(div);
	
	  var input = form;
	  switch (param.input) {
	    case 'checkbox': input = checkbox; break;
	    case 'select':   input = select; break;
	    case 'radio':    input = radio; break;
	    case 'range':    input = range$1; break;
	  }
	
	  input(bind, div, param, value);
	}
	
	/**
	 * Generates an arbitrary input form element.
	 * The input type is controlled via user-provided parameters.
	 */
	function form(bind, el, param, value) {
	  var node = element$1('input');
	
	  for (var key$$1 in param) {
	    if (key$$1 !== 'signal' && key$$1 !== 'element') {
	      node.setAttribute(key$$1 === 'input' ? 'type' : key$$1, param[key$$1]);
	    }
	  }
	  node.setAttribute('name', param.signal);
	  node.value = value;
	
	  el.appendChild(node);
	
	  node.addEventListener('input', function() {
	    bind.update(node.value);
	  });
	
	  bind.elements = [node];
	  bind.set = function(value) { node.value = value; };
	}
	
	/**
	 * Generates a checkbox input element.
	 */
	function checkbox(bind, el, param, value) {
	  var attr = {type: 'checkbox', name: param.signal};
	  if (value) attr.checked = true;
	  var node = element$1('input', attr);
	
	  el.appendChild(node);
	
	  node.addEventListener('change', function() {
	    bind.update(node.checked);
	  });
	
	  bind.elements = [node];
	  bind.set = function(value) { node.checked = !!value || null; };
	}
	
	/**
	 * Generates a selection list input element.
	 */
	function select(bind, el, param, value) {
	  var node = element$1('select', {name: param.signal});
	
	  param.options.forEach(function(option) {
	    var attr = {value: option};
	    if (valuesEqual(option, value)) attr.selected = true;
	    node.appendChild(element$1('option', attr, option+''));
	  });
	
	  el.appendChild(node);
	
	  node.addEventListener('change', function() {
	    bind.update(param.options[node.selectedIndex]);
	  });
	
	  bind.elements = [node];
	  bind.set = function(value) {
	    for (var i=0, n=param.options.length; i<n; ++i) {
	      if (valuesEqual(param.options[i], value)) {
	        node.selectedIndex = i; return;
	      }
	    }
	  };
	}
	
	/**
	 * Generates a radio button group.
	 */
	function radio(bind, el, param, value) {
	  var group = element$1('span', {'class': RadioClass});
	
	  el.appendChild(group);
	
	  bind.elements = param.options.map(function(option) {
	    var id$$1 = OptionClass + param.signal + '-' + option;
	
	    var attr = {
	      id:    id$$1,
	      type:  'radio',
	      name:  param.signal,
	      value: option
	    };
	    if (valuesEqual(option, value)) attr.checked = true;
	
	    var input = element$1('input', attr);
	
	    input.addEventListener('change', function() {
	      bind.update(option);
	    });
	
	    group.appendChild(input);
	    group.appendChild(element$1('label', {'for': id$$1}, option+''));
	
	    return input;
	  });
	
	  bind.set = function(value) {
	    var nodes = bind.elements,
	        i = 0,
	        n = nodes.length;
	    for (; i<n; ++i) {
	      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
	    }
	  };
	}
	
	/**
	 * Generates a slider input element.
	 */
	function range$1(bind, el, param, value) {
	  value = value !== undefined ? value : ((+param.max) + (+param.min)) / 2;
	
	  var min$$1 = param.min || Math.min(0, +value) || 0,
	      max$$1 = param.max || Math.max(100, +value) || 100,
	      step = param.step || tickStep(min$$1, max$$1, 100);
	
	  var node = element$1('input', {
	    type:  'range',
	    name:  param.signal,
	    min:   min$$1,
	    max:   max$$1,
	    step:  step
	  });
	  node.value = value;
	
	  var label = element$1('label', {}, +value);
	
	  el.appendChild(node);
	  el.appendChild(label);
	
	  function update() {
	    label.textContent = node.value;
	    bind.update(+node.value);
	  }
	
	  // subscribe to both input and change
	  // signal updates halt redundant values, maintaining performance
	  node.addEventListener('input', update);
	  node.addEventListener('change', update);
	
	  bind.elements = [node];
	  bind.set = function(value) {
	    node.value = value;
	    label.textContent = value;
	  };
	}
	
	function valuesEqual(a, b) {
	  return a === b || (a+'' === b+'');
	}
	
	var initializeRenderer = function(view, r, el, constructor, scaleFactor) {
	  r = r || new constructor(view.loader());
	  return r
	    .initialize(el, width(view), height$1(view), offset$1(view), scaleFactor)
	    .background(view._background);
	};
	
	var initializeHandler = function(view, prevHandler, el, constructor) {
	  var handler = new constructor()
	    .scene(view.scenegraph().root)
	    .initialize(el, offset$1(view), view);
	
	  if (prevHandler) {
	    handler.handleTooltip = prevHandler.handleTooltip;
	    prevHandler.handlers().forEach(function(h) {
	      handler.on(h.type, h.handler);
	    });
	  }
	
	  return handler;
	};
	
	var initialize$1 = function(el, elBind) {
	  var view = this,
	      type = view._renderType,
	      module = renderModule(type),
	      Handler$$1, Renderer$$1;
	
	  // containing dom element
	  el = view._el = el ? lookup$2(view, el) : null;
	
	  // select appropriate renderer & handler
	  if (!module) view.error('Unrecognized renderer type: ' + type);
	  Handler$$1 = module.handler || CanvasHandler;
	  Renderer$$1 = (el ? module.renderer : module.headless);
	
	  // initialize renderer and input handler
	  view._renderer = !Renderer$$1 ? null
	    : initializeRenderer(view, view._renderer, el, Renderer$$1);
	  view._handler = initializeHandler(view, view._handler, el, Handler$$1);
	  view._redraw = true;
	
	  // initialize signal bindings
	  if (el) {
	    elBind = elBind ? lookup$2(view, elBind)
	      : el.appendChild(element$1('div', {'class': 'vega-bindings'}));
	
	    view._bind.forEach(function(_) {
	      if (_.param.element) {
	        _.element = lookup$2(view, _.param.element);
	      }
	    });
	
	    view._bind.forEach(function(_) {
	      bind$1(view, _.element || elBind, _);
	    });
	  }
	
	  return view;
	};
	
	function lookup$2(view, el) {
	  if (typeof el === 'string') {
	    if (typeof document !== 'undefined') {
	      el = document.querySelector(el);
	      if (!el) {
	        view.error('Signal bind element not found: ' + el);
	        return null;
	      }
	    } else {
	      view.error('DOM document instance not found.');
	      return null;
	    }
	  }
	  if (el) {
	    try {
	      el.innerHTML = '';
	    } catch (e) {
	      el = null;
	      view.error(e);
	    }
	  }
	  return el;
	}
	
	/**
	 * Render the current scene in a headless fashion.
	 * This method is asynchronous, returning a Promise instance.
	 * @return {Promise} - A Promise that resolves to a renderer.
	 */
	var renderHeadless = function(view, type, scaleFactor) {
	  var module = renderModule(type),
	      ctr = module && module.headless;
	  return !ctr
	    ? Promise.reject('Unrecognized renderer type: ' + type)
	    : view.runAsync().then(function() {
	        return initializeRenderer(view, null, null, ctr, scaleFactor)
	          .renderAsync(view._scenegraph.root);
	      });
	};
	
	/**
	 * Produce an image URL for the visualization. Depending on the type
	 * parameter, the generated URL contains data for either a PNG or SVG image.
	 * The URL can be used (for example) to download images of the visualization.
	 * This method is asynchronous, returning a Promise instance.
	 * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
	 *   The 'canvas' and 'png' types are synonyms for a PNG image.
	 * @return {Promise} - A promise that resolves to an image URL.
	 */
	var renderToImageURL = function(type, scaleFactor) {
	  return (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG)
	    ? Promise.reject('Unrecognized image type: ' + type)
	    : renderHeadless(this, type, scaleFactor).then(function(renderer) {
	        return type === RenderType.SVG
	          ? toBlobURL(renderer.svg(), 'image/svg+xml')
	          : renderer.canvas().toDataURL('image/png');
	      });
	};
	
	function toBlobURL(data, mime) {
	  var blob = new Blob([data], {type: mime});
	  return window.URL.createObjectURL(blob);
	}
	
	/**
	 * Produce a Canvas instance containing a rendered visualization.
	 * This method is asynchronous, returning a Promise instance.
	 * @return {Promise} - A promise that resolves to a Canvas instance.
	 */
	var renderToCanvas = function(scaleFactor) {
	  return renderHeadless(this, RenderType.Canvas, scaleFactor)
	    .then(function(renderer) { return renderer.canvas(); });
	};
	
	/**
	 * Produce a rendered SVG string of the visualization.
	 * This method is asynchronous, returning a Promise instance.
	 * @return {Promise} - A promise that resolves to an SVG string.
	 */
	var renderToSVG = function(scaleFactor) {
	  return renderHeadless(this, RenderType.SVG, scaleFactor)
	    .then(function(renderer) { return renderer.svg(); });
	};
	
	var parseAutosize = function(spec, config) {
	  spec = spec || config.autosize;
	  if (isObject(spec)) {
	    return spec;
	  } else {
	    spec = spec || 'pad';
	    return {type: spec};
	  }
	};
	
	var parsePadding = function(spec, config) {
	  spec = spec || config.padding;
	  return isObject(spec)
	    ? {
	        top:    number$4(spec.top),
	        bottom: number$4(spec.bottom),
	        left:   number$4(spec.left),
	        right:  number$4(spec.right)
	      }
	    : paddingObject(number$4(spec));
	};
	
	function number$4(_) {
	  return +_ || 0;
	}
	
	function paddingObject(_) {
	  return {top: _, bottom: _, left: _, right: _};
	}
	
	var OUTER = 'outer';
	var OUTER_INVALID = ['value', 'update', 'react', 'bind'];
	
	function outerError(prefix, name) {
	  error$1(prefix + ' for "outer" push: ' + $(name));
	}
	
	var parseSignal = function(signal, scope) {
	  var name = signal.name;
	
	  if (signal.push === OUTER) {
	    // signal must already be defined, raise error if not
	    if (!scope.signals[name]) outerError('No prior signal definition', name);
	    // signal push must not use properties reserved for standard definition
	    OUTER_INVALID.forEach(function(prop) {
	      if (signal[prop] !== undefined) outerError('Invalid property ', prop);
	    });
	  } else {
	    // define a new signal in the current scope
	    var op = scope.addSignal(name, signal.value);
	    if (signal.react === false) op.react = false;
	    if (signal.bind) scope.addBinding(name, signal.bind);
	  }
	};
	
	function ASTNode(type) {
	  this.type = type;
	}
	
	ASTNode.prototype.visit = function(visitor) {
	  var node = this, c, i, n;
	
	  if (visitor(node)) return 1;
	
	  for (c=children$1(node), i=0, n=c.length; i<n; ++i) {
	    if (c[i].visit(visitor)) return 1;
	  }
	};
	
	function children$1(node) {
	  switch (node.type) {
	    case 'ArrayExpression':
	      return node.elements;
	    case 'BinaryExpression':
	    case 'LogicalExpression':
	      return [node.left, node.right];
	    case 'CallExpression':
	      var args = node.arguments.slice();
	      args.unshift(node.callee);
	      return args;
	    case 'ConditionalExpression':
	      return [node.test, node.consequent, node.alternate];
	    case 'MemberExpression':
	      return [node.object, node.property];
	    case 'ObjectExpression':
	      return node.properties;
	    case 'Property':
	      return [node.key, node.value];
	    case 'UnaryExpression':
	      return [node.argument];
	    case 'Identifier':
	    case 'Literal':
	    case 'RawCode':
	    default:
	      return [];
	  }
	}
	
	/*
	  The following expression parser is based on Esprima (http://esprima.org/).
	  Original header comment and license for Esprima is included here:
	
	  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
	  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
	  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
	  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
	  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
	  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
	  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
	  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
	  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	var source$1;
	var index$1;
	var length$2;
	var lookahead;
	
	var TokenBooleanLiteral = 1;
	var TokenEOF = 2;
	var TokenIdentifier = 3;
	var TokenKeyword = 4;
	var TokenNullLiteral = 5;
	var TokenNumericLiteral = 6;
	var TokenPunctuator = 7;
	var TokenStringLiteral = 8;
	
	var SyntaxArrayExpression = 'ArrayExpression';
	var SyntaxBinaryExpression = 'BinaryExpression';
	var SyntaxCallExpression = 'CallExpression';
	var SyntaxConditionalExpression = 'ConditionalExpression';
	var SyntaxIdentifier = 'Identifier';
	var SyntaxLiteral = 'Literal';
	var SyntaxLogicalExpression = 'LogicalExpression';
	var SyntaxMemberExpression = 'MemberExpression';
	var SyntaxObjectExpression = 'ObjectExpression';
	var SyntaxProperty = 'Property';
	var SyntaxUnaryExpression = 'UnaryExpression';
	
	// Error messages should be identical to V8.
	var MessageUnexpectedToken = 'Unexpected token %0';
	var MessageUnexpectedNumber = 'Unexpected number';
	var MessageUnexpectedString = 'Unexpected string';
	var MessageUnexpectedIdentifier = 'Unexpected identifier';
	var MessageUnexpectedReserved = 'Unexpected reserved word';
	var MessageUnexpectedEOS = 'Unexpected end of input';
	var MessageInvalidRegExp = 'Invalid regular expression';
	var MessageUnterminatedRegExp = 'Invalid regular expression: missing /';
	var MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.';
	var MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';
	
	var ILLEGAL = 'ILLEGAL';
	var DISABLED = 'Disabled.';
	
	// See also tools/generate-unicode-regex.py.
	var RegexNonAsciiIdentifierStart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');
	var RegexNonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');
	
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	
	function assert(condition, message) {
	  /* istanbul ignore next */
	  if (!condition) {
	    throw new Error('ASSERT: ' + message);
	  }
	}
	
	function isDecimalDigit(ch) {
	  return (ch >= 0x30 && ch <= 0x39); // 0..9
	}
	
	function isHexDigit(ch) {
	  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
	}
	
	function isOctalDigit(ch) {
	  return '01234567'.indexOf(ch) >= 0;
	}
	
	// 7.2 White Space
	
	function isWhiteSpace(ch) {
	  return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
	    (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
	}
	
	// 7.3 Line Terminators
	
	function isLineTerminator(ch) {
	  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
	}
	
	// 7.6 Identifier Names and Identifiers
	
	function isIdentifierStart(ch) {
	  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
	    (ch >= 0x41 && ch <= 0x5A) || // A..Z
	    (ch >= 0x61 && ch <= 0x7A) || // a..z
	    (ch === 0x5C) || // \ (backslash)
	    ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));
	}
	
	function isIdentifierPart(ch) {
	  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
	    (ch >= 0x41 && ch <= 0x5A) || // A..Z
	    (ch >= 0x61 && ch <= 0x7A) || // a..z
	    (ch >= 0x30 && ch <= 0x39) || // 0..9
	    (ch === 0x5C) || // \ (backslash)
	    ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	}
	
	// 7.6.1.1 Keywords
	
	var keywords$1 = {
	  'if':1, 'in':1, 'do':1,
	  'var':1, 'for':1, 'new':1, 'try':1, 'let':1,
	  'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,
	  'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,
	  'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,
	  'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,
	  'function':1, 'continue':1, 'debugger':1,
	  'interface':1, 'protected':1,
	  'instanceof':1, 'implements':1
	};
	
	function skipComment() {
	  var ch;
	
	  while (index$1 < length$2) {
	    ch = source$1.charCodeAt(index$1);
	
	    if (isWhiteSpace(ch) || isLineTerminator(ch)) {
	      ++index$1;
	    } else {
	      break;
	    }
	  }
	}
	
	function scanHexEscape(prefix) {
	  var i, len, ch, code = 0;
	
	  len = (prefix === 'u') ? 4 : 2;
	  for (i = 0; i < len; ++i) {
	    if (index$1 < length$2 && isHexDigit(source$1[index$1])) {
	      ch = source$1[index$1++];
	      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	    } else {
	      throwError({}, MessageUnexpectedToken, ILLEGAL);
	    }
	  }
	  return String.fromCharCode(code);
	}
	
	function scanUnicodeCodePointEscape() {
	  var ch, code, cu1, cu2;
	
	  ch = source$1[index$1];
	  code = 0;
	
	  // At least, one hex digit is required.
	  if (ch === '}') {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  while (index$1 < length$2) {
	    ch = source$1[index$1++];
	    if (!isHexDigit(ch)) {
	      break;
	    }
	    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	  }
	
	  if (code > 0x10FFFF || ch !== '}') {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  // UTF-16 Encoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  }
	  cu1 = ((code - 0x10000) >> 10) + 0xD800;
	  cu2 = ((code - 0x10000) & 1023) + 0xDC00;
	  return String.fromCharCode(cu1, cu2);
	}
	
	function getEscapedIdentifier() {
	  var ch, id;
	
	  ch = source$1.charCodeAt(index$1++);
	  id = String.fromCharCode(ch);
	
	  // '\u' (U+005C, U+0075) denotes an escaped character.
	  if (ch === 0x5C) {
	    if (source$1.charCodeAt(index$1) !== 0x75) {
	      throwError({}, MessageUnexpectedToken, ILLEGAL);
	    }
	    ++index$1;
	    ch = scanHexEscape('u');
	    if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
	      throwError({}, MessageUnexpectedToken, ILLEGAL);
	    }
	    id = ch;
	  }
	
	  while (index$1 < length$2) {
	    ch = source$1.charCodeAt(index$1);
	    if (!isIdentifierPart(ch)) {
	      break;
	    }
	    ++index$1;
	    id += String.fromCharCode(ch);
	
	    // '\u' (U+005C, U+0075) denotes an escaped character.
	    if (ch === 0x5C) {
	      id = id.substr(0, id.length - 1);
	      if (source$1.charCodeAt(index$1) !== 0x75) {
	        throwError({}, MessageUnexpectedToken, ILLEGAL);
	      }
	      ++index$1;
	      ch = scanHexEscape('u');
	      if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
	        throwError({}, MessageUnexpectedToken, ILLEGAL);
	      }
	      id += ch;
	    }
	  }
	
	  return id;
	}
	
	function getIdentifier() {
	  var start, ch;
	
	  start = index$1++;
	  while (index$1 < length$2) {
	    ch = source$1.charCodeAt(index$1);
	    if (ch === 0x5C) {
	      // Blackslash (U+005C) marks Unicode escape sequence.
	      index$1 = start;
	      return getEscapedIdentifier();
	    }
	    if (isIdentifierPart(ch)) {
	      ++index$1;
	    } else {
	      break;
	    }
	  }
	
	  return source$1.slice(start, index$1);
	}
	
	function scanIdentifier() {
	  var start, id, type;
	
	  start = index$1;
	
	  // Backslash (U+005C) starts an escaped character.
	  id = (source$1.charCodeAt(index$1) === 0x5C) ? getEscapedIdentifier() : getIdentifier();
	
	  // There is no keyword or literal with only one character.
	  // Thus, it must be an identifier.
	  if (id.length === 1) {
	    type = TokenIdentifier;
	  } else if (keywords$1.hasOwnProperty(id)) {
	    type = TokenKeyword;
	  } else if (id === 'null') {
	    type = TokenNullLiteral;
	  } else if (id === 'true' || id === 'false') {
	    type = TokenBooleanLiteral;
	  } else {
	    type = TokenIdentifier;
	  }
	
	  return {
	    type: type,
	    value: id,
	    start: start,
	    end: index$1
	  };
	}
	
	// 7.7 Punctuators
	
	function scanPunctuator() {
	  var start = index$1,
	    code = source$1.charCodeAt(index$1),
	    code2,
	    ch1 = source$1[index$1],
	    ch2,
	    ch3,
	    ch4;
	
	  switch (code) {
	
	    // Check for most common single-character punctuators.
	    case 0x2E: // . dot
	    case 0x28: // ( open bracket
	    case 0x29: // ) close bracket
	    case 0x3B: // ; semicolon
	    case 0x2C: // , comma
	    case 0x7B: // { open curly brace
	    case 0x7D: // } close curly brace
	    case 0x5B: // [
	    case 0x5D: // ]
	    case 0x3A: // :
	    case 0x3F: // ?
	    case 0x7E: // ~
	      ++index$1;
	      return {
	        type: TokenPunctuator,
	        value: String.fromCharCode(code),
	        start: start,
	        end: index$1
	      };
	
	    default:
	      code2 = source$1.charCodeAt(index$1 + 1);
	
	      // '=' (U+003D) marks an assignment or comparison operator.
	      if (code2 === 0x3D) {
	        switch (code) {
	          case 0x2B: // +
	          case 0x2D: // -
	          case 0x2F: // /
	          case 0x3C: // <
	          case 0x3E: // >
	          case 0x5E: // ^
	          case 0x7C: // |
	          case 0x25: // %
	          case 0x26: // &
	          case 0x2A: // *
	            index$1 += 2;
	            return {
	              type: TokenPunctuator,
	              value: String.fromCharCode(code) + String.fromCharCode(code2),
	              start: start,
	              end: index$1
	            };
	
	          case 0x21: // !
	          case 0x3D: // =
	            index$1 += 2;
	
	            // !== and ===
	            if (source$1.charCodeAt(index$1) === 0x3D) {
	              ++index$1;
	            }
	            return {
	              type: TokenPunctuator,
	              value: source$1.slice(start, index$1),
	              start: start,
	              end: index$1
	            };
	        }
	      }
	  }
	
	  // 4-character punctuator: >>>=
	
	  ch4 = source$1.substr(index$1, 4);
	
	  if (ch4 === '>>>=') {
	    index$1 += 4;
	    return {
	      type: TokenPunctuator,
	      value: ch4,
	      start: start,
	      end: index$1
	    };
	  }
	
	  // 3-character punctuators: === !== >>> <<= >>=
	
	  ch3 = ch4.substr(0, 3);
	
	  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
	    index$1 += 3;
	    return {
	      type: TokenPunctuator,
	      value: ch3,
	      start: start,
	      end: index$1
	    };
	  }
	
	  // Other 2-character punctuators: ++ -- << >> && ||
	  ch2 = ch3.substr(0, 2);
	
	  if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
	    index$1 += 2;
	    return {
	      type: TokenPunctuator,
	      value: ch2,
	      start: start,
	      end: index$1
	    };
	  }
	
	  // 1-character punctuators: < > = ! + - * % & | ^ /
	
	  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
	    ++index$1;
	    return {
	      type: TokenPunctuator,
	      value: ch1,
	      start: start,
	      end: index$1
	    };
	  }
	
	  throwError({}, MessageUnexpectedToken, ILLEGAL);
	}
	
	// 7.8.3 Numeric Literals
	
	function scanHexLiteral(start) {
	  var number = '';
	
	  while (index$1 < length$2) {
	    if (!isHexDigit(source$1[index$1])) {
	      break;
	    }
	    number += source$1[index$1++];
	  }
	
	  if (number.length === 0) {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  if (isIdentifierStart(source$1.charCodeAt(index$1))) {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  return {
	    type: TokenNumericLiteral,
	    value: parseInt('0x' + number, 16),
	    start: start,
	    end: index$1
	  };
	}
	
	function scanOctalLiteral(start) {
	  var number = '0' + source$1[index$1++];
	  while (index$1 < length$2) {
	    if (!isOctalDigit(source$1[index$1])) {
	      break;
	    }
	    number += source$1[index$1++];
	  }
	
	  if (isIdentifierStart(source$1.charCodeAt(index$1)) || isDecimalDigit(source$1.charCodeAt(index$1))) {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  return {
	    type: TokenNumericLiteral,
	    value: parseInt(number, 8),
	    octal: true,
	    start: start,
	    end: index$1
	  };
	}
	
	function scanNumericLiteral() {
	  var number, start, ch;
	
	  ch = source$1[index$1];
	  assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
	    'Numeric literal must start with a decimal digit or a decimal point');
	
	  start = index$1;
	  number = '';
	  if (ch !== '.') {
	    number = source$1[index$1++];
	    ch = source$1[index$1];
	
	    // Hex number starts with '0x'.
	    // Octal number starts with '0'.
	    if (number === '0') {
	      if (ch === 'x' || ch === 'X') {
	        ++index$1;
	        return scanHexLiteral(start);
	      }
	      if (isOctalDigit(ch)) {
	        return scanOctalLiteral(start);
	      }
	
	      // decimal number starts with '0' such as '09' is illegal.
	      if (ch && isDecimalDigit(ch.charCodeAt(0))) {
	        throwError({}, MessageUnexpectedToken, ILLEGAL);
	      }
	    }
	
	    while (isDecimalDigit(source$1.charCodeAt(index$1))) {
	      number += source$1[index$1++];
	    }
	    ch = source$1[index$1];
	  }
	
	  if (ch === '.') {
	    number += source$1[index$1++];
	    while (isDecimalDigit(source$1.charCodeAt(index$1))) {
	      number += source$1[index$1++];
	    }
	    ch = source$1[index$1];
	  }
	
	  if (ch === 'e' || ch === 'E') {
	    number += source$1[index$1++];
	
	    ch = source$1[index$1];
	    if (ch === '+' || ch === '-') {
	      number += source$1[index$1++];
	    }
	    if (isDecimalDigit(source$1.charCodeAt(index$1))) {
	      while (isDecimalDigit(source$1.charCodeAt(index$1))) {
	        number += source$1[index$1++];
	      }
	    } else {
	      throwError({}, MessageUnexpectedToken, ILLEGAL);
	    }
	  }
	
	  if (isIdentifierStart(source$1.charCodeAt(index$1))) {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  return {
	    type: TokenNumericLiteral,
	    value: parseFloat(number),
	    start: start,
	    end: index$1
	  };
	}
	
	// 7.8.4 String Literals
	
	function scanStringLiteral() {
	  var str = '',
	    quote, start, ch, code, octal = false;
	
	  quote = source$1[index$1];
	  assert((quote === '\'' || quote === '"'),
	    'String literal must starts with a quote');
	
	  start = index$1;
	  ++index$1;
	
	  while (index$1 < length$2) {
	    ch = source$1[index$1++];
	
	    if (ch === quote) {
	      quote = '';
	      break;
	    } else if (ch === '\\') {
	      ch = source$1[index$1++];
	      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
	        switch (ch) {
	          case 'u':
	          case 'x':
	            if (source$1[index$1] === '{') {
	              ++index$1;
	              str += scanUnicodeCodePointEscape();
	            } else {
	              str += scanHexEscape(ch);
	            }
	            break;
	          case 'n':
	            str += '\n';
	            break;
	          case 'r':
	            str += '\r';
	            break;
	          case 't':
	            str += '\t';
	            break;
	          case 'b':
	            str += '\b';
	            break;
	          case 'f':
	            str += '\f';
	            break;
	          case 'v':
	            str += '\x0B';
	            break;
	
	          default:
	            if (isOctalDigit(ch)) {
	              code = '01234567'.indexOf(ch);
	
	              // \0 is not octal escape sequence
	              if (code !== 0) {
	                octal = true;
	              }
	
	              if (index$1 < length$2 && isOctalDigit(source$1[index$1])) {
	                octal = true;
	                code = code * 8 + '01234567'.indexOf(source$1[index$1++]);
	
	                // 3 digits are only allowed when string starts
	                // with 0, 1, 2, 3
	                if ('0123'.indexOf(ch) >= 0 &&
	                  index$1 < length$2 &&
	                  isOctalDigit(source$1[index$1])) {
	                  code = code * 8 + '01234567'.indexOf(source$1[index$1++]);
	                }
	              }
	              str += String.fromCharCode(code);
	            } else {
	              str += ch;
	            }
	            break;
	        }
	      } else {
	        if (ch === '\r' && source$1[index$1] === '\n') {
	          ++index$1;
	        }
	      }
	    } else if (isLineTerminator(ch.charCodeAt(0))) {
	      break;
	    } else {
	      str += ch;
	    }
	  }
	
	  if (quote !== '') {
	    throwError({}, MessageUnexpectedToken, ILLEGAL);
	  }
	
	  return {
	    type: TokenStringLiteral,
	    value: str,
	    octal: octal,
	    start: start,
	    end: index$1
	  };
	}
	
	function testRegExp(pattern, flags) {
	  var tmp = pattern;
	
	  if (flags.indexOf('u') >= 0) {
	    // Replace each astral symbol and every Unicode code point
	    // escape sequence with a single ASCII symbol to avoid throwing on
	    // regular expressions that are only valid in combination with the
	    // `/u` flag.
	    // Note: replacing with the ASCII symbol `x` might cause false
	    // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	    // perfectly valid pattern that is equivalent to `[a-b]`, but it
	    // would be replaced by `[x-b]` which throws an error.
	    tmp = tmp
	      .replace(/\\u\{([0-9a-fA-F]+)\}/g, function($0, $1) {
	        if (parseInt($1, 16) <= 0x10FFFF) {
	          return 'x';
	        }
	        throwError({}, MessageInvalidRegExp);
	      })
	      .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
	  }
	
	  // First, detect invalid regular expressions.
	  try {
	    new RegExp(tmp);
	  } catch (e) {
	    throwError({}, MessageInvalidRegExp);
	  }
	
	  // Return a regular expression object for this pattern-flag pair, or
	  // `null` in case the current environment doesn't support the flags it
	  // uses.
	  try {
	    return new RegExp(pattern, flags);
	  } catch (exception) {
	    return null;
	  }
	}
	
	function scanRegExpBody() {
	  var ch, str, classMarker, terminated, body;
	
	  ch = source$1[index$1];
	  assert(ch === '/', 'Regular expression literal must start with a slash');
	  str = source$1[index$1++];
	
	  classMarker = false;
	  terminated = false;
	  while (index$1 < length$2) {
	    ch = source$1[index$1++];
	    str += ch;
	    if (ch === '\\') {
	      ch = source$1[index$1++];
	      // ECMA-262 7.8.5
	      if (isLineTerminator(ch.charCodeAt(0))) {
	        throwError({}, MessageUnterminatedRegExp);
	      }
	      str += ch;
	    } else if (isLineTerminator(ch.charCodeAt(0))) {
	      throwError({}, MessageUnterminatedRegExp);
	    } else if (classMarker) {
	      if (ch === ']') {
	        classMarker = false;
	      }
	    } else {
	      if (ch === '/') {
	        terminated = true;
	        break;
	      } else if (ch === '[') {
	        classMarker = true;
	      }
	    }
	  }
	
	  if (!terminated) {
	    throwError({}, MessageUnterminatedRegExp);
	  }
	
	  // Exclude leading and trailing slash.
	  body = str.substr(1, str.length - 2);
	  return {
	    value: body,
	    literal: str
	  };
	}
	
	function scanRegExpFlags() {
	  var ch, str, flags;
	
	  str = '';
	  flags = '';
	  while (index$1 < length$2) {
	    ch = source$1[index$1];
	    if (!isIdentifierPart(ch.charCodeAt(0))) {
	      break;
	    }
	
	    ++index$1;
	    if (ch === '\\' && index$1 < length$2) {
	      throwError({}, MessageUnexpectedToken, ILLEGAL);
	    } else {
	      flags += ch;
	      str += ch;
	    }
	  }
	
	  if (flags.search(/[^gimuy]/g) >= 0) {
	    throwError({}, MessageInvalidRegExp, flags);
	  }
	
	  return {
	    value: flags,
	    literal: str
	  };
	}
	
	function scanRegExp() {
	  var start, body, flags, value;
	
	  lookahead = null;
	  skipComment();
	  start = index$1;
	
	  body = scanRegExpBody();
	  flags = scanRegExpFlags();
	  value = testRegExp(body.value, flags.value);
	
	  return {
	    literal: body.literal + flags.literal,
	    value: value,
	    regex: {
	      pattern: body.value,
	      flags: flags.value
	    },
	    start: start,
	    end: index$1
	  };
	}
	
	function isIdentifierName(token) {
	  return token.type === TokenIdentifier ||
	    token.type === TokenKeyword ||
	    token.type === TokenBooleanLiteral ||
	    token.type === TokenNullLiteral;
	}
	
	function advance() {
	  var ch;
	
	  skipComment();
	
	  if (index$1 >= length$2) {
	    return {
	      type: TokenEOF,
	      start: index$1,
	      end: index$1
	    };
	  }
	
	  ch = source$1.charCodeAt(index$1);
	
	  if (isIdentifierStart(ch)) {
	    return scanIdentifier();
	  }
	
	  // Very common: ( and ) and ;
	  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
	    return scanPunctuator();
	  }
	
	  // String literal starts with single quote (U+0027) or double quote (U+0022).
	  if (ch === 0x27 || ch === 0x22) {
	    return scanStringLiteral();
	  }
	
	
	  // Dot (.) U+002E can also start a floating-point number, hence the need
	  // to check the next character.
	  if (ch === 0x2E) {
	    if (isDecimalDigit(source$1.charCodeAt(index$1 + 1))) {
	      return scanNumericLiteral();
	    }
	    return scanPunctuator();
	  }
	
	  if (isDecimalDigit(ch)) {
	    return scanNumericLiteral();
	  }
	
	  return scanPunctuator();
	}
	
	function lex() {
	  var token;
	
	  token = lookahead;
	  index$1 = token.end;
	
	  lookahead = advance();
	
	  index$1 = token.end;
	
	  return token;
	}
	
	function peek$1() {
	  var pos;
	
	  pos = index$1;
	
	  lookahead = advance();
	  index$1 = pos;
	}
	
	function finishArrayExpression(elements) {
	  var node = new ASTNode(SyntaxArrayExpression);
	  node.elements = elements;
	  return node;
	}
	
	function finishBinaryExpression(operator, left, right) {
	  var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);
	  node.operator = operator;
	  node.left = left;
	  node.right = right;
	  return node;
	}
	
	function finishCallExpression(callee, args) {
	  var node = new ASTNode(SyntaxCallExpression);
	  node.callee = callee;
	  node.arguments = args;
	  return node;
	}
	
	function finishConditionalExpression(test, consequent, alternate) {
	  var node = new ASTNode(SyntaxConditionalExpression);
	  node.test = test;
	  node.consequent = consequent;
	  node.alternate = alternate;
	  return node;
	}
	
	function finishIdentifier(name) {
	  var node = new ASTNode(SyntaxIdentifier);
	  node.name = name;
	  return node;
	}
	
	function finishLiteral(token) {
	  var node = new ASTNode(SyntaxLiteral);
	  node.value = token.value;
	  node.raw = source$1.slice(token.start, token.end);
	  if (token.regex) {
	    if (node.raw === '//') {
	      node.raw = '/(?:)/';
	    }
	    node.regex = token.regex;
	  }
	  return node;
	}
	
	function finishMemberExpression(accessor, object, property) {
	  var node = new ASTNode(SyntaxMemberExpression);
	  node.computed = accessor === '[';
	  node.object = object;
	  node.property = property;
	  if (!node.computed) property.member = true;
	  return node;
	}
	
	function finishObjectExpression(properties) {
	  var node = new ASTNode(SyntaxObjectExpression);
	  node.properties = properties;
	  return node;
	}
	
	function finishProperty(kind, key, value) {
	  var node = new ASTNode(SyntaxProperty);
	  node.key = key;
	  node.value = value;
	  node.kind = kind;
	  return node;
	}
	
	function finishUnaryExpression(operator, argument) {
	  var node = new ASTNode(SyntaxUnaryExpression);
	  node.operator = operator;
	  node.argument = argument;
	  node.prefix = true;
	  return node;
	}
	
	// Throw an exception
	
	function throwError(token, messageFormat) {
	  var error,
	    args = Array.prototype.slice.call(arguments, 2),
	    msg = messageFormat.replace(
	      /%(\d)/g,
	      function(whole, index) {
	        assert(index < args.length, 'Message reference must be in range');
	        return args[index];
	      }
	    );
	
	
	  error = new Error(msg);
	  error.index = index$1;
	  error.description = msg;
	  throw error;
	}
	
	// Throw an exception because of the token.
	
	function throwUnexpected(token) {
	  if (token.type === TokenEOF) {
	    throwError(token, MessageUnexpectedEOS);
	  }
	
	  if (token.type === TokenNumericLiteral) {
	    throwError(token, MessageUnexpectedNumber);
	  }
	
	  if (token.type === TokenStringLiteral) {
	    throwError(token, MessageUnexpectedString);
	  }
	
	  if (token.type === TokenIdentifier) {
	    throwError(token, MessageUnexpectedIdentifier);
	  }
	
	  if (token.type === TokenKeyword) {
	    throwError(token, MessageUnexpectedReserved);
	  }
	
	  // BooleanLiteral, NullLiteral, or Punctuator.
	  throwError(token, MessageUnexpectedToken, token.value);
	}
	
	// Expect the next token to match the specified punctuator.
	// If not, an exception will be thrown.
	
	function expect(value) {
	  var token = lex();
	  if (token.type !== TokenPunctuator || token.value !== value) {
	    throwUnexpected(token);
	  }
	}
	
	// Return true if the next token matches the specified punctuator.
	
	function match(value) {
	  return lookahead.type === TokenPunctuator && lookahead.value === value;
	}
	
	// Return true if the next token matches the specified keyword
	
	function matchKeyword(keyword) {
	  return lookahead.type === TokenKeyword && lookahead.value === keyword;
	}
	
	// 11.1.4 Array Initialiser
	
	function parseArrayInitialiser() {
	  var elements = [];
	
	  index$1 = lookahead.start;
	  expect('[');
	
	  while (!match(']')) {
	    if (match(',')) {
	      lex();
	      elements.push(null);
	    } else {
	      elements.push(parseConditionalExpression());
	
	      if (!match(']')) {
	        expect(',');
	      }
	    }
	  }
	
	  lex();
	
	  return finishArrayExpression(elements);
	}
	
	// 11.1.5 Object Initialiser
	
	function parseObjectPropertyKey() {
	  var token;
	
	  index$1 = lookahead.start;
	  token = lex();
	
	  // Note: This function is called only from parseObjectProperty(), where
	  // EOF and Punctuator tokens are already filtered out.
	
	  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
	    if (token.octal) {
	      throwError(token, MessageStrictOctalLiteral);
	    }
	    return finishLiteral(token);
	  }
	
	  return finishIdentifier(token.value);
	}
	
	function parseObjectProperty() {
	  var token, key, id, value;
	
	  index$1 = lookahead.start;
	  token = lookahead;
	
	  if (token.type === TokenIdentifier) {
	    id = parseObjectPropertyKey();
	    expect(':');
	    value = parseConditionalExpression();
	    return finishProperty('init', id, value);
	  }
	  if (token.type === TokenEOF || token.type === TokenPunctuator) {
	    throwUnexpected(token);
	  } else {
	    key = parseObjectPropertyKey();
	    expect(':');
	    value = parseConditionalExpression();
	    return finishProperty('init', key, value);
	  }
	}
	
	function parseObjectInitialiser() {
	  var properties = [],
	    property, name, key, map = {},
	    toString = String;
	
	  index$1 = lookahead.start;
	  expect('{');
	
	  while (!match('}')) {
	    property = parseObjectProperty();
	
	    if (property.key.type === SyntaxIdentifier) {
	      name = property.key.name;
	    } else {
	      name = toString(property.key.value);
	    }
	
	    key = '$' + name;
	    if (Object.prototype.hasOwnProperty.call(map, key)) {
	      throwError({}, MessageStrictDuplicateProperty);
	    } else {
	      map[key] = true;
	    }
	
	    properties.push(property);
	
	    if (!match('}')) {
	      expect(',');
	    }
	  }
	
	  expect('}');
	
	  return finishObjectExpression(properties);
	}
	
	// 11.1.6 The Grouping Operator
	
	function parseGroupExpression() {
	  var expr;
	
	  expect('(');
	
	  expr = parseExpression$1();
	
	  expect(')');
	
	  return expr;
	}
	
	
	// 11.1 Primary Expressions
	
	var legalKeywords = {
	  "if": 1,
	  "this": 1
	};
	
	function parsePrimaryExpression() {
	  var type, token, expr;
	
	  if (match('(')) {
	    return parseGroupExpression();
	  }
	
	  if (match('[')) {
	    return parseArrayInitialiser();
	  }
	
	  if (match('{')) {
	    return parseObjectInitialiser();
	  }
	
	  type = lookahead.type;
	  index$1 = lookahead.start;
	
	
	  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
	    expr = finishIdentifier(lex().value);
	  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
	    if (lookahead.octal) {
	      throwError(lookahead, MessageStrictOctalLiteral);
	    }
	    expr = finishLiteral(lex());
	  } else if (type === TokenKeyword) {
	    throw new Error(DISABLED);
	  } else if (type === TokenBooleanLiteral) {
	    token = lex();
	    token.value = (token.value === 'true');
	    expr = finishLiteral(token);
	  } else if (type === TokenNullLiteral) {
	    token = lex();
	    token.value = null;
	    expr = finishLiteral(token);
	  } else if (match('/') || match('/=')) {
	    expr = finishLiteral(scanRegExp());
	    peek$1();
	  } else {
	    throwUnexpected(lex());
	  }
	
	  return expr;
	}
	
	// 11.2 Left-Hand-Side Expressions
	
	function parseArguments() {
	  var args = [];
	
	  expect('(');
	
	  if (!match(')')) {
	    while (index$1 < length$2) {
	      args.push(parseConditionalExpression());
	      if (match(')')) {
	        break;
	      }
	      expect(',');
	    }
	  }
	
	  expect(')');
	
	  return args;
	}
	
	function parseNonComputedProperty() {
	  var token;
	  index$1 = lookahead.start;
	  token = lex();
	
	  if (!isIdentifierName(token)) {
	    throwUnexpected(token);
	  }
	
	  return finishIdentifier(token.value);
	}
	
	function parseNonComputedMember() {
	  expect('.');
	
	  return parseNonComputedProperty();
	}
	
	function parseComputedMember() {
	  var expr;
	
	  expect('[');
	
	  expr = parseExpression$1();
	
	  expect(']');
	
	  return expr;
	}
	
	function parseLeftHandSideExpressionAllowCall() {
	  var expr, args, property;
	
	  expr = parsePrimaryExpression();
	
	  for (;;) {
	    if (match('.')) {
	      property = parseNonComputedMember();
	      expr = finishMemberExpression('.', expr, property);
	    } else if (match('(')) {
	      args = parseArguments();
	      expr = finishCallExpression(expr, args);
	    } else if (match('[')) {
	      property = parseComputedMember();
	      expr = finishMemberExpression('[', expr, property);
	    } else {
	      break;
	    }
	  }
	
	  return expr;
	}
	
	// 11.3 Postfix Expressions
	
	function parsePostfixExpression() {
	  var expr = parseLeftHandSideExpressionAllowCall();
	
	  if (lookahead.type === TokenPunctuator) {
	    if ((match('++') || match('--'))) {
	      throw new Error(DISABLED);
	    }
	  }
	
	  return expr;
	}
	
	// 11.4 Unary Operators
	
	function parseUnaryExpression() {
	  var token, expr;
	
	  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
	    expr = parsePostfixExpression();
	  } else if (match('++') || match('--')) {
	    throw new Error(DISABLED);
	  } else if (match('+') || match('-') || match('~') || match('!')) {
	    token = lex();
	    expr = parseUnaryExpression();
	    expr = finishUnaryExpression(token.value, expr);
	  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
	    throw new Error(DISABLED);
	  } else {
	    expr = parsePostfixExpression();
	  }
	
	  return expr;
	}
	
	function binaryPrecedence(token) {
	  var prec = 0;
	
	  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
	    return 0;
	  }
	
	  switch (token.value) {
	    case '||':
	      prec = 1;
	      break;
	
	    case '&&':
	      prec = 2;
	      break;
	
	    case '|':
	      prec = 3;
	      break;
	
	    case '^':
	      prec = 4;
	      break;
	
	    case '&':
	      prec = 5;
	      break;
	
	    case '==':
	    case '!=':
	    case '===':
	    case '!==':
	      prec = 6;
	      break;
	
	    case '<':
	    case '>':
	    case '<=':
	    case '>=':
	    case 'instanceof':
	    case 'in':
	      prec = 7;
	      break;
	
	    case '<<':
	    case '>>':
	    case '>>>':
	      prec = 8;
	      break;
	
	    case '+':
	    case '-':
	      prec = 9;
	      break;
	
	    case '*':
	    case '/':
	    case '%':
	      prec = 11;
	      break;
	
	    default:
	      break;
	  }
	
	  return prec;
	}
	
	// 11.5 Multiplicative Operators
	// 11.6 Additive Operators
	// 11.7 Bitwise Shift Operators
	// 11.8 Relational Operators
	// 11.9 Equality Operators
	// 11.10 Binary Bitwise Operators
	// 11.11 Binary Logical Operators
	
	function parseBinaryExpression() {
	  var marker, markers, expr, token, prec, stack, right, operator, left, i;
	
	  marker = lookahead;
	  left = parseUnaryExpression();
	
	  token = lookahead;
	  prec = binaryPrecedence(token);
	  if (prec === 0) {
	    return left;
	  }
	  token.prec = prec;
	  lex();
	
	  markers = [marker, lookahead];
	  right = parseUnaryExpression();
	
	  stack = [left, token, right];
	
	  while ((prec = binaryPrecedence(lookahead)) > 0) {
	
	    // Reduce: make a binary expression from the three topmost entries.
	    while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
	      right = stack.pop();
	      operator = stack.pop().value;
	      left = stack.pop();
	      markers.pop();
	      expr = finishBinaryExpression(operator, left, right);
	      stack.push(expr);
	    }
	
	    // Shift.
	    token = lex();
	    token.prec = prec;
	    stack.push(token);
	    markers.push(lookahead);
	    expr = parseUnaryExpression();
	    stack.push(expr);
	  }
	
	  // Final reduce to clean-up the stack.
	  i = stack.length - 1;
	  expr = stack[i];
	  markers.pop();
	  while (i > 1) {
	    markers.pop();
	    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
	    i -= 2;
	  }
	
	  return expr;
	}
	
	// 11.12 Conditional Operator
	
	function parseConditionalExpression() {
	  var expr, consequent, alternate;
	
	  expr = parseBinaryExpression();
	
	  if (match('?')) {
	    lex();
	    consequent = parseConditionalExpression();
	    expect(':');
	    alternate = parseConditionalExpression();
	
	    expr = finishConditionalExpression(expr, consequent, alternate);
	  }
	
	  return expr;
	}
	
	// 11.14 Comma Operator
	
	function parseExpression$1() {
	  var expr = parseConditionalExpression();
	
	  if (match(',')) {
	    throw new Error(DISABLED); // no sequence expressions
	  }
	
	  return expr;
	}
	
	var parse$3 = function(code) {
	  source$1 = code;
	  index$1 = 0;
	  length$2 = source$1.length;
	  lookahead = null;
	
	  peek$1();
	
	  var expr = parseExpression$1();
	
	  if (lookahead.type !== TokenEOF) {
	    throw new Error("Unexpect token after expression.");
	  }
	  return expr;
	};
	
	var Constants = {
	  NaN:       'NaN',
	  E:         'Math.E',
	  LN2:       'Math.LN2',
	  LN10:      'Math.LN10',
	  LOG2E:     'Math.LOG2E',
	  LOG10E:    'Math.LOG10E',
	  PI:        'Math.PI',
	  SQRT1_2:   'Math.SQRT1_2',
	  SQRT2:     'Math.SQRT2',
	  MIN_VALUE: 'Number.MIN_VALUE',
	  MAX_VALUE: 'Number.MAX_VALUE'
	};
	
	var Functions = function(codegen) {
	
	  function fncall(name, args, cast, type) {
	    var obj = codegen(args[0]);
	    if (cast) {
	      obj = cast + '(' + obj + ')';
	      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
	    }
	    return obj + '.' + name + (type < 0 ? '' : type === 0 ?
	      '()' :
	      '(' + args.slice(1).map(codegen).join(',') + ')');
	  }
	
	  function fn(name, cast, type) {
	    return function(args) {
	      return fncall(name, args, cast, type);
	    };
	  }
	
	  var DATE = 'new Date',
	      STRING = 'String',
	      REGEXP = 'RegExp';
	
	  return {
	    // MATH functions
	    isNaN:    'isNaN',
	    isFinite: 'isFinite',
	    abs:      'Math.abs',
	    acos:     'Math.acos',
	    asin:     'Math.asin',
	    atan:     'Math.atan',
	    atan2:    'Math.atan2',
	    ceil:     'Math.ceil',
	    cos:      'Math.cos',
	    exp:      'Math.exp',
	    floor:    'Math.floor',
	    log:      'Math.log',
	    max:      'Math.max',
	    min:      'Math.min',
	    pow:      'Math.pow',
	    random:   'Math.random',
	    round:    'Math.round',
	    sin:      'Math.sin',
	    sqrt:     'Math.sqrt',
	    tan:      'Math.tan',
	
	    clamp: function(args) {
	      if (args.length < 3) error$1('Missing arguments to clamp function.');
	      if (args.length > 3) error$1('Too many arguments to clamp function.');
	      var a = args.map(codegen);
	      return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';
	    },
	
	    // DATE functions
	    now:             'Date.now',
	    utc:             'Date.UTC',
	    datetime:        DATE,
	    date:            fn('getDate', DATE, 0),
	    day:             fn('getDay', DATE, 0),
	    year:            fn('getFullYear', DATE, 0),
	    month:           fn('getMonth', DATE, 0),
	    hours:           fn('getHours', DATE, 0),
	    minutes:         fn('getMinutes', DATE, 0),
	    seconds:         fn('getSeconds', DATE, 0),
	    milliseconds:    fn('getMilliseconds', DATE, 0),
	    time:            fn('getTime', DATE, 0),
	    timezoneoffset:  fn('getTimezoneOffset', DATE, 0),
	    utcdate:         fn('getUTCDate', DATE, 0),
	    utcday:          fn('getUTCDay', DATE, 0),
	    utcyear:         fn('getUTCFullYear', DATE, 0),
	    utcmonth:        fn('getUTCMonth', DATE, 0),
	    utchours:        fn('getUTCHours', DATE, 0),
	    utcminutes:      fn('getUTCMinutes', DATE, 0),
	    utcseconds:      fn('getUTCSeconds', DATE, 0),
	    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),
	
	    // shared sequence functions
	    length:      fn('length', null, -1),
	    indexof:     fn('indexOf', null),
	    lastindexof: fn('lastIndexOf', null),
	    slice:       fn('slice', null),
	
	    // STRING functions
	    parseFloat:  'parseFloat',
	    parseInt:    'parseInt',
	    upper:       fn('toUpperCase', STRING, 0),
	    lower:       fn('toLowerCase', STRING, 0),
	    substring:   fn('substring', STRING),
	    replace:     fn('replace', STRING),
	
	    // REGEXP functions
	    regexp:  REGEXP,
	    test:    fn('test', REGEXP),
	
	    // Control Flow functions
	    if: function(args) {
	        if (args.length < 3) error$1('Missing arguments to if function.');
	        if (args.length > 3) error$1('Too many arguments to if function.');
	        var a = args.map(codegen);
	        return '('+a[0]+'?'+a[1]+':'+a[2]+')';
	      }
	  };
	};
	
	var codegen = function(opt) {
	  opt = opt || {};
	
	  var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},
	      blacklist = opt.blacklist ? toSet(opt.blacklist) : {},
	      constants = opt.constants || Constants,
	      functions = (opt.functions || Functions)(visit),
	      globalvar = opt.globalvar,
	      fieldvar = opt.fieldvar,
	      globals = {},
	      fields = {},
	      memberDepth = 0;
	
	  var outputGlobal = isFunction(globalvar)
	    ? globalvar
	    : function (id$$1) { return globalvar + '["' + id$$1 + '"]'; };
	
	  function visit(ast) {
	    if (isString(ast)) return ast;
	    var generator = Generators[ast.type];
	    if (generator == null) error$1('Unsupported type: ' + ast.type);
	    return generator(ast);
	  }
	
	  var Generators = {
	    Literal: function(n) {
	        return n.raw;
	      },
	
	    Identifier: function(n) {
	      var id$$1 = n.name;
	      if (memberDepth > 0) {
	        return id$$1;
	      } else if (blacklist.hasOwnProperty(id$$1)) {
	        return error$1('Illegal identifier: ' + id$$1);
	      } else if (constants.hasOwnProperty(id$$1)) {
	        return constants[id$$1];
	      } else if (whitelist.hasOwnProperty(id$$1)) {
	        return id$$1;
	      } else {
	        globals[id$$1] = 1;
	        return outputGlobal(id$$1);
	      }
	    },
	
	    MemberExpression: function(n) {
	        var d = !n.computed;
	        var o = visit(n.object);
	        if (d) memberDepth += 1;
	        var p = visit(n.property);
	        if (o === fieldvar) { fields[p] = 1; } // HACKish...
	        if (d) memberDepth -= 1;
	        return o + (d ? '.'+p : '['+p+']');
	      },
	
	    CallExpression: function(n) {
	        if (n.callee.type !== 'Identifier') {
	          error$1('Illegal callee type: ' + n.callee.type);
	        }
	        var callee = n.callee.name;
	        var args = n.arguments;
	        var fn = functions.hasOwnProperty(callee) && functions[callee];
	        if (!fn) error$1('Unrecognized function: ' + callee);
	        return isFunction(fn)
	          ? fn(args)
	          : fn + '(' + args.map(visit).join(',') + ')';
	      },
	
	    ArrayExpression: function(n) {
	        return '[' + n.elements.map(visit).join(',') + ']';
	      },
	
	    BinaryExpression: function(n) {
	        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
	      },
	
	    UnaryExpression: function(n) {
	        return '(' + n.operator + visit(n.argument) + ')';
	      },
	
	    ConditionalExpression: function(n) {
	        return '(' + visit(n.test) +
	          '?' + visit(n.consequent) +
	          ':' + visit(n.alternate) +
	          ')';
	      },
	
	    LogicalExpression: function(n) {
	        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
	      },
	
	    ObjectExpression: function(n) {
	        return '{' + n.properties.map(visit).join(',') + '}';
	      },
	
	    Property: function(n) {
	        memberDepth += 1;
	        var k = visit(n.key);
	        memberDepth -= 1;
	        return k + ':' + visit(n.value);
	      }
	  };
	
	  function codegen(ast) {
	    var result = {
	      code:    visit(ast),
	      globals: Object.keys(globals),
	      fields:  Object.keys(fields)
	    };
	    globals = {};
	    fields = {};
	    return result;
	  }
	
	  codegen.functions = functions;
	  codegen.constants = constants;
	
	  return codegen;
	};
	
	var formatCache = {};
	
	function formatter(type, method, specifier) {
	  var k = type + ':' + specifier,
	      e = formatCache[k];
	  if (!e || e[0] !== method) {
	    formatCache[k] = (e = [method, method(specifier)]);
	  }
	  return e[1];
	}
	
	function format$1(_, specifier) {
	  return formatter('format', format, specifier)(_);
	}
	
	function timeFormat$1(_, specifier) {
	  return formatter('timeFormat', timeFormat, specifier)(_);
	}
	
	function utcFormat$1(_, specifier) {
	  return formatter('utcFormat', utcFormat, specifier)(_);
	}
	
	function timeParse$1(_, specifier) {
	  return formatter('timeParse', timeParse, specifier)(_);
	}
	
	function utcParse$1(_, specifier) {
	  return formatter('utcParse', utcParse, specifier)(_);
	}
	
	var dateObj = new Date(2000, 0, 1);
	
	function time$2(month, day, specifier) {
	  dateObj.setMonth(month);
	  dateObj.setDate(day);
	  return timeFormat$1(dateObj, specifier);
	}
	
	function monthFormat(month) {
	  return time$2(month, 1, '%B');
	}
	
	function monthAbbrevFormat(month) {
	  return time$2(month, 1, '%b');
	}
	
	function dayFormat(day) {
	  return time$2(0, 2 + day, '%A');
	}
	
	function dayAbbrevFormat(day) {
	  return time$2(0, 2 + day, '%a');
	}
	
	function quarter(date) {
	  return 1 + ~~(new Date(date).getMonth() / 3);
	}
	
	function utcquarter(date) {
	  return 1 + ~~(new Date(date).getUTCMonth() / 3);
	}
	
	function log$4(df, method, args) {
	  try {
	    df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
	  } catch (err) {
	    df.warn(err);
	  }
	  return args[args.length-1];
	}
	
	function warn() {
	  return log$4(this.context.dataflow, 'warn', arguments);
	}
	
	function info() {
	  return log$4(this.context.dataflow, 'info', arguments);
	}
	
	function debug() {
	  return log$4(this.context.dataflow, 'debug', arguments);
	}
	
	var inScope = function(item) {
	  var group = this.context.group,
	      value = false;
	
	  if (group) while (item) {
	    if (item === group) { value = true; break; }
	    item = item.mark.group;
	  }
	  return value;
	};
	
	/**
	 * Span-preserving range clamp. If the span of the input range is less
	 * than (max - min) and an endpoint exceeds either the min or max value,
	 * the range is translated such that the span is preserved and one
	 * endpoint touches the boundary of the min/max range.
	 * If the span exceeds (max - min), the range [min, max] is returned.
	 */
	var clampRange = function(range, min, max) {
	  var lo = range[0],
	      hi = range[1],
	      span;
	
	  if (hi < lo) {
	    span = hi;
	    hi = lo;
	    lo = span;
	  }
	  span = hi - lo;
	
	  return span >= (max - min)
	    ? [min, max]
	    : [
	        Math.min(Math.max(lo, min), max - span),
	        Math.min(Math.max(hi, span), max)
	      ];
	};
	
	function pinchDistance(event) {
	  var t = event.touches,
	      dx = t[0].clientX - t[1].clientX,
	      dy = t[0].clientY - t[1].clientY;
	  return Math.sqrt(dx * dx + dy * dy);
	}
	
	function pinchAngle(event) {
	  var t = event.touches;
	  return Math.atan2(
	    t[0].clientY - t[1].clientY,
	    t[0].clientX - t[1].clientX
	  );
	}
	
	var _window = (typeof window !== 'undefined' && window) || null;
	
	function screen() {
	  return _window ? _window.screen : {};
	}
	
	function windowSize() {
	  return _window
	    ? [_window.innerWidth, _window.innerHeight]
	    : [undefined, undefined];
	}
	
	function containerSize() {
	  var view = this.context.dataflow,
	      el = view.container && view.container();
	  return el
	    ? [el.clientWidth, el.clientHeight]
	    : [undefined, undefined];
	}
	
	var flush = function(range, value, threshold, left, right, center) {
	  var l = Math.abs(value - range[0]),
	      r = Math.abs(peek(range) - value);
	  return l < r && l <= threshold ? left
	    : r <= threshold ? right
	    : center;
	};
	
	var span = function(array) {
	  return (array[array.length-1] - array[0]) || 0;
	};
	
	var Literal = 'Literal';
	var Identifier$1 = 'Identifier';
	
	var indexPrefix  = '@';
	var scalePrefix  = '%';
	var dataPrefix   = ':';
	
	function getScale(name, ctx) {
	  var s;
	  return isFunction(name) ? name
	    : isString(name) ? (s = ctx.scales[name]) && s.value
	    : undefined;
	}
	
	function addScaleDependency(scope, params, name) {
	  var scaleName = scalePrefix + name;
	  if (!params.hasOwnProperty(scaleName)) {
	    try {
	      params[scaleName] = scope.scaleRef(name);
	    } catch (err) {
	      // TODO: error handling? warning?
	    }
	  }
	}
	
	function scaleVisitor(name, args, scope, params) {
	  if (args[0].type === Literal) {
	    // add scale dependency
	    addScaleDependency(scope, params, args[0].value);
	  }
	  else if (args[0].type === Identifier$1) {
	    // indirect scale lookup; add all scales as parameters
	    for (name in scope.scales) {
	      addScaleDependency(scope, params, name);
	    }
	  }
	}
	
	function range$2(name, group) {
	  var s = getScale(name, (group || this).context);
	  return s && s.range ? s.range() : [];
	}
	
	function domain(name, group) {
	  var s = getScale(name, (group || this).context);
	  return s ? s.domain() : [];
	}
	
	function bandwidth(name, group) {
	  var s = getScale(name, (group || this).context);
	  return s && s.bandwidth ? s.bandwidth() : 0;
	}
	
	function bandspace(count, paddingInner, paddingOuter) {
	  return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);
	}
	
	function copy$1(name, group) {
	  var s = getScale(name, (group || this).context);
	  return s ? s.copy() : undefined;
	}
	
	function scale$2(name, value, group) {
	  var s = getScale(name, (group || this).context);
	  return s ? s(value) : undefined;
	}
	
	function invert(name, range, group) {
	  var s = getScale(name, (group || this).context);
	  return !s ? undefined
	    : isArray(range) ? (s.invertRange || s.invert)(range)
	    : (s.invert || s.invertExtent)(range);
	}
	
	var scaleGradient = function(scale, p0, p1, count) {
	  var gradient = Gradient(p0, p1),
	      stops = scale.domain(),
	      min = stops[0],
	      max = stops[stops.length-1],
	      fraction = scaleFraction(scale, min, max);
	
	  if (scale.ticks) {
	    stops = scale.ticks(+count || 15);
	    if (min !== stops[0]) stops.unshift(min);
	    if (max !== stops[stops.length-1]) stops.push(max);
	  }
	
	  for (var i=0, n=stops.length; i<n; ++i) {
	    gradient.stop(fraction(stops[i]), scale(stops[i]));
	  }
	
	  return gradient;
	};
	
	function geoMethod(method) {
	  return function(projection, geojson, group) {
	    var p = getScale(projection, (group || this).context);
	    return p && p.path[method](geojson);
	  };
	}
	
	var geoArea = geoMethod('area');
	var geoBounds = geoMethod('bounds');
	var geoCentroid = geoMethod('centroid');
	
	function data$1(name) {
	  var data = this.context.data[name];
	  return data ? data.values.value : [];
	}
	
	function dataVisitor(name, args, scope, params) {
	  if (args[0].type !== Literal) {
	    error$1('First argument to data functions must be a string literal.');
	  }
	
	  var data = args[0].value,
	      dataName = dataPrefix + data;
	
	  if (!params.hasOwnProperty(dataName)) {
	    params[dataName] = scope.getData(data).tuplesRef();
	  }
	}
	
	function indata(name, field$$1, value) {
	  var index = this.context.data[name]['index:' + field$$1],
	      entry = index ? index.value.get(value) : undefined;
	  return entry ? entry.count : entry;
	}
	
	function indataVisitor(name, args, scope, params) {
	  if (args[0].type !== Literal) error$1('First argument to indata must be a string literal.');
	  if (args[1].type !== Literal) error$1('Second argument to indata must be a string literal.');
	
	  var data = args[0].value,
	      field$$1 = args[1].value,
	      indexName = indexPrefix + field$$1;
	
	  if (!params.hasOwnProperty(indexName)) {
	    params[indexName] = scope.getData(data).indataRef(scope, field$$1);
	  }
	}
	
	function setdata(name, tuples) {
	  var df = this.context.dataflow,
	      data = this.context.data[name],
	      input = data.input;
	
	  df.pulse(input, df.changeset().remove(truthy).insert(tuples));
	  return 1;
	}
	
	var EMPTY = {};
	
	function datum(d) { return d.data; }
	
	function treeNodes(name, context) {
	  var tree = data$1.call(context, name);
	  return tree.root && tree.root.lookup || EMPTY;
	}
	
	function treePath(name, source, target) {
	  var nodes = treeNodes(name, this),
	      s = nodes[source],
	      t = nodes[target];
	  return s && t ? s.path(t).map(datum) : undefined;
	}
	
	function treeAncestors(name, node) {
	  var n = treeNodes(name, this)[node];
	  return n ? n.ancestors().map(datum) : undefined;
	}
	
	var inrange = function(value, range, left, right) {
	  var r0 = range[0], r1 = range[range.length-1], t;
	  if (r0 > r1) {
	    t = r0;
	    r0 = r1;
	    r1 = t;
	  }
	  left = left === undefined || left;
	  right = right === undefined || right;
	
	  return (left ? r0 <= value : r0 < value) &&
	    (right ? value <= r1 : value < r1);
	};
	
	var encode$1 = function(item, name, retval) {
	  if (item) {
	    var df = this.context.dataflow,
	        target = item.mark.source;
	    df.pulse(target, df.changeset().encode(item, name));
	  }
	  return retval !== undefined ? retval : item;
	};
	
	function equal(a, b) {
	  return a === b || a !== a && b !== b ? true
	    : isArray(a) && isArray(b) && a.length === b.length ? equalArray(a, b)
	    : false;
	}
	
	function equalArray(a, b) {
	  for (var i=0, n=a.length; i<n; ++i) {
	    if (!equal(a[i], b[i])) return false;
	  }
	  return true;
	}
	
	function removePredicate(props) {
	  return function(_) {
	    for (var key$$1 in props) {
	      if (!equal(_[key$$1], props[key$$1])) return false;
	    }
	    return true;
	  };
	}
	
	var modify = function(name, insert, remove, toggle, modify, values) {
	  var df = this.context.dataflow,
	      data = this.context.data[name],
	      input = data.input,
	      changes = data.changes,
	      stamp = df.stamp(),
	      predicate, key$$1;
	
	  if (df._trigger === false || !(input.value.length || insert || toggle)) {
	    // nothing to do!
	    return 0;
	  }
	
	  if (!changes || changes.stamp < stamp) {
	    data.changes = (changes = df.changeset());
	    changes.stamp = stamp;
	    df.runAfter(function() {
	      data.modified = true;
	      df.pulse(input, changes).run();
	    }, true);
	  }
	
	  if (remove) {
	    predicate = remove === true ? truthy
	      : (isArray(remove) || isTuple(remove)) ? remove
	      : removePredicate(remove);
	    changes.remove(predicate);
	  }
	
	  if (insert) {
	    changes.insert(insert);
	  }
	
	  if (toggle) {
	    predicate = removePredicate(toggle);
	    if (input.value.some(predicate)) {
	      changes.remove(predicate);
	    } else {
	      changes.insert(toggle);
	    }
	  }
	
	  if (modify) {
	    for (key$$1 in values) {
	      changes.modify(modify, key$$1, values[key$$1]);
	    }
	  }
	
	  return 1;
	};
	
	var BIN = 'bin_';
	var INTERSECT = 'intersect';
	var UNION = 'union';
	var UNIT_INDEX = 'index:unit';
	
	function testPoint(datum, entry) {
	  var fields = entry.fields,
	      values = entry.values,
	      getter = entry.getter || (entry.getter = []),
	      n = fields.length,
	      i = 0, dval;
	
	  for (; i<n; ++i) {
	    getter[i] = getter[i] || field(fields[i]);
	    dval = getter[i](datum);
	    if (isDate(dval)) dval = toNumber(dval);
	    if (isDate(values[i])) values[i] = toNumber(values[i]);
	    if (entry[BIN + fields[i]]) {
	      if (isDate(values[i][0])) values[i] = values[i].map(toNumber);
	      if (!inrange(dval, values[i], true, false)) return false;
	    } else if (dval !== values[i]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	// TODO: revisit date coercion?
	// have selections populate with consistent types upon write?
	
	function testInterval(datum, entry) {
	  var ivals = entry.intervals,
	      n = ivals.length,
	      i = 0,
	      getter, extent, value;
	
	  for (; i<n; ++i) {
	    extent = ivals[i].extent;
	    getter = ivals[i].getter || (ivals[i].getter = field(ivals[i].field));
	    value = getter(datum);
	    if (!extent || extent[0] === extent[1]) return false;
	    if (isDate(value)) value = toNumber(value);
	    if (isDate(extent[0])) extent = ivals[i].extent = extent.map(toNumber);
	    if (isNumber(extent[0]) && !inrange(value, extent)) return false;
	    else if (isString(extent[0]) && extent.indexOf(value) < 0) return false;
	  }
	
	  return true;
	}
	
	/**
	 * Tests if a tuple is contained within an interactive selection.
	 * @param {string} name - The name of the data set representing the selection.
	 * @param {object} datum - The tuple to test for inclusion.
	 * @param {string} op - The set operation for combining selections.
	 *   One of 'intersect' or 'union' (default).
	 * @param {function(object,object):boolean} test - A boolean-valued test
	 *   predicate for determining selection status within a single unit chart.
	 * @return {boolean} - True if the datum is in the selection, false otherwise.
	 */
	function vlSelection(name, datum, op, test) {
	  var data = this.context.data[name],
	      entries = data ? data.values.value : [],
	      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
	      intersect = op === INTERSECT,
	      n = entries.length,
	      i = 0,
	      entry, miss, count, unit, b;
	
	  for (; i<n; ++i) {
	    entry = entries[i];
	
	    if (unitIdx && intersect) {
	      // multi selections union within the same unit and intersect across units.
	      miss = miss || {};
	      count = miss[unit=entry.unit] || 0;
	
	      // if we've already matched this unit, skip.
	      if (count === -1) continue;
	
	      b = test(datum, entry);
	      miss[unit] = b ? -1 : ++count;
	
	      // if we match and there are no other units return true
	      // if we've missed against all tuples in this unit return false
	      if (b && unitIdx.size === 1) return true;
	      if (!b && count === unitIdx.get(unit).count) return false;
	    } else {
	      b = test(datum, entry);
	
	      // if we find a miss and we do require intersection return false
	      // if we find a match and we don't require intersection return true
	      if (intersect ^ b) return b;
	    }
	  }
	
	  // if intersecting and we made it here, then we saw no misses
	  // if not intersecting, then we saw no matches
	  // if no active selections, return false
	  return n && intersect;
	}
	
	// Assumes point selection tuples are of the form:
	// {unit: string, encodings: array<string>, fields: array<string>, values: array<*>, bins: object}
	function vlPoint(name, datum, op) {
	  return vlSelection.call(this, name, datum, op, testPoint);
	}
	
	// Assumes interval selection typles are of the form:
	// {unit: string, intervals: array<{encoding: string, field:string, extent:array<number>}>}
	function vlInterval(name, datum, op) {
	  return vlSelection.call(this, name, datum, op, testInterval);
	}
	
	function vlMultiVisitor(name, args, scope, params) {
	  if (args[0].type !== Literal) error$1('First argument to indata must be a string literal.');
	
	  var data = args[0].value,
	      // vlMulti, vlMultiDomain have different # of params, but op is always last.
	      op = args.length >= 2 && args[args.length-1].value,
	      field$$1 = 'unit',
	      indexName = indexPrefix + field$$1;
	
	  if (op === INTERSECT && !params.hasOwnProperty(indexName)) {
	    params[indexName] = scope.getData(data).indataRef(scope, field$$1);
	  }
	
	  dataVisitor(name, args, scope, params);
	}
	
	/**
	 * Materializes a point selection as a scale domain.
	 * @param {string} name - The name of the dataset representing the selection.
	 * @param {string} [encoding] - A particular encoding channel to materialize.
	 * @param {string} [field] - A particular field to materialize.
	 * @param {string} [op='intersect'] - The set operation for combining selections.
	 * One of 'intersect' (default) or 'union'.
	 * @returns {array} An array of values to serve as a scale domain.
	 */
	function vlPointDomain(name, encoding, field$$1, op) {
	  var data = this.context.data[name],
	      entries = data ? data.values.value : [],
	      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
	      entry = entries[0],
	      i = 0, n, index, values, continuous, units;
	
	  if (!entry) return undefined;
	
	  for (n = encoding ? entry.encodings.length : entry.fields.length; i<n; ++i) {
	    if ((encoding && entry.encodings[i] === encoding) ||
	        (field$$1 && entry.fields[i] === field$$1)) {
	      index = i;
	      continuous = entry[BIN + entry.fields[i]];
	      break;
	    }
	  }
	
	  // multi selections union within the same unit and intersect across units.
	  // if we've got only one unit, enforce union for more efficient materialization.
	  if (unitIdx && unitIdx.size === 1) {
	    op = UNION;
	  }
	
	  if (unitIdx && op === INTERSECT) {
	    units = entries.reduce(function(acc, entry) {
	      var u = acc[entry.unit] || (acc[entry.unit] = []);
	      u.push({unit: entry.unit, value: entry.values[index]});
	      return acc;
	    }, {});
	
	    values = Object.keys(units).map(function(unit) {
	      return {
	        unit: unit,
	        value: continuous
	          ? continuousDomain(units[unit], UNION)
	          : discreteDomain(units[unit], UNION)
	      };
	    });
	  } else {
	    values = entries.map(function(entry) {
	      return {unit: entry.unit, value: entry.values[index]};
	    });
	  }
	
	  return continuous ? continuousDomain(values, op) : discreteDomain(values, op);
	}
	
	/**
	 * Materializes an interval selection as a scale domain.
	 * @param {string} name - The name of the dataset representing the selection.
	 * @param {string} [encoding] - A particular encoding channel to materialize.
	 * @param {string} [field] - A particular field to materialize.
	 * @param {string} [op='union'] - The set operation for combining selections.
	 * One of 'intersect' or 'union' (default).
	 * @returns {array} An array of values to serve as a scale domain.
	 */
	function vlIntervalDomain(name, encoding, field$$1, op) {
	  var data = this.context.data[name],
	      entries = data ? data.values.value : [],
	      entry = entries[0],
	      i = 0, n, interval, index, values, discrete;
	
	  if (!entry) return undefined;
	
	  for (n = entry.intervals.length; i<n; ++i) {
	    interval = entry.intervals[i];
	    if ((encoding && interval.encoding === encoding) ||
	        (field$$1 && interval.field === field$$1)) {
	      if (!interval.extent) return undefined;
	      index = i;
	      discrete = interval.extent.length > 2;
	      break;
	    }
	  }
	
	  values = entries.reduce(function(acc, entry) {
	    var extent = entry.intervals[index].extent,
	        value = discrete
	           ? extent.map(function (d) { return {unit: entry.unit, value: d}; })
	           : {unit: entry.unit, value: extent};
	
	    if (discrete) {
	      acc.push.apply(acc, value);
	    } else {
	      acc.push(value);
	    }
	    return acc;
	  }, []);
	
	
	  return discrete ? discreteDomain(values, op) : continuousDomain(values, op);
	}
	
	function discreteDomain(entries, op) {
	  var units = {}, count = 0,
	      values = {}, domain = [],
	      i = 0, n = entries.length,
	      entry, unit, v, key$$1;
	
	  for (; i<n; ++i) {
	    entry = entries[i];
	    unit  = entry.unit;
	    key$$1   = entry.value;
	
	    if (!units[unit]) units[unit] = ++count;
	    if (!(v = values[key$$1])) {
	      values[key$$1] = v = {value: key$$1, units: {}, count: 0};
	    }
	    if (!v.units[unit]) v.units[unit] = ++v.count;
	  }
	
	  for (key$$1 in values) {
	    v = values[key$$1];
	    if (op === INTERSECT && v.count !== count) continue;
	    domain.push(v.value);
	  }
	
	  return domain.length ? domain : undefined;
	}
	
	function continuousDomain(entries, op) {
	  var merge$$1 = op === INTERSECT ? intersectInterval : unionInterval,
	      i = 0, n = entries.length,
	      extent, domain, lo, hi;
	
	  for (; i<n; ++i) {
	    extent = entries[i].value;
	    if (isDate(extent[0])) extent = extent.map(toNumber);
	    lo = extent[0];
	    hi = extent[1];
	    if (lo > hi) {
	      hi = extent[0];
	      lo = extent[1];
	    }
	    domain = domain ? merge$$1(domain, lo, hi) : [lo, hi];
	  }
	
	  return domain && domain.length && (+domain[0] !== +domain[1])
	    ? domain
	    : undefined;
	}
	
	function unionInterval(domain, lo, hi) {
	  if (domain[0] > lo) domain[0] = lo;
	  if (domain[1] < hi) domain[1] = hi;
	  return domain;
	}
	
	function intersectInterval(domain, lo, hi) {
	  if (hi < domain[0] || domain[1] < lo) {
	    return [];
	  } else {
	    if (domain[0] < lo) domain[0] = lo;
	    if (domain[1] > hi) domain[1] = hi;
	  }
	  return domain;
	}
	
	// Expression function context object
	var functionContext = {
	  random: function() { return exports.random(); }, // override default
	  isArray: isArray,
	  isBoolean: isBoolean,
	  isDate: isDate,
	  isNumber: isNumber,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isString: isString,
	  isTuple: isTuple,
	  toBoolean: toBoolean,
	  toDate: toDate,
	  toNumber: toNumber,
	  toString: toString,
	  pad: pad,
	  peek: peek,
	  truncate: truncate,
	  rgb: rgb,
	  lab: lab,
	  hcl: hcl,
	  hsl: hsl,
	  sequence: sequence,
	  format: format$1,
	  utcFormat: utcFormat$1,
	  utcParse: utcParse$1,
	  timeFormat: timeFormat$1,
	  timeParse: timeParse$1,
	  monthFormat: monthFormat,
	  monthAbbrevFormat: monthAbbrevFormat,
	  dayFormat: dayFormat,
	  dayAbbrevFormat: dayAbbrevFormat,
	  quarter: quarter,
	  utcquarter: utcquarter,
	  warn: warn,
	  info: info,
	  debug: debug,
	  inScope: inScope,
	  clampRange: clampRange,
	  pinchDistance: pinchDistance,
	  pinchAngle: pinchAngle,
	  screen: screen,
	  containerSize: containerSize,
	  windowSize: windowSize,
	  span: span,
	  flush: flush,
	  bandspace: bandspace,
	  inrange: inrange,
	  setdata: setdata,
	  panLinear: panLinear,
	  panLog: panLog,
	  panPow: panPow,
	  zoomLinear: zoomLinear,
	  zoomLog: zoomLog,
	  zoomPow: zoomPow,
	  encode: encode$1,
	  modify: modify
	};
	
	var eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'];
	var eventPrefix = 'event.vega.';
	var thisPrefix = 'this.';
	var astVisitors = {}; // AST visitors for dependency analysis
	
	function expressionFunction(name, fn, visitor) {
	  if (arguments.length === 1) {
	    return functionContext[name];
	  }
	
	  // register with the functionContext
	  functionContext[name] = fn;
	
	  // if there is an astVisitor register that, too
	  if (visitor) astVisitors[name] = visitor;
	
	  // if the code generator has already been initialized,
	  // we need to also register the function with it
	  if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
	  return this;
	}
	
	// register expression functions with ast visitors
	expressionFunction('bandwidth', bandwidth, scaleVisitor);
	expressionFunction('copy', copy$1, scaleVisitor);
	expressionFunction('domain', domain, scaleVisitor);
	expressionFunction('range', range$2, scaleVisitor);
	expressionFunction('invert', invert, scaleVisitor);
	expressionFunction('scale', scale$2, scaleVisitor);
	expressionFunction('gradient', scaleGradient, scaleVisitor);
	expressionFunction('geoArea', geoArea, scaleVisitor);
	expressionFunction('geoBounds', geoBounds, scaleVisitor);
	expressionFunction('geoCentroid', geoCentroid, scaleVisitor);
	expressionFunction('indata', indata, indataVisitor);
	expressionFunction('data', data$1, dataVisitor);
	expressionFunction('vlSingle', vlPoint, dataVisitor);
	expressionFunction('vlSingleDomain', vlPointDomain, dataVisitor);
	expressionFunction('vlMulti', vlPoint, vlMultiVisitor);
	expressionFunction('vlMultiDomain', vlPointDomain, vlMultiVisitor);
	expressionFunction('vlInterval', vlInterval, dataVisitor);
	expressionFunction('vlIntervalDomain', vlIntervalDomain, dataVisitor);
	expressionFunction('treePath', treePath, dataVisitor);
	expressionFunction('treeAncestors', treeAncestors, dataVisitor);
	
	// Build expression function registry
	function buildFunctions(codegen$$1) {
	  var fn = Functions(codegen$$1);
	  eventFunctions.forEach(function(name) { fn[name] = eventPrefix + name; });
	  for (var name in functionContext) { fn[name] = thisPrefix + name; }
	  return fn;
	}
	
	// Export code generator and parameters
	var codegenParams = {
	  blacklist:  ['_'],
	  whitelist:  ['datum', 'event', 'item'],
	  fieldvar:   'datum',
	  globalvar:  function(id$$1) { return '_[' + $('$' + id$$1) + ']'; },
	  functions:  buildFunctions,
	  constants:  Constants,
	  visitors:   astVisitors
	};
	
	var codeGenerator = codegen(codegenParams);
	
	var signalPrefix = '$';
	
	var parseExpression = function(expr, scope, preamble) {
	  var params = {}, ast, gen;
	
	  // parse the expression to an abstract syntax tree (ast)
	  try {
	    ast = parse$3(expr);
	  } catch (err) {
	    error$1('Expression parse error: ' + $(expr));
	  }
	
	  // analyze ast function calls for dependencies
	  ast.visit(function visitor(node) {
	    if (node.type !== 'CallExpression') return;
	    var name = node.callee.name,
	        visit = codegenParams.visitors[name];
	    if (visit) visit(name, node.arguments, scope, params);
	  });
	
	  // perform code generation
	  gen = codeGenerator(ast);
	
	  // collect signal dependencies
	  gen.globals.forEach(function(name) {
	    var signalName = signalPrefix + name;
	    if (!params.hasOwnProperty(signalName) && scope.getSignal(name)) {
	      params[signalName] = scope.signalRef(name);
	    }
	  });
	
	  // return generated expression code and dependencies
	  return {
	    $expr:   preamble ? preamble + 'return(' + gen.code + ');' : gen.code,
	    $fields: gen.fields,
	    $params: params
	  };
	};
	
	var VIEW$1 = 'view';
	var SCOPE = 'scope';
	
	var parseStream = function(stream, scope) {
	  return stream.signal ? scope.getSignal(stream.signal).id
	    : stream.scale ? scope.getScale(stream.scale).id
	    : parseStream$1(stream, scope);
	};
	
	function eventSource(source) {
	   return source === SCOPE ? VIEW$1 : (source || VIEW$1);
	}
	
	function parseStream$1(stream, scope) {
	  var method = stream.merge ? mergeStream
	    : stream.stream ? nestedStream
	    : stream.type ? eventStream
	    : error$1('Invalid stream specification: ' + $(stream));
	
	  return method(stream, scope);
	}
	
	function mergeStream(stream, scope) {
	  var list = stream.merge.map(function(s) {
	    return parseStream$1(s, scope);
	  });
	
	  var entry = streamParameters({merge: list}, stream, scope);
	  return scope.addStream(entry).id;
	}
	
	function nestedStream(stream, scope) {
	  var id$$1 = parseStream$1(stream.stream, scope),
	      entry = streamParameters({stream: id$$1}, stream, scope);
	  return scope.addStream(entry).id;
	}
	
	function eventStream(stream, scope) {
	  var id$$1 = scope.event(eventSource(stream.source), stream.type),
	      entry = streamParameters({stream: id$$1}, stream, scope);
	  return Object.keys(entry).length === 1 ? id$$1
	    : scope.addStream(entry).id;
	}
	
	function streamParameters(entry, stream, scope) {
	  var param = stream.between;
	
	  if (param) {
	    if (param.length !== 2) {
	      error$1('Stream "between" parameter must have 2 entries: ' + $(stream));
	    }
	    entry.between = [
	      parseStream$1(param[0], scope),
	      parseStream$1(param[1], scope)
	    ];
	  }
	
	  param = stream.filter ? array(stream.filter) : [];
	  if (stream.marktype || stream.markname || stream.markrole) {
	    // add filter for mark type, name and/or role
	    param.push(filterMark(stream.marktype, stream.markname, stream.markrole));
	  }
	  if (stream.source === SCOPE) {
	    // add filter to limit events from sub-scope only
	    param.push('inScope(event.item)');
	  }
	  if (param.length) {
	    entry.filter = parseExpression('(' + param.join(')&&(') + ')').$expr;
	  }
	
	  if ((param = stream.throttle) != null) {
	    entry.throttle = +param;
	  }
	
	  if ((param = stream.debounce) != null) {
	    entry.debounce = +param;
	  }
	
	  if (stream.consume) {
	    entry.consume = true;
	  }
	
	  return entry;
	}
	
	function filterMark(type, name, role) {
	  var item = 'event.item';
	  return item
	    + (type && type !== '*' ? '&&' + item + '.mark.marktype===\'' + type + '\'' : '')
	    + (role ? '&&' + item + '.mark.role===\'' + role + '\'' : '')
	    + (name ? '&&' + item + '.mark.name===\'' + name + '\'' : '');
	}
	
	/**
	 * Parse an event selector string.
	 * Returns an array of event stream definitions.
	 */
	var selector = function(selector, source, marks) {
	  DEFAULT_SOURCE = source || VIEW$2;
	  MARKS = marks || DEFAULT_MARKS;
	  return parseMerge(selector.trim()).map(parseSelector);
	};
	
	var VIEW$2    = 'view';
	var LBRACK  = '[';
	var RBRACK  = ']';
	var LBRACE  = '{';
	var RBRACE  = '}';
	var COLON   = ':';
	var COMMA   = ',';
	var NAME    = '@';
	var GT      = '>';
	var ILLEGAL$1 = /[[\]{}]/;
	var DEFAULT_SOURCE;
	var MARKS;
	var DEFAULT_MARKS = {
	      '*': 1,
	      arc: 1,
	      area: 1,
	      group: 1,
	      image: 1,
	      line: 1,
	      path: 1,
	      rect: 1,
	      rule: 1,
	      shape: 1,
	      symbol: 1,
	      text: 1,
	      trail: 1
	    };
	
	function isMarkType(type) {
	  return MARKS.hasOwnProperty(type);
	}
	
	function find$1(s, i, endChar, pushChar, popChar) {
	  var count = 0,
	      n = s.length,
	      c;
	  for (; i<n; ++i) {
	    c = s[i];
	    if (!count && c === endChar) return i;
	    else if (popChar && popChar.indexOf(c) >= 0) --count;
	    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
	  }
	  return i;
	}
	
	function parseMerge(s) {
	  var output = [],
	      start = 0,
	      n = s.length,
	      i = 0;
	
	  while (i < n) {
	    i = find$1(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
	    output.push(s.substring(start, i).trim());
	    start = ++i;
	  }
	
	  if (output.length === 0) {
	    throw 'Empty event selector: ' + s;
	  }
	  return output;
	}
	
	function parseSelector(s) {
	  return s[0] === '['
	    ? parseBetween(s)
	    : parseStream$2(s);
	}
	
	function parseBetween(s) {
	  var n = s.length,
	      i = 1,
	      b, stream;
	
	  i = find$1(s, i, RBRACK, LBRACK, RBRACK);
	  if (i === n) {
	    throw 'Empty between selector: ' + s;
	  }
	
	  b = parseMerge(s.substring(1, i));
	  if (b.length !== 2) {
	    throw 'Between selector must have two elements: ' + s;
	  }
	
	  s = s.slice(i + 1).trim();
	  if (s[0] !== GT) {
	    throw 'Expected \'>\' after between selector: ' + s;
	  }
	
	  b = b.map(parseSelector);
	
	  stream = parseSelector(s.slice(1).trim());
	  if (stream.between) {
	    return {
	      between: b,
	      stream: stream
	    };
	  } else {
	    stream.between = b;
	  }
	
	  return stream;
	}
	
	function parseStream$2(s) {
	  var stream = {source: DEFAULT_SOURCE},
	      source = [],
	      throttle = [0, 0],
	      markname = 0,
	      start = 0,
	      n = s.length,
	      i = 0, j,
	      filter;
	
	  // extract throttle from end
	  if (s[n-1] === RBRACE) {
	    i = s.lastIndexOf(LBRACE);
	    if (i >= 0) {
	      try {
	        throttle = parseThrottle(s.substring(i+1, n-1));
	      } catch (e) {
	        throw 'Invalid throttle specification: ' + s;
	      }
	      s = s.slice(0, i).trim();
	      n = s.length;
	    } else throw 'Unmatched right brace: ' + s;
	    i = 0;
	  }
	
	  if (!n) throw s;
	
	  // set name flag based on first char
	  if (s[0] === NAME) markname = ++i;
	
	  // extract first part of multi-part stream selector
	  j = find$1(s, i, COLON);
	  if (j < n) {
	    source.push(s.substring(start, j).trim());
	    start = i = ++j;
	  }
	
	  // extract remaining part of stream selector
	  i = find$1(s, i, LBRACK);
	  if (i === n) {
	    source.push(s.substring(start, n).trim());
	  } else {
	    source.push(s.substring(start, i).trim());
	    filter = [];
	    start = ++i;
	    if (start === n) throw 'Unmatched left bracket: ' + s;
	  }
	
	  // extract filters
	  while (i < n) {
	    i = find$1(s, i, RBRACK);
	    if (i === n) throw 'Unmatched left bracket: ' + s;
	    filter.push(s.substring(start, i).trim());
	    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
	    start = ++i;
	  }
	
	  // marshall event stream specification
	  if (!(n = source.length) || ILLEGAL$1.test(source[n-1])) {
	    throw 'Invalid event selector: ' + s;
	  }
	
	  if (n > 1) {
	    stream.type = source[1];
	    if (markname) {
	      stream.markname = source[0].slice(1);
	    } else if (isMarkType(source[0])) {
	      stream.marktype = source[0];
	    } else {
	      stream.source = source[0];
	    }
	  } else {
	    stream.type = source[0];
	  }
	  if (stream.type.slice(-1) === '!') {
	    stream.consume = true;
	    stream.type = stream.type.slice(0, -1);
	  }
	  if (filter != null) stream.filter = filter;
	  if (throttle[0]) stream.throttle = throttle[0];
	  if (throttle[1]) stream.debounce = throttle[1];
	
	  return stream;
	}
	
	function parseThrottle(s) {
	  var a = s.split(COMMA);
	  if (!s.length || a.length > 2) throw s;
	  return a.map(function(_) {
	    var x = +_;
	    if (x !== x) throw s;
	    return x;
	  });
	}
	
	var preamble = 'var datum=event.item&&event.item.datum;';
	
	var parseUpdate = function(spec, scope, target) {
	  var events = spec.events,
	      update = spec.update,
	      encode = spec.encode,
	      sources = [],
	      value = '', entry;
	
	  if (!events) {
	    error$1('Signal update missing events specification.');
	  }
	
	  // interpret as an event selector string
	  if (isString(events)) {
	    events = selector(events);
	  }
	
	  // separate event streams from signal updates
	  events = array(events).filter(function(stream) {
	    if (stream.signal || stream.scale) {
	      sources.push(stream);
	      return 0;
	    } else {
	      return 1;
	    }
	  });
	
	  // merge event streams, include as source
	  if (events.length) {
	    sources.push(events.length > 1 ? {merge: events} : events[0]);
	  }
	
	  if (encode != null) {
	    if (update) error$1('Signal encode and update are mutually exclusive.');
	    update = 'encode(item(),' + $(encode) + ')';
	  }
	
	  // resolve update value
	  value = isString(update) ? parseExpression(update, scope, preamble)
	    : update.expr != null ? parseExpression(update.expr, scope, preamble)
	    : update.value != null ? update.value
	    : update.signal != null ? {
	        $expr:   '_.value',
	        $params: {value: scope.signalRef(update.signal)}
	      }
	    : error$1('Invalid signal update specification.');
	
	  entry = {
	    target: target,
	    update: value
	  };
	
	  if (spec.force) {
	    entry.options = {force: true};
	  }
	
	  sources.forEach(function(source) {
	    source = {source: parseStream(source, scope)};
	    scope.addUpdate(extend(source, entry));
	  });
	};
	
	var parseSignalUpdates = function(signal, scope) {
	  var op = scope.getSignal(signal.name);
	
	  if (signal.update) {
	    var expr = parseExpression(signal.update, scope);
	    op.update = expr.$expr;
	    op.params = expr.$params;
	  }
	
	  if (signal.on) {
	    signal.on.forEach(function(_) {
	      parseUpdate(_, scope, op.id);
	    });
	  }
	};
	
	function Entry(type, value, params, parent) {
	  this.id = -1;
	  this.type = type;
	  this.value = value;
	  this.params = params;
	  if (parent) this.parent = parent;
	}
	
	function entry(type, value, params, parent) {
	  return new Entry(type, value, params, parent);
	}
	
	function operator(value, params) {
	  return entry('operator', value, params);
	}
	
	// -----
	
	function ref(op) {
	  var ref = {$ref: op.id};
	  // if operator not yet registered, cache ref to resolve later
	  if (op.id < 0) (op.refs = op.refs || []).push(ref);
	  return ref;
	}
	
	var tupleidRef = {
	  $tupleid: 1,
	  toString: function() { return ':_tupleid_:'; }
	};
	
	function fieldRef$1(field$$1, name) {
	  return name ? {$field: field$$1, $name: name} : {$field: field$$1};
	}
	
	var keyFieldRef = fieldRef$1('key');
	
	function compareRef(fields, orders) {
	  return {$compare: fields, $order: orders};
	}
	
	function keyRef(fields, flat) {
	  var ref = {$key: fields};
	  if (flat) ref.$flat = true;
	  return ref;
	}
	
	// -----
	
	var Ascending  = 'ascending';
	
	var Descending = 'descending';
	
	function sortKey(sort) {
	  return !isObject(sort) ? ''
	    : (sort.order === Descending ? '-' : '+')
	      + aggrField(sort.op, sort.field);
	}
	
	function aggrField(op, field$$1) {
	  return (op && op.signal ? '$' + op.signal : op || '')
	    + (op && field$$1 ? '_' : '')
	    + (field$$1 && field$$1.signal ? '$' + field$$1.signal : field$$1 || '');
	}
	
	// -----
	
	function isSignal(_) {
	  return _ && _.signal;
	}
	
	function value(specValue, defaultValue) {
	  return specValue != null ? specValue : defaultValue;
	}
	
	function transform$3(name) {
	  return function(params, value$$1, parent) {
	    return entry(name, value$$1, params || undefined, parent);
	  };
	}
	
	var Aggregate$1 = transform$3('aggregate');
	var AxisTicks$1 = transform$3('axisticks');
	var Bound$1 = transform$3('bound');
	var Collect$1 = transform$3('collect');
	var Compare$1 = transform$3('compare');
	var DataJoin$1 = transform$3('datajoin');
	var Encode$1 = transform$3('encode');
	
	var Facet$1 = transform$3('facet');
	var Field$1 = transform$3('field');
	var Key$1 = transform$3('key');
	var LegendEntries$1 = transform$3('legendentries');
	var Mark$1 = transform$3('mark');
	var MultiExtent$1 = transform$3('multiextent');
	var MultiValues$1 = transform$3('multivalues');
	var Overlap$1 = transform$3('overlap');
	var Params$2 = transform$3('params');
	var PreFacet$1 = transform$3('prefacet');
	var Projection$1 = transform$3('projection');
	var Proxy$1 = transform$3('proxy');
	var Relay$1 = transform$3('relay');
	var Render$1 = transform$3('render');
	var Scale$1 = transform$3('scale');
	var Sieve$1 = transform$3('sieve');
	var SortItems$1 = transform$3('sortitems');
	var ViewLayout$1 = transform$3('viewlayout');
	var Values$1 = transform$3('values');
	
	var FIELD_REF_ID = 0;
	
	var types = [
	  'identity',
	  'ordinal', 'band', 'point',
	  'bin-linear', 'bin-ordinal',
	  'linear', 'pow', 'sqrt', 'log', 'sequential',
	  'time', 'utc',
	  'quantize', 'quantile', 'threshold'
	];
	
	var allTypes = toSet(types);
	var ordinalTypes = toSet(types.slice(1, 6));
	
	function isOrdinal(type) {
	  return ordinalTypes.hasOwnProperty(type);
	}
	
	function isQuantile(type) {
	  return type === 'quantile';
	}
	
	function initScale(spec, scope) {
	  var type = spec.type || 'linear';
	
	  if (!allTypes.hasOwnProperty(type)) {
	    error$1('Unrecognized scale type: ' + $(type));
	  }
	
	  scope.addScale(spec.name, {
	    type:   type,
	    domain: undefined
	  });
	}
	
	function parseScale(spec, scope) {
	  var params = scope.getScale(spec.name).params,
	      key$$1;
	
	  params.domain = parseScaleDomain(spec.domain, spec, scope);
	
	  if (spec.range != null) {
	    params.range = parseScaleRange(spec, scope, params);
	  }
	
	  if (spec.interpolate != null) {
	    parseScaleInterpolate(spec.interpolate, params);
	  }
	
	  if (spec.nice != null) {
	    parseScaleNice(spec.nice, params);
	  }
	
	  for (key$$1 in spec) {
	    if (params.hasOwnProperty(key$$1) || key$$1 === 'name') continue;
	    params[key$$1] = parseLiteral(spec[key$$1], scope);
	  }
	}
	
	function parseLiteral(v, scope) {
	  return !isObject(v) ? v
	    : v.signal ? scope.signalRef(v.signal)
	    : error$1('Unsupported object: ' + $(v));
	}
	
	function parseArray(v, scope) {
	  return v.signal
	    ? scope.signalRef(v.signal)
	    : v.map(function(v) { return parseLiteral(v, scope); });
	}
	
	function dataLookupError(name) {
	  error$1('Can not find data set: ' + $(name));
	}
	
	// -- SCALE DOMAIN ----
	
	function parseScaleDomain(domain, spec, scope) {
	  if (!domain) {
	    if (spec.domainMin != null || spec.domainMax != null) {
	      error$1('No scale domain defined for domainMin/domainMax to override.');
	    }
	    return; // default domain
	  }
	
	  return domain.signal ? scope.signalRef(domain.signal)
	    : (isArray(domain) ? explicitDomain
	    : domain.fields ? multipleDomain
	    : singularDomain)(domain, spec, scope);
	}
	
	function explicitDomain(domain, spec, scope) {
	  return domain.map(function(v) {
	    return parseLiteral(v, scope);
	  });
	}
	
	function singularDomain(domain, spec, scope) {
	  var data = scope.getData(domain.data);
	  if (!data) dataLookupError(domain.data);
	
	  return isOrdinal(spec.type)
	      ? data.valuesRef(scope, domain.field, parseSort(domain.sort, false))
	      : isQuantile(spec.type) ? data.domainRef(scope, domain.field)
	      : data.extentRef(scope, domain.field);
	}
	
	function multipleDomain(domain, spec, scope) {
	  var data = domain.data,
	      fields = domain.fields.reduce(function(dom, d) {
	        d = isString(d) ? {data: data, field: d}
	          : (isArray(d) || d.signal) ? fieldRef(d, scope)
	          : d;
	        dom.push(d);
	        return dom;
	      }, []);
	
	  return (isOrdinal(spec.type) ? ordinalMultipleDomain
	    : isQuantile(spec.type) ? quantileMultipleDomain
	    : numericMultipleDomain)(domain, scope, fields);
	}
	
	function fieldRef(data, scope) {
	  var name = '_:vega:_' + (FIELD_REF_ID++),
	      coll = Collect$1({});
	
	  if (isArray(data)) {
	    coll.value = {$ingest: data};
	  } else if (data.signal) {
	    var code = 'setdata(' + $(name) + ',' + data.signal + ')';
	    coll.params.input = scope.signalRef(code);
	  }
	  scope.addDataPipeline(name, [coll, Sieve$1({})]);
	  return {data: name, field: 'data'};
	}
	
	function ordinalMultipleDomain(domain, scope, fields) {
	  var counts, a, c, v;
	
	  // get value counts for each domain field
	  counts = fields.map(function(f) {
	    var data = scope.getData(f.data);
	    if (!data) dataLookupError(f.data);
	    return data.countsRef(scope, f.field);
	  });
	
	  // sum counts from all fields
	  a = scope.add(Aggregate$1({
	    groupby: keyFieldRef,
	    ops:['sum'], fields: [scope.fieldRef('count')], as:['count'],
	    pulse: counts
	  }));
	
	  // collect aggregate output
	  c = scope.add(Collect$1({pulse: ref(a)}));
	
	  // extract values for combined domain
	  v = scope.add(Values$1({
	    field: keyFieldRef,
	    sort:  scope.sortRef(parseSort(domain.sort, true)),
	    pulse: ref(c)
	  }));
	
	  return ref(v);
	}
	
	function parseSort(sort, multidomain) {
	  if (sort) {
	    if (!sort.field && !sort.op) {
	      if (isObject(sort)) sort.field = 'key';
	      else sort = {field: 'key'};
	    } else if (!sort.field && sort.op !== 'count') {
	      error$1('No field provided for sort aggregate op: ' + sort.op);
	    } else if (multidomain && sort.field) {
	      error$1('Multiple domain scales can not sort by field.');
	    } else if (multidomain && sort.op && sort.op !== 'count') {
	      error$1('Multiple domain scales support op count only.');
	    }
	  }
	  return sort;
	}
	
	function quantileMultipleDomain(domain, scope, fields) {
	  // get value arrays for each domain field
	  var values = fields.map(function(f) {
	    var data = scope.getData(f.data);
	    if (!data) dataLookupError(f.data);
	    return data.domainRef(scope, f.field);
	  });
	
	  // combine value arrays
	  return ref(scope.add(MultiValues$1({values: values})));
	}
	
	function numericMultipleDomain(domain, scope, fields) {
	  // get extents for each domain field
	  var extents = fields.map(function(f) {
	    var data = scope.getData(f.data);
	    if (!data) dataLookupError(f.data);
	    return data.extentRef(scope, f.field);
	  });
	
	  // combine extents
	  return ref(scope.add(MultiExtent$1({extents: extents})));
	}
	
	// -- SCALE NICE -----
	
	function parseScaleNice(nice, params) {
	  params.nice = isObject(nice)
	    ? {
	        interval: parseLiteral(nice.interval),
	        step: parseLiteral(nice.step)
	      }
	    : parseLiteral(nice);
	}
	
	// -- SCALE INTERPOLATION -----
	
	function parseScaleInterpolate(interpolate, params) {
	  params.interpolate = parseLiteral(interpolate.type || interpolate);
	  if (interpolate.gamma != null) {
	    params.interpolateGamma = parseLiteral(interpolate.gamma);
	  }
	}
	
	// -- SCALE RANGE -----
	
	function parseScaleRange(spec, scope, params) {
	  var range = spec.range,
	      config = scope.config.range;
	
	  if (range.signal) {
	    return scope.signalRef(range.signal);
	  } else if (isString(range)) {
	    if (config && config.hasOwnProperty(range)) {
	      spec = extend({}, spec, {range: config[range]});
	      return parseScaleRange(spec, scope, params);
	    } else if (range === 'width') {
	      range = [0, {signal: 'width'}];
	    } else if (range === 'height') {
	      range = isOrdinal(spec.type)
	        ? [0, {signal: 'height'}]
	        : [{signal: 'height'}, 0];
	    } else {
	      error$1('Unrecognized scale range value: ' + $(range));
	    }
	  } else if (range.scheme) {
	    params.scheme = parseLiteral(range.scheme, scope);
	    if (range.extent) params.schemeExtent = parseArray(range.extent, scope);
	    if (range.count) params.schemeCount = parseLiteral(range.count, scope);
	    return;
	  } else if (range.step) {
	    params.rangeStep = parseLiteral(range.step, scope);
	    return;
	  } else if (isOrdinal(spec.type) && !isArray(range)) {
	    return parseScaleDomain(range, spec, scope);
	  } else if (!isArray(range)) {
	    error$1('Unsupported range type: ' + $(range));
	  }
	
	  return range.map(function(v) {
	    return parseLiteral(v, scope);
	  });
	}
	
	var parseProjection = function(proj, scope) {
	  var params = {};
	
	  for (var name in proj) {
	    if (name === 'name') continue;
	    params[name] = parseParameter(proj[name], scope);
	  }
	
	  scope.addProjection(proj.name, params);
	};
	
	function parseParameter(_, scope) {
	  return isArray(_) ? _.map(function(_) { return parseParameter(_, scope); })
	    : !isObject(_) ? _
	    : _.signal ? scope.signalRef(_.signal)
	    : error$1('Unsupported parameter object: ' + $(_));
	}
	
	var Top$1 = 'top';
	var Left$1 = 'left';
	var Right$1 = 'right';
	var Bottom$1 = 'bottom';
	
	var Index  = 'index';
	var Label  = 'label';
	var Offset = 'offset';
	var Perc   = 'perc';
	var Size   = 'size';
	var Total  = 'total';
	var Value  = 'value';
	
	var GuideLabelStyle = 'guide-label';
	var GuideTitleStyle = 'guide-title';
	var GroupTitleStyle = 'group-title';
	
	var LegendScales = [
	  'shape',
	  'size',
	  'fill',
	  'stroke',
	  'strokeDash',
	  'opacity'
	];
	
	var Skip = {
	  name: 1,
	  interactive: 1
	};
	
	var Skip$1 = toSet(['rule']);
	var Swap = toSet(['group', 'image', 'rect']);
	
	var adjustSpatial = function(encode, marktype) {
	  var code = '';
	
	  if (Skip$1[marktype]) return code;
	
	  if (encode.x2) {
	    if (encode.x) {
	      if (Swap[marktype]) {
	        code += 'if(o.x>o.x2)$=o.x,o.x=o.x2,o.x2=$;';
	      }
	      code += 'o.width=o.x2-o.x;';
	    } else {
	      code += 'o.x=o.x2-(o.width||0);';
	    }
	  }
	
	  if (encode.xc) {
	    code += 'o.x=o.xc-(o.width||0)/2;';
	  }
	
	  if (encode.y2) {
	    if (encode.y) {
	      if (Swap[marktype]) {
	        code += 'if(o.y>o.y2)$=o.y,o.y=o.y2,o.y2=$;';
	      }
	      code += 'o.height=o.y2-o.y;';
	    } else {
	      code += 'o.y=o.y2-(o.height||0);';
	    }
	  }
	
	  if (encode.yc) {
	    code += 'o.y=o.yc-(o.height||0)/2;';
	  }
	
	  return code;
	};
	
	var color$2 = function(enc, scope, params, fields) {
	  function color(type, x, y, z) {
	    var a = entry$1(null, x, scope, params, fields),
	        b = entry$1(null, y, scope, params, fields),
	        c = entry$1(null, z, scope, params, fields);
	    return 'this.' + type + '(' + [a, b, c].join(',') + ').toString()';
	  }
	
	  return (enc.c) ? color('hcl', enc.h, enc.c, enc.l)
	    : (enc.h || enc.s) ? color('hsl', enc.h, enc.s, enc.l)
	    : (enc.l || enc.a) ? color('lab', enc.l, enc.a, enc.b)
	    : (enc.r || enc.g || enc.b) ? color('rgb', enc.r, enc.g, enc.b)
	    : null;
	};
	
	var expression = function(code, scope, params, fields) {
	  var expr = parseExpression(code, scope);
	  expr.$fields.forEach(function(name) { fields[name] = 1; });
	  extend(params, expr.$params);
	  return expr.$expr;
	};
	
	var field$1 = function(ref, scope, params, fields) {
	  return resolve$1(isObject(ref) ? ref : {datum: ref}, scope, params, fields);
	};
	
	function resolve$1(ref, scope, params, fields) {
	  var object, level, field$$1;
	
	  if (ref.signal) {
	    object = 'datum';
	    field$$1 = expression(ref.signal, scope, params, fields);
	  } else if (ref.group || ref.parent) {
	    level = Math.max(1, ref.level || 1);
	    object = 'item';
	
	    while (level-- > 0) {
	      object += '.mark.group';
	    }
	
	    if (ref.parent) {
	      field$$1 = ref.parent;
	      object += '.datum';
	    } else {
	      field$$1 = ref.group;
	    }
	  } else if (ref.datum) {
	    object = 'datum';
	    field$$1 = ref.datum;
	  } else {
	    error$1('Invalid field reference: ' + $(ref));
	  }
	
	  if (!ref.signal) {
	    if (isString(field$$1)) {
	      fields[field$$1] = 1; // TODO review field tracking?
	      field$$1 = splitAccessPath(field$$1).map($).join('][');
	    } else {
	      field$$1 = resolve$1(field$$1, scope, params, fields);
	    }
	  }
	
	  return object + '[' + field$$1 + ']';
	}
	
	var scale$3 = function(enc, value, scope, params, fields) {
	  var scale = getScale$1(enc.scale, scope, params, fields),
	      interp, func, flag;
	
	  if (enc.range != null) {
	    // pull value from scale range
	    interp = +enc.range;
	    func = scale + '.range()';
	    value = (interp === 0) ? (func + '[0]')
	      : '($=' + func + ',' + ((interp === 1) ? '$[$.length-1]'
	      : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';
	  } else {
	    // run value through scale and/or pull scale bandwidth
	    if (value !== undefined) value = scale + '(' + value + ')';
	
	    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {
	      func = scale + '.bandwidth';
	      interp = +enc.band;
	      interp = func + '()' + (interp===1 ? '' : '*' + interp);
	
	      // if we don't know the scale type, check for bandwidth
	      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';
	
	      value = (value ? value + '+' : '') + interp;
	
	      if (enc.extra) {
	        // include logic to handle extraneous elements
	        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';
	      }
	    }
	
	    if (value == null) value = '0';
	  }
	
	  return value;
	};
	
	function hasBandwidth(name, scope) {
	  if (!isString(name)) return -1;
	  var type = scope.scaleType(name);
	  return type === 'band' || type === 'point' ? 1 : 0;
	}
	
	function getScale$1(name, scope, params, fields) {
	  var scaleName;
	
	  if (isString(name)) {
	    // direct scale lookup; add scale as parameter
	    scaleName = scalePrefix + name;
	    if (!params.hasOwnProperty(scaleName)) {
	      params[scaleName] = scope.scaleRef(name);
	    }
	    scaleName = $(scaleName);
	  } else {
	    // indirect scale lookup; add all scales as parameters
	    for (scaleName in scope.scales) {
	      params[scalePrefix + scaleName] = scope.scaleRef(scaleName);
	    }
	    scaleName = $(scalePrefix) + '+'
	      + (name.signal
	        ? '(' + expression(name.signal, scope, params, fields) + ')'
	        : field$1(name, scope, params, fields));
	  }
	
	  return '_[' + scaleName + ']';
	}
	
	var gradient$1 = function(enc, scope, params, fields) {
	  return 'this.gradient('
	    + getScale$1(enc.gradient, scope, params, fields)
	    + ',' + $(enc.start)
	    + ',' + $(enc.stop)
	    + ',' + $(enc.count)
	    + ')';
	};
	
	var property = function(property, scope, params, fields) {
	  return isObject(property)
	      ? '(' + entry$1(null, property, scope, params, fields) + ')'
	      : property;
	};
	
	var entry$1 = function(channel, enc, scope, params, fields) {
	  if (enc.gradient != null) {
	    return gradient$1(enc, scope, params, fields);
	  }
	
	  var value = enc.signal ? expression(enc.signal, scope, params, fields)
	    : enc.color ? color$2(enc.color, scope, params, fields)
	    : enc.field != null ? field$1(enc.field, scope, params, fields)
	    : enc.value !== undefined ? $(enc.value)
	    : undefined;
	
	  if (enc.scale != null) {
	    value = scale$3(enc, value, scope, params, fields);
	  }
	
	  if (value === undefined) {
	    value = null;
	  }
	
	  if (enc.exponent != null) {
	    value = 'Math.pow(' + value + ','
	      + property(enc.exponent, scope, params, fields) + ')';
	  }
	
	  if (enc.mult != null) {
	    value += '*' + property(enc.mult, scope, params, fields);
	  }
	
	  if (enc.offset != null) {
	    value += '+' + property(enc.offset, scope, params, fields);
	  }
	
	  if (enc.round) {
	    value = 'Math.round(' + value + ')';
	  }
	
	  return value;
	};
	
	var set$5 = function(obj, key$$1, value) {
	  return obj + '[' + $(key$$1) + ']=' + value + ';';
	};
	
	var rule$1 = function(channel, rules, scope, params, fields) {
	  var code = '';
	
	  rules.forEach(function(rule) {
	    var value = entry$1(channel, rule, scope, params, fields);
	    code += rule.test
	      ? expression(rule.test, scope, params, fields) + '?' + value + ':'
	      : value;
	  });
	
	  return set$5('o', channel, code);
	};
	
	function parseEncode(encode, marktype, params, scope) {
	  var fields = {},
	      code = 'var o=item,datum=o.datum,$;',
	      channel, enc, value;
	
	  for (channel in encode) {
	    enc = encode[channel];
	    if (isArray(enc)) { // rule
	      code += rule$1(channel, enc, scope, params, fields);
	    } else {
	      value = entry$1(channel, enc, scope, params, fields);
	      code += set$5('o', channel, value);
	    }
	  }
	
	  code += adjustSpatial(encode, marktype);
	  code += 'return 1;';
	
	  return {
	    $expr:   code,
	    $fields: Object.keys(fields),
	    $output: Object.keys(encode)
	  };
	}
	
	var MarkRole = 'mark';
	var FrameRole$1 = 'frame';
	var ScopeRole$1 = 'scope';
	
	var AxisRole$2 = 'axis';
	var AxisDomainRole = 'axis-domain';
	var AxisGridRole = 'axis-grid';
	var AxisLabelRole = 'axis-label';
	var AxisTickRole = 'axis-tick';
	var AxisTitleRole = 'axis-title';
	
	var LegendRole$2 = 'legend';
	var LegendEntryRole = 'legend-entry';
	var LegendGradientRole = 'legend-gradient';
	var LegendLabelRole = 'legend-label';
	var LegendSymbolRole = 'legend-symbol';
	var LegendTitleRole = 'legend-title';
	
	var TitleRole$1 = 'title';
	
	function encoder(_) {
	  return isObject(_) ? _ : {value: _};
	}
	
	function addEncode(object, name, value) {
	  if (value != null) {
	    object[name] = isObject(value) && !isArray(value) ? value : {value: value};
	    return 1;
	  } else {
	    return 0;
	  }
	}
	
	function extendEncode(encode, extra, skip) {
	  for (var name in extra) {
	    if (skip && skip.hasOwnProperty(name)) continue;
	    encode[name] = extend(encode[name] || {}, extra[name]);
	  }
	  return encode;
	}
	
	function encoders(encode, type, role, style, scope, params) {
	  var enc, key$$1;
	  params = params || {};
	  params.encoders = {$encode: (enc = {})};
	
	  encode = applyDefaults(encode, type, role, style, scope.config);
	
	  for (key$$1 in encode) {
	    enc[key$$1] = parseEncode(encode[key$$1], type, params, scope);
	  }
	
	  return params;
	}
	
	function applyDefaults(encode, type, role, style, config) {
	  var enter = {}, key$$1, skip, props;
	
	  // ignore legend and axis
	  if (role == 'legend' || String(role).indexOf('axis') === 0) {
	    role = null;
	  }
	
	  // resolve mark config
	  props = role === FrameRole$1 ? config.group
	    : (role === MarkRole) ? extend({}, config.mark, config[type])
	    : null;
	
	  for (key$$1 in props) {
	    // do not apply defaults if relevant fields are defined
	    skip = has(key$$1, encode)
	      || (key$$1 === 'fill' || key$$1 === 'stroke')
	      && (has('fill', encode) || has('stroke', encode));
	
	    if (!skip) enter[key$$1] = {value: props[key$$1]};
	  }
	
	  // resolve styles, apply with increasing precedence
	  array(style).forEach(function(name) {
	    var props = config.style && config.style[name];
	    for (var key$$1 in props) {
	      if (!has(key$$1, encode)) {
	        enter[key$$1] = {value: props[key$$1]};
	      }
	    }
	  });
	
	  encode = extend({}, encode); // defensive copy
	  encode.enter = extend(enter, encode.enter);
	
	  return encode;
	}
	
	function has(key$$1, encode) {
	  return encode && (
	    (encode.enter && encode.enter[key$$1]) ||
	    (encode.update && encode.update[key$$1])
	  );
	}
	
	var guideMark = function(type, role, style, key, dataRef, encode, extras) {
	  return {
	    type:  type,
	    name:  extras ? extras.name : undefined,
	    role:  role,
	    style: (extras && extras.style) || style,
	    key:   key,
	    from:  dataRef,
	    interactive: !!(extras && extras.interactive),
	    encode: extendEncode(encode, extras, Skip)
	  };
	};
	
	var GroupMark = 'group';
	var RectMark = 'rect';
	var RuleMark = 'rule';
	var SymbolMark = 'symbol';
	var TextMark = 'text';
	
	var legendGradient = function(spec, scale, config, userEncode) {
	  var zero = {value: 0},
	      encode = {}, enter, update;
	
	  encode.enter = enter = {
	    opacity: zero,
	    x: zero,
	    y: zero
	  };
	  addEncode(enter, 'width', config.gradientWidth);
	  addEncode(enter, 'height', config.gradientHeight);
	  addEncode(enter, 'stroke', config.gradientStrokeColor);
	  addEncode(enter, 'strokeWidth', config.gradientStrokeWidth);
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    x: zero,
	    y: zero,
	    fill: {gradient: scale},
	    opacity: {value: 1}
	  };
	  addEncode(update, 'width', config.gradientWidth);
	  addEncode(update, 'height', config.gradientHeight);
	
	  return guideMark(RectMark, LegendGradientRole, null, undefined, undefined, encode, userEncode);
	};
	
	var alignExpr = 'datum.' + Perc + '<=0?"left"'
	  + ':datum.' + Perc + '>=1?"right":"center"';
	
	var legendGradientLabels = function(spec, config, userEncode, dataRef) {
	  var zero = {value: 0},
	      encode = {}, enter, update;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'fill', config.labelColor);
	  addEncode(enter, 'font', config.labelFont);
	  addEncode(enter, 'fontSize', config.labelFontSize);
	  addEncode(enter, 'fontWeight', config.labelFontWeight);
	  addEncode(enter, 'baseline', config.gradientLabelBaseline);
	  addEncode(enter, 'limit', config.gradientLabelLimit);
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1},
	    text: {field: Label}
	  };
	
	  enter.x = update.x = {
	    field: Perc,
	    mult: config.gradientWidth
	  };
	
	  enter.y = update.y = {
	    value: config.gradientHeight,
	    offset: config.gradientLabelOffset
	  };
	
	  enter.align = update.align = {signal: alignExpr};
	
	  return guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Perc, dataRef, encode, userEncode);
	};
	
	var legendLabels = function(spec, config, userEncode, dataRef) {
	  var zero = {value: 0},
	      encode = {}, enter, update;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'align', config.labelAlign);
	  addEncode(enter, 'baseline', config.labelBaseline);
	  addEncode(enter, 'fill', config.labelColor);
	  addEncode(enter, 'font', config.labelFont);
	  addEncode(enter, 'fontSize', config.labelFontSize);
	  addEncode(enter, 'fontWeight', config.labelFontWeight);
	  addEncode(enter, 'limit', config.labelLimit);
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1},
	    text: {field: Label}
	  };
	
	  enter.x = update.x = {
	    field:  Offset,
	    offset: config.labelOffset
	  };
	
	  enter.y = update.y = {
	    field:  Size,
	    mult:   0.5,
	    offset: {
	      field: Total,
	      offset: {
	        field: {group: 'entryPadding'},
	        mult: {field: Index}
	      }
	    }
	  };
	
	  return guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode);
	};
	
	var legendSymbols = function(spec, config, userEncode, dataRef) {
	  var zero = {value: 0},
	      encode = {}, enter, update;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'shape', config.symbolType);
	  addEncode(enter, 'size', config.symbolSize);
	  addEncode(enter, 'strokeWidth', config.symbolStrokeWidth);
	  if (!spec.fill) {
	    addEncode(enter, 'fill', config.symbolFillColor);
	    addEncode(enter, 'stroke', config.symbolStrokeColor);
	  }
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1}
	  };
	
	  enter.x = update.x = {
	    field: Offset,
	    mult:  0.5
	  };
	
	  enter.y = update.y = {
	    field: Size,
	    mult:  0.5,
	    offset: {
	      field: Total,
	      offset: {
	        field: {group: 'entryPadding'},
	        mult: {field: Index}
	      }
	    }
	  };
	
	  LegendScales.forEach(function(scale) {
	    if (spec[scale]) {
	      update[scale] = enter[scale] = {scale: spec[scale], field: Value};
	    }
	  });
	
	  return guideMark(SymbolMark, LegendSymbolRole, null, Value, dataRef, encode, userEncode);
	};
	
	var legendTitle = function(spec, config, userEncode, dataRef) {
	  var zero = {value: 0},
	      title = spec.title,
	      encode = {}, enter;
	
	  encode.enter = enter = {
	    x: {field: {group: 'padding'}},
	    y: {field: {group: 'padding'}},
	    opacity: zero
	  };
	  addEncode(enter, 'align', config.titleAlign);
	  addEncode(enter, 'baseline', config.titleBaseline);
	  addEncode(enter, 'fill', config.titleColor);
	  addEncode(enter, 'font', config.titleFont);
	  addEncode(enter, 'fontSize', config.titleFontSize);
	  addEncode(enter, 'fontWeight', config.titleFontWeight);
	  addEncode(enter, 'limit', config.titleLimit);
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = {
	    opacity: {value: 1},
	    text: title && title.signal ? {signal: title.signal} : {value: title + ''}
	  };
	
	  return guideMark(TextMark, LegendTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);
	};
	
	var guideGroup = function(role, style, name, dataRef, interactive, encode, marks) {
	  return {
	    type: GroupMark,
	    name: name,
	    role: role,
	    style: style,
	    from: dataRef,
	    interactive: interactive,
	    encode: encode,
	    marks: marks
	  };
	};
	
	var role = function(spec) {
	  var role = spec.role || '';
	  return (!role.indexOf('axis') || !role.indexOf('legend'))
	    ? role
	    : spec.type === GroupMark ? ScopeRole$1 : (role || MarkRole);
	};
	
	var definition$1 = function(spec) {
	  return {
	    clip:        spec.clip || false,
	    interactive: spec.interactive === false ? false : true,
	    marktype:    spec.type,
	    name:        spec.name || undefined,
	    role:        spec.role || role(spec),
	    zindex:      +spec.zindex || undefined
	  };
	};
	
	/**
	 * Parse a data transform specification.
	 */
	var parseTransform = function(spec, scope) {
	  var def = definition(spec.type);
	  if (!def) error$1('Unrecognized transform type: ' + $(spec.type));
	
	  var t = entry(def.type.toLowerCase(), null, parseParameters(def, spec, scope));
	  if (spec.signal) scope.addSignal(spec.signal, scope.proxy(t));
	  t.metadata = def.metadata || {};
	
	  return t;
	};
	
	/**
	 * Parse all parameters of a data transform.
	 */
	function parseParameters(def, spec, scope) {
	  var params = {}, pdef, i, n;
	  for (i=0, n=def.params.length; i<n; ++i) {
	    pdef = def.params[i];
	    params[pdef.name] = parseParameter$1(pdef, spec, scope);
	  }
	  return params;
	}
	
	/**
	 * Parse a data transform parameter.
	 */
	function parseParameter$1(def, spec, scope) {
	  var type = def.type,
	      value$$1 = spec[def.name];
	
	  if (type === 'index') {
	    return parseIndexParameter(def, spec, scope);
	  } else if (value$$1 === undefined) {
	    if (def.required) {
	      error$1('Missing required ' + $(spec.type)
	          + ' parameter: ' + $(def.name));
	    }
	    return;
	  } else if (type === 'param') {
	    return parseSubParameters(def, spec, scope);
	  } else if (type === 'projection') {
	    return scope.projectionRef(spec[def.name]);
	  }
	
	  return def.array && !isSignal(value$$1)
	    ? value$$1.map(function(v) { return parameterValue(def, v, scope); })
	    : parameterValue(def, value$$1, scope);
	}
	
	/**
	 * Parse a single parameter value.
	 */
	function parameterValue(def, value$$1, scope) {
	  var type = def.type;
	
	  if (isSignal(value$$1)) {
	    return isExpr(type) ? error$1('Expression references can not be signals.')
	         : isField(type) ? scope.fieldRef(value$$1)
	         : isCompare(type) ? scope.compareRef(value$$1)
	         : scope.signalRef(value$$1.signal);
	  } else {
	    var expr = def.expr || isField(type);
	    return expr && outerExpr(value$$1) ? parseExpression(value$$1.expr, scope)
	         : expr && outerField(value$$1) ? fieldRef$1(value$$1.field)
	         : isExpr(type) ? parseExpression(value$$1, scope)
	         : isData(type) ? ref(scope.getData(value$$1).values)
	         : isField(type) ? fieldRef$1(value$$1)
	         : isCompare(type) ? scope.compareRef(value$$1)
	         : value$$1;
	  }
	}
	
	/**
	 * Parse parameter for accessing an index of another data set.
	 */
	function parseIndexParameter(def, spec, scope) {
	  if (!isString(spec.from)) {
	    error$1('Lookup "from" parameter must be a string literal.');
	  }
	  return scope.getData(spec.from).lookupRef(scope, spec.key);
	}
	
	/**
	 * Parse a parameter that contains one or more sub-parameter objects.
	 */
	function parseSubParameters(def, spec, scope) {
	  var value$$1 = spec[def.name];
	
	  if (def.array) {
	    if (!isArray(value$$1)) { // signals not allowed!
	      error$1('Expected an array of sub-parameters. Instead: ' + $(value$$1));
	    }
	    return value$$1.map(function(v) {
	      return parseSubParameter(def, v, scope);
	    });
	  } else {
	    return parseSubParameter(def, value$$1, scope);
	  }
	}
	
	/**
	 * Parse a sub-parameter object.
	 */
	function parseSubParameter(def, value$$1, scope) {
	  var params, pdef, k, i, n;
	
	  // loop over defs to find matching key
	  for (i=0, n=def.params.length; i<n; ++i) {
	    pdef = def.params[i];
	    for (k in pdef.key) {
	      if (pdef.key[k] !== value$$1[k]) { pdef = null; break; }
	    }
	    if (pdef) break;
	  }
	  // raise error if matching key not found
	  if (!pdef) error$1('Unsupported parameter: ' + $(value$$1));
	
	  // parse params, create Params transform, return ref
	  params = extend(parseParameters(pdef, value$$1, scope), pdef.key);
	  return ref(scope.add(Params$2(params)));
	}
	
	// -- Utilities -----
	
	function outerExpr(_) {
	  return _ && _.expr;
	}
	
	function outerField(_) {
	  return _ && _.field;
	}
	
	function isData(_) {
	  return _ === 'data';
	}
	
	function isExpr(_) {
	  return _ === 'expr';
	}
	
	function isField(_) {
	  return _ === 'field';
	}
	
	function isCompare(_) {
	  return _ === 'compare'
	}
	
	var parseData = function(from, group, scope) {
	  var facet, key$$1, op, dataRef, parent;
	
	  // if no source data, generate singleton datum
	  if (!from) {
	    dataRef = ref(scope.add(Collect$1(null, [{}])));
	  }
	
	  // if faceted, process facet specification
	  else if (facet = from.facet) {
	    if (!group) error$1('Only group marks can be faceted.');
	
	    // use pre-faceted source data, if available
	    if (facet.field != null) {
	      dataRef = parent = ref(scope.getData(facet.data).output);
	    } else {
	      // generate facet aggregates if no direct data specification
	      if (!from.data) {
	        op = parseTransform(extend({
	          type:    'aggregate',
	          groupby: array(facet.groupby)
	        }, facet.aggregate), scope);
	        op.params.key = scope.keyRef(facet.groupby);
	        op.params.pulse = ref(scope.getData(facet.data).output);
	        dataRef = parent = ref(scope.add(op));
	      } else {
	        parent = ref(scope.getData(from.data).aggregate);
	      }
	
	      key$$1 = scope.keyRef(facet.groupby, true);
	    }
	  }
	
	  // if not yet defined, get source data reference
	  if (!dataRef) {
	    dataRef = from.$ref ? from
	      : ref(scope.getData(from.data).output);
	  }
	
	  return {
	    key: key$$1,
	    pulse: dataRef,
	    parent: parent
	  };
	};
	
	function DataScope(scope, input, output, values, aggr) {
	  this.scope = scope;   // parent scope object
	  this.input = input;   // first operator in pipeline (tuple input)
	  this.output = output; // last operator in pipeline (tuple output)
	  this.values = values; // operator for accessing tuples (but not tuple flow)
	
	  // last aggregate in transform pipeline
	  this.aggregate = aggr;
	
	  // lookup table of field indices
	  this.index = {};
	}
	
	DataScope.fromEntries = function(scope, entries) {
	  var n = entries.length,
	      i = 1,
	      input  = entries[0],
	      values = entries[n-1],
	      output = entries[n-2],
	      aggr = null;
	
	  // add operator entries to this scope, wire up pulse chain
	  scope.add(entries[0]);
	  for (; i<n; ++i) {
	    entries[i].params.pulse = ref(entries[i-1]);
	    scope.add(entries[i]);
	    if (entries[i].type === 'aggregate') aggr = entries[i];
	  }
	
	  return new DataScope(scope, input, output, values, aggr);
	};
	
	var prototype$82 = DataScope.prototype;
	
	prototype$82.countsRef = function(scope, field$$1, sort) {
	  var ds = this,
	      cache = ds.counts || (ds.counts = {}),
	      k = fieldKey(field$$1), v, a, p;
	
	  if (k != null) {
	    scope = ds.scope;
	    v = cache[k];
	  }
	
	  if (!v) {
	    p = {
	      groupby: scope.fieldRef(field$$1, 'key'),
	      pulse: ref(ds.output)
	    };
	    if (sort && sort.field) addSortField(scope, p, sort);
	    a = scope.add(Aggregate$1(p));
	    v = scope.add(Collect$1({pulse: ref(a)}));
	    v = {agg: a, ref: ref(v)};
	    if (k != null) cache[k] = v;
	  } else if (sort && sort.field) {
	    addSortField(scope, v.agg.params, sort);
	  }
	
	  return v.ref;
	};
	
	function fieldKey(field$$1) {
	  return isString(field$$1) ? field$$1 : null;
	}
	
	function addSortField(scope, p, sort) {
	  var as = aggrField(sort.op, sort.field), s;
	
	  if (p.ops) {
	    for (var i=0, n=p.as.length; i<n; ++i) {
	      if (p.as[i] === as) return;
	    }
	  } else {
	    p.ops = ['count'];
	    p.fields = [null];
	    p.as = ['count'];
	  }
	  if (sort.op) {
	    p.ops.push((s=sort.op.signal) ? scope.signalRef(s) : sort.op);
	    p.fields.push(scope.fieldRef(sort.field));
	    p.as.push(as);
	  }
	}
	
	function cache(scope, ds, name, optype, field$$1, counts, index) {
	  var cache = ds[name] || (ds[name] = {}),
	      sort = sortKey(counts),
	      k = fieldKey(field$$1), v, op;
	
	  if (k != null) {
	    scope = ds.scope;
	    k = k + (sort ? '|' + sort : '');
	    v = cache[k];
	  }
	
	  if (!v) {
	    var params = counts
	      ? {field: keyFieldRef, pulse: ds.countsRef(scope, field$$1, counts)}
	      : {field: scope.fieldRef(field$$1), pulse: ref(ds.output)};
	    if (sort) params.sort = scope.sortRef(counts);
	    op = scope.add(entry(optype, undefined, params));
	    if (index) ds.index[field$$1] = op;
	    v = ref(op);
	    if (k != null) cache[k] = v;
	  }
	  return v;
	}
	
	prototype$82.tuplesRef = function() {
	  return ref(this.values);
	};
	
	prototype$82.extentRef = function(scope, field$$1) {
	  return cache(scope, this, 'extent', 'extent', field$$1, false);
	};
	
	prototype$82.domainRef = function(scope, field$$1) {
	  return cache(scope, this, 'domain', 'values', field$$1, false);
	};
	
	prototype$82.valuesRef = function(scope, field$$1, sort) {
	  return cache(scope, this, 'vals', 'values', field$$1, sort || true);
	};
	
	prototype$82.lookupRef = function(scope, field$$1) {
	  return cache(scope, this, 'lookup', 'tupleindex', field$$1, false);
	};
	
	prototype$82.indataRef = function(scope, field$$1) {
	  return cache(scope, this, 'indata', 'tupleindex', field$$1, true, true);
	};
	
	var parseFacet = function(spec, scope, group) {
	  var facet = spec.from.facet,
	      name = facet.name,
	      data = ref(scope.getData(facet.data).output),
	      subscope, source, values, op;
	
	  if (!facet.name) {
	    error$1('Facet must have a name: ' + $(facet));
	  }
	  if (!facet.data) {
	    error$1('Facet must reference a data set: ' + $(facet));
	  }
	
	  if (facet.field) {
	    op = scope.add(PreFacet$1({
	      field: scope.fieldRef(facet.field),
	      pulse: data
	    }));
	  } else if (facet.groupby) {
	    op = scope.add(Facet$1({
	      key:   scope.keyRef(facet.groupby),
	      group: ref(scope.proxy(group.parent)),
	      pulse: data
	    }));
	  } else {
	    error$1('Facet must specify groupby or field: ' + $(facet));
	  }
	
	  // initialize facet subscope
	  subscope = scope.fork();
	  source = subscope.add(Collect$1());
	  values = subscope.add(Sieve$1({pulse: ref(source)}));
	  subscope.addData(name, new DataScope(subscope, source, source, values));
	  subscope.addSignal('parent', null);
	
	  // parse faceted subflow
	  op.params.subflow = {
	    $subflow: parseSpec(spec, subscope).toRuntime()
	  };
	};
	
	var parseSubflow = function(spec, scope, input) {
	  var op = scope.add(PreFacet$1({pulse: input.pulse})),
	      subscope = scope.fork();
	
	  subscope.add(Sieve$1());
	  subscope.addSignal('parent', null);
	
	  // parse group mark subflow
	  op.params.subflow = {
	    $subflow: parseSpec(spec, subscope).toRuntime()
	  };
	};
	
	var parseTrigger = function(spec, scope, name) {
	  var remove = spec.remove,
	      insert = spec.insert,
	      toggle = spec.toggle,
	      modify = spec.modify,
	      values = spec.values,
	      op = scope.add(operator()),
	      update, expr;
	
	  update = 'if(' + spec.trigger + ',modify("'
	    + name + '",'
	    + [insert, remove, toggle, modify, values]
	        .map(function(_) { return _ == null ? 'null' : _; })
	        .join(',')
	    + '),0)';
	
	  expr = parseExpression(update, scope);
	  op.update = expr.$expr;
	  op.params = expr.$params;
	};
	
	var parseMark = function(spec, scope) {
	  var role$$1 = role(spec),
	      group = spec.type === GroupMark,
	      facet = spec.from && spec.from.facet,
	      layout = spec.layout || role$$1 === ScopeRole$1 || role$$1 === FrameRole$1,
	      nested = role$$1 === MarkRole || layout || facet,
	      overlap = spec.overlap,
	      ops, op, input, store, bound, render, sieve, name,
	      joinRef, markRef, encodeRef, layoutRef, boundRef;
	
	  // resolve input data
	  input = parseData(spec.from, group, scope);
	
	  // data join to map tuples to visual items
	  op = scope.add(DataJoin$1({
	    key:   input.key || (spec.key ? fieldRef$1(spec.key) : undefined),
	    pulse: input.pulse,
	    clean: !group
	  }));
	  joinRef = ref(op);
	
	  // collect visual items
	  op = store = scope.add(Collect$1({pulse: joinRef}));
	
	  // connect visual items to scenegraph
	  op = scope.add(Mark$1({
	    markdef:   definition$1(spec),
	    context:   {$context: true},
	    groups:    scope.lookup(),
	    parent:    scope.signals.parent ? scope.signalRef('parent') : null,
	    index:     scope.markpath(),
	    pulse:     ref(op)
	  }));
	  markRef = ref(op);
	
	  // add visual encoders
	  op = scope.add(Encode$1(
	    encoders(spec.encode, spec.type, role$$1, spec.style, scope, {pulse: markRef})
	  ));
	
	  // monitor parent marks to propagate changes
	  op.params.parent = scope.encode();
	
	  // add post-encoding transforms, if defined
	  if (spec.transform) {
	    spec.transform.forEach(function(_) {
	      var tx = parseTransform(_, scope);
	      if (tx.metadata.generates || tx.metadata.changes) {
	        error$1('Mark transforms should not generate new data.');
	      }
	      tx.params.pulse = ref(op);
	      scope.add(op = tx);
	    });
	  }
	
	  // if item sort specified, perform post-encoding
	  if (spec.sort) {
	    op = scope.add(SortItems$1({
	      sort:  scope.compareRef(spec.sort),
	      pulse: ref(op)
	    }));
	  }
	
	  encodeRef = ref(op);
	
	  // add view layout operator if needed
	  if (facet || layout) {
	    layout = scope.add(ViewLayout$1({
	      layout:       scope.objectProperty(spec.layout),
	      legendMargin: scope.config.legendMargin,
	      mark:         markRef,
	      pulse:        encodeRef
	    }));
	    layoutRef = ref(layout);
	  }
	
	  // compute bounding boxes
	  bound = scope.add(Bound$1({mark: markRef, pulse: layoutRef || encodeRef}));
	  boundRef = ref(bound);
	
	  // if group mark, recurse to parse nested content
	  if (group) {
	    // juggle layout & bounds to ensure they run *after* any faceting transforms
	    if (nested) { ops = scope.operators; ops.pop(); if (layout) ops.pop(); }
	
	    scope.pushState(encodeRef, layoutRef || boundRef, joinRef);
	    facet ? parseFacet(spec, scope, input)          // explicit facet
	        : nested ? parseSubflow(spec, scope, input) // standard mark group
	        : parseSpec(spec, scope); // guide group, we can avoid nested scopes
	    scope.popState();
	
	    if (nested) { if (layout) ops.push(layout); ops.push(bound); }
	  }
	
	  if (overlap) {
	    op = {
	      method: overlap.method === true ? 'parity' : overlap.method,
	      pulse:  boundRef
	    };
	    if (overlap.order) {
	      op.sort = scope.compareRef({field: overlap.order});
	    }
	    if (overlap.bound) {
	      op.boundScale = scope.scaleRef(overlap.bound.scale);
	      op.boundOrient = overlap.bound.orient;
	      op.boundTolerance = overlap.bound.tolerance;
	    }
	    boundRef = ref(scope.add(Overlap$1(op)));
	  }
	
	  // render / sieve items
	  render = scope.add(Render$1({pulse: boundRef}));
	  sieve = scope.add(Sieve$1({pulse: ref(render)}, undefined, scope.parent()));
	
	  // if mark is named, make accessible as reactive geometry
	  // add trigger updates if defined
	  if (spec.name != null) {
	    name = spec.name;
	    scope.addData(name, new DataScope(scope, store, render, sieve));
	    if (spec.on) spec.on.forEach(function(on) {
	      if (on.insert || on.remove || on.toggle) {
	        error$1('Marks only support modify triggers.');
	      }
	      parseTrigger(on, scope, name);
	    });
	  }
	};
	
	var parseLegend = function(spec, scope) {
	  var type = spec.type || 'symbol',
	      config = scope.config.legend,
	      encode = spec.encode || {},
	      legendEncode = encode.legend || {},
	      name = legendEncode.name || undefined,
	      interactive = !!legendEncode.interactive,
	      style = legendEncode.style,
	      datum, dataRef, entryRef, group, title,
	      entryEncode, params, children;
	
	  // resolve 'canonical' scale name
	  var scale = spec.size || spec.shape || spec.fill || spec.stroke
	           || spec.strokeDash || spec.opacity;
	
	  if (!scale) {
	    error$1('Missing valid scale for legend.');
	  }
	
	  // single-element data source for axis group
	  datum = {
	    orient: value(spec.orient, config.orient),
	    title:  spec.title != null
	  };
	  dataRef = ref(scope.add(Collect$1(null, [datum])));
	
	  // encoding properties for legend group
	
	  legendEncode = extendEncode({
	    enter: legendEnter(config),
	    update: {
	      offset:        encoder(value(spec.offset, config.offset)),
	      padding:       encoder(value(spec.padding, config.padding)),
	      titlePadding:  encoder(value(spec.titlePadding, config.titlePadding))
	    }
	  }, legendEncode, Skip);
	
	  // encoding properties for legend entry sub-group
	  entryEncode = {
	    update: {
	      x: {field: {group: 'padding'}},
	      y: {field: {group: 'padding'}},
	      entryPadding: encoder(value(spec.entryPadding, config.entryPadding))
	    }
	  };
	
	  if (type === 'gradient') {
	    // data source for gradient labels
	    entryRef = ref(scope.add(LegendEntries$1({
	      type:   'gradient',
	      scale:  scope.scaleRef(scale),
	      count:  scope.objectProperty(spec.tickCount),
	      values: scope.objectProperty(spec.values),
	      formatSpecifier: scope.property(spec.format)
	    })));
	
	    children = [
	      legendGradient(spec, scale, config, encode.gradient),
	      legendGradientLabels(spec, config, encode.labels, entryRef)
	    ];
	  }
	
	  else {
	    // data source for legend entries
	    entryRef = ref(scope.add(LegendEntries$1(params = {
	      scale:  scope.scaleRef(scale),
	      count:  scope.objectProperty(spec.tickCount),
	      values: scope.objectProperty(spec.values),
	      formatSpecifier: scope.property(spec.format)
	    })));
	
	    children = [
	      legendSymbols(spec, config, encode.symbols, entryRef),
	      legendLabels(spec, config, encode.labels, entryRef)
	    ];
	
	    params.size = sizeExpression(spec, scope, children);
	  }
	
	  // generate legend marks
	  children = [
	    guideGroup(LegendEntryRole, null, null, dataRef, interactive, entryEncode, children)
	  ];
	
	  // include legend title if defined
	  if (datum.title) {
	    title = legendTitle(spec, config, encode.title, dataRef);
	    entryEncode.update.y.offset = {
	      field: {group: 'titlePadding'},
	      offset: getValue$1(scope, title.encode, 'fontSize', GuideTitleStyle)
	    };
	    children.push(title);
	  }
	
	  // build legend specification
	  group = guideGroup(LegendRole$2, style, name, dataRef, interactive, legendEncode, children);
	  if (spec.zindex) group.zindex = spec.zindex;
	
	  // parse legend specification
	  return parseMark(group, scope);
	};
	
	function sizeExpression(spec, scope, marks) {
	  var fontSize = getValue$1(scope, marks[1].encode, 'fontSize', GuideLabelStyle);
	  if (spec.size) {
	    return {$expr: 'Math.max(Math.ceil(Math.sqrt(_.scale(datum))),' + fontSize + ')'};
	  } else {
	    var symbolSize = getValue$1(scope, marks[0].encode, 'size');
	    return Math.max(Math.ceil(Math.sqrt(symbolSize)), fontSize);
	  }
	}
	
	function legendEnter(config) {
	  var enter = {},
	      count = addEncode(enter, 'fill', config.fillColor)
	            + addEncode(enter, 'stroke', config.strokeColor)
	            + addEncode(enter, 'strokeWidth', config.strokeWidth)
	            + addEncode(enter, 'strokeDash', config.strokeDash)
	            + addEncode(enter, 'cornerRadius', config.cornerRadius);
	  return count ? enter : undefined;
	}
	
	function getValue$1(scope, encode, name, style) {
	  var v = encode && (
	    (encode.update && encode.update[name]) ||
	    (encode.enter && encode.enter[name])
	  );
	  return +(v ? v.value // TODO support signal?
	    : (style && (v = scope.config.style[style]) && v[name]));
	}
	
	var parseTitle = function(spec, scope) {
	  spec = isString(spec) ? {text: spec} : spec;
	
	  var config = scope.config.title,
	      encode = extend({}, spec.encode),
	      datum, dataRef, title;
	
	  // single-element data source for group title
	  datum = {
	    orient: spec.orient != null ? spec.orient : config.orient
	  };
	  dataRef = ref(scope.add(Collect$1(null, [datum])));
	
	  // build title specification
	  encode.name = spec.name;
	  encode.interactive = spec.interactive;
	  title = buildTitle(spec, config, encode, dataRef);
	  if (spec.zindex) title.zindex = spec.zindex;
	
	  // parse title specification
	  return parseMark(title, scope);
	};
	
	function buildTitle(spec, config, userEncode, dataRef) {
	  var title = spec.text,
	      orient = spec.orient || config.orient,
	      anchor = spec.anchor || config.anchor,
	      sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,
	      horizontal = (orient === Top$1 || orient === Bottom$1),
	      extent = {group: (horizontal ? 'width' : 'height')},
	      encode = {}, enter, update, pos, opp, mult, align;
	
	  encode.enter = enter = {
	    opacity: {value: 0}
	  };
	  addEncode(enter, 'fill', config.color);
	  addEncode(enter, 'font', config.font);
	  addEncode(enter, 'fontSize', config.fontSize);
	  addEncode(enter, 'fontWeight', config.fontWeight);
	
	  encode.exit = {
	    opacity: {value: 0}
	  };
	
	  encode.update = update = {
	    opacity: {value: 1},
	    text: isObject(title) ? title : {value: title + ''},
	    offset: encoder((spec.offset != null ? spec.offset : config.offset) || 0)
	  };
	
	  if (anchor === 'start') {
	    mult = 0;
	    align = 'left';
	  } else {
	    if (anchor === 'end') {
	      mult = 1;
	      align = 'right';
	    } else {
	      mult = 0.5;
	      align = 'center';
	    }
	  }
	
	  pos = {field: extent, mult: mult};
	
	  opp = sign < 0 ? {value: 0}
	    : horizontal ? {field: {group: 'height'}}
	    : {field: {group: 'width'}};
	
	  if (horizontal) {
	    update.x = pos;
	    update.y = opp;
	    update.angle = {value: 0};
	    update.baseline = {value: orient === Top$1 ? 'bottom' : 'top'};
	  } else {
	    update.x = opp;
	    update.y = pos;
	    update.angle = {value: sign * 90};
	    update.baseline = {value: 'bottom'};
	  }
	  update.align = {value: align};
	  update.limit = {field: extent};
	
	  addEncode(update, 'angle', config.angle);
	  addEncode(update, 'baseline', config.baseline);
	  addEncode(update, 'limit', config.limit);
	
	  return guideMark(TextMark, TitleRole$1, spec.style || GroupTitleStyle, null, dataRef, encode, userEncode);
	}
	
	function parseData$1(data, scope) {
	  var transforms = [];
	
	  if (data.transform) {
	    data.transform.forEach(function(tx) {
	      transforms.push(parseTransform(tx, scope));
	    });
	  }
	
	  if (data.on) {
	    data.on.forEach(function(on) {
	      parseTrigger(on, scope, data.name);
	    });
	  }
	
	  scope.addDataPipeline(data.name, analyze(data, scope, transforms));
	}
	
	/**
	 * Analyze a data pipeline, add needed operators.
	 */
	function analyze(data, scope, ops) {
	  // POSSIBLE TODOs:
	  // - error checking for treesource on tree operators (BUT what if tree is upstream?)
	  // - this is local analysis, perhaps some tasks better for global analysis...
	
	  var output = [],
	      source = null,
	      modify = false,
	      generate = false,
	      upstream, i, n, t, m;
	
	  if (data.values) {
	    // hard-wired input data set
	    output.push(source = collect({$ingest: data.values, $format: data.format}));
	  } else if (data.url) {
	    // load data from external source
	    output.push(source = collect({$request: data.url, $format: data.format}));
	  } else if (data.source) {
	    // derives from one or more other data sets
	    source = upstream = array(data.source).map(function(d) {
	      return ref(scope.getData(d).output);
	    });
	    output.push(null); // populate later
	  }
	
	  // scan data transforms, add collectors as needed
	  for (i=0, n=ops.length; i<n; ++i) {
	    t = ops[i];
	    m = t.metadata;
	
	    if (!source && !m.source) {
	      output.push(source = collect());
	    }
	    output.push(t);
	
	    if (m.generates) generate = true;
	    if (m.modifies && !generate) modify = true;
	
	    if (m.source) source = t;
	    else if (m.changes) source = null;
	  }
	
	  if (upstream) {
	    n = upstream.length - 1;
	    output[0] = Relay$1({
	      derive: modify,
	      pulse: n ? upstream : upstream[0]
	    });
	    if (modify || n) {
	      // collect derived and multi-pulse tuples
	      output.splice(1, 0, collect());
	    }
	  }
	
	  if (!source) output.push(collect());
	  output.push(Sieve$1({}));
	  return output;
	}
	
	function collect(values) {
	  var s = Collect$1({}, values);
	  s.metadata = {source: true};
	  return s;
	}
	
	var axisConfig = function(spec, scope) {
	  var config = scope.config,
	      orient = spec.orient,
	      xy = (orient === Top$1 || orient === Bottom$1) ? config.axisX : config.axisY,
	      or = config['axis' + orient[0].toUpperCase() + orient.slice(1)],
	      band = scope.scaleType(spec.scale) === 'band' && config.axisBand;
	
	  return (xy || or || band)
	    ? extend({}, config.axis, xy, or, band)
	    : config.axis;
	};
	
	var axisDomain = function(spec, config, userEncode, dataRef) {
	  var orient = spec.orient,
	      zero = {value: 0},
	      encode = {}, enter, update, u, u2, v;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'stroke', config.domainColor);
	  addEncode(enter, 'strokeWidth', config.domainWidth);
	
	  encode.exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1}
	  };
	
	  if (orient === Top$1 || orient === Bottom$1) {
	    u = 'x';
	    v = 'y';
	  } else {
	    u = 'y';
	    v = 'x';
	  }
	  u2 = u + '2';
	
	  enter[v] = zero;
	  update[u] = enter[u] = position(spec, 0);
	  update[u2] = enter[u2] = position(spec, 1);
	
	  return guideMark(RuleMark, AxisDomainRole, null, null, dataRef, encode, userEncode);
	};
	
	function position(spec, pos) {
	  return {scale: spec.scale, range: pos};
	}
	
	var axisGrid = function(spec, config, userEncode, dataRef) {
	  var orient = spec.orient,
	      vscale = spec.gridScale,
	      sign = (orient === Left$1 || orient === Top$1) ? 1 : -1,
	      offset = sign * spec.offset || 0,
	      zero = {value: 0},
	      encode = {}, enter, exit, update, tickPos, u, v, v2, s;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'stroke', config.gridColor);
	  addEncode(enter, 'strokeWidth', config.gridWidth);
	  addEncode(enter, 'strokeDash', config.gridDash);
	
	  encode.exit = exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {};
	  addEncode(update, 'opacity', config.gridOpacity);
	
	  tickPos = {
	    scale:  spec.scale,
	    field:  Value,
	    band:   config.bandPosition,
	    round:  config.tickRound,
	    extra:  config.tickExtra,
	    offset: config.tickOffset
	  };
	
	  if (orient === Top$1 || orient === Bottom$1) {
	    u = 'x';
	    v = 'y';
	    s = 'height';
	  } else {
	    u = 'y';
	    v = 'x';
	    s = 'width';
	  }
	  v2 = v + '2';
	
	  update[u] = enter[u] = exit[u] = tickPos;
	
	  if (vscale) {
	    enter[v] = {scale: vscale, range: 0, mult: sign, offset: offset};
	    update[v2] = enter[v2] = {scale: vscale, range: 1, mult: sign, offset: offset};
	  } else {
	    enter[v] = {value: offset};
	    update[v2] = enter[v2] = {signal: s, mult: sign, offset: offset};
	  }
	
	  return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);
	};
	
	var axisTicks = function(spec, config, userEncode, dataRef, size) {
	  var orient = spec.orient,
	      sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,
	      zero = {value: 0},
	      encode = {}, enter, exit, update, tickSize, tickPos;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'stroke', config.tickColor);
	  addEncode(enter, 'strokeWidth', config.tickWidth);
	
	  encode.exit = exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1}
	  };
	
	  tickSize = encoder(size);
	  tickSize.mult = sign;
	
	  tickPos = {
	    scale:  spec.scale,
	    field:  Value,
	    band:   config.bandPosition,
	    round:  config.tickRound,
	    extra:  config.tickExtra,
	    offset: config.tickOffset
	  };
	
	  if (orient === Top$1 || orient === Bottom$1) {
	    update.y = enter.y = zero;
	    update.y2 = enter.y2 = tickSize;
	    update.x = enter.x = exit.x = tickPos;
	  } else {
	    update.x = enter.x = zero;
	    update.x2 = enter.x2 = tickSize;
	    update.y = enter.y = exit.y = tickPos;
	  }
	
	  return guideMark(RuleMark, AxisTickRole, null, Value, dataRef, encode, userEncode);
	};
	
	function flushExpr(scale, threshold, a, b, c) {
	  return {
	    signal: 'flush(range("' + scale + '"), '
	      + 'scale("' + scale + '", datum.value), '
	      + threshold + ',' + a + ',' + b + ',' + c + ')'
	  };
	}
	
	var axisLabels = function(spec, config, userEncode, dataRef, size) {
	  var orient = spec.orient,
	      sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,
	      scale = spec.scale,
	      pad = value(spec.labelPadding, config.labelPadding),
	      bound = value(spec.labelBound, config.labelBound),
	      flush = value(spec.labelFlush, config.labelFlush),
	      flushOn = flush != null && flush !== false && (flush = +flush) === flush,
	      flushOffset = +value(spec.labelFlushOffset, config.labelFlushOffset),
	      overlap = value(spec.labelOverlap, config.labelOverlap),
	      zero = {value: 0},
	      encode = {}, enter, exit, update, tickSize, tickPos;
	
	  encode.enter = enter = {
	    opacity: zero
	  };
	  addEncode(enter, 'angle', config.labelAngle);
	  addEncode(enter, 'fill', config.labelColor);
	  addEncode(enter, 'font', config.labelFont);
	  addEncode(enter, 'fontSize', config.labelFontSize);
	  addEncode(enter, 'fontWeight', config.labelFontWeight);
	  addEncode(enter, 'limit', config.labelLimit);
	
	  encode.exit = exit = {
	    opacity: zero
	  };
	
	  encode.update = update = {
	    opacity: {value: 1},
	    text: {field: Label}
	  };
	
	  tickSize = encoder(size);
	  tickSize.mult = sign;
	  tickSize.offset = encoder(pad);
	  tickSize.offset.mult = sign;
	
	  tickPos = {
	    scale:  scale,
	    field:  Value,
	    band:   0.5,
	    offset: config.tickOffset
	  };
	
	  if (orient === Top$1 || orient === Bottom$1) {
	    update.y = enter.y = tickSize;
	    update.x = enter.x = exit.x = tickPos;
	    addEncode(update, 'align', flushOn
	      ? flushExpr(scale, flush, '"left"', '"right"', '"center"')
	      : 'center');
	    if (flushOn && flushOffset) {
	      addEncode(update, 'dx', flushExpr(scale, flush, -flushOffset, flushOffset, 0));
	    }
	
	    addEncode(update, 'baseline', orient === Top$1 ? 'bottom' : 'top');
	  } else {
	    update.x = enter.x = tickSize;
	    update.y = enter.y = exit.y = tickPos;
	    addEncode(update, 'align', orient === Right$1 ? 'left' : 'right');
	    addEncode(update, 'baseline', flushOn
	      ? flushExpr(scale, flush, '"bottom"', '"top"', '"middle"')
	      : 'middle');
	    if (flushOn && flushOffset) {
	      addEncode(update, 'dy', flushExpr(scale, flush, flushOffset, -flushOffset, 0));
	    }
	  }
	
	  spec = guideMark(TextMark, AxisLabelRole, GuideLabelStyle, Value, dataRef, encode, userEncode);
	  if (overlap || bound) {
	    spec.overlap = {
	      method: overlap,
	      order:  'datum.index',
	      bound:  bound ? {scale: scale, orient: orient, tolerance: +bound} : null
	    };
	  }
	  return spec;
	};
	
	var axisTitle = function(spec, config, userEncode, dataRef) {
	  var orient = spec.orient,
	      title = spec.title,
	      sign = (orient === Left$1 || orient === Top$1) ? -1 : 1,
	      horizontal = (orient === Top$1 || orient === Bottom$1),
	      encode = {}, enter, update, titlePos;
	
	  encode.enter = enter = {
	    opacity: {value: 0}
	  };
	  addEncode(enter, 'align', config.titleAlign);
	  addEncode(enter, 'fill', config.titleColor);
	  addEncode(enter, 'font', config.titleFont);
	  addEncode(enter, 'fontSize', config.titleFontSize);
	  addEncode(enter, 'fontWeight', config.titleFontWeight);
	  addEncode(enter, 'limit', config.titleLimit);
	
	  encode.exit = {
	    opacity: {value: 0}
	  };
	
	  encode.update = update = {
	    opacity: {value: 1},
	    text: title && title.signal ? {signal: title.signal} : {value: title + ''}
	  };
	
	  titlePos = {
	    scale: spec.scale,
	    range: 0.5
	  };
	
	  if (horizontal) {
	    update.x = titlePos;
	    update.angle = {value: 0};
	    update.baseline = {value: orient === Top$1 ? 'bottom' : 'top'};
	  } else {
	    update.y = titlePos;
	    update.angle = {value: sign * 90};
	    update.baseline = {value: 'bottom'};
	  }
	
	  addEncode(update, 'angle', config.titleAngle);
	  addEncode(update, 'baseline', config.titleBaseline);
	
	  !addEncode(update, 'x', config.titleX)
	    && horizontal && !has('x', userEncode)
	    && (encode.enter.auto = {value: true});
	
	  !addEncode(update, 'y', config.titleY)
	    && !horizontal && !has('y', userEncode)
	    && (encode.enter.auto = {value: true});
	
	  return guideMark(TextMark, AxisTitleRole, GuideTitleStyle, null, dataRef, encode, userEncode);
	};
	
	var parseAxis = function(spec, scope) {
	  var config = axisConfig(spec, scope),
	      encode = spec.encode || {},
	      axisEncode = encode.axis || {},
	      name = axisEncode.name || undefined,
	      interactive = !!axisEncode.interactive,
	      style = axisEncode.style,
	      datum, dataRef, ticksRef, size, group, children;
	
	  // single-element data source for axis group
	  datum = {
	    orient: spec.orient,
	    ticks:  !!value(spec.ticks, config.ticks),
	    labels: !!value(spec.labels, config.labels),
	    grid:   !!value(spec.grid, config.grid),
	    domain: !!value(spec.domain, config.domain),
	    title:  !!value(spec.title, false)
	  };
	  dataRef = ref(scope.add(Collect$1({}, [datum])));
	
	  // encoding properties for axis group item
	  axisEncode = extendEncode({
	    update: {
	      range:        {signal: 'abs(span(range("' + spec.scale + '")))'},
	      offset:       encoder(value(spec.offset, 0)),
	      position:     encoder(value(spec.position, 0)),
	      titlePadding: encoder(value(spec.titlePadding, config.titlePadding)),
	      minExtent:    encoder(value(spec.minExtent, config.minExtent)),
	      maxExtent:    encoder(value(spec.maxExtent, config.maxExtent))
	    }
	  }, encode.axis, Skip);
	
	  // data source for axis ticks
	  ticksRef = ref(scope.add(AxisTicks$1({
	    scale:  scope.scaleRef(spec.scale),
	    extra:  config.tickExtra,
	    count:  scope.objectProperty(spec.tickCount),
	    values: scope.objectProperty(spec.values),
	    formatSpecifier: scope.property(spec.format)
	  })));
	
	  // generate axis marks
	  children = [];
	
	  // include axis gridlines if requested
	  if (datum.grid) {
	    children.push(axisGrid(spec, config, encode.grid, ticksRef));
	  }
	
	  // include axis ticks if requested
	  if (datum.ticks) {
	    size = value(spec.tickSize, config.tickSize);
	    children.push(axisTicks(spec, config, encode.ticks, ticksRef, size));
	  }
	
	  // include axis labels if requested
	  if (datum.labels) {
	    size = datum.ticks ? size : 0;
	    children.push(axisLabels(spec, config, encode.labels, ticksRef, size));
	  }
	
	  // include axis domain path if requested
	  if (datum.domain) {
	    children.push(axisDomain(spec, config, encode.domain, dataRef));
	  }
	
	  // include axis title if defined
	  if (datum.title) {
	    children.push(axisTitle(spec, config, encode.title, dataRef));
	  }
	
	  // build axis specification
	  group = guideGroup(AxisRole$2, style, name, dataRef, interactive, axisEncode, children);
	  if (spec.zindex) group.zindex = spec.zindex;
	
	  // parse axis specification
	  return parseMark(group, scope);
	};
	
	var parseSpec = function(spec, scope, preprocessed) {
	  var signals = array(spec.signals),
	      scales = array(spec.scales);
	
	  if (!preprocessed) signals.forEach(function(_) {
	    parseSignal(_, scope);
	  });
	
	  array(spec.projections).forEach(function(_) {
	    parseProjection(_, scope);
	  });
	
	  scales.forEach(function(_) {
	    initScale(_, scope);
	  });
	
	  array(spec.data).forEach(function(_) {
	    parseData$1(_, scope);
	  });
	
	  scales.forEach(function(_) {
	    parseScale(_, scope);
	  });
	
	  signals.forEach(function(_) {
	    parseSignalUpdates(_, scope);
	  });
	
	  array(spec.axes).forEach(function(_) {
	    parseAxis(_, scope);
	  });
	
	  array(spec.marks).forEach(function(_) {
	    parseMark(_, scope);
	  });
	
	  array(spec.legends).forEach(function(_) {
	    parseLegend(_, scope);
	  });
	
	  if (spec.title) {
	    parseTitle(spec.title, scope);
	  }
	
	  scope.parseLambdas();
	  return scope;
	};
	
	var defined = toSet(['width', 'height', 'padding', 'autosize']);
	
	function parseView(spec, scope) {
	  var config = scope.config,
	      op, input, encode, parent, root;
	
	  scope.background = spec.background || config.background;
	  scope.eventConfig = config.events;
	  root = ref(scope.root = scope.add(operator()));
	  scope.addSignal('width', spec.width || 0);
	  scope.addSignal('height', spec.height || 0);
	  scope.addSignal('padding', parsePadding(spec.padding, config));
	  scope.addSignal('autosize', parseAutosize(spec.autosize, config));
	
	  array(spec.signals).forEach(function(_) {
	    if (!defined[_.name]) parseSignal(_, scope);
	  });
	
	  // Store root group item
	  input = scope.add(Collect$1());
	
	  // Encode root group item
	  encode = extendEncode({
	    enter: { x: {value: 0}, y: {value: 0} },
	    update: { width: {signal: 'width'}, height: {signal: 'height'} }
	  }, spec.encode);
	
	  encode = scope.add(Encode$1(
	    encoders(encode, GroupMark, FrameRole$1, spec.style, scope, {pulse: ref(input)}))
	  );
	
	  // Perform view layout
	  parent = scope.add(ViewLayout$1({
	    layout:       scope.objectProperty(spec.layout),
	    legendMargin: config.legendMargin,
	    autosize:     scope.signalRef('autosize'),
	    mark:         root,
	    pulse:        ref(encode)
	  }));
	  scope.operators.pop();
	
	  // Parse remainder of specification
	  scope.pushState(ref(encode), ref(parent), null);
	  parseSpec(spec, scope, true);
	  scope.operators.push(parent);
	
	  // Bound / render / sieve root item
	  op = scope.add(Bound$1({mark: root, pulse: ref(parent)}));
	  op = scope.add(Render$1({pulse: ref(op)}));
	  op = scope.add(Sieve$1({pulse: ref(op)}));
	
	  // Track metadata for root item
	  scope.addData('root', new DataScope(scope, input, input, op));
	
	  return scope;
	}
	
	function Scope(config) {
	  this.config = config;
	
	  this.bindings = [];
	  this.field = {};
	  this.signals = {};
	  this.lambdas = {};
	  this.scales = {};
	  this.events = {};
	  this.data = {};
	
	  this.streams = [];
	  this.updates = [];
	  this.operators = [];
	  this.background = null;
	  this.eventConfig = null;
	
	  this._id = 0;
	  this._subid = 0;
	  this._nextsub = [0];
	
	  this._parent = [];
	  this._encode = [];
	  this._lookup = [];
	  this._markpath = [];
	}
	
	function Subscope(scope) {
	  this.config = scope.config;
	
	  this.field = Object.create(scope.field);
	  this.signals = Object.create(scope.signals);
	  this.lambdas = Object.create(scope.lambdas);
	  this.scales = Object.create(scope.scales);
	  this.events = Object.create(scope.events);
	  this.data = Object.create(scope.data);
	
	  this.streams = [];
	  this.updates = [];
	  this.operators = [];
	
	  this._id = 0;
	  this._subid = ++scope._nextsub[0];
	  this._nextsub = scope._nextsub;
	
	  this._parent = scope._parent.slice();
	  this._encode = scope._encode.slice();
	  this._lookup = scope._lookup.slice();
	  this._markpath = scope._markpath;
	}
	
	var prototype$83 = Scope.prototype = Subscope.prototype;
	
	// ----
	
	prototype$83.fork = function() {
	  return new Subscope(this);
	};
	
	prototype$83.toRuntime = function() {
	  this.finish();
	  return {
	    background:  this.background,
	    operators:   this.operators,
	    streams:     this.streams,
	    updates:     this.updates,
	    bindings:    this.bindings,
	    eventConfig: this.eventConfig
	  };
	};
	
	prototype$83.id = function() {
	  return (this._subid ? this._subid + ':' : 0) + this._id++;
	};
	
	prototype$83.add = function(op) {
	  this.operators.push(op);
	  op.id = this.id();
	  // if pre-registration references exist, resolve them now
	  if (op.refs) {
	    op.refs.forEach(function(ref$$1) { ref$$1.$ref = op.id; });
	    op.refs = null;
	  }
	  return op;
	};
	
	prototype$83.proxy = function(op) {
	  var vref = op instanceof Entry ? ref(op) : op;
	  return this.add(Proxy$1({value: vref}));
	};
	
	prototype$83.addStream = function(stream) {
	  this.streams.push(stream);
	  stream.id = this.id();
	  return stream;
	};
	
	prototype$83.addUpdate = function(update) {
	  this.updates.push(update);
	  return update;
	};
	
	// Apply metadata
	prototype$83.finish = function() {
	  var name, ds;
	
	  // annotate root
	  if (this.root) this.root.root = true;
	
	  // annotate signals
	  for (name in this.signals) {
	    this.signals[name].signal = name;
	  }
	
	  // annotate scales
	  for (name in this.scales) {
	    this.scales[name].scale = name;
	  }
	
	  // annotate data sets
	  function annotate(op, name, type) {
	    var data, list;
	    if (op) {
	      data = op.data || (op.data = {});
	      list = data[name] || (data[name] = []);
	      list.push(type);
	    }
	  }
	  for (name in this.data) {
	    ds = this.data[name];
	    annotate(ds.input,  name, 'input');
	    annotate(ds.output, name, 'output');
	    annotate(ds.values, name, 'values');
	    for (var field$$1 in ds.index) {
	      annotate(ds.index[field$$1], name, 'index:' + field$$1);
	    }
	  }
	
	  return this;
	};
	
	// ----
	
	prototype$83.pushState = function(encode, parent, lookup) {
	  this._encode.push(ref(this.add(Sieve$1({pulse: encode}))));
	  this._parent.push(parent);
	  this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);
	  this._markpath.push(-1);
	};
	
	prototype$83.popState = function() {
	  this._encode.pop();
	  this._parent.pop();
	  this._lookup.pop();
	  this._markpath.pop();
	};
	
	prototype$83.parent = function() {
	  return peek(this._parent);
	};
	
	prototype$83.encode = function() {
	  return peek(this._encode);
	};
	
	prototype$83.lookup = function() {
	  return peek(this._lookup);
	};
	
	prototype$83.markpath = function() {
	  var p = this._markpath;
	  return ++p[p.length-1];
	};
	
	// ----
	
	prototype$83.fieldRef = function(field$$1, name) {
	  if (isString(field$$1)) return fieldRef$1(field$$1, name);
	  if (!field$$1.signal) {
	    error$1('Unsupported field reference: ' + $(field$$1));
	  }
	
	  var s = field$$1.signal,
	      f = this.field[s],
	      params;
	
	  if (!f) { // TODO: replace with update signalRef?
	    params = {name: this.signalRef(s)};
	    if (name) params.as = name;
	    this.field[s] = f = ref(this.add(Field$1(params)));
	  }
	  return f;
	};
	
	prototype$83.compareRef = function(cmp) {
	  function check(_) {
	    if (isSignal(_)) {
	      signal = true;
	      return ref(sig[_.signal]);
	    } else {
	      return _;
	    }
	  }
	
	  var sig = this.signals,
	      signal = false,
	      fields = array(cmp.field).map(check),
	      orders = array(cmp.order).map(check);
	
	  return signal
	    ? ref(this.add(Compare$1({fields: fields, orders: orders})))
	    : compareRef(fields, orders);
	};
	
	prototype$83.keyRef = function(fields, flat) {
	  function check(_) {
	    if (isSignal(_)) {
	      signal = true;
	      return ref(sig[_.signal]);
	    } else {
	      return _;
	    }
	  }
	
	  var sig = this.signals,
	      signal = false;
	  fields = array(fields).map(check);
	
	  return signal
	    ? ref(this.add(Key$1({fields: fields, flat: flat})))
	    : keyRef(fields, flat);
	};
	
	prototype$83.sortRef = function(sort) {
	  if (!sort) return sort;
	
	  // including id ensures stable sorting
	  var a = [aggrField(sort.op, sort.field), tupleidRef],
	      o = sort.order || Ascending;
	
	  return o.signal
	    ? ref(this.add(Compare$1({
	        fields: a,
	        orders: [o = this.signalRef(o.signal), o]
	      })))
	    : compareRef(a, [o, o]);
	};
	
	// ----
	
	prototype$83.event = function(source, type) {
	  var key$$1 = source + ':' + type;
	  if (!this.events[key$$1]) {
	    var id$$1 = this.id();
	    this.streams.push({
	      id: id$$1,
	      source: source,
	      type: type
	    });
	    this.events[key$$1] = id$$1;
	  }
	  return this.events[key$$1];
	};
	
	// ----
	
	prototype$83.addSignal = function(name, value$$1) {
	  if (this.signals.hasOwnProperty(name)) {
	    error$1('Duplicate signal name: ' + $(name));
	  }
	  var op = value$$1 instanceof Entry ? value$$1 : this.add(operator(value$$1));
	  return this.signals[name] = op;
	};
	
	prototype$83.getSignal = function(name) {
	  if (!this.signals[name]) {
	    error$1('Unrecognized signal name: ' + $(name));
	  }
	  return this.signals[name];
	};
	
	prototype$83.signalRef = function(s) {
	  if (this.signals[s]) {
	    return ref(this.signals[s]);
	  } else if (!this.lambdas.hasOwnProperty(s)) {
	    this.lambdas[s] = this.add(operator(null));
	  }
	  return ref(this.lambdas[s]);
	};
	
	prototype$83.parseLambdas = function() {
	  var code = Object.keys(this.lambdas);
	  for (var i=0, n=code.length; i<n; ++i) {
	    var s = code[i],
	        e = parseExpression(s, this),
	        op = this.lambdas[s];
	    op.params = e.$params;
	    op.update = e.$expr;
	  }
	};
	
	prototype$83.property = function(spec) {
	  return spec && spec.signal ? this.signalRef(spec.signal) : spec;
	};
	
	prototype$83.objectProperty = function(spec) {
	  return (!spec || !isObject(spec)) ? spec
	    : this.signalRef(spec.signal || propertyLambda(spec));
	};
	
	function propertyLambda(spec) {
	  return (isArray(spec) ? arrayLambda : objectLambda)(spec);
	}
	
	function arrayLambda(array$$1) {
	  var code = '[',
	      i = 0,
	      n = array$$1.length,
	      value$$1;
	
	  for (; i<n; ++i) {
	    value$$1 = array$$1[i];
	    code += (i > 0 ? ',' : '')
	      + (isObject(value$$1)
	        ? (value$$1.signal || propertyLambda(value$$1))
	        : $(value$$1));
	  }
	  return code + ']';
	}
	
	function objectLambda(obj) {
	  var code = '{',
	      i = 0,
	      key$$1, value$$1;
	
	  for (key$$1 in obj) {
	    value$$1 = obj[key$$1];
	    code += (++i > 1 ? ',' : '')
	      + $(key$$1) + ':'
	      + (isObject(value$$1)
	        ? (value$$1.signal || propertyLambda(value$$1))
	        : $(value$$1));
	  }
	  return code + '}';
	}
	
	prototype$83.addBinding = function(name, bind) {
	  if (!this.bindings) {
	    error$1('Nested signals do not support binding: ' + $(name));
	  }
	  this.bindings.push(extend({signal: name}, bind));
	};
	
	// ----
	
	prototype$83.addScaleProj = function(name, transform) {
	  if (this.scales.hasOwnProperty(name)) {
	    error$1('Duplicate scale or projection name: ' + $(name));
	  }
	  this.scales[name] = this.add(transform);
	};
	
	prototype$83.addScale = function(name, params) {
	  this.addScaleProj(name, Scale$1(params));
	};
	
	prototype$83.addProjection = function(name, params) {
	  this.addScaleProj(name, Projection$1(params));
	};
	
	prototype$83.getScale = function(name) {
	  if (!this.scales[name]) {
	    error$1('Unrecognized scale name: ' + $(name));
	  }
	  return this.scales[name];
	};
	
	prototype$83.projectionRef =
	prototype$83.scaleRef = function(name) {
	  return ref(this.getScale(name));
	};
	
	prototype$83.projectionType =
	prototype$83.scaleType = function(name) {
	  return this.getScale(name).params.type;
	};
	
	// ----
	
	prototype$83.addData = function(name, dataScope) {
	  if (this.data.hasOwnProperty(name)) {
	    error$1('Duplicate data set name: ' + $(name));
	  }
	  return (this.data[name] = dataScope);
	};
	
	prototype$83.getData = function(name) {
	  if (!this.data[name]) {
	    error$1('Undefined data set name: ' + $(name));
	  }
	  return this.data[name];
	};
	
	prototype$83.addDataPipeline = function(name, entries) {
	  if (this.data.hasOwnProperty(name)) {
	    error$1('Duplicate data set name: ' + $(name));
	  }
	  return this.addData(name, DataScope.fromEntries(this, entries));
	};
	
	var defaults = function(configs) {
	  var output = defaults$1();
	  (configs || []).forEach(function(config) {
	    var key$$1, value, style;
	    if (config) {
	      for (key$$1 in config) {
	        if (key$$1 === 'style') {
	          style = output.style || (output.style = {});
	          for (key$$1 in config.style) {
	            style[key$$1] = extend(style[key$$1] || {}, config.style[key$$1]);
	          }
	        } else {
	          value = config[key$$1];
	          output[key$$1] = isObject(value) && !isArray(value)
	            ? extend(isObject(output[key$$1]) ? output[key$$1] : {}, value)
	            : value;
	        }
	      }
	    }
	  });
	  return output;
	};
	
	var defaultFont = 'sans-serif';
	var defaultSymbolSize = 30;
	var defaultStrokeWidth = 2;
	var defaultColor = '#4c78a8';
	var black = "#000";
	var gray = '#888';
	var lightGray = '#ddd';
	
	/**
	 * Standard configuration defaults for Vega specification parsing.
	 * Users can provide their own (sub-)set of these default values
	 * by passing in a config object to the top-level parse method.
	 */
	function defaults$1() {
	  return {
	    // default padding around visualization
	    padding: 0,
	
	    // default for automatic sizing; options: "none", "pad", "fit"
	    // or provide an object (e.g., {"type": "pad", "resize": true})
	    autosize: 'pad',
	
	    // default view background color
	    // covers the entire view component
	    background: null,
	
	    // default event handling configuration
	    // preventDefault for view-sourced event types except 'wheel'
	    events: {
	      defaults: {allow: ['wheel']}
	    },
	
	    // defaults for top-level group marks
	    // accepts mark properties (fill, stroke, etc)
	    // covers the data rectangle within group width/height
	    group: null,
	
	    // defaults for basic mark types
	    // each subset accepts mark properties (fill, stroke, etc)
	    mark: null,
	    arc: { fill: defaultColor },
	    area: { fill: defaultColor },
	    image: null,
	    line: {
	      stroke: defaultColor,
	      strokeWidth: defaultStrokeWidth
	    },
	    path: { stroke: defaultColor },
	    rect: { fill: defaultColor },
	    rule: { stroke: black },
	    shape: { stroke: defaultColor },
	    symbol: {
	      fill: defaultColor,
	      size: 64
	    },
	    text: {
	      fill: black,
	      font: defaultFont,
	      fontSize: 11
	    },
	
	    // style definitions
	    style: {
	      // axis & legend labels
	      "guide-label": {
	        fill: black,
	        font: defaultFont,
	        fontSize: 10
	      },
	      // axis & legend titles
	      "guide-title": {
	        fill: black,
	        font: defaultFont,
	        fontSize: 11,
	        fontWeight: 'bold'
	      },
	      // headers, including chart title
	      "group-title": {
	        fill: black,
	        font: defaultFont,
	        fontSize: 13,
	        fontWeight: 'bold'
	      },
	      // defaults for styled point marks in Vega-Lite
	      point: {
	        size: defaultSymbolSize,
	        strokeWidth: defaultStrokeWidth,
	        shape: 'circle'
	      },
	      circle: {
	        size: defaultSymbolSize,
	        strokeWidth: defaultStrokeWidth
	      },
	      square: {
	        size: defaultSymbolSize,
	        strokeWidth: defaultStrokeWidth,
	        shape: 'square'
	      },
	      // defaults for styled group marks in Vega-Lite
	      cell: {
	        fill: 'transparent',
	        stroke: lightGray
	      }
	    },
	
	    // defaults for axes
	    axis: {
	      minExtent: 0,
	      maxExtent: 200,
	      bandPosition: 0.5,
	      domain: true,
	      domainWidth: 1,
	      domainColor: gray,
	      grid: false,
	      gridWidth: 1,
	      gridColor: lightGray,
	      gridOpacity: 1,
	      labels: true,
	      labelAngle: 0,
	      labelLimit: 180,
	      labelPadding: 2,
	      ticks: true,
	      tickColor: gray,
	      tickOffset: 0,
	      tickRound: true,
	      tickSize: 5,
	      tickWidth: 1,
	      titleAlign: 'center',
	      titlePadding: 4
	    },
	
	    // correction for centering bias
	    axisBand: {
	      tickOffset: -1
	    },
	
	    // defaults for legends
	    legend: {
	      orient: 'right',
	      offset: 18,
	      padding: 0,
	      entryPadding: 5,
	      titlePadding: 5,
	      gradientWidth: 100,
	      gradientHeight: 20,
	      gradientStrokeColor: lightGray,
	      gradientStrokeWidth: 0,
	      gradientLabelBaseline: 'top',
	      gradientLabelOffset: 2,
	      labelAlign: 'left',
	      labelBaseline: 'middle',
	      labelOffset: 8,
	      labelLimit: 160,
	      symbolType: 'circle',
	      symbolSize: 100,
	      symbolFillColor: 'transparent',
	      symbolStrokeColor: gray,
	      symbolStrokeWidth: 1.5,
	      titleAlign: 'left',
	      titleBaseline: 'top',
	      titleLimit: 180
	    },
	
	    // defaults for group title
	    title: {
	      orient: 'top',
	      anchor: 'middle',
	      offset: 4
	    },
	
	    // defaults for scale ranges
	    range: {
	      category: {
	        scheme: 'tableau10'
	      },
	      ordinal: {
	        scheme: 'blues',
	        extent: [0.2, 1]
	      },
	      heatmap: {
	        scheme: 'viridis'
	      },
	      ramp: {
	        scheme: 'blues',
	        extent: [0.2, 1]
	      },
	      diverging: {
	        scheme: 'blueorange'
	      },
	      symbol: [
	        'circle',
	        'square',
	        'triangle-up',
	        'cross',
	        'diamond',
	        'triangle-right',
	        'triangle-down',
	        'triangle-left'
	      ]
	    }
	  };
	}
	
	var parse$2 = function(spec, config) {
	  if (!isObject(spec)) error$1('Input Vega specification must be an object.');
	  return parseView(spec, new Scope(defaults([config, spec.config])))
	    .toRuntime();
	};
	
	/**
	 * Parse an expression given the argument signature and body code.
	 */
	function expression$1(args, code, ctx) {
	  // wrap code in return statement if expression does not terminate
	  if (code[code.length-1] !== ';') {
	    code = 'return(' + code + ');';
	  }
	  var fn = Function.apply(null, args.concat(code));
	  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
	}
	
	/**
	 * Parse an expression used to update an operator value.
	 */
	function operatorExpression(code, ctx) {
	  return expression$1(['_'], code, ctx);
	}
	
	/**
	 * Parse an expression provided as an operator parameter value.
	 */
	function parameterExpression(code, ctx) {
	  return expression$1(['datum', '_'], code, ctx);
	}
	
	/**
	 * Parse an expression applied to an event stream.
	 */
	function eventExpression(code, ctx) {
	  return expression$1(['event'], code, ctx);
	}
	
	/**
	 * Parse an expression used to handle an event-driven operator update.
	 */
	function handlerExpression(code, ctx) {
	  return expression$1(['_', 'event'], code, ctx);
	}
	
	/**
	 * Parse an expression that performs visual encoding.
	 */
	function encodeExpression(code, ctx) {
	  return expression$1(['item', '_'], code, ctx);
	}
	
	/**
	 * Parse a set of operator parameters.
	 */
	function parseParameters$1(spec, ctx, params) {
	  params = params || {};
	  var key$$1, value;
	
	  for (key$$1 in spec) {
	    value = spec[key$$1];
	
	    if (value && value.$expr && value.$params) {
	      // if expression, parse its parameters
	      parseParameters$1(value.$params, ctx, params);
	    }
	
	    params[key$$1] = isArray(value)
	      ? value.map(function(v) { return parseParameter$2(v, ctx); })
	      : parseParameter$2(value, ctx);
	  }
	  return params;
	}
	
	/**
	 * Parse a single parameter.
	 */
	function parseParameter$2(spec, ctx) {
	  if (!spec || !isObject(spec)) return spec;
	
	  for (var i=0, n=PARSERS.length, p; i<n; ++i) {
	    p = PARSERS[i];
	    if (spec.hasOwnProperty(p.key)) {
	      return p.parse(spec, ctx);
	    }
	  }
	  return spec;
	}
	
	/** Reference parsers. */
	var PARSERS = [
	  {key: '$ref',      parse: getOperator},
	  {key: '$key',      parse: getKey},
	  {key: '$expr',     parse: getExpression},
	  {key: '$field',    parse: getField$1},
	  {key: '$encode',   parse: getEncode},
	  {key: '$compare',  parse: getCompare},
	  {key: '$context',  parse: getContext},
	  {key: '$subflow',  parse: getSubflow},
	  {key: '$tupleid',  parse: getTupleId}
	];
	
	/**
	 * Resolve an operator reference.
	 */
	function getOperator(_, ctx) {
	  return ctx.get(_.$ref) || error$1('Operator not defined: ' + _.$ref);
	}
	
	/**
	 * Resolve an expression reference.
	 */
	function getExpression(_, ctx) {
	  var k = 'e:' + _.$expr;
	  return ctx.fn[k]
	    || (ctx.fn[k] = accessor(parameterExpression(_.$expr, ctx), _.$fields, _.$name));
	}
	
	/**
	 * Resolve a key accessor reference.
	 */
	function getKey(_, ctx) {
	  var k = 'k:' + _.$key + '_' + (!!_.$flat);
	  return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat));
	}
	
	/**
	 * Resolve a field accessor reference.
	 */
	function getField$1(_, ctx) {
	  if (!_.$field) return null;
	  var k = 'f:' + _.$field + '_' + _.$name;
	  return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name));
	}
	
	/**
	 * Resolve a comparator function reference.
	 */
	function getCompare(_, ctx) {
	  var k = 'c:' + _.$compare + '_' + _.$order,
	      c = array(_.$compare).map(function(_) {
	        return (_ && _.$tupleid) ? tupleid : _;
	      });
	  return ctx.fn[k] || (ctx.fn[k] = compare(c, _.$order));
	}
	
	/**
	 * Resolve an encode operator reference.
	 */
	function getEncode(_, ctx) {
	  var spec = _.$encode,
	      encode = {}, name, enc;
	
	  for (name in spec) {
	    enc = spec[name];
	    encode[name] = accessor(encodeExpression(enc.$expr, ctx), enc.$fields);
	    encode[name].output = enc.$output;
	  }
	  return encode;
	}
	
	/**
	 * Resolve an context reference.
	 */
	function getContext(_, ctx) {
	  return ctx;
	}
	
	/**
	 * Resolve a recursive subflow specification.
	 */
	function getSubflow(_, ctx) {
	  var spec = _.$subflow;
	  return function(dataflow, key$$1, parent) {
	    var subctx = parseDataflow(spec, ctx.fork()),
	        op = subctx.get(spec.operators[0].id),
	        p = subctx.signals.parent;
	    if (p) p.set(parent);
	    return op;
	  };
	}
	
	/**
	 * Resolve a tuple id reference.
	 */
	function getTupleId() {
	  return tupleid;
	}
	
	function canonicalType(type) {
	  return (type + '').toLowerCase();
	}
	function isOperator(type) {
	   return canonicalType(type) === 'operator';
	}
	
	function isCollect(type) {
	  return canonicalType(type) === 'collect';
	}
	
	/**
	 * Parse a dataflow operator.
	 */
	var parseOperator = function(spec, ctx) {
	  if (isOperator(spec.type) || !spec.type) {
	    ctx.operator(spec,
	      spec.update ? operatorExpression(spec.update, ctx) : null);
	  } else {
	    ctx.transform(spec, spec.type);
	  }
	};
	
	/**
	 * Parse and assign operator parameters.
	 */
	function parseOperatorParameters(spec, ctx) {
	  var op, params;
	  if (spec.params) {
	    if (!(op = ctx.get(spec.id))) {
	      error$1('Invalid operator id: ' + spec.id);
	    }
	    params = parseParameters$1(spec.params, ctx);
	    ctx.dataflow.connect(op, op.parameters(params));
	  }
	}
	
	/**
	 * Parse an event stream specification.
	 */
	var parseStream$3 = function(spec, ctx) {
	  var filter = spec.filter != null ? eventExpression(spec.filter, ctx) : undefined,
	      stream = spec.stream != null ? ctx.get(spec.stream) : undefined,
	      args;
	
	  if (spec.source) {
	    stream = ctx.events(spec.source, spec.type, filter);
	  }
	  else if (spec.merge) {
	    args = spec.merge.map(ctx.get.bind(ctx));
	    stream = args[0].merge.apply(args[0], args.slice(1));
	  }
	
	  if (spec.between) {
	    args = spec.between.map(ctx.get.bind(ctx));
	    stream = stream.between(args[0], args[1]);
	  }
	
	  if (spec.filter) {
	    stream = stream.filter(filter);
	  }
	
	  if (spec.throttle != null) {
	    stream = stream.throttle(+spec.throttle);
	  }
	
	  if (spec.debounce != null) {
	    stream = stream.debounce(+spec.debounce);
	  }
	
	  if (stream == null) {
	    error$1('Invalid stream definition: ' + JSON.stringify(spec));
	  }
	
	  if (spec.consume) stream.consume(true);
	
	  ctx.stream(spec, stream);
	};
	
	/**
	 * Parse an event-driven operator update.
	 */
	var parseUpdate$1 = function(spec, ctx) {
	  var source = ctx.get(spec.source),
	      target = null,
	      update = spec.update,
	      params = undefined;
	
	  if (!source) error$1('Source not defined: ' + spec.source);
	
	  if (spec.target && spec.target.$expr) {
	    target = eventExpression(spec.target.$expr, ctx);
	  } else {
	    target = ctx.get(spec.target);
	  }
	
	  if (update && update.$expr) {
	    if (update.$params) {
	      params = parseParameters$1(update.$params, ctx);
	    }
	    update = handlerExpression(update.$expr, ctx);
	  }
	
	  ctx.update(spec, source, target, update, params);
	};
	
	/**
	 * Parse a serialized dataflow specification.
	 */
	var parseDataflow = function(spec, ctx) {
	  var operators = spec.operators || [];
	
	  // parse background
	  if (spec.background) {
	    ctx.background = spec.background;
	  }
	
	  // parse event configuration
	  if (spec.eventConfig) {
	    ctx.eventConfig = spec.eventConfig;
	  }
	
	  // parse operators
	  operators.forEach(function(entry) {
	    parseOperator(entry, ctx);
	  });
	
	  // parse operator parameters
	  operators.forEach(function(entry) {
	    parseOperatorParameters(entry, ctx);
	  });
	
	  // parse streams
	  (spec.streams || []).forEach(function(entry) {
	    parseStream$3(entry, ctx);
	  });
	
	  // parse updates
	  (spec.updates || []).forEach(function(entry) {
	    parseUpdate$1(entry, ctx);
	  });
	
	  return ctx.resolve();
	};
	
	var SKIP$3 = {skip: true};
	
	function getState(options) {
	  var ctx = this,
	      state = {};
	
	  if (options.signals) {
	    var signals = (state.signals = {});
	    Object.keys(ctx.signals).forEach(function(key$$1) {
	      var op = ctx.signals[key$$1];
	      if (options.signals(key$$1, op)) {
	        signals[key$$1] = op.value;
	      }
	    });
	  }
	
	  if (options.data) {
	    var data = (state.data = {});
	    Object.keys(ctx.data).forEach(function(key$$1) {
	      var dataset = ctx.data[key$$1];
	      if (options.data(key$$1, dataset)) {
	        data[key$$1] = dataset.input.value;
	      }
	    });
	  }
	
	  if (ctx.subcontext && options.recurse !== false) {
	    state.subcontext = ctx.subcontext.map(function(ctx) {
	      return ctx.getState(options);
	    });
	  }
	
	  return state;
	}
	
	function setState(state) {
	  var ctx = this,
	      df = ctx.dataflow,
	      data = state.data,
	      signals = state.signals;
	
	  Object.keys(signals || {}).forEach(function(key$$1) {
	    df.update(ctx.signals[key$$1], signals[key$$1], SKIP$3);
	  });
	
	  Object.keys(data || {}).forEach(function(key$$1) {
	    df.pulse(
	      ctx.data[key$$1].input,
	      df.changeset().remove(truthy).insert(data[key$$1])
	    );
	  });
	
	  (state.subcontext  || []).forEach(function(substate, i) {
	    var subctx = ctx.subcontext[i];
	    if (subctx) subctx.setState(substate);
	  });
	}
	
	/**
	 * Context objects store the current parse state.
	 * Enables lookup of parsed operators, event streams, accessors, etc.
	 * Provides a 'fork' method for creating child contexts for subflows.
	 */
	var context$2 = function(df, transforms, functions) {
	  return new Context(df, transforms, functions);
	};
	
	function Context(df, transforms, functions) {
	  this.dataflow = df;
	  this.transforms = transforms;
	  this.events = df.events.bind(df);
	  this.signals = {};
	  this.scales = {};
	  this.nodes = {};
	  this.data = {};
	  this.fn = {};
	  if (functions) {
	    this.functions = Object.create(functions);
	    this.functions.context = this;
	  }
	}
	
	function ContextFork(ctx) {
	  this.dataflow = ctx.dataflow;
	  this.transforms = ctx.transforms;
	  this.functions = ctx.functions;
	  this.events = ctx.events;
	  this.signals = Object.create(ctx.signals);
	  this.scales = Object.create(ctx.scales);
	  this.nodes = Object.create(ctx.nodes);
	  this.data = Object.create(ctx.data);
	  this.fn = Object.create(ctx.fn);
	  if (ctx.functions) {
	    this.functions = Object.create(ctx.functions);
	    this.functions.context = this;
	  }
	}
	
	Context.prototype = ContextFork.prototype = {
	  fork: function() {
	    var ctx = new ContextFork(this);
	    (this.subcontext || (this.subcontext = [])).push(ctx);
	    return ctx;
	  },
	  get: function(id) {
	    return this.nodes[id];
	  },
	  set: function(id, node) {
	    return this.nodes[id] = node;
	  },
	  add: function(spec, op) {
	    var ctx = this,
	        df = ctx.dataflow,
	        data;
	
	    ctx.set(spec.id, op);
	
	    if (isCollect(spec.type) && (data = spec.value)) {
	      if (data.$ingest) {
	        df.ingest(op, data.$ingest, data.$format);
	      } else if (data.$request) {
	        df.request(op, data.$request, data.$format);
	      } else {
	        df.pulse(op, df.changeset().insert(data));
	      }
	    }
	
	    if (spec.root) {
	      ctx.root = op;
	    }
	
	    if (spec.parent) {
	      var p = ctx.get(spec.parent.$ref);
	      if (p) {
	        df.connect(p, [op]);
	        op.targets().add(p);
	      } else {
	        (ctx.unresolved = ctx.unresolved || []).push(function() {
	          p = ctx.get(spec.parent.$ref);
	          df.connect(p, [op]);
	          op.targets().add(p);
	        });
	      }
	    }
	
	    if (spec.signal) {
	      ctx.signals[spec.signal] = op;
	    }
	
	    if (spec.scale) {
	      ctx.scales[spec.scale] = op;
	    }
	
	    if (spec.data) {
	      for (var name in spec.data) {
	        data = ctx.data[name] || (ctx.data[name] = {});
	        spec.data[name].forEach(function(role) { data[role] = op; });
	      }
	    }
	  },
	  resolve: function() {
	    (this.unresolved || []).forEach(function(fn) { fn(); });
	    delete this.unresolved;
	    return this;
	  },
	  operator: function(spec, update, params) {
	    this.add(spec, this.dataflow.add(spec.value, update, params, spec.react));
	  },
	  transform: function(spec, type, params) {
	    this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)], params));
	  },
	  stream: function(spec, stream) {
	    this.set(spec.id, stream);
	  },
	  update: function(spec, stream, target, update, params) {
	    this.dataflow.on(stream, target, update, params, spec.options);
	  },
	  getState: getState,
	  setState: setState
	};
	
	var runtime = function(view, spec, functions) {
	  var fn = functions || functionContext;
	  return parseDataflow(spec, context$2(view, transforms, fn));
	};
	
	var Padding$1 = 'padding';
	
	function viewWidth(view, width) {
	  var a = view.autosize(),
	      p = view.padding();
	  return width - (a && a.contains === Padding$1 ? p.left + p.right : 0);
	}
	
	function viewHeight(view, height) {
	  var a = view.autosize(),
	      p = view.padding();
	  return height - (a && a.contains === Padding$1 ? p.top + p.bottom : 0);
	}
	
	function initializeResize(view) {
	  var s = view._signals,
	      w = s.width,
	      h = s.height,
	      p = s.padding;
	
	  function resetSize() {
	    view._autosize = view._resize = 1;
	  }
	
	  // respond to width signal
	  view._resizeWidth = view.add(null,
	    function(_) {
	      view._width = _.size;
	      view._viewWidth = viewWidth(view, _.size);
	      resetSize();
	    },
	    {size: w}
	  );
	
	  // respond to height signal
	  view._resizeHeight = view.add(null,
	    function(_) {
	      view._height = _.size;
	      view._viewHeight = viewHeight(view, _.size);
	      resetSize();
	    },
	    {size: h}
	  );
	
	  // respond to padding signal
	  var resizePadding = view.add(null, resetSize, {pad: p});
	
	  // set rank to run immediately after source signal
	  view._resizeWidth.rank = w.rank + 1;
	  view._resizeHeight.rank = h.rank + 1;
	  resizePadding.rank = p.rank + 1;
	}
	
	function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
	  this.runAfter(function(view) {
	    var rerun = 0;
	
	    // reset autosize flag
	    view._autosize = 0;
	
	    // width value changed: update signal, skip resize op
	    if (view.width() !== width) {
	      rerun = 1;
	      view.width(width);
	      view._resizeWidth.skip(true);
	    }
	
	    // height value changed: update signal, skip resize op
	    if (view.height() !== height) {
	      rerun = 1;
	      view.height(height);
	      view._resizeHeight.skip(true);
	    }
	
	    // view width changed: update view property, set resize flag
	    if (view._viewWidth !== viewWidth) {
	      view._resize = 1;
	      view._viewWidth = viewWidth;
	    }
	
	    // view height changed: update view property, set resize flag
	    if (view._viewHeight !== viewHeight) {
	      view._resize = 1;
	      view._viewHeight = viewHeight;
	    }
	
	    // origin changed: update view property, set resize flag
	    if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
	      view._resize = 1;
	      view._origin = origin;
	    }
	
	    // run dataflow on width/height signal change
	    if (rerun) view.run('enter');
	    if (auto) view.runAfter(function() { view.resize(); });
	  });
	}
	
	/**
	 * Get the current view state, consisting of signal values and/or data sets.
	 * @param {object} [options] - Options flags indicating which state to export.
	 *   If unspecified, all signals and data sets will be exported.
	 * @param {function(string, Operator):boolean} [options.signals] - Optional
	 *   predicate function for testing if a signal should be included in the
	 *   exported state. If unspecified, all signals will be included, except for
	 *   those named 'parent' or those which refer to a Transform value.
	 * @param {function(string, object):boolean} [options.data] - Optional
	 *   predicate function for testing if a data set's input should be included
	 *   in the exported state. If unspecified, all data sets that have been
	 *   explicitly modified will be included.
	 * @param {boolean} [options.recurse=true] - Flag indicating if the exported
	 *   state should recursively include state from group mark sub-contexts.
	 * @return {object} - An object containing the exported state values.
	 */
	function getState$1(options) {
	  return this._runtime.getState(options || {
	    data:    dataTest,
	    signals: signalTest,
	    recurse: true
	  });
	}
	
	function dataTest(name, data) {
	  return data.modified
	      && isArray(data.input.value)
	      && name.indexOf('_:vega:_');
	}
	
	function signalTest(name, op) {
	  return !(name === 'parent' || op instanceof transforms.proxy);
	}
	
	/**
	 * Sets the current view state and updates the view by invoking run.
	 * @param {object} state - A state object containing signal and/or
	 *   data set values, following the format used by the getState method.
	 * @return {View} - This view instance.
	 */
	function setState$1(state) {
	  var view = this;
	  view._trigger = false;
	  view._runtime.setState(state);
	  view.run().runAfter(function() { view._trigger = true; });
	  return this;
	}
	
	/**
	 * Create a new View instance from a Vega dataflow runtime specification.
	 * The generated View will not immediately be ready for display. Callers
	 * should also invoke the initialize method (e.g., to set the parent
	 * DOM element in browser-based deployment) and then invoke the run
	 * method to evaluate the dataflow graph. Rendering will automatically
	 * be peformed upon dataflow runs.
	 * @constructor
	 * @param {object} spec - The Vega dataflow runtime specification.
	 */
	function View(spec, options) {
	  var view = this;
	  options = options || {};
	
	  Dataflow.call(view);
	  view.loader(options.loader || view._loader);
	  view.logLevel(options.logLevel || 0);
	
	  view._el = null;
	  view._renderType = options.renderer || RenderType.Canvas;
	  view._scenegraph = new Scenegraph();
	  var root = view._scenegraph.root;
	
	  // initialize renderer, handler and event management
	  view._renderer = null;
	  view._redraw = true;
	  view._handler = new CanvasHandler().scene(root);
	  view._eventListeners = [];
	  view._preventDefault = false;
	
	  // initialize dataflow graph
	  var ctx = runtime(view, spec, options.functions);
	  view._runtime = ctx;
	  view._signals = ctx.signals;
	  view._bind = (spec.bindings || []).map(function(_) {
	    return {
	      state: null,
	      param: extend({}, _)
	    };
	  });
	
	  // initialize scenegraph
	  if (ctx.root) ctx.root.set(root);
	  root.source = ctx.data.root.input;
	  view.pulse(
	    ctx.data.root.input,
	    view.changeset().insert(root.items)
	  );
	
	  // initialize background color
	  view._background = ctx.background || null;
	
	  // initialize event configuration
	  view._eventConfig = initializeEventConfig(ctx.eventConfig);
	
	  // initialize view size
	  view._width = view.width();
	  view._height = view.height();
	  view._viewWidth = viewWidth(view, view._width);
	  view._viewHeight = viewHeight(view, view._height);
	  view._origin = [0, 0];
	  view._resize = 0;
	  view._autosize = 1;
	  initializeResize(view);
	
	  // initialize cursor
	  cursor(view);
	}
	
	var prototype$81 = inherits(View, Dataflow);
	
	// -- DATAFLOW / RENDERING ----
	
	prototype$81.run = function(encode) {
	  Dataflow.prototype.run.call(this, encode);
	  if (this._redraw || this._resize) {
	    try {
	      this.render();
	    } catch (e) {
	      this.error(e);
	    }
	  }
	  return this;
	};
	
	prototype$81.render = function() {
	  if (this._renderer) {
	    if (this._resize) {
	      this._resize = 0;
	      resizeRenderer(this);
	    }
	    this._renderer.render(this._scenegraph.root);
	  }
	  this._redraw = false;
	  return this;
	};
	
	prototype$81.dirty = function(item) {
	  this._redraw = true;
	  this._renderer && this._renderer.dirty(item);
	};
	
	// -- GET / SET ----
	
	prototype$81.container = function() {
	  return this._el;
	};
	
	prototype$81.scenegraph = function() {
	  return this._scenegraph;
	};
	
	function lookupSignal(view, name) {
	  return view._signals.hasOwnProperty(name)
	    ? view._signals[name]
	    : error$1('Unrecognized signal name: ' + $(name));
	}
	
	prototype$81.signal = function(name, value, options) {
	  var op = lookupSignal(this, name);
	  return arguments.length === 1
	    ? op.value
	    : this.update(op, value, options);
	};
	
	prototype$81.background = function(_) {
	  if (arguments.length) {
	    this._background = _;
	    this._resize = 1;
	    return this;
	  } else {
	    return this._background;
	  }
	};
	
	prototype$81.width = function(_) {
	  return arguments.length ? this.signal('width', _) : this.signal('width');
	};
	
	prototype$81.height = function(_) {
	  return arguments.length ? this.signal('height', _) : this.signal('height');
	};
	
	prototype$81.padding = function(_) {
	  return arguments.length ? this.signal('padding', _) : this.signal('padding');
	};
	
	prototype$81.autosize = function(_) {
	  return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
	};
	
	prototype$81.renderer = function(type) {
	  if (!arguments.length) return this._renderType;
	  if (!renderModule(type)) error$1('Unrecognized renderer type: ' + type);
	  if (type !== this._renderType) {
	    this._renderType = type;
	    if (this._renderer) {
	      this._renderer = null;
	      this.initialize(this._el);
	    }
	  }
	  return this;
	};
	
	prototype$81.loader = function(loader) {
	  if (!arguments.length) return this._loader;
	  if (loader !== this._loader) {
	    Dataflow.prototype.loader.call(this, loader);
	    if (this._renderer) {
	      this._renderer = null;
	      this.initialize(this._el);
	    }
	  }
	  return this;
	};
	
	prototype$81.resize = function() {
	  this._autosize = 1;
	  return this;
	};
	
	// -- SIZING ----
	prototype$81._resizeView = resizeView;
	
	// -- EVENT HANDLING ----
	
	prototype$81.addEventListener = function(type, handler) {
	  this._handler.on(type, handler);
	  return this;
	};
	
	prototype$81.removeEventListener = function(type, handler) {
	  this._handler.off(type, handler);
	  return this;
	};
	
	prototype$81.addSignalListener = function(name, handler) {
	  var s = lookupSignal(this, name),
	      h = function() { handler(name, s.value); };
	  h.handler = handler;
	  this.on(s, null, h);
	  return this;
	};
	
	prototype$81.removeSignalListener = function(name, handler) {
	  var s = lookupSignal(this, name),
	      t = s._targets || [],
	      h = t.filter(function(op) {
	            var u = op._update;
	            return u && u.handler === handler;
	          });
	  if (h.length) t.remove(h[0]);
	  return this;
	};
	
	prototype$81.preventDefault = function(_) {
	  if (arguments.length) {
	    this._preventDefault = _;
	    return this;
	  } else {
	    return this._preventDefault;
	  }
	};
	
	prototype$81.tooltipHandler = function(_) {
	  var h = this._handler;
	  if (!arguments.length) {
	    return h.handleTooltip;
	  } else {
	    h.handleTooltip = _ || Handler.prototype.handleTooltip;
	    return this;
	  }
	};
	
	prototype$81.events = events$1;
	prototype$81.finalize = finalize;
	prototype$81.hover = hover;
	
	// -- DATA ----
	prototype$81.data = data;
	prototype$81.change = change;
	prototype$81.insert = insert;
	prototype$81.remove = remove;
	
	// -- INITIALIZATION ----
	prototype$81.initialize = initialize$1;
	
	// -- HEADLESS RENDERING ----
	prototype$81.toImageURL = renderToImageURL;
	prototype$81.toCanvas = renderToCanvas;
	prototype$81.toSVG = renderToSVG;
	
	// -- SAVE / RESTORE STATE ----
	prototype$81.getState = getState$1;
	prototype$81.setState = setState$1;
	
	// -- Transforms -----
	
	extend(transforms, tx, vtx, encode, geo, force, tree, voronoi, wordcloud, xf);
	
	exports.version = version;
	exports.Dataflow = Dataflow;
	exports.EventStream = EventStream;
	exports.Parameters = Parameters;
	exports.Pulse = Pulse;
	exports.MultiPulse = MultiPulse;
	exports.Operator = Operator;
	exports.Transform = Transform;
	exports.changeset = changeset;
	exports.ingest = ingest;
	exports.isTuple = isTuple;
	exports.definition = definition;
	exports.transform = transform$1;
	exports.transforms = transforms;
	exports.tupleid = tupleid;
	exports.scale = scale$1;
	exports.scheme = getScheme;
	exports.interpolate = interpolate$1;
	exports.interpolateRange = interpolateRange;
	exports.timeInterval = timeInterval;
	exports.utcInterval = utcInterval;
	exports.projection = projection$$1;
	exports.View = View;
	exports.parse = parse$2;
	exports.expressionFunction = expressionFunction;
	exports.formatLocale = defaultLocale$1;
	exports.timeFormatLocale = defaultLocale;
	exports.runtime = parseDataflow;
	exports.runtimeContext = context$2;
	exports.bin = bin;
	exports.bootstrapCI = bootstrapCI;
	exports.quartiles = quartiles;
	exports.setRandom = setRandom;
	exports.randomInteger = integer;
	exports.randomKDE = randomKDE;
	exports.randomMixture = randomMixture;
	exports.randomNormal = randomNormal;
	exports.randomUniform = randomUniform;
	exports.accessor = accessor;
	exports.accessorName = accessorName;
	exports.accessorFields = accessorFields;
	exports.id = id;
	exports.identity = identity;
	exports.zero = zero;
	exports.one = one;
	exports.truthy = truthy;
	exports.falsy = falsy;
	exports.logger = logger;
	exports.None = None;
	exports.Error = Error$1;
	exports.Warn = Warn;
	exports.Info = Info;
	exports.Debug = Debug;
	exports.panLinear = panLinear;
	exports.panLog = panLog;
	exports.panPow = panPow;
	exports.zoomLinear = zoomLinear;
	exports.zoomLog = zoomLog;
	exports.zoomPow = zoomPow;
	exports.array = array;
	exports.compare = compare;
	exports.constant = constant;
	exports.debounce = debounce;
	exports.error = error$1;
	exports.extend = extend;
	exports.extentIndex = extentIndex;
	exports.fastmap = fastmap;
	exports.field = field;
	exports.inherits = inherits;
	exports.isArray = isArray;
	exports.isBoolean = isBoolean;
	exports.isDate = isDate;
	exports.isFunction = isFunction;
	exports.isNumber = isNumber;
	exports.isObject = isObject;
	exports.isRegExp = isRegExp;
	exports.isString = isString;
	exports.key = key;
	exports.merge = merge;
	exports.pad = pad;
	exports.peek = peek;
	exports.repeat = repeat;
	exports.splitAccessPath = splitAccessPath;
	exports.stringValue = $;
	exports.toBoolean = toBoolean;
	exports.toDate = toDate;
	exports.toNumber = toNumber;
	exports.toString = toString;
	exports.toSet = toSet;
	exports.truncate = truncate;
	exports.visitArray = visitArray;
	exports.loader = loader;
	exports.read = read;
	exports.inferType = inferType;
	exports.inferTypes = inferTypes;
	exports.typeParsers = typeParsers;
	exports.formats = formats$1;
	exports.Bounds = Bounds;
	exports.Gradient = Gradient;
	exports.GroupItem = GroupItem;
	exports.ResourceLoader = ResourceLoader;
	exports.Item = Item;
	exports.Scenegraph = Scenegraph;
	exports.Handler = Handler;
	exports.Renderer = Renderer;
	exports.CanvasHandler = CanvasHandler;
	exports.CanvasRenderer = CanvasRenderer;
	exports.SVGHandler = SVGHandler;
	exports.SVGRenderer = SVGRenderer;
	exports.SVGStringRenderer = SVGStringRenderer;
	exports.RenderType = RenderType;
	exports.renderModule = renderModule;
	exports.Marks = marks;
	exports.boundContext = context;
	exports.boundStroke = boundStroke;
	exports.boundItem = boundItem$1;
	exports.boundMark = boundMark;
	exports.pathCurves = curves;
	exports.pathSymbols = symbols$1;
	exports.pathRectangle = vg_rect;
	exports.pathTrail = vg_trail;
	exports.pathParse = pathParse;
	exports.pathRender = pathRender;
	exports.point = point$4;
	exports.domCreate = domCreate;
	exports.domFind = domFind;
	exports.domChild = domChild;
	exports.domClear = domClear;
	exports.openTag = openTag;
	exports.closeTag = closeTag;
	exports.font = font;
	exports.textMetrics = textMetrics;
	exports.resetSVGClipId = resetSVGClipId;
	exports.sceneEqual = sceneEqual;
	exports.pathEqual = pathEqual;
	exports.sceneToJSON = sceneToJSON;
	exports.sceneFromJSON = sceneFromJSON;
	exports.sceneZOrder = zorder;
	exports.sceneVisit = visit;
	exports.scenePickVisit = pickVisit;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(6)
	var ieee754 = __webpack_require__(7)
	var isArray = __webpack_require__(8)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr((len * 3 / 4) - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ }),
/* 7 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.aggregate = __webpack_require__(13);
	exports.axis = __webpack_require__(21);
	exports.bin = __webpack_require__(22);
	exports.channel = __webpack_require__(23);
	exports.compositeMark = __webpack_require__(24);
	var compile_1 = __webpack_require__(35);
	exports.compile = compile_1.compile;
	exports.config = __webpack_require__(36);
	exports.data = __webpack_require__(53);
	exports.datetime = __webpack_require__(31);
	exports.encoding = __webpack_require__(27);
	exports.facet = __webpack_require__(136);
	exports.fieldDef = __webpack_require__(28);
	exports.legend = __webpack_require__(38);
	exports.mark = __webpack_require__(25);
	exports.scale = __webpack_require__(39);
	exports.sort = __webpack_require__(79);
	exports.spec = __webpack_require__(42);
	exports.stack = __webpack_require__(43);
	exports.timeUnit = __webpack_require__(30);
	exports.transform = __webpack_require__(58);
	exports.type = __webpack_require__(32);
	exports.util = __webpack_require__(14);
	exports.validate = __webpack_require__(137);
	exports.version = __webpack_require__(138).version;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBaUQ7QUFDakQsaUNBQXVDO0FBQ3ZDLCtCQUFxQztBQUNyQyx1Q0FBNkM7QUFDN0MsbURBQXlEO0FBQ3pELDZDQUEwQztBQUFsQyw0QkFBQSxPQUFPLENBQUE7QUFDZixxQ0FBMkM7QUFDM0MsaUNBQXVDO0FBQ3ZDLHlDQUErQztBQUMvQyx5Q0FBK0M7QUFDL0MsbUNBQXlDO0FBQ3pDLHlDQUErQztBQUMvQyxxQ0FBMkM7QUFDM0MsaUNBQXVDO0FBQ3ZDLG1DQUF5QztBQUN6QyxpQ0FBdUM7QUFDdkMsaUNBQXVDO0FBQ3ZDLG1DQUF5QztBQUN6Qyx5Q0FBK0M7QUFDL0MsMkNBQWlEO0FBQ2pELGlDQUF1QztBQUN2QyxpQ0FBdUM7QUFDdkMseUNBQStDO0FBRWxDLFFBQUEsT0FBTyxHQUFXLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbXBvcnQgYWdncmVnYXRlID0gcmVxdWlyZSgnLi9hZ2dyZWdhdGUnKTtcbmV4cG9ydCBpbXBvcnQgYXhpcyA9IHJlcXVpcmUoJy4vYXhpcycpO1xuZXhwb3J0IGltcG9ydCBiaW4gPSByZXF1aXJlKCcuL2JpbicpO1xuZXhwb3J0IGltcG9ydCBjaGFubmVsID0gcmVxdWlyZSgnLi9jaGFubmVsJyk7XG5leHBvcnQgaW1wb3J0IGNvbXBvc2l0ZU1hcmsgPSByZXF1aXJlKCcuL2NvbXBvc2l0ZW1hcmsnKTtcbmV4cG9ydCB7Y29tcGlsZX0gZnJvbSAnLi9jb21waWxlL2NvbXBpbGUnO1xuZXhwb3J0IGltcG9ydCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuZXhwb3J0IGltcG9ydCBkYXRhID0gcmVxdWlyZSgnLi9kYXRhJyk7XG5leHBvcnQgaW1wb3J0IGRhdGV0aW1lID0gcmVxdWlyZSgnLi9kYXRldGltZScpO1xuZXhwb3J0IGltcG9ydCBlbmNvZGluZyA9IHJlcXVpcmUoJy4vZW5jb2RpbmcnKTtcbmV4cG9ydCBpbXBvcnQgZmFjZXQgPSByZXF1aXJlKCcuL2ZhY2V0Jyk7XG5leHBvcnQgaW1wb3J0IGZpZWxkRGVmID0gcmVxdWlyZSgnLi9maWVsZGRlZicpO1xuZXhwb3J0IGltcG9ydCBsZWdlbmQgPSByZXF1aXJlKCcuL2xlZ2VuZCcpO1xuZXhwb3J0IGltcG9ydCBtYXJrID0gcmVxdWlyZSgnLi9tYXJrJyk7XG5leHBvcnQgaW1wb3J0IHNjYWxlID0gcmVxdWlyZSgnLi9zY2FsZScpO1xuZXhwb3J0IGltcG9ydCBzb3J0ID0gcmVxdWlyZSgnLi9zb3J0Jyk7XG5leHBvcnQgaW1wb3J0IHNwZWMgPSByZXF1aXJlKCcuL3NwZWMnKTtcbmV4cG9ydCBpbXBvcnQgc3RhY2sgPSByZXF1aXJlKCcuL3N0YWNrJyk7XG5leHBvcnQgaW1wb3J0IHRpbWVVbml0ID0gcmVxdWlyZSgnLi90aW1ldW5pdCcpO1xuZXhwb3J0IGltcG9ydCB0cmFuc2Zvcm0gPSByZXF1aXJlKCcuL3RyYW5zZm9ybScpO1xuZXhwb3J0IGltcG9ydCB0eXBlID0gcmVxdWlyZSgnLi90eXBlJyk7XG5leHBvcnQgaW1wb3J0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmV4cG9ydCBpbXBvcnQgdmFsaWRhdGUgPSByZXF1aXJlKCcuL3ZhbGlkYXRlJyk7XG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuIl19

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var AGGREGATE_OP_INDEX = {
	    values: 1,
	    count: 1,
	    valid: 1,
	    missing: 1,
	    distinct: 1,
	    sum: 1,
	    mean: 1,
	    average: 1,
	    variance: 1,
	    variancep: 1,
	    stdev: 1,
	    stdevp: 1,
	    median: 1,
	    q1: 1,
	    q3: 1,
	    ci0: 1,
	    ci1: 1,
	    min: 1,
	    max: 1,
	    argmin: 1,
	    argmax: 1,
	};
	exports.AGGREGATE_OPS = util_1.flagKeys(AGGREGATE_OP_INDEX);
	function isAggregateOp(a) {
	    return !!AGGREGATE_OP_INDEX[a];
	}
	exports.isAggregateOp = isAggregateOp;
	exports.COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
	function isCountingAggregateOp(aggregate) {
	    return aggregate && util_1.contains(exports.COUNTING_OPS, aggregate);
	}
	exports.isCountingAggregateOp = isCountingAggregateOp;
	/** Additive-based aggregation operations.  These can be applied to stack. */
	exports.SUM_OPS = [
	    'count',
	    'sum',
	    'distinct',
	    'valid',
	    'missing'
	];
	/**
	 * Aggregation operators that always produce values within the range [domainMin, domainMax].
	 */
	exports.SHARED_DOMAIN_OPS = [
	    'mean',
	    'average',
	    'median',
	    'q1',
	    'q3',
	    'min',
	    'max',
	];
	exports.SHARED_DOMAIN_OP_INDEX = util_1.toSet(exports.SHARED_DOMAIN_OPS);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FnZ3JlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF1RDtBQVN2RCxJQUFNLGtCQUFrQixHQUFzQjtJQUM1QyxNQUFNLEVBQUUsQ0FBQztJQUNULEtBQUssRUFBRSxDQUFDO0lBQ1IsS0FBSyxFQUFFLENBQUM7SUFDUixPQUFPLEVBQUUsQ0FBQztJQUNWLFFBQVEsRUFBRSxDQUFDO0lBQ1gsR0FBRyxFQUFFLENBQUM7SUFDTixJQUFJLEVBQUUsQ0FBQztJQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxTQUFTLEVBQUUsQ0FBQztJQUNaLEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztJQUNULEVBQUUsRUFBRSxDQUFDO0lBQ0wsRUFBRSxFQUFFLENBQUM7SUFDTCxHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7Q0FDVixDQUFDO0FBRVcsUUFBQSxhQUFhLEdBQUcsZUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFMUQsdUJBQThCLENBQVM7SUFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRkQsc0NBRUM7QUFFWSxRQUFBLFlBQVksR0FBa0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUVyRiwrQkFBc0MsU0FBaUI7SUFDckQsTUFBTSxDQUFDLFNBQVMsSUFBSSxlQUFRLENBQUMsb0JBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRkQsc0RBRUM7QUFFRCw2RUFBNkU7QUFDaEUsUUFBQSxPQUFPLEdBQWtCO0lBQ2xDLE9BQU87SUFDUCxLQUFLO0lBQ0wsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0NBQ1osQ0FBQztBQUVGOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBa0I7SUFDNUMsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsSUFBSTtJQUNKLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztDQUNSLENBQUM7QUFFVyxRQUFBLHNCQUFzQixHQUFHLFlBQUssQ0FBQyx5QkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb250YWlucywgRmxhZywgZmxhZ0tleXMsIHRvU2V0fSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCB0eXBlIEFnZ3JlZ2F0ZU9wID0gJ2FyZ21heCcgfCAnYXJnbWluJyB8ICdhdmVyYWdlJyB8ICdjb3VudCdcbiAgfCAnZGlzdGluY3QnIHwgJ21heCcgfCAnbWVhbicgfCAnbWVkaWFuJyB8ICdtaW4nIHwgJ21pc3NpbmcnXG4gIHwgJ3ExJyB8ICdxMycgfCAnY2kwJyB8ICdjaTEnIHwgJ3N0ZGV2JyB8ICdzdGRldnAnIHwgJ3N1bScgfCAndmFsaWQnIHwgJ3ZhbHVlcycgfCAndmFyaWFuY2UnXG4gIHwgJ3ZhcmlhbmNlcCc7XG5cblxuY29uc3QgQUdHUkVHQVRFX09QX0lOREVYOiBGbGFnPEFnZ3JlZ2F0ZU9wPiA9IHtcbiAgdmFsdWVzOiAxLFxuICBjb3VudDogMSxcbiAgdmFsaWQ6IDEsXG4gIG1pc3Npbmc6IDEsXG4gIGRpc3RpbmN0OiAxLFxuICBzdW06IDEsXG4gIG1lYW46IDEsXG4gIGF2ZXJhZ2U6IDEsXG4gIHZhcmlhbmNlOiAxLFxuICB2YXJpYW5jZXA6IDEsXG4gIHN0ZGV2OiAxLFxuICBzdGRldnA6IDEsXG4gIG1lZGlhbjogMSxcbiAgcTE6IDEsXG4gIHEzOiAxLFxuICBjaTA6IDEsXG4gIGNpMTogMSxcbiAgbWluOiAxLFxuICBtYXg6IDEsXG4gIGFyZ21pbjogMSxcbiAgYXJnbWF4OiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IEFHR1JFR0FURV9PUFMgPSBmbGFnS2V5cyhBR0dSRUdBVEVfT1BfSU5ERVgpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBZ2dyZWdhdGVPcChhOiBzdHJpbmcpOiBhIGlzIEFnZ3JlZ2F0ZU9wIHtcbiAgcmV0dXJuICEhQUdHUkVHQVRFX09QX0lOREVYW2FdO1xufVxuXG5leHBvcnQgY29uc3QgQ09VTlRJTkdfT1BTOiBBZ2dyZWdhdGVPcFtdID0gWydjb3VudCcsICd2YWxpZCcsICdtaXNzaW5nJywgJ2Rpc3RpbmN0J107XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvdW50aW5nQWdncmVnYXRlT3AoYWdncmVnYXRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGFnZ3JlZ2F0ZSAmJiBjb250YWlucyhDT1VOVElOR19PUFMsIGFnZ3JlZ2F0ZSk7XG59XG5cbi8qKiBBZGRpdGl2ZS1iYXNlZCBhZ2dyZWdhdGlvbiBvcGVyYXRpb25zLiAgVGhlc2UgY2FuIGJlIGFwcGxpZWQgdG8gc3RhY2suICovXG5leHBvcnQgY29uc3QgU1VNX09QUzogQWdncmVnYXRlT3BbXSA9IFtcbiAgICAnY291bnQnLFxuICAgICdzdW0nLFxuICAgICdkaXN0aW5jdCcsXG4gICAgJ3ZhbGlkJyxcbiAgICAnbWlzc2luZydcbl07XG5cbi8qKlxuICogQWdncmVnYXRpb24gb3BlcmF0b3JzIHRoYXQgYWx3YXlzIHByb2R1Y2UgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW2RvbWFpbk1pbiwgZG9tYWluTWF4XS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNIQVJFRF9ET01BSU5fT1BTOiBBZ2dyZWdhdGVPcFtdID0gW1xuICAgICdtZWFuJyxcbiAgICAnYXZlcmFnZScsXG4gICAgJ21lZGlhbicsXG4gICAgJ3ExJyxcbiAgICAncTMnLFxuICAgICdtaW4nLFxuICAgICdtYXgnLFxuXTtcblxuZXhwb3J0IGNvbnN0IFNIQVJFRF9ET01BSU5fT1BfSU5ERVggPSB0b1NldChTSEFSRURfRE9NQUlOX09QUyk7XG4iXX0=

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var stableStringify = __webpack_require__(15);
	var vega_util_1 = __webpack_require__(19);
	var logical_1 = __webpack_require__(20);
	var vega_util_2 = __webpack_require__(19);
	exports.isArray = vega_util_2.isArray;
	exports.isObject = vega_util_2.isObject;
	exports.isNumber = vega_util_2.isNumber;
	exports.isString = vega_util_2.isString;
	exports.truncate = vega_util_2.truncate;
	exports.toSet = vega_util_2.toSet;
	exports.stringValue = vega_util_2.stringValue;
	exports.splitAccessPath = vega_util_2.splitAccessPath;
	/**
	 * Creates an object composed of the picked object properties.
	 *
	 * Example:  (from lodash)
	 *
	 * var object = {'a': 1, 'b': '2', 'c': 3};
	 * pick(object, ['a', 'c']);
	 * // → {'a': 1, 'c': 3}
	 *
	 */
	function pick(obj, props) {
	    var copy = {};
	    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
	        var prop = props_1[_i];
	        if (obj.hasOwnProperty(prop)) {
	            copy[prop] = obj[prop];
	        }
	    }
	    return copy;
	}
	exports.pick = pick;
	/**
	 * The opposite of _.pick; this method creates an object composed of the own
	 * and inherited enumerable string keyed properties of object that are not omitted.
	 */
	function omit(obj, props) {
	    var copy = duplicate(obj);
	    for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {
	        var prop = props_2[_i];
	        delete copy[prop];
	    }
	    return copy;
	}
	exports.omit = omit;
	/**
	 * Converts any object into a string representation that can be consumed by humans.
	 */
	exports.stringify = stableStringify;
	/**
	 * Converts any object into a string of limited size, or a number.
	 */
	function hash(a) {
	    if (vega_util_1.isNumber(a)) {
	        return a;
	    }
	    var str = vega_util_1.isString(a) ? a : stableStringify(a);
	    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage
	    if (str.length < 100) {
	        return str;
	    }
	    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
	    var h = 0;
	    for (var i = 0; i < str.length; i++) {
	        var char = str.charCodeAt(i);
	        h = ((h << 5) - h) + char;
	        h = h & h; // Convert to 32bit integer
	    }
	    return h;
	}
	exports.hash = hash;
	function contains(array, item) {
	    return array.indexOf(item) > -1;
	}
	exports.contains = contains;
	/** Returns the array without the elements in item */
	function without(array, excludedItems) {
	    return array.filter(function (item) { return !contains(excludedItems, item); });
	}
	exports.without = without;
	function union(array, other) {
	    return array.concat(without(other, array));
	}
	exports.union = union;
	/**
	 * Returns true if any item returns true.
	 */
	function some(arr, f) {
	    var i = 0;
	    for (var k = 0; k < arr.length; k++) {
	        if (f(arr[k], k, i++)) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.some = some;
	/**
	 * Returns true if all items return true.
	 */
	function every(arr, f) {
	    var i = 0;
	    for (var k = 0; k < arr.length; k++) {
	        if (!f(arr[k], k, i++)) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.every = every;
	function flatten(arrays) {
	    return [].concat.apply([], arrays);
	}
	exports.flatten = flatten;
	/**
	 * recursively merges src into dest
	 */
	function mergeDeep(dest) {
	    var src = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        src[_i - 1] = arguments[_i];
	    }
	    for (var _a = 0, src_1 = src; _a < src_1.length; _a++) {
	        var s = src_1[_a];
	        dest = deepMerge_(dest, s);
	    }
	    return dest;
	}
	exports.mergeDeep = mergeDeep;
	// recursively merges src into dest
	function deepMerge_(dest, src) {
	    if (typeof src !== 'object' || src === null) {
	        return dest;
	    }
	    for (var p in src) {
	        if (!src.hasOwnProperty(p)) {
	            continue;
	        }
	        if (src[p] === undefined) {
	            continue;
	        }
	        if (typeof src[p] !== 'object' || vega_util_1.isArray(src[p]) || src[p] === null) {
	            dest[p] = src[p];
	        }
	        else if (typeof dest[p] !== 'object' || dest[p] === null) {
	            dest[p] = mergeDeep(vega_util_1.isArray(src[p].constructor) ? [] : {}, src[p]);
	        }
	        else {
	            mergeDeep(dest[p], src[p]);
	        }
	    }
	    return dest;
	}
	function unique(values, f) {
	    var results = [];
	    var u = {};
	    var v;
	    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	        var val = values_1[_i];
	        v = f(val);
	        if (v in u) {
	            continue;
	        }
	        u[v] = 1;
	        results.push(val);
	    }
	    return results;
	}
	exports.unique = unique;
	/**
	 * Returns true if the two dictionaries disagree. Applies only to defined values.
	 */
	function differ(dict, other) {
	    for (var key in dict) {
	        if (dict.hasOwnProperty(key)) {
	            if (other[key] && dict[key] && other[key] !== dict[key]) {
	                return true;
	            }
	        }
	    }
	    return false;
	}
	exports.differ = differ;
	function hasIntersection(a, b) {
	    for (var key in a) {
	        if (key in b) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.hasIntersection = hasIntersection;
	function isNumeric(num) {
	    return !isNaN(num);
	}
	exports.isNumeric = isNumeric;
	function differArray(array, other) {
	    if (array.length !== other.length) {
	        return true;
	    }
	    array.sort();
	    other.sort();
	    for (var i = 0; i < array.length; i++) {
	        if (other[i] !== array[i]) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.differArray = differArray;
	// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208
	exports.keys = Object.keys;
	function vals(x) {
	    var _vals = [];
	    for (var k in x) {
	        if (x.hasOwnProperty(k)) {
	            _vals.push(x[k]);
	        }
	    }
	    return _vals;
	}
	exports.vals = vals;
	function flagKeys(f) {
	    return exports.keys(f);
	}
	exports.flagKeys = flagKeys;
	function duplicate(obj) {
	    return JSON.parse(JSON.stringify(obj));
	}
	exports.duplicate = duplicate;
	function isBoolean(b) {
	    return b === true || b === false;
	}
	exports.isBoolean = isBoolean;
	/**
	 * Convert a string into a valid variable name
	 */
	function varName(s) {
	    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
	    var alphanumericS = s.replace(/\W/g, '_');
	    // Add _ if the string has leading numbers.
	    return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
	}
	exports.varName = varName;
	function logicalExpr(op, cb) {
	    if (logical_1.isLogicalNot(op)) {
	        return '!(' + logicalExpr(op.not, cb) + ')';
	    }
	    else if (logical_1.isLogicalAnd(op)) {
	        return '(' + op.and.map(function (and) { return logicalExpr(and, cb); }).join(') && (') + ')';
	    }
	    else if (logical_1.isLogicalOr(op)) {
	        return '(' + op.or.map(function (or) { return logicalExpr(or, cb); }).join(') || (') + ')';
	    }
	    else {
	        return cb(op);
	    }
	}
	exports.logicalExpr = logicalExpr;
	/**
	 * Delete nested property of an object, and delete the ancestors of the property if they become empty.
	 */
	function deleteNestedProperty(obj, orderedProps) {
	    var isEmpty = true;
	    while (orderedProps.length > 0 && isEmpty) {
	        var o = obj;
	        for (var i = 0; i < orderedProps.length - 1; i++) {
	            o = o[orderedProps[i]];
	        }
	        delete o[orderedProps.pop()];
	        if (exports.keys(o).length !== 0) {
	            isEmpty = false;
	        }
	    }
	}
	exports.deleteNestedProperty = deleteNestedProperty;
	function titlecase(s) {
	    return s.charAt(0).toUpperCase() + s.substr(1);
	}
	exports.titlecase = titlecase;
	/**
	 * Converts a path to an access path.
	 */
	function accessPath(path) {
	    return "[" + vega_util_1.splitAccessPath(path).map(vega_util_1.stringValue).join('][') + "]";
	}
	exports.accessPath = accessPath;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(16);
	
	module.exports = function (obj, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var space = opts.space || '';
	    if (typeof space === 'number') space = Array(space+1).join(' ');
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
	    var replacer = opts.replacer || function(key, value) { return value; };
	
	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);
	
	    var seen = [];
	    return (function stringify (parent, key, node, level) {
	        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
	        var colonSeparator = space ? ': ' : ':';
	
	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }
	
	        node = replacer.call(parent, key, node);
	
	        if (node === undefined) {
	            return;
	        }
	        if (typeof node !== 'object' || node === null) {
	            return json.stringify(node);
	        }
	        if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
	                out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	        }
	        else {
	            if (seen.indexOf(node) !== -1) {
	                if (cycles) return json.stringify('__cycle__');
	                throw new TypeError('Converting circular structure to JSON');
	            }
	            else seen.push(node);
	
	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = stringify(node, key, node[key], level+1);
	
	                if(!value) continue;
	
	                var keyValue = json.stringify(key)
	                    + colonSeparator
	                    + value;
	                ;
	                out.push(indent + space + keyValue);
	            }
	            seen.splice(seen.indexOf(node), 1);
	            return '{' + out.join(',') + indent + '}';
	        }
	    })({ '': obj }, '', obj, 0);
	};
	
	var isArray = Array.isArray || function (x) {
	    return {}.toString.call(x) === '[object Array]';
	};
	
	var objectKeys = Object.keys || function (obj) {
	    var has = Object.prototype.hasOwnProperty || function () { return true };
	    var keys = [];
	    for (var key in obj) {
	        if (has.call(obj, key)) keys.push(key);
	    }
	    return keys;
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	exports.parse = __webpack_require__(17);
	exports.stringify = __webpack_require__(18);


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	var at, // The index of the current character
	    ch, // The current character
	    escapee = {
	        '"':  '"',
	        '\\': '\\',
	        '/':  '/',
	        b:    '\b',
	        f:    '\f',
	        n:    '\n',
	        r:    '\r',
	        t:    '\t'
	    },
	    text,
	
	    error = function (m) {
	        // Call error when something is wrong.
	        throw {
	            name:    'SyntaxError',
	            message: m,
	            at:      at,
	            text:    text
	        };
	    },
	    
	    next = function (c) {
	        // If a c parameter is provided, verify that it matches the current character.
	        if (c && c !== ch) {
	            error("Expected '" + c + "' instead of '" + ch + "'");
	        }
	        
	        // Get the next character. When there are no more characters,
	        // return the empty string.
	        
	        ch = text.charAt(at);
	        at += 1;
	        return ch;
	    },
	    
	    number = function () {
	        // Parse a number value.
	        var number,
	            string = '';
	        
	        if (ch === '-') {
	            string = '-';
	            next('-');
	        }
	        while (ch >= '0' && ch <= '9') {
	            string += ch;
	            next();
	        }
	        if (ch === '.') {
	            string += '.';
	            while (next() && ch >= '0' && ch <= '9') {
	                string += ch;
	            }
	        }
	        if (ch === 'e' || ch === 'E') {
	            string += ch;
	            next();
	            if (ch === '-' || ch === '+') {
	                string += ch;
	                next();
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	        }
	        number = +string;
	        if (!isFinite(number)) {
	            error("Bad number");
	        } else {
	            return number;
	        }
	    },
	    
	    string = function () {
	        // Parse a string value.
	        var hex,
	            i,
	            string = '',
	            uffff;
	        
	        // When parsing for string values, we must look for " and \ characters.
	        if (ch === '"') {
	            while (next()) {
	                if (ch === '"') {
	                    next();
	                    return string;
	                } else if (ch === '\\') {
	                    next();
	                    if (ch === 'u') {
	                        uffff = 0;
	                        for (i = 0; i < 4; i += 1) {
	                            hex = parseInt(next(), 16);
	                            if (!isFinite(hex)) {
	                                break;
	                            }
	                            uffff = uffff * 16 + hex;
	                        }
	                        string += String.fromCharCode(uffff);
	                    } else if (typeof escapee[ch] === 'string') {
	                        string += escapee[ch];
	                    } else {
	                        break;
	                    }
	                } else {
	                    string += ch;
	                }
	            }
	        }
	        error("Bad string");
	    },
	
	    white = function () {
	
	// Skip whitespace.
	
	        while (ch && ch <= ' ') {
	            next();
	        }
	    },
	
	    word = function () {
	
	// true, false, or null.
	
	        switch (ch) {
	        case 't':
	            next('t');
	            next('r');
	            next('u');
	            next('e');
	            return true;
	        case 'f':
	            next('f');
	            next('a');
	            next('l');
	            next('s');
	            next('e');
	            return false;
	        case 'n':
	            next('n');
	            next('u');
	            next('l');
	            next('l');
	            return null;
	        }
	        error("Unexpected '" + ch + "'");
	    },
	
	    value,  // Place holder for the value function.
	
	    array = function () {
	
	// Parse an array value.
	
	        var array = [];
	
	        if (ch === '[') {
	            next('[');
	            white();
	            if (ch === ']') {
	                next(']');
	                return array;   // empty array
	            }
	            while (ch) {
	                array.push(value());
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad array");
	    },
	
	    object = function () {
	
	// Parse an object value.
	
	        var key,
	            object = {};
	
	        if (ch === '{') {
	            next('{');
	            white();
	            if (ch === '}') {
	                next('}');
	                return object;   // empty object
	            }
	            while (ch) {
	                key = string();
	                white();
	                next(':');
	                if (Object.hasOwnProperty.call(object, key)) {
	                    error('Duplicate key "' + key + '"');
	                }
	                object[key] = value();
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad object");
	    };
	
	value = function () {
	
	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.
	
	    white();
	    switch (ch) {
	    case '{':
	        return object();
	    case '[':
	        return array();
	    case '"':
	        return string();
	    case '-':
	        return number();
	    default:
	        return ch >= '0' && ch <= '9' ? number() : word();
	    }
	};
	
	// Return the json_parse function. It will have access to all of the above
	// functions and variables.
	
	module.exports = function (source, reviver) {
	    var result;
	    
	    text = source;
	    at = 0;
	    ch = ' ';
	    result = value();
	    white();
	    if (ch) {
	        error("Syntax error");
	    }
	
	    // If there is a reviver function, we recursively walk the new structure,
	    // passing each name/value pair to the reviver function for possible
	    // transformation, starting with a temporary root object that holds the result
	    // in an empty key. If there is not a reviver function, we simply return the
	    // result.
	
	    return typeof reviver === 'function' ? (function walk(holder, key) {
	        var k, v, value = holder[key];
	        if (value && typeof value === 'object') {
	            for (k in value) {
	                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                    v = walk(value, k);
	                    if (v !== undefined) {
	                        value[k] = v;
	                    } else {
	                        delete value[k];
	                    }
	                }
	            }
	        }
	        return reviver.call(holder, key, value);
	    }({'': result}, '')) : result;
	};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    gap,
	    indent,
	    meta = {    // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    },
	    rep;
	
	function quote(string) {
	    // If the string contains no control characters, no quote characters, and no
	    // backslash characters, then we can safely slap some quotes around it.
	    // Otherwise we must also replace the offending characters with safe escape
	    // sequences.
	    
	    escapable.lastIndex = 0;
	    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	        var c = meta[a];
	        return typeof c === 'string' ? c :
	            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    }) + '"' : '"' + string + '"';
	}
	
	function str(key, holder) {
	    // Produce a string from holder[key].
	    var i,          // The loop counter.
	        k,          // The member key.
	        v,          // The member value.
	        length,
	        mind = gap,
	        partial,
	        value = holder[key];
	    
	    // If the value has a toJSON method, call it to obtain a replacement value.
	    if (value && typeof value === 'object' &&
	            typeof value.toJSON === 'function') {
	        value = value.toJSON(key);
	    }
	    
	    // If we were called with a replacer function, then call the replacer to
	    // obtain a replacement value.
	    if (typeof rep === 'function') {
	        value = rep.call(holder, key, value);
	    }
	    
	    // What happens next depends on the value's type.
	    switch (typeof value) {
	        case 'string':
	            return quote(value);
	        
	        case 'number':
	            // JSON numbers must be finite. Encode non-finite numbers as null.
	            return isFinite(value) ? String(value) : 'null';
	        
	        case 'boolean':
	        case 'null':
	            // If the value is a boolean or null, convert it to a string. Note:
	            // typeof null does not produce 'null'. The case is included here in
	            // the remote chance that this gets fixed someday.
	            return String(value);
	            
	        case 'object':
	            if (!value) return 'null';
	            gap += indent;
	            partial = [];
	            
	            // Array.isArray
	            if (Object.prototype.toString.apply(value) === '[object Array]') {
	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || 'null';
	                }
	                
	                // Join all of the elements together, separated with commas, and
	                // wrap them in brackets.
	                v = partial.length === 0 ? '[]' : gap ?
	                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
	                    '[' + partial.join(',') + ']';
	                gap = mind;
	                return v;
	            }
	            
	            // If the replacer is an array, use it to select the members to be
	            // stringified.
	            if (rep && typeof rep === 'object') {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    k = rep[i];
	                    if (typeof k === 'string') {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            else {
	                // Otherwise, iterate through all of the keys in the object.
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            
	        // Join all of the member texts together, separated with commas,
	        // and wrap them in braces.
	
	        v = partial.length === 0 ? '{}' : gap ?
	            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	            '{' + partial.join(',') + '}';
	        gap = mind;
	        return v;
	    }
	}
	
	module.exports = function (value, replacer, space) {
	    var i;
	    gap = '';
	    indent = '';
	    
	    // If the space parameter is a number, make an indent string containing that
	    // many spaces.
	    if (typeof space === 'number') {
	        for (i = 0; i < space; i += 1) {
	            indent += ' ';
	        }
	    }
	    // If the space parameter is a string, it will be used as the indent string.
	    else if (typeof space === 'string') {
	        indent = space;
	    }
	
	    // If there is a replacer, it must be a function or an array.
	    // Otherwise, throw an error.
	    rep = replacer;
	    if (replacer && typeof replacer !== 'function'
	    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	        throw new Error('JSON.stringify');
	    }
	    
	    // Make a fake root object containing our value under the key of ''.
	    // Return the result of stringifying the value.
	    return str('', {'': value});
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.vega = global.vega || {})));
	}(this, (function (exports) { 'use strict';
	
	var accessor = function(fn, fields, name) {
	  fn.fields = fields || [];
	  fn.fname = name;
	  return fn;
	};
	
	function accessorName(fn) {
	  return fn == null ? null : fn.fname;
	}
	
	function accessorFields(fn) {
	  return fn == null ? null : fn.fields;
	}
	
	var error = function(message) {
	  throw Error(message);
	};
	
	var splitAccessPath = function(p) {
	  var path = [],
	      q = null,
	      b = 0,
	      n = p.length,
	      s = '',
	      i, j, c;
	
	  p = p + '';
	
	  function push() {
	    path.push(s + p.substring(i, j));
	    s = '';
	    i = j + 1;
	  }
	
	  for (i=j=0; j<n; ++j) {
	    c = p[j];
	    if (c === '\\') {
	      s += p.substring(i, j);
	      i = ++j;
	    } else if (c === q) {
	      push();
	      q = null;
	      b = -1;
	    } else if (q) {
	      continue;
	    } else if (i === b && c === '"') {
	      i = j + 1;
	      q = c;
	    } else if (i === b && c === "'") {
	      i = j + 1;
	      q = c;
	    } else if (c === '.' && !b) {
	      if (j > i) {
	        push();
	      } else {
	        i = j + 1;
	      }
	    } else if (c === '[') {
	      if (j > i) push();
	      b = i = j + 1;
	    } else if (c === ']') {
	      if (!b) error('Access path missing open bracket: ' + p);
	      if (b > 0) push();
	      b = 0;
	      i = j + 1;
	    }
	  }
	
	  if (b) error('Access path missing closing bracket: ' + p);
	  if (q) error('Access path missing closing quote: ' + p);
	
	  if (j > i) {
	    j++;
	    push();
	  }
	
	  return path;
	};
	
	var isArray = Array.isArray;
	
	var isObject = function(_) {
	  return _ === Object(_);
	};
	
	var isString = function(_) {
	  return typeof _ === 'string';
	};
	
	function $(x) {
	  return isArray(x) ? '[' + x.map($) + ']'
	    : isObject(x) || isString(x) ?
	      // Output valid JSON and JS source strings.
	      // See http://timelessrepo.com/json-isnt-a-javascript-subset
	      JSON.stringify(x).replace('\u2028','\\u2028').replace('\u2029', '\\u2029')
	    : x;
	}
	
	var field = function(field, name) {
	  var path = splitAccessPath(field),
	      code = 'return _[' + path.map($).join('][') + '];';
	
	  return accessor(
	    Function('_', code),
	    [(field = path.length===1 ? path[0] : field)],
	    name || field
	  );
	};
	
	var empty = [];
	
	var id = field('id');
	
	var identity = accessor(function(_) { return _; }, empty, 'identity');
	
	var zero = accessor(function() { return 0; }, empty, 'zero');
	
	var one = accessor(function() { return 1; }, empty, 'one');
	
	var truthy = accessor(function() { return true; }, empty, 'true');
	
	var falsy = accessor(function() { return false; }, empty, 'false');
	
	function log(method, level, input) {
	  var args = [level].concat([].slice.call(input));
	  console[method].apply(console, args); // eslint-disable-line no-console
	}
	
	var None  = 0;
	var Error$1 = 1;
	var Warn  = 2;
	var Info  = 3;
	var Debug = 4;
	
	var logger = function(_) {
	  var level = _ || None;
	  return {
	    level: function(_) {
	      if (arguments.length) {
	        level = +_;
	        return this;
	      } else {
	        return level;
	      }
	    },
	    error: function() {
	      if (level >= Error$1) log('error', 'ERROR', arguments);
	      return this;
	    },
	    warn: function() {
	      if (level >= Warn) log('warn', 'WARN', arguments);
	      return this;
	    },
	    info: function() {
	      if (level >= Info) log('log', 'INFO', arguments);
	      return this;
	    },
	    debug: function() {
	      if (level >= Debug) log('log', 'DEBUG', arguments);
	      return this;
	    }
	  }
	};
	
	var peek = function(array) {
	  return array[array.length - 1];
	};
	
	var toNumber = function(_) {
	  return _ == null || _ === '' ? null : +_;
	};
	
	function exp(sign) {
	  return function(x) { return sign * Math.exp(x); };
	}
	
	function log$1(sign) {
	  return function(x) { return Math.log(sign * x); };
	}
	
	function pow(exponent) {
	  return function(x) {
	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	  };
	}
	
	function pan(domain, delta, lift, ground) {
	  var d0 = lift(domain[0]),
	      d1 = lift(peek(domain)),
	      dd = (d1 - d0) * delta;
	
	  return [
	    ground(d0 - dd),
	    ground(d1 - dd)
	  ];
	}
	
	function panLinear(domain, delta) {
	  return pan(domain, delta, toNumber, identity);
	}
	
	function panLog(domain, delta) {
	  var sign = Math.sign(domain[0]);
	  return pan(domain, delta, log$1(sign), exp(sign));
	}
	
	function panPow(domain, delta, exponent) {
	  return pan(domain, delta, pow(exponent), pow(1/exponent));
	}
	
	function zoom(domain, anchor, scale, lift, ground) {
	  var d0 = lift(domain[0]),
	      d1 = lift(peek(domain)),
	      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;
	
	  return [
	    ground(da + (d0 - da) * scale),
	    ground(da + (d1 - da) * scale)
	  ];
	}
	
	function zoomLinear(domain, anchor, scale) {
	  return zoom(domain, anchor, scale, toNumber, identity);
	}
	
	function zoomLog(domain, anchor, scale) {
	  var sign = Math.sign(domain[0]);
	  return zoom(domain, anchor, scale, log$1(sign), exp(sign));
	}
	
	function zoomPow(domain, anchor, scale, exponent) {
	  return zoom(domain, anchor, scale, pow(exponent), pow(1/exponent));
	}
	
	var array = function(_) {
	  return _ != null ? (isArray(_) ? _ : [_]) : [];
	};
	
	var isFunction = function(_) {
	  return typeof _ === 'function';
	};
	
	var compare = function(fields, orders) {
	  var idx = [],
	      cmp = (fields = array(fields)).map(function(f, i) {
	        if (f == null) {
	          return null;
	        } else {
	          idx.push(i);
	          return isFunction(f) ? f
	            : splitAccessPath(f).map($).join('][');
	        }
	      }),
	      n = idx.length - 1,
	      ord = array(orders),
	      code = 'var u,v;return ',
	      i, j, f, u, v, d, t, lt, gt;
	
	  if (n < 0) return null;
	
	  for (j=0; j<=n; ++j) {
	    i = idx[j];
	    f = cmp[i];
	
	    if (isFunction(f)) {
	      d = 'f' + i;
	      u = '(u=this.' + d + '(a))';
	      v = '(v=this.' + d + '(b))';
	      (t = t || {})[d] = f;
	    } else {
	      u = '(u=a['+f+'])';
	      v = '(v=b['+f+'])';
	    }
	
	    d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';
	
	    if (ord[i] !== 'descending') {
	      gt = 1;
	      lt = -1;
	    } else {
	      gt = -1;
	      lt = 1;
	    }
	
	    code += '(' + u+'<'+v+'||u==null)&&v!=null?' + lt
	      + ':(u>v||v==null)&&u!=null?' + gt
	      + ':'+d+'!==u&&v===v?' + lt
	      + ':v!==v&&u===u?' + gt
	      + (i < n ? ':' : ':0');
	  }
	
	  f = Function('a', 'b', code + ';');
	  if (t) f = f.bind(t);
	
	  fields = fields.reduce(function(map, field) {
	    if (isFunction(field)) {
	      (accessorFields(field) || []).forEach(function(_) { map[_] = 1; });
	    } else if (field != null) {
	      map[field + ''] = 1;
	    }
	    return map;
	  }, {});
	
	  return accessor(f, Object.keys(fields));
	};
	
	var constant = function(_) {
	  return isFunction(_) ? _ : function() { return _; };
	};
	
	var debounce = function(delay, handler) {
	  var tid, evt;
	
	  function callback() {
	    handler(evt);
	    tid = evt = null;
	  }
	
	  return function(e) {
	    evt = e;
	    if (tid) clearTimeout(tid);
	    tid = setTimeout(callback, delay);
	  };
	};
	
	var extend = function(_) {
	  for (var x, k, i=1, len=arguments.length; i<len; ++i) {
	    x = arguments[i];
	    for (k in x) { _[k] = x[k]; }
	  }
	  return _;
	};
	
	var extentIndex = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a, b, c, u, v;
	
	  if (f == null) {
	    while (++i < n) {
	      b = array[i];
	      if (b != null && b >= b) {
	        a = c = b;
	        break;
	      }
	    }
	    u = v = i;
	    while (++i < n) {
	      b = array[i];
	      if (b != null) {
	        if (a > b) {
	          a = b;
	          u = i;
	        }
	        if (c < b) {
	          c = b;
	          v = i;
	        }
	      }
	    }
	  } else {
	    while (++i < n) {
	      b = f(array[i], i, array);
	      if (b != null && b >= b) {
	        a = c = b;
	        break;
	      }
	    }
	    u = v = i;
	    while (++i < n) {
	      b = f(array[i], i, array);
	      if (b != null) {
	        if (a > b) {
	          a = b;
	          u = i;
	        }
	        if (c < b) {
	          c = b;
	          v = i;
	        }
	      }
	    }
	  }
	
	  return [u, v];
	};
	
	var NULL = {};
	
	var fastmap = function(input) {
	  var obj = {},
	      map,
	      test;
	
	  function has(key) {
	    return obj.hasOwnProperty(key) && obj[key] !== NULL;
	  }
	
	  map = {
	    size: 0,
	    empty: 0,
	    object: obj,
	    has: has,
	    get: function(key) {
	      return has(key) ? obj[key] : undefined;
	    },
	    set: function(key, value) {
	      if (!has(key)) {
	        ++map.size;
	        if (obj[key] === NULL) --map.empty;
	      }
	      obj[key] = value;
	      return this;
	    },
	    delete: function(key) {
	      if (has(key)) {
	        --map.size;
	        ++map.empty;
	        obj[key] = NULL;
	      }
	      return this;
	    },
	    clear: function() {
	      map.size = map.empty = 0;
	      map.object = obj = {};
	    },
	    test: function(_) {
	      if (arguments.length) {
	        test = _;
	        return map;
	      } else {
	        return test;
	      }
	    },
	    clean: function() {
	      var next = {},
	          size = 0,
	          key, value;
	      for (key in obj) {
	        value = obj[key];
	        if (value !== NULL && (!test || !test(value))) {
	          next[key] = value;
	          ++size;
	        }
	      }
	      map.size = size;
	      map.empty = 0;
	      map.object = (obj = next);
	    }
	  };
	
	  if (input) Object.keys(input).forEach(function(key) {
	    map.set(key, input[key]);
	  });
	
	  return map;
	};
	
	var inherits = function(child, parent) {
	  var proto = (child.prototype = Object.create(parent.prototype));
	  proto.constructor = child;
	  return proto;
	};
	
	var isBoolean = function(_) {
	  return typeof _ === 'boolean';
	};
	
	var isDate = function(_) {
	  return Object.prototype.toString.call(_) === '[object Date]';
	};
	
	var isNumber = function(_) {
	  return typeof _ === 'number';
	};
	
	var isRegExp = function(_) {
	  return Object.prototype.toString.call(_) === '[object RegExp]';
	};
	
	var key = function(fields, flat) {
	  if (fields) {
	    fields = flat
	      ? array(fields).map(function(f) { return f.replace(/\\(.)/g, '$1'); })
	      : array(fields);
	  }
	
	  var fn = !(fields && fields.length)
	    ? function() { return ''; }
	    : Function('_', 'return \'\'+' +
	        fields.map(function(f) {
	          return '_[' + (flat
	              ? $(f)
	              : splitAccessPath(f).map($).join('][')
	            ) + ']';
	        }).join('+\'|\'+') + ';');
	
	  return accessor(fn, fields, 'key');
	};
	
	var merge = function(compare, array0, array1, output) {
	  var n0 = array0.length,
	      n1 = array1.length;
	
	  if (!n1) return array0;
	  if (!n0) return array1;
	
	  var merged = output || new array0.constructor(n0 + n1),
	      i0 = 0, i1 = 0, i = 0;
	
	  for (; i0<n0 && i1<n1; ++i) {
	    merged[i] = compare(array0[i0], array1[i1]) > 0
	       ? array1[i1++]
	       : array0[i0++];
	  }
	
	  for (; i0<n0; ++i0, ++i) {
	    merged[i] = array0[i0];
	  }
	
	  for (; i1<n1; ++i1, ++i) {
	    merged[i] = array1[i1];
	  }
	
	  return merged;
	};
	
	var repeat = function(str, reps) {
	  var s = '';
	  while (--reps >= 0) s += str;
	  return s;
	};
	
	var pad = function(str, length, padchar, align) {
	  var c = padchar || ' ',
	      s = str + '',
	      n = length - s.length;
	
	  return n <= 0 ? s
	    : align === 'left' ? repeat(c, n) + s
	    : align === 'center' ? repeat(c, ~~(n/2)) + s + repeat(c, Math.ceil(n/2))
	    : s + repeat(c, n);
	};
	
	var toBoolean = function(_) {
	  return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
	};
	
	function defaultParser(_) {
	  return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
	}
	
	var toDate = function(_, parser) {
	  parser = parser || defaultParser;
	  return _ == null || _ === '' ? null : parser(_);
	};
	
	var toString = function(_) {
	  return _ == null || _ === '' ? null : _ + '';
	};
	
	var toSet = function(_) {
	  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = 1;
	  return s;
	};
	
	var truncate = function(str, length, align, ellipsis) {
	  var e = ellipsis != null ? ellipsis : '\u2026',
	      s = str + '',
	      n = s.length,
	      l = Math.max(0, length - e.length);
	
	  return n <= length ? s
	    : align === 'left' ? e + s.slice(n - l)
	    : align === 'center' ? s.slice(0, Math.ceil(l/2)) + e + s.slice(n - ~~(l/2))
	    : s.slice(0, l) + e;
	};
	
	var visitArray = function(array, filter, visitor) {
	  if (array) {
	    var i = 0, n = array.length, t;
	    if (filter) {
	      for (; i<n; ++i) {
	        if (t = filter(array[i])) visitor(t, i, array);
	      }
	    } else {
	      array.forEach(visitor);
	    }
	  }
	};
	
	exports.accessor = accessor;
	exports.accessorName = accessorName;
	exports.accessorFields = accessorFields;
	exports.id = id;
	exports.identity = identity;
	exports.zero = zero;
	exports.one = one;
	exports.truthy = truthy;
	exports.falsy = falsy;
	exports.logger = logger;
	exports.None = None;
	exports.Error = Error$1;
	exports.Warn = Warn;
	exports.Info = Info;
	exports.Debug = Debug;
	exports.panLinear = panLinear;
	exports.panLog = panLog;
	exports.panPow = panPow;
	exports.zoomLinear = zoomLinear;
	exports.zoomLog = zoomLog;
	exports.zoomPow = zoomPow;
	exports.array = array;
	exports.compare = compare;
	exports.constant = constant;
	exports.debounce = debounce;
	exports.error = error;
	exports.extend = extend;
	exports.extentIndex = extentIndex;
	exports.fastmap = fastmap;
	exports.field = field;
	exports.inherits = inherits;
	exports.isArray = isArray;
	exports.isBoolean = isBoolean;
	exports.isDate = isDate;
	exports.isFunction = isFunction;
	exports.isNumber = isNumber;
	exports.isObject = isObject;
	exports.isRegExp = isRegExp;
	exports.isString = isString;
	exports.key = key;
	exports.merge = merge;
	exports.pad = pad;
	exports.peek = peek;
	exports.repeat = repeat;
	exports.splitAccessPath = splitAccessPath;
	exports.stringValue = $;
	exports.toBoolean = toBoolean;
	exports.toDate = toDate;
	exports.toNumber = toNumber;
	exports.toString = toString;
	exports.toSet = toSet;
	exports.truncate = truncate;
	exports.visitArray = visitArray;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function isLogicalOr(op) {
	    return !!op.or;
	}
	exports.isLogicalOr = isLogicalOr;
	function isLogicalAnd(op) {
	    return !!op.and;
	}
	exports.isLogicalAnd = isLogicalAnd;
	function isLogicalNot(op) {
	    return !!op.not;
	}
	exports.isLogicalNot = isLogicalNot;
	function forEachLeave(op, fn) {
	    if (isLogicalNot(op)) {
	        forEachLeave(op.not, fn);
	    }
	    else if (isLogicalAnd(op)) {
	        for (var _i = 0, _a = op.and; _i < _a.length; _i++) {
	            var subop = _a[_i];
	            forEachLeave(subop, fn);
	        }
	    }
	    else if (isLogicalOr(op)) {
	        for (var _b = 0, _c = op.or; _b < _c.length; _b++) {
	            var subop = _c[_b];
	            forEachLeave(subop, fn);
	        }
	    }
	    else {
	        fn(op);
	    }
	}
	exports.forEachLeave = forEachLeave;
	function normalizeLogicalOperand(op, normalizer) {
	    if (isLogicalNot(op)) {
	        return { not: normalizeLogicalOperand(op.not, normalizer) };
	    }
	    else if (isLogicalAnd(op)) {
	        return { and: op.and.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };
	    }
	    else if (isLogicalOr(op)) {
	        return { or: op.or.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };
	    }
	    else {
	        return normalizer(op);
	    }
	}
	exports.normalizeLogicalOperand = normalizeLogicalOperand;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naWNhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dpY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBY0EscUJBQTRCLEVBQXVCO0lBQ2pELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBRkQsa0NBRUM7QUFFRCxzQkFBNkIsRUFBdUI7SUFDbEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2xCLENBQUM7QUFGRCxvQ0FFQztBQUVELHNCQUE2QixFQUF1QjtJQUNsRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbEIsQ0FBQztBQUZELG9DQUVDO0FBRUQsc0JBQWdDLEVBQXFCLEVBQUUsRUFBbUI7SUFDeEUsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLENBQWdCLFVBQU0sRUFBTixLQUFBLEVBQUUsQ0FBQyxHQUFHLEVBQU4sY0FBTSxFQUFOLElBQU07WUFBckIsSUFBTSxLQUFLLFNBQUE7WUFDZCxZQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFnQixVQUFLLEVBQUwsS0FBQSxFQUFFLENBQUMsRUFBRSxFQUFMLGNBQUssRUFBTCxJQUFLO1lBQXBCLElBQU0sS0FBSyxTQUFBO1lBQ2QsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNULENBQUM7QUFDSCxDQUFDO0FBZEQsb0NBY0M7QUFFRCxpQ0FBMkMsRUFBcUIsRUFBRSxVQUF1QjtJQUN2RixFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxFQUFDLENBQUM7SUFDNUQsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLHVCQUF1QixDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxFQUFDLENBQUM7SUFDeEUsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxFQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLHVCQUF1QixDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxFQUFDLENBQUM7SUFDdEUsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QixDQUFDO0FBQ0gsQ0FBQztBQVZELDBEQVVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgTG9naWNhbE9wZXJhbmQ8VD4gPSBMb2dpY2FsTm90PFQ+IHwgTG9naWNhbEFuZDxUPiB8IExvZ2ljYWxPcjxUPiB8IFQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbE9yPFQ+IHtcbiAgb3I6IExvZ2ljYWxPcGVyYW5kPFQ+W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbEFuZDxUPiB7XG4gIGFuZDogTG9naWNhbE9wZXJhbmQ8VD5bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpY2FsTm90PFQ+IHtcbiAgbm90OiBMb2dpY2FsT3BlcmFuZDxUPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9naWNhbE9yKG9wOiBMb2dpY2FsT3BlcmFuZDxhbnk+KTogb3AgaXMgTG9naWNhbE9yPGFueT4ge1xuICByZXR1cm4gISFvcC5vcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9naWNhbEFuZChvcDogTG9naWNhbE9wZXJhbmQ8YW55Pik6IG9wIGlzIExvZ2ljYWxBbmQ8YW55PiB7XG4gIHJldHVybiAhIW9wLmFuZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9naWNhbE5vdChvcDogTG9naWNhbE9wZXJhbmQ8YW55Pik6IG9wIGlzIExvZ2ljYWxOb3Q8YW55PiB7XG4gIHJldHVybiAhIW9wLm5vdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hMZWF2ZTxUPihvcDogTG9naWNhbE9wZXJhbmQ8VD4sIGZuOiAob3A6IFQpID0+IHZvaWQpIHtcbiAgaWYgKGlzTG9naWNhbE5vdChvcCkpIHtcbiAgICBmb3JFYWNoTGVhdmUob3Aubm90LCBmbik7XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsQW5kKG9wKSkge1xuICAgIGZvciAoY29uc3Qgc3Vib3Agb2Ygb3AuYW5kKSB7XG4gICAgICBmb3JFYWNoTGVhdmUoc3Vib3AsIGZuKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsT3Iob3ApKSB7XG4gICAgZm9yIChjb25zdCBzdWJvcCBvZiBvcC5vcikge1xuICAgICAgZm9yRWFjaExlYXZlKHN1Ym9wLCBmbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZuKG9wKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplTG9naWNhbE9wZXJhbmQ8VD4ob3A6IExvZ2ljYWxPcGVyYW5kPFQ+LCBub3JtYWxpemVyOiAobzogVCkgPT4gVCk6IExvZ2ljYWxPcGVyYW5kPFQ+IHtcbiAgaWYgKGlzTG9naWNhbE5vdChvcCkpIHtcbiAgICByZXR1cm4ge25vdDogbm9ybWFsaXplTG9naWNhbE9wZXJhbmQob3Aubm90LCBub3JtYWxpemVyKX07XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsQW5kKG9wKSkge1xuICAgIHJldHVybiB7YW5kOiBvcC5hbmQubWFwKG8gPT4gbm9ybWFsaXplTG9naWNhbE9wZXJhbmQobywgbm9ybWFsaXplcikpfTtcbiAgfSBlbHNlIGlmIChpc0xvZ2ljYWxPcihvcCkpIHtcbiAgICByZXR1cm4ge29yOiBvcC5vci5tYXAobyA9PiBub3JtYWxpemVMb2dpY2FsT3BlcmFuZChvLCBub3JtYWxpemVyKSl9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBub3JtYWxpemVyKG9wKTtcbiAgfVxufVxuIl19

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	/**
	 * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
	 * (Properties not listed are applicable for both)
	 */
	exports.AXIS_PROPERTY_TYPE = {
	    grid: 'grid',
	    labelOverlap: 'main',
	    offset: 'main',
	    title: 'main'
	};
	var COMMON_AXIS_PROPERTIES_INDEX = {
	    orient: 1,
	    domain: 1,
	    format: 1,
	    grid: 1,
	    labelBound: 1,
	    labelFlush: 1,
	    labelPadding: 1,
	    labels: 1,
	    labelOverlap: 1,
	    maxExtent: 1,
	    minExtent: 1,
	    offset: 1,
	    position: 1,
	    tickCount: 1,
	    ticks: 1,
	    tickSize: 1,
	    title: 1,
	    titlePadding: 1,
	    values: 1,
	    zindex: 1,
	};
	var AXIS_PROPERTIES_INDEX = __assign({}, COMMON_AXIS_PROPERTIES_INDEX, { encoding: 1, labelAngle: 1, titleMaxLength: 1 });
	var VG_AXIS_PROPERTIES_INDEX = __assign({ scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX, { gridScale: 1, encode: 1 });
	function isAxisProperty(prop) {
	    return !!AXIS_PROPERTIES_INDEX[prop];
	}
	exports.isAxisProperty = isAxisProperty;
	exports.VG_AXIS_PROPERTIES = util_1.flagKeys(VG_AXIS_PROPERTIES_INDEX);
	// Export for dependent projects
	exports.AXIS_PROPERTIES = util_1.flagKeys(AXIS_PROPERTIES_INDEX);
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var util_1 = __webpack_require__(14);
	function binToString(bin) {
	    if (util_1.isBoolean(bin)) {
	        return 'bin';
	    }
	    return 'bin' + util_1.keys(bin).map(function (p) { return ("_" + p + "_" + bin[p]).replace(',', '_'); }).join('');
	}
	exports.binToString = binToString;
	function autoMaxBins(channel) {
	    switch (channel) {
	        case channel_1.ROW:
	        case channel_1.COLUMN:
	        case channel_1.SIZE:
	        case channel_1.COLOR:
	        case channel_1.OPACITY:
	        // Facets and Size shouldn't have too many bins
	        // We choose 6 like shape to simplify the rule
	        case channel_1.SHAPE:
	            return 6; // Vega's "shape" has 6 distinct values
	        default:
	            return 10;
	    }
	}
	exports.autoMaxBins = autoMaxBins;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE0RTtBQUM1RSwrQkFBdUM7QUE2RHZDLHFCQUE0QixHQUF3QjtJQUNsRCxFQUFFLENBQUMsQ0FBQyxnQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLEdBQUcsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUEsTUFBSSxDQUFDLFNBQUksR0FBRyxDQUFDLENBQUMsQ0FBRyxDQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBTEQsa0NBS0M7QUFFRCxxQkFBNEIsT0FBZ0I7SUFDMUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoQixLQUFLLGFBQUcsQ0FBQztRQUNULEtBQUssZ0JBQU0sQ0FBQztRQUNaLEtBQUssY0FBSSxDQUFDO1FBQ1YsS0FBSyxlQUFLLENBQUM7UUFDWCxLQUFLLGlCQUFPLENBQUM7UUFDWCwrQ0FBK0M7UUFDL0MsOENBQThDO1FBQ2hELEtBQUssZUFBSztZQUNSLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7UUFDbkQ7WUFDRSxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUFkRCxrQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbm5lbCwgQ09MT1IsIENPTFVNTiwgT1BBQ0lUWSwgUk9XLCBTSEFQRSwgU0laRX0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7aXNCb29sZWFuLCBrZXlzfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIGJhc2UgdG8gdXNlIGZvciBhdXRvbWF0aWMgYmluIGRldGVybWluYXRpb24gKGRlZmF1bHQgaXMgYmFzZSAxMCkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMTBgXG4gICAqXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gZXhhY3Qgc3RlcCBzaXplIHRvIHVzZSBiZXR3ZWVuIGJpbnMuXG4gICAqXG4gICAqIF9fTm90ZTpfXyBJZiBwcm92aWRlZCwgb3B0aW9ucyBzdWNoIGFzIG1heGJpbnMgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RlcD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbG93YWJsZSBzdGVwIHNpemVzIHRvIGNob29zZSBmcm9tLlxuICAgKiBAbWluSXRlbXMgMVxuICAgKi9cbiAgc3RlcHM/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEEgbWluaW11bSBhbGxvd2FibGUgc3RlcCBzaXplIChwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpbnRlZ2VyIHZhbHVlcykuXG4gICAqL1xuICBtaW5zdGVwPzogbnVtYmVyO1xuICAvKipcbiAgICogU2NhbGUgZmFjdG9ycyBpbmRpY2F0aW5nIGFsbG93YWJsZSBzdWJkaXZpc2lvbnMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIFs1LCAyXSwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgZm9yIGJhc2UgMTAgbnVtYmVycyAodGhlIGRlZmF1bHQgYmFzZSksIHRoZSBtZXRob2QgbWF5IGNvbnNpZGVyIGRpdmlkaW5nIGJpbiBzaXplcyBieSA1IGFuZC9vciAyLiBGb3IgZXhhbXBsZSwgZm9yIGFuIGluaXRpYWwgc3RlcCBzaXplIG9mIDEwLCB0aGUgbWV0aG9kIGNhbiBjaGVjayBpZiBiaW4gc2l6ZXMgb2YgMiAoPSAxMC81KSwgNSAoPSAxMC8yKSwgb3IgMSAoPSAxMC8oNSoyKSkgbWlnaHQgYWxzbyBzYXRpc2Z5IHRoZSBnaXZlbiBjb25zdHJhaW50cy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbNSwgMl1gXG4gICAqXG4gICAqIEBtaW5JdGVtcyAxXG4gICAqL1xuICBkaXZpZGU/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIGJpbnMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNmAgZm9yIGByb3dgLCBgY29sdW1uYCBhbmQgYHNoYXBlYCBjaGFubmVsczsgYDEwYCBmb3Igb3RoZXIgY2hhbm5lbHNcbiAgICpcbiAgICogQG1pbmltdW0gMlxuICAgKi9cbiAgbWF4Ymlucz86IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHRydWUgKHRoZSBkZWZhdWx0KSwgYXR0ZW1wdHMgdG8gbWFrZSB0aGUgYmluIGJvdW5kYXJpZXMgdXNlIGh1bWFuLWZyaWVuZGx5IGJvdW5kYXJpZXMsIHN1Y2ggYXMgbXVsdGlwbGVzIG9mIHRlbi5cbiAgICovXG4gIG5pY2U/OiBib29sZWFuO1xufVxuXG5cbi8qKlxuICogQmlubmluZyBwcm9wZXJ0aWVzIG9yIGJvb2xlYW4gZmxhZyBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0byBiaW4gZGF0YSBvciBub3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmluUGFyYW1zIGV4dGVuZHMgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBBIHR3by1lbGVtZW50IChgW21pbiwgbWF4XWApIGFycmF5IGluZGljYXRpbmcgdGhlIHJhbmdlIG9mIGRlc2lyZWQgYmluIHZhbHVlcy5cbiAgICogQG1pbkl0ZW1zIDJcbiAgICogQG1heEl0ZW1zIDJcbiAgICovXG4gIGV4dGVudD86IG51bWJlcltdOyAgLy8gVmdCaW5UcmFuc2Zvcm0gdXNlcyBhIGRpZmZlcmVudCBleHRlbnQgc28gd2UgbmVlZCB0byBwdWxsIHRoaXMgb3V0LlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluVG9TdHJpbmcoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKSB7XG4gIGlmIChpc0Jvb2xlYW4oYmluKSkge1xuICAgIHJldHVybiAnYmluJztcbiAgfVxuICByZXR1cm4gJ2JpbicgKyBrZXlzKGJpbikubWFwKHAgPT4gYF8ke3B9XyR7YmluW3BdfWAucmVwbGFjZSgnLCcsICdfJykpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b01heEJpbnMoY2hhbm5lbDogQ2hhbm5lbCk6IG51bWJlciB7XG4gIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgIGNhc2UgUk9XOlxuICAgIGNhc2UgQ09MVU1OOlxuICAgIGNhc2UgU0laRTpcbiAgICBjYXNlIENPTE9SOlxuICAgIGNhc2UgT1BBQ0lUWTpcbiAgICAgIC8vIEZhY2V0cyBhbmQgU2l6ZSBzaG91bGRuJ3QgaGF2ZSB0b28gbWFueSBiaW5zXG4gICAgICAvLyBXZSBjaG9vc2UgNiBsaWtlIHNoYXBlIHRvIHNpbXBsaWZ5IHRoZSBydWxlXG4gICAgY2FzZSBTSEFQRTpcbiAgICAgIHJldHVybiA2OyAvLyBWZWdhJ3MgXCJzaGFwZVwiIGhhcyA2IGRpc3RpbmN0IHZhbHVlc1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMTA7XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/*
	 * Constants and utilities for encoding channels (Visual variables)
	 * such as 'x', 'y', 'color'.
	 */
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var Channel;
	(function (Channel) {
	    // Facet
	    Channel.ROW = 'row';
	    Channel.COLUMN = 'column';
	    // Position
	    Channel.X = 'x';
	    Channel.Y = 'y';
	    Channel.X2 = 'x2';
	    Channel.Y2 = 'y2';
	    // Mark property with scale
	    Channel.COLOR = 'color';
	    Channel.SHAPE = 'shape';
	    Channel.SIZE = 'size';
	    Channel.OPACITY = 'opacity';
	    // Non-scale channel
	    Channel.TEXT = 'text';
	    Channel.ORDER = 'order';
	    Channel.DETAIL = 'detail';
	    Channel.TOOLTIP = 'tooltip';
	    Channel.HREF = 'href';
	})(Channel = exports.Channel || (exports.Channel = {}));
	exports.X = Channel.X;
	exports.Y = Channel.Y;
	exports.X2 = Channel.X2;
	exports.Y2 = Channel.Y2;
	exports.ROW = Channel.ROW;
	exports.COLUMN = Channel.COLUMN;
	exports.SHAPE = Channel.SHAPE;
	exports.SIZE = Channel.SIZE;
	exports.COLOR = Channel.COLOR;
	exports.TEXT = Channel.TEXT;
	exports.DETAIL = Channel.DETAIL;
	exports.ORDER = Channel.ORDER;
	exports.OPACITY = Channel.OPACITY;
	exports.TOOLTIP = Channel.TOOLTIP;
	exports.HREF = Channel.HREF;
	var UNIT_CHANNEL_INDEX = {
	    x: 1,
	    y: 1,
	    x2: 1,
	    y2: 1,
	    size: 1,
	    shape: 1,
	    color: 1,
	    order: 1,
	    opacity: 1,
	    text: 1,
	    detail: 1,
	    tooltip: 1,
	    href: 1,
	};
	var FACET_CHANNEL_INDEX = {
	    row: 1,
	    column: 1
	};
	var CHANNEL_INDEX = __assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);
	exports.CHANNELS = util_1.flagKeys(CHANNEL_INDEX);
	var _o = CHANNEL_INDEX.order, _d = CHANNEL_INDEX.detail, SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, ["order", "detail"]);
	/**
	 * Channels that cannot have an array of channelDef.
	 * model.fieldDef, getFieldDef only work for these channels.
	 *
	 * (The only two channels that can have an array of channelDefs are "detail" and "order".
	 * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef
	 * are not applicable for them.  Similarly, selection projecttion won't work with "detail" and "order".)
	 */
	exports.SINGLE_DEF_CHANNELS = util_1.flagKeys(SINGLE_DEF_CHANNEL_INDEX);
	function isChannel(str) {
	    return !!CHANNEL_INDEX[str];
	}
	exports.isChannel = isChannel;
	// CHANNELS without COLUMN, ROW
	exports.UNIT_CHANNELS = util_1.flagKeys(UNIT_CHANNEL_INDEX);
	// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;
	var _x = UNIT_CHANNEL_INDEX.x, _y = UNIT_CHANNEL_INDEX.y, 
	// x2 and y2 share the same scale as x and y
	_x2 = UNIT_CHANNEL_INDEX.x2, _y2 = UNIT_CHANNEL_INDEX.y2, 
	// The rest of unit channels then have scale
	NONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2"]);
	exports.NONPOSITION_CHANNELS = util_1.flagKeys(NONPOSITION_CHANNEL_INDEX);
	// POSITION_SCALE_CHANNELS = X and Y;
	var POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };
	exports.POSITION_SCALE_CHANNELS = util_1.flagKeys(POSITION_SCALE_CHANNEL_INDEX);
	// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y
	var 
	// x2 and y2 share the same scale as x and y
	// text and tooltip have format instead of scale,
	// href has neither format, nor scale
	_t = NONPOSITION_CHANNEL_INDEX.text, _tt = NONPOSITION_CHANNEL_INDEX.tooltip, _hr = NONPOSITION_CHANNEL_INDEX.href, 
	// detail and order have no scale
	_dd = NONPOSITION_CHANNEL_INDEX.detail, _oo = NONPOSITION_CHANNEL_INDEX.order, NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "detail", "order"]);
	exports.NONPOSITION_SCALE_CHANNELS = util_1.flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);
	// Declare SCALE_CHANNEL_INDEX
	var SCALE_CHANNEL_INDEX = __assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);
	/** List of channels with scales */
	exports.SCALE_CHANNELS = util_1.flagKeys(SCALE_CHANNEL_INDEX);
	function isScaleChannel(channel) {
	    return !!SCALE_CHANNEL_INDEX[channel];
	}
	exports.isScaleChannel = isScaleChannel;
	/**
	 * Return whether a channel supports a particular mark type.
	 * @param channel  channel name
	 * @param mark the mark type
	 * @return whether the mark supports the channel
	 */
	function supportMark(channel, mark) {
	    return mark in getSupportedMark(channel);
	}
	exports.supportMark = supportMark;
	/**
	 * Return a dictionary showing whether a channel supports mark type.
	 * @param channel
	 * @return A dictionary mapping mark types to boolean values.
	 */
	function getSupportedMark(channel) {
	    switch (channel) {
	        case exports.COLOR:
	        case exports.DETAIL:
	        case exports.TOOLTIP:
	        case exports.HREF:
	        case exports.ORDER: // TODO: revise (order might not support rect, which is not stackable?)
	        case exports.OPACITY:
	        case exports.ROW:
	        case exports.COLUMN:
	            return {
	                point: true, tick: true, rule: true, circle: true, square: true,
	                bar: true, rect: true, line: true, area: true, text: true, geoshape: true
	            };
	        case exports.X:
	        case exports.Y:
	            return {
	                point: true, tick: true, rule: true, circle: true, square: true,
	                bar: true, rect: true, line: true, area: true, text: true
	            };
	        case exports.X2:
	        case exports.Y2:
	            return {
	                rule: true, bar: true, rect: true, area: true
	            };
	        case exports.SIZE:
	            return {
	                point: true, tick: true, rule: true, circle: true, square: true,
	                bar: true, text: true, line: true
	            };
	        case exports.SHAPE:
	            return { point: true, geoshape: true };
	        case exports.TEXT:
	            return { text: true };
	    }
	}
	exports.getSupportedMark = getSupportedMark;
	function rangeType(channel) {
	    switch (channel) {
	        case exports.X:
	        case exports.Y:
	        case exports.SIZE:
	        case exports.OPACITY:
	        // X2 and Y2 use X and Y scales, so they similarly have continuous range.
	        case exports.X2:
	        case exports.Y2:
	            return 'continuous';
	        case exports.ROW:
	        case exports.COLUMN:
	        case exports.SHAPE:
	        // TEXT, TOOLTIP, and HREF have no scale but have discrete output
	        case exports.TEXT:
	        case exports.TOOLTIP:
	        case exports.HREF:
	            return 'discrete';
	        // Color can be either continuous or discrete, depending on scale type.
	        case exports.COLOR:
	            return 'flexible';
	        // No scale, no range type.
	        case exports.DETAIL:
	        case exports.ORDER:
	            return undefined;
	    }
	    /* istanbul ignore next: should never reach here. */
	    throw new Error('getSupportedRole not implemented for ' + channel);
	}
	exports.rangeType = rangeType;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var mark_1 = __webpack_require__(25);
	var boxplot_1 = __webpack_require__(26);
	var errorbar_1 = __webpack_require__(34);
	/**
	 * Registry index for all composite mark's normalizer
	 */
	var normalizerRegistry = {};
	function add(mark, normalizer) {
	    normalizerRegistry[mark] = normalizer;
	}
	exports.add = add;
	function remove(mark) {
	    delete normalizerRegistry[mark];
	}
	exports.remove = remove;
	exports.COMPOSITE_MARK_STYLES = boxplot_1.BOXPLOT_STYLES;
	exports.VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = __assign({}, boxplot_1.VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX);
	add(boxplot_1.BOXPLOT, boxplot_1.normalizeBoxPlot);
	add(errorbar_1.ERRORBAR, errorbar_1.normalizeErrorBar);
	/**
	 * Transform a unit spec with composite mark into a normal layer spec.
	 */
	function normalize(
	    // This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.
	    spec, config) {
	    var mark = mark_1.isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
	    var normalizer = normalizerRegistry[mark];
	    if (normalizer) {
	        return normalizer(spec, config);
	    }
	    throw new Error("Unregistered composite mark " + mark);
	}
	exports.normalize = normalize;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0Esa0NBQTZDO0FBRTdDLHFDQUE0STtBQUM1SSx1Q0FBdUQ7QUFNdkQ7O0dBRUc7QUFDSCxJQUFNLGtCQUFrQixHQUFxQyxFQUFFLENBQUM7QUFFaEUsYUFBb0IsSUFBWSxFQUFFLFVBQTBCO0lBQzFELGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUN4QyxDQUFDO0FBRkQsa0JBRUM7QUFFRCxnQkFBdUIsSUFBWTtJQUNqQyxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCx3QkFFQztBQVFZLFFBQUEscUJBQXFCLEdBQUcsd0JBQWMsQ0FBQztBQUt2QyxRQUFBLHFEQUFxRCxnQkFDN0QsK0NBQXFDLEVBQ3hDO0FBRUYsR0FBRyxDQUFDLGlCQUFPLEVBQUUsMEJBQWdCLENBQUMsQ0FBQztBQUMvQixHQUFHLENBQUMsbUJBQVEsRUFBRSw0QkFBaUIsQ0FBQyxDQUFDO0FBRWpDOztHQUVHO0FBQ0g7SUFDSSx5SEFBeUg7SUFDekgsSUFBbUMsRUFDbkMsTUFBYztJQUdoQixJQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0QsSUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUErQixJQUFNLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBYkQsOEJBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi8uLi9jb25maWcnO1xuaW1wb3J0IHtBbnlNYXJrLCBpc01hcmtEZWZ9IGZyb20gJy4vLi4vbWFyayc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTGF5ZXJTcGVjfSBmcm9tICcuLy4uL3NwZWMnO1xuaW1wb3J0IHtCT1hQTE9ULCBCT1hQTE9UX1NUWUxFUywgQm94UGxvdENvbmZpZ01peGlucywgQm94UGxvdERlZiwgbm9ybWFsaXplQm94UGxvdCwgVkxfT05MWV9CT1hQTE9UX0NPTkZJR19QUk9QRVJUWV9JTkRFWH0gZnJvbSAnLi9ib3hwbG90JztcbmltcG9ydCB7RVJST1JCQVIsIG5vcm1hbGl6ZUVycm9yQmFyfSBmcm9tICcuL2Vycm9yYmFyJztcblxuXG5leHBvcnQge0JveFBsb3RDb25maWd9IGZyb20gJy4vYm94cGxvdCc7XG5leHBvcnQgdHlwZSBVbml0Tm9ybWFsaXplciA9IChzcGVjOiBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+LCBjb25maWc6IENvbmZpZyk9PiBMYXllclNwZWM7XG5cbi8qKlxuICogUmVnaXN0cnkgaW5kZXggZm9yIGFsbCBjb21wb3NpdGUgbWFyaydzIG5vcm1hbGl6ZXJcbiAqL1xuY29uc3Qgbm9ybWFsaXplclJlZ2lzdHJ5OiB7W21hcms6IHN0cmluZ106IFVuaXROb3JtYWxpemVyfSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG1hcms6IHN0cmluZywgbm9ybWFsaXplcjogVW5pdE5vcm1hbGl6ZXIpIHtcbiAgbm9ybWFsaXplclJlZ2lzdHJ5W21hcmtdID0gbm9ybWFsaXplcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShtYXJrOiBzdHJpbmcpIHtcbiAgZGVsZXRlIG5vcm1hbGl6ZXJSZWdpc3RyeVttYXJrXTtcbn1cblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTWFyayA9IEJPWFBMT1QgfCBFUlJPUkJBUjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTWFya0RlZiA9IEJveFBsb3REZWY7XG5cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZUFnZ3JlZ2F0ZSA9IEJPWFBMT1Q7XG5cbmV4cG9ydCBjb25zdCBDT01QT1NJVEVfTUFSS19TVFlMRVMgPSBCT1hQTE9UX1NUWUxFUztcbmV4cG9ydCB0eXBlIENvbXBvc2l0ZU1hcmtTdHlsZSA9IHR5cGVvZiBDT01QT1NJVEVfTUFSS19TVFlMRVNbMF07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9zaXRlTWFya0NvbmZpZ01peGlucyBleHRlbmRzIEJveFBsb3RDb25maWdNaXhpbnMge31cblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfQ09NUE9TSVRFX01BUktfU1BFQ0lGSUNfQ09ORklHX1BST1BFUlRZX0lOREVYID0ge1xuICAuLi5WTF9PTkxZX0JPWFBMT1RfQ09ORklHX1BST1BFUlRZX0lOREVYXG59O1xuXG5hZGQoQk9YUExPVCwgbm9ybWFsaXplQm94UGxvdCk7XG5hZGQoRVJST1JCQVIsIG5vcm1hbGl6ZUVycm9yQmFyKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSB1bml0IHNwZWMgd2l0aCBjb21wb3NpdGUgbWFyayBpbnRvIGEgbm9ybWFsIGxheWVyIHNwZWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoXG4gICAgLy8gVGhpcyBHZW5lcmljVW5pdFNwZWMgaGFzIGFueSBhcyBFbmNvZGluZyBiZWNhdXNlIHVuaXQgc3BlY3Mgd2l0aCBjb21wb3NpdGUgbWFyayBjYW4gaGF2ZSBhZGRpdGlvbmFsIGVuY29kaW5nIGNoYW5uZWxzLlxuICAgIHNwZWM6IEdlbmVyaWNVbml0U3BlYzxhbnksIEFueU1hcms+LFxuICAgIGNvbmZpZzogQ29uZmlnXG4gICk6IExheWVyU3BlYyB7XG5cbiAgY29uc3QgbWFyayA9IGlzTWFya0RlZihzcGVjLm1hcmspID8gc3BlYy5tYXJrLnR5cGUgOiBzcGVjLm1hcms7XG4gIGNvbnN0IG5vcm1hbGl6ZXIgPSBub3JtYWxpemVyUmVnaXN0cnlbbWFya107XG4gIGlmIChub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZXIoc3BlYywgY29uZmlnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgVW5yZWdpc3RlcmVkIGNvbXBvc2l0ZSBtYXJrICR7bWFya31gKTtcbn1cbiJdfQ==

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var Mark;
	(function (Mark) {
	    Mark.AREA = 'area';
	    Mark.BAR = 'bar';
	    Mark.LINE = 'line';
	    Mark.POINT = 'point';
	    Mark.RECT = 'rect';
	    Mark.RULE = 'rule';
	    Mark.TEXT = 'text';
	    Mark.TICK = 'tick';
	    Mark.CIRCLE = 'circle';
	    Mark.SQUARE = 'square';
	    Mark.GEOSHAPE = 'geoshape';
	})(Mark = exports.Mark || (exports.Mark = {}));
	exports.AREA = Mark.AREA;
	exports.BAR = Mark.BAR;
	exports.LINE = Mark.LINE;
	exports.POINT = Mark.POINT;
	exports.TEXT = Mark.TEXT;
	exports.TICK = Mark.TICK;
	exports.RECT = Mark.RECT;
	exports.RULE = Mark.RULE;
	exports.GEOSHAPE = Mark.GEOSHAPE;
	exports.CIRCLE = Mark.CIRCLE;
	exports.SQUARE = Mark.SQUARE;
	// Using mapped type to declare index, ensuring we always have all marks when we add more.
	var MARK_INDEX = {
	    area: 1,
	    bar: 1,
	    line: 1,
	    point: 1,
	    text: 1,
	    tick: 1,
	    rect: 1,
	    geoshape: 1,
	    rule: 1,
	    circle: 1,
	    square: 1
	};
	function isMark(m) {
	    return !!MARK_INDEX[m];
	}
	exports.isMark = isMark;
	exports.PRIMITIVE_MARKS = util_1.flagKeys(MARK_INDEX);
	function isMarkDef(mark) {
	    return mark['type'];
	}
	exports.isMarkDef = isMarkDef;
	var PRIMITIVE_MARK_INDEX = util_1.toSet(exports.PRIMITIVE_MARKS);
	function isPrimitiveMark(mark) {
	    var markType = isMarkDef(mark) ? mark.type : mark;
	    return markType in PRIMITIVE_MARK_INDEX;
	}
	exports.isPrimitiveMark = isPrimitiveMark;
	exports.STROKE_CONFIG = ['stroke', 'strokeWidth',
	    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];
	exports.FILL_CONFIG = ['fill', 'fillOpacity'];
	exports.FILL_STROKE_CONFIG = [].concat(exports.STROKE_CONFIG, exports.FILL_CONFIG);
	exports.VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];
	exports.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
	    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
	    text: ['shortTimeLabels'],
	    tick: ['bandSize', 'thickness']
	};
	exports.defaultMarkConfig = {
	    color: '#4c78a8',
	};
	exports.defaultBarConfig = {
	    binSpacing: 1,
	    continuousBandSize: 5
	};
	exports.defaultTickConfig = {
	    thickness: 1
	};
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var encoding_1 = __webpack_require__(27);
	var encoding_2 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var common_1 = __webpack_require__(33);
	exports.BOXPLOT = 'box-plot';
	function isBoxPlotDef(mark) {
	    return !!mark['type'];
	}
	exports.isBoxPlotDef = isBoxPlotDef;
	exports.BOXPLOT_STYLES = ['boxWhisker', 'box', 'boxMid'];
	exports.VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX = {
	    box: ['size', 'color'],
	    boxWhisker: ['color'],
	    boxMid: ['color']
	};
	var supportedChannels = ['x', 'y', 'color', 'detail', 'opacity', 'size'];
	function filterUnsupportedChannels(spec) {
	    return __assign({}, spec, { encoding: encoding_1.reduce(spec.encoding, function (newEncoding, fieldDef, channel) {
	            if (supportedChannels.indexOf(channel) > -1) {
	                newEncoding[channel] = fieldDef;
	            }
	            else {
	                log.warn(log.message.incompatibleChannel(channel, exports.BOXPLOT));
	            }
	            return newEncoding;
	        }, {}) });
	}
	exports.filterUnsupportedChannels = filterUnsupportedChannels;
	function normalizeBoxPlot(spec, config) {
	    spec = filterUnsupportedChannels(spec);
	    // TODO: use selection
	    var mark = spec.mark, encoding = spec.encoding, selection = spec.selection, _p = spec.projection, outerSpec = __rest(spec, ["mark", "encoding", "selection", "projection"]);
	    var kIQRScalar = undefined;
	    if (isBoxPlotDef(mark)) {
	        if (mark.extent) {
	            if (vega_util_1.isNumber(mark.extent)) {
	                kIQRScalar = mark.extent;
	            }
	        }
	    }
	    var orient = boxOrient(spec);
	    var _a = boxParams(spec, orient, kIQRScalar), transform = _a.transform, continuousAxisChannelDef = _a.continuousAxisChannelDef, continuousAxis = _a.continuousAxis, encodingWithoutContinuousAxis = _a.encodingWithoutContinuousAxis;
	    var color = encodingWithoutContinuousAxis.color, size = encodingWithoutContinuousAxis.size, encodingWithoutSizeColorAndContinuousAxis = __rest(encodingWithoutContinuousAxis, ["color", "size"]);
	    // Size encoding or the default config.box.size is applied to box and boxMid
	    var sizeMixins = size ? { size: size } : common_1.getMarkSpecificConfigMixins(config.box, 'size');
	    var continuousAxisScaleAndAxis = {};
	    if (continuousAxisChannelDef.scale) {
	        continuousAxisScaleAndAxis['scale'] = continuousAxisChannelDef.scale;
	    }
	    if (continuousAxisChannelDef.axis) {
	        continuousAxisScaleAndAxis['axis'] = continuousAxisChannelDef.axis;
	    }
	    return __assign({}, outerSpec, { transform: transform, layer: [
	            {
	                mark: {
	                    type: 'rule',
	                    style: 'boxWhisker'
	                },
	                encoding: __assign((_b = {}, _b[continuousAxis] = __assign({ field: 'lower_whisker_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, continuousAxisScaleAndAxis), _b[continuousAxis + '2'] = {
	                    field: 'lower_box_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _b), encodingWithoutSizeColorAndContinuousAxis, common_1.getMarkSpecificConfigMixins(config.boxWhisker, 'color'))
	            }, {
	                mark: {
	                    type: 'rule',
	                    style: 'boxWhisker'
	                },
	                encoding: __assign((_c = {}, _c[continuousAxis] = {
	                    field: 'upper_box_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _c[continuousAxis + '2'] = {
	                    field: 'upper_whisker_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _c), encodingWithoutSizeColorAndContinuousAxis, common_1.getMarkSpecificConfigMixins(config.boxWhisker, 'color'))
	            },
	            __assign({}, (selection ? { selection: selection } : {}), { mark: {
	                    type: 'bar',
	                    style: 'box'
	                }, encoding: __assign((_d = {}, _d[continuousAxis] = {
	                    field: 'lower_box_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _d[continuousAxis + '2'] = {
	                    field: 'upper_box_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _d), encodingWithoutContinuousAxis, (encodingWithoutContinuousAxis.color ? {} : common_1.getMarkSpecificConfigMixins(config.box, 'color')), sizeMixins) }),
	            {
	                mark: {
	                    type: 'tick',
	                    style: 'boxMid'
	                },
	                encoding: __assign((_e = {}, _e[continuousAxis] = {
	                    field: 'mid_box_' + continuousAxisChannelDef.field,
	                    type: continuousAxisChannelDef.type
	                }, _e), encodingWithoutSizeColorAndContinuousAxis, common_1.getMarkSpecificConfigMixins(config.boxMid, 'color'), sizeMixins)
	            }
	        ] });
	    var _b, _c, _d, _e;
	}
	exports.normalizeBoxPlot = normalizeBoxPlot;
	function boxOrient(spec) {
	    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = __rest(spec, ["mark", "encoding", "projection"]);
	    if (fielddef_1.isFieldDef(encoding.x) && fielddef_1.isContinuous(encoding.x)) {
	        // x is continuous
	        if (fielddef_1.isFieldDef(encoding.y) && fielddef_1.isContinuous(encoding.y)) {
	            // both x and y are continuous
	            if (encoding.x.aggregate === undefined && encoding.y.aggregate === exports.BOXPLOT) {
	                return 'vertical';
	            }
	            else if (encoding.y.aggregate === undefined && encoding.x.aggregate === exports.BOXPLOT) {
	                return 'horizontal';
	            }
	            else if (encoding.x.aggregate === exports.BOXPLOT && encoding.y.aggregate === exports.BOXPLOT) {
	                throw new Error('Both x and y cannot have aggregate');
	            }
	            else {
	                if (isBoxPlotDef(mark) && mark.orient) {
	                    return mark.orient;
	                }
	                // default orientation = vertical
	                return 'vertical';
	            }
	        }
	        // x is continuous but y is not
	        return 'horizontal';
	    }
	    else if (fielddef_1.isFieldDef(encoding.y) && fielddef_1.isContinuous(encoding.y)) {
	        // y is continuous but x is not
	        return 'vertical';
	    }
	    else {
	        // Neither x nor y is continuous.
	        throw new Error('Need a valid continuous axis for boxplots');
	    }
	}
	function boxContinousAxis(spec, orient) {
	    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = __rest(spec, ["mark", "encoding", "projection"]);
	    var continuousAxisChannelDef;
	    var continuousAxis;
	    if (orient === 'vertical') {
	        continuousAxis = 'y';
	        continuousAxisChannelDef = encoding.y; // Safe to cast because if y is not continous fielddef, the orient would not be vertical.
	    }
	    else {
	        continuousAxis = 'x';
	        continuousAxisChannelDef = encoding.x; // Safe to cast because if x is not continous fielddef, the orient would not be horizontal.
	    }
	    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
	        var aggregate = continuousAxisChannelDef.aggregate, continuousAxisWithoutAggregate = __rest(continuousAxisChannelDef, ["aggregate"]);
	        if (aggregate !== exports.BOXPLOT) {
	            log.warn("Continuous axis should not have customized aggregation function " + aggregate);
	        }
	        continuousAxisChannelDef = continuousAxisWithoutAggregate;
	    }
	    return {
	        continuousAxisChannelDef: continuousAxisChannelDef,
	        continuousAxis: continuousAxis
	    };
	}
	function boxParams(spec, orient, kIQRScalar) {
	    var _a = boxContinousAxis(spec, orient), continuousAxisChannelDef = _a.continuousAxisChannelDef, continuousAxis = _a.continuousAxis;
	    var encoding = spec.encoding;
	    var isMinMax = kIQRScalar === undefined;
	    var aggregate = [
	        {
	            op: 'q1',
	            field: continuousAxisChannelDef.field,
	            as: 'lower_box_' + continuousAxisChannelDef.field
	        },
	        {
	            op: 'q3',
	            field: continuousAxisChannelDef.field,
	            as: 'upper_box_' + continuousAxisChannelDef.field
	        },
	        {
	            op: 'median',
	            field: continuousAxisChannelDef.field,
	            as: 'mid_box_' + continuousAxisChannelDef.field
	        }
	    ];
	    var postAggregateCalculates = [];
	    aggregate.push({
	        op: 'min',
	        field: continuousAxisChannelDef.field,
	        as: (isMinMax ? 'lower_whisker_' : 'min_') + continuousAxisChannelDef.field
	    });
	    aggregate.push({
	        op: 'max',
	        field: continuousAxisChannelDef.field,
	        as: (isMinMax ? 'upper_whisker_' : 'max_') + continuousAxisChannelDef.field
	    });
	    if (!isMinMax) {
	        postAggregateCalculates = [
	            {
	                calculate: "datum.upper_box_" + continuousAxisChannelDef.field + " - datum.lower_box_" + continuousAxisChannelDef.field,
	                as: 'iqr_' + continuousAxisChannelDef.field
	            },
	            {
	                calculate: "min(datum.upper_box_" + continuousAxisChannelDef.field + " + datum.iqr_" + continuousAxisChannelDef.field + " * " + kIQRScalar + ", datum.max_" + continuousAxisChannelDef.field + ")",
	                as: 'upper_whisker_' + continuousAxisChannelDef.field
	            },
	            {
	                calculate: "max(datum.lower_box_" + continuousAxisChannelDef.field + " - datum.iqr_" + continuousAxisChannelDef.field + " * " + kIQRScalar + ", datum.min_" + continuousAxisChannelDef.field + ")",
	                as: 'lower_whisker_' + continuousAxisChannelDef.field
	            }
	        ];
	    }
	    var groupby = [];
	    var bins = [];
	    var timeUnits = [];
	    var encodingWithoutContinuousAxis = {};
	    encoding_2.forEach(encoding, function (channelDef, channel) {
	        if (channel === continuousAxis) {
	            // Skip continuous axis as we already handle it separately
	            return;
	        }
	        if (fielddef_1.isFieldDef(channelDef)) {
	            if (channelDef.aggregate && channelDef.aggregate !== exports.BOXPLOT) {
	                aggregate.push({
	                    op: channelDef.aggregate,
	                    field: channelDef.field,
	                    as: fielddef_1.vgField(channelDef)
	                });
	            }
	            else if (channelDef.aggregate === undefined) {
	                var transformedField = fielddef_1.vgField(channelDef);
	                // Add bin or timeUnit transform if applicable
	                var bin = channelDef.bin;
	                if (bin) {
	                    var field = channelDef.field;
	                    bins.push({ bin: bin, field: field, as: transformedField });
	                }
	                else if (channelDef.timeUnit) {
	                    var timeUnit = channelDef.timeUnit, field = channelDef.field;
	                    timeUnits.push({ timeUnit: timeUnit, field: field, as: transformedField });
	                }
	                groupby.push(transformedField);
	            }
	            // now the field should refer to post-transformed field instead
	            encodingWithoutContinuousAxis[channel] = {
	                field: fielddef_1.vgField(channelDef),
	                type: channelDef.type
	            };
	        }
	        else {
	            // For value def, just copy
	            encodingWithoutContinuousAxis[channel] = encoding[channel];
	        }
	    });
	    return {
	        transform: [].concat(bins, timeUnits, [{ aggregate: aggregate, groupby: groupby }], postAggregateCalculates),
	        continuousAxisChannelDef: continuousAxisChannelDef,
	        continuousAxis: continuousAxis,
	        encodingWithoutContinuousAxis: encodingWithoutContinuousAxis
	    };
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	function channelHasField(encoding, channel) {
	    var channelDef = encoding && encoding[channel];
	    if (channelDef) {
	        if (util_1.isArray(channelDef)) {
	            return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.field; });
	        }
	        else {
	            return fielddef_1.isFieldDef(channelDef) || fielddef_1.hasConditionalFieldDef(channelDef);
	        }
	    }
	    return false;
	}
	exports.channelHasField = channelHasField;
	function isAggregate(encoding) {
	    return util_1.some(channel_1.CHANNELS, function (channel) {
	        if (channelHasField(encoding, channel)) {
	            var channelDef = encoding[channel];
	            if (util_1.isArray(channelDef)) {
	                return util_1.some(channelDef, function (fieldDef) { return !!fieldDef.aggregate; });
	            }
	            else {
	                var fieldDef = fielddef_1.getFieldDef(channelDef);
	                return fieldDef && !!fieldDef.aggregate;
	            }
	        }
	        return false;
	    });
	}
	exports.isAggregate = isAggregate;
	function normalizeEncoding(encoding, mark) {
	    return util_1.keys(encoding).reduce(function (normalizedEncoding, channel) {
	        if (!channel_1.supportMark(channel, mark)) {
	            // Drop unsupported channel
	            log.warn(log.message.incompatibleChannel(channel, mark));
	            return normalizedEncoding;
	        }
	        // Drop line's size if the field is aggregated.
	        if (channel === 'size' && mark === 'line') {
	            var fieldDef = fielddef_1.getFieldDef(encoding[channel]);
	            if (fieldDef && fieldDef.aggregate) {
	                log.warn(log.message.incompatibleChannel(channel, mark, 'when the field is aggregated.'));
	                return normalizedEncoding;
	            }
	        }
	        if (channel === 'detail' || channel === 'order') {
	            var channelDef = encoding[channel];
	            if (channelDef) {
	                // Array of fieldDefs for detail channel (or production rule)
	                normalizedEncoding[channel] = (util_1.isArray(channelDef) ? channelDef : [channelDef])
	                    .reduce(function (defs, fieldDef) {
	                    if (!fielddef_1.isFieldDef(fieldDef)) {
	                        log.warn(log.message.emptyFieldDef(fieldDef, channel));
	                    }
	                    else {
	                        defs.push(fielddef_1.normalizeFieldDef(fieldDef, channel));
	                    }
	                    return defs;
	                }, []);
	            }
	        }
	        else {
	            // FIXME: remove this casting.  (I don't know why Typescript doesn't infer this correctly here.)
	            var channelDef = encoding[channel];
	            if (!fielddef_1.isFieldDef(channelDef) && !fielddef_1.isValueDef(channelDef) && !fielddef_1.isConditionalDef(channelDef)) {
	                log.warn(log.message.emptyFieldDef(channelDef, channel));
	                return normalizedEncoding;
	            }
	            normalizedEncoding[channel] = fielddef_1.normalize(channelDef, channel);
	        }
	        return normalizedEncoding;
	    }, {});
	}
	exports.normalizeEncoding = normalizeEncoding;
	function isRanged(encoding) {
	    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));
	}
	exports.isRanged = isRanged;
	function fieldDefs(encoding) {
	    var arr = [];
	    channel_1.CHANNELS.forEach(function (channel) {
	        if (channelHasField(encoding, channel)) {
	            var channelDef = encoding[channel];
	            (util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (def) {
	                if (fielddef_1.isFieldDef(def)) {
	                    arr.push(def);
	                }
	                else if (fielddef_1.hasConditionalFieldDef(def)) {
	                    arr.push(def.condition);
	                }
	            });
	        }
	    });
	    return arr;
	}
	exports.fieldDefs = fieldDefs;
	function forEach(mapping, f, thisArg) {
	    if (!mapping) {
	        return;
	    }
	    var _loop_1 = function (channel) {
	        if (util_1.isArray(mapping[channel])) {
	            mapping[channel].forEach(function (channelDef) {
	                f.call(thisArg, channelDef, channel);
	            });
	        }
	        else {
	            f.call(thisArg, mapping[channel], channel);
	        }
	    };
	    for (var _i = 0, _a = util_1.keys(mapping); _i < _a.length; _i++) {
	        var channel = _a[_i];
	        _loop_1(channel);
	    }
	}
	exports.forEach = forEach;
	function reduce(mapping, f, init, thisArg) {
	    if (!mapping) {
	        return init;
	    }
	    return util_1.keys(mapping).reduce(function (r, channel) {
	        var map = mapping[channel];
	        if (util_1.isArray(map)) {
	            return map.reduce(function (r1, channelDef) {
	                return f.call(thisArg, r1, channelDef, channel);
	            }, r);
	        }
	        else {
	            return f.call(thisArg, r, map, channel);
	        }
	    }, init);
	}
	exports.reduce = reduce;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	// Declaration and utility for variants of a field definition object
	var aggregate_1 = __webpack_require__(13);
	var bin_1 = __webpack_require__(22);
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var timeunit_1 = __webpack_require__(30);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	function isConditionalSelection(c) {
	    return c['selection'];
	}
	exports.isConditionalSelection = isConditionalSelection;
	function isRepeatRef(field) {
	    return field && !util_1.isString(field) && 'repeat' in field;
	}
	exports.isRepeatRef = isRepeatRef;
	function isConditionalDef(channelDef) {
	    return !!channelDef && !!channelDef.condition;
	}
	exports.isConditionalDef = isConditionalDef;
	/**
	 * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
	 */
	function hasConditionalFieldDef(channelDef) {
	    return !!channelDef && !!channelDef.condition && !util_1.isArray(channelDef.condition) && isFieldDef(channelDef.condition);
	}
	exports.hasConditionalFieldDef = hasConditionalFieldDef;
	function hasConditionalValueDef(channelDef) {
	    return !!channelDef && !!channelDef.condition && (util_1.isArray(channelDef.condition) || isValueDef(channelDef.condition));
	}
	exports.hasConditionalValueDef = hasConditionalValueDef;
	function isFieldDef(channelDef) {
	    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
	}
	exports.isFieldDef = isFieldDef;
	function isStringFieldDef(fieldDef) {
	    return isFieldDef(fieldDef) && util_1.isString(fieldDef.field);
	}
	exports.isStringFieldDef = isStringFieldDef;
	function isValueDef(channelDef) {
	    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;
	}
	exports.isValueDef = isValueDef;
	function isScaleFieldDef(channelDef) {
	    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);
	}
	exports.isScaleFieldDef = isScaleFieldDef;
	function vgField(fieldDef, opt) {
	    if (opt === void 0) { opt = {}; }
	    var field = fieldDef.field;
	    var prefix = opt.prefix;
	    var suffix = opt.suffix;
	    if (isCount(fieldDef)) {
	        field = 'count_*';
	    }
	    else {
	        var fn = undefined;
	        if (!opt.nofn) {
	            if (fieldDef.bin) {
	                fn = bin_1.binToString(fieldDef.bin);
	                suffix = opt.binSuffix || '';
	            }
	            else if (fieldDef.aggregate) {
	                fn = String(opt.aggregate || fieldDef.aggregate);
	            }
	            else if (fieldDef.timeUnit) {
	                fn = String(fieldDef.timeUnit);
	            }
	        }
	        if (fn) {
	            field = fn + "_" + field;
	        }
	    }
	    if (suffix) {
	        field = field + "_" + suffix;
	    }
	    if (prefix) {
	        field = prefix + "_" + field;
	    }
	    if (opt.expr) {
	        field = "" + opt.expr + util_1.accessPath(field);
	    }
	    return field;
	}
	exports.vgField = vgField;
	function isDiscrete(fieldDef) {
	    switch (fieldDef.type) {
	        case 'nominal':
	        case 'ordinal':
	        case 'geojson':
	            return true;
	        case 'quantitative':
	            return !!fieldDef.bin;
	        case 'latitude':
	        case 'longitude':
	        case 'temporal':
	            return false;
	    }
	    throw new Error(log.message.invalidFieldType(fieldDef.type));
	}
	exports.isDiscrete = isDiscrete;
	function isContinuous(fieldDef) {
	    return !isDiscrete(fieldDef);
	}
	exports.isContinuous = isContinuous;
	function isCount(fieldDef) {
	    return fieldDef.aggregate === 'count';
	}
	exports.isCount = isCount;
	function verbalTitleFormatter(fieldDef, config) {
	    var field = fieldDef.field, bin = fieldDef.bin, timeUnit = fieldDef.timeUnit, aggregate = fieldDef.aggregate;
	    if (aggregate === 'count') {
	        return config.countTitle;
	    }
	    else if (bin) {
	        return field + " (binned)";
	    }
	    else if (timeUnit) {
	        var units = timeunit_1.getTimeUnitParts(timeUnit).join('-');
	        return field + " (" + units + ")";
	    }
	    else if (aggregate) {
	        return util_1.titlecase(aggregate) + " of " + field;
	    }
	    return field;
	}
	exports.verbalTitleFormatter = verbalTitleFormatter;
	function functionalTitleFormatter(fieldDef, config) {
	    var fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');
	    if (fn) {
	        return fn.toUpperCase() + '(' + fieldDef.field + ')';
	    }
	    else {
	        return fieldDef.field;
	    }
	}
	exports.functionalTitleFormatter = functionalTitleFormatter;
	exports.defaultTitleFormatter = function (fieldDef, config) {
	    switch (config.fieldTitle) {
	        case 'plain':
	            return fieldDef.field;
	        case 'functional':
	            return functionalTitleFormatter(fieldDef, config);
	        default:
	            return verbalTitleFormatter(fieldDef, config);
	    }
	};
	var titleFormatter = exports.defaultTitleFormatter;
	function setTitleFormatter(formatter) {
	    titleFormatter = formatter;
	}
	exports.setTitleFormatter = setTitleFormatter;
	function resetTitleFormatter() {
	    setTitleFormatter(exports.defaultTitleFormatter);
	}
	exports.resetTitleFormatter = resetTitleFormatter;
	function title(fieldDef, config) {
	    return titleFormatter(fieldDef, config);
	}
	exports.title = title;
	function defaultType(fieldDef, channel) {
	    if (fieldDef.timeUnit) {
	        return 'temporal';
	    }
	    if (fieldDef.bin) {
	        return 'quantitative';
	    }
	    switch (channel_1.rangeType(channel)) {
	        case 'continuous':
	            return 'quantitative';
	        case 'discrete':
	            return 'nominal';
	        case 'flexible':// color
	            return 'nominal';
	        default:
	            return 'quantitative';
	    }
	}
	exports.defaultType = defaultType;
	/**
	 * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
	 * @param channelDef
	 */
	function getFieldDef(channelDef) {
	    if (isFieldDef(channelDef)) {
	        return channelDef;
	    }
	    else if (hasConditionalFieldDef(channelDef)) {
	        return channelDef.condition;
	    }
	    return undefined;
	}
	exports.getFieldDef = getFieldDef;
	/**
	 * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
	 */
	function normalize(channelDef, channel) {
	    if (util_1.isString(channelDef) || util_1.isNumber(channelDef) || util_1.isBoolean(channelDef)) {
	        var primitiveType = util_1.isString(channelDef) ? 'string' :
	            util_1.isNumber(channelDef) ? 'number' : 'boolean';
	        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));
	        return { value: channelDef };
	    }
	    // If a fieldDef contains a field, we need type.
	    if (isFieldDef(channelDef)) {
	        return normalizeFieldDef(channelDef, channel);
	    }
	    else if (hasConditionalFieldDef(channelDef)) {
	        return __assign({}, channelDef, { 
	            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
	            condition: normalizeFieldDef(channelDef.condition, channel) });
	    }
	    return channelDef;
	}
	exports.normalize = normalize;
	function normalizeFieldDef(fieldDef, channel) {
	    // Drop invalid aggregate
	    if (fieldDef.aggregate && !aggregate_1.isAggregateOp(fieldDef.aggregate)) {
	        var aggregate = fieldDef.aggregate, fieldDefWithoutAggregate = __rest(fieldDef, ["aggregate"]);
	        log.warn(log.message.invalidAggregate(fieldDef.aggregate));
	        fieldDef = fieldDefWithoutAggregate;
	    }
	    // Normalize Time Unit
	    if (fieldDef.timeUnit) {
	        fieldDef = __assign({}, fieldDef, { timeUnit: timeunit_1.normalizeTimeUnit(fieldDef.timeUnit) });
	    }
	    // Normalize bin
	    if (fieldDef.bin) {
	        fieldDef = __assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });
	    }
	    // Normalize Type
	    if (fieldDef.type) {
	        var fullType = type_1.getFullName(fieldDef.type);
	        if (fieldDef.type !== fullType) {
	            // convert short type to full type
	            fieldDef = __assign({}, fieldDef, { type: fullType });
	        }
	        if (fieldDef.type !== 'quantitative') {
	            if (aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {
	                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));
	                fieldDef = __assign({}, fieldDef, { type: 'quantitative' });
	            }
	        }
	    }
	    else {
	        // If type is empty / invalid, then augment with default type
	        var newType = defaultType(fieldDef, channel);
	        log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));
	        fieldDef = __assign({}, fieldDef, { type: newType });
	    }
	    var _a = channelCompatibility(fieldDef, channel), compatible = _a.compatible, warning = _a.warning;
	    if (!compatible) {
	        log.warn(warning);
	    }
	    return fieldDef;
	}
	exports.normalizeFieldDef = normalizeFieldDef;
	function normalizeBin(bin, channel) {
	    if (util_1.isBoolean(bin)) {
	        return { maxbins: bin_1.autoMaxBins(channel) };
	    }
	    else if (!bin.maxbins && !bin.step) {
	        return __assign({}, bin, { maxbins: bin_1.autoMaxBins(channel) });
	    }
	    else {
	        return bin;
	    }
	}
	exports.normalizeBin = normalizeBin;
	var COMPATIBLE = { compatible: true };
	function channelCompatibility(fieldDef, channel) {
	    switch (channel) {
	        case 'row':
	        case 'column':
	            if (isContinuous(fieldDef) && !fieldDef.timeUnit) {
	                // TODO:(https://github.com/vega/vega-lite/issues/2011):
	                // with timeUnit it's not always strictly continuous
	                return {
	                    compatible: false,
	                    warning: log.message.facetChannelShouldBeDiscrete(channel)
	                };
	            }
	            return COMPATIBLE;
	        case 'x':
	        case 'y':
	        case 'color':
	        case 'text':
	        case 'detail':
	        case 'tooltip':
	        case 'href':
	            return COMPATIBLE;
	        case 'opacity':
	        case 'size':
	        case 'x2':
	        case 'y2':
	            if (isDiscrete(fieldDef) && !fieldDef.bin) {
	                return {
	                    compatible: false,
	                    warning: "Channel " + channel + " should not be used with discrete field."
	                };
	            }
	            return COMPATIBLE;
	        case 'shape':
	            if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {
	                return {
	                    compatible: false,
	                    warning: 'Shape channel should be used with nominal data or geojson only'
	                };
	            }
	            return COMPATIBLE;
	        case 'order':
	            if (fieldDef.type === 'nominal') {
	                return {
	                    compatible: false,
	                    warning: "Channel order is inappropriate for nominal field, which has no inherent order."
	                };
	            }
	            return COMPATIBLE;
	    }
	    throw new Error('channelCompatability not implemented for channel ' + channel);
	}
	exports.channelCompatibility = channelCompatibility;
	function isNumberFieldDef(fieldDef) {
	    return fieldDef.type === 'quantitative' || !!fieldDef.bin;
	}
	exports.isNumberFieldDef = isNumberFieldDef;
	function isTimeFieldDef(fieldDef) {
	    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;
	}
	exports.isTimeFieldDef = isTimeFieldDef;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Vega-Lite's singleton logger utility.
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var util_1 = __webpack_require__(14);
	/**
	 * Main (default) Vega Logger instance for Vega-Lite
	 */
	var main = vega_util_1.logger(vega_util_1.Warn);
	var current = main;
	/**
	 * Logger tool for checking if the code throws correct warning
	 */
	var LocalLogger = /** @class */ (function () {
	    function LocalLogger() {
	        this.warns = [];
	        this.infos = [];
	        this.debugs = [];
	    }
	    LocalLogger.prototype.level = function () {
	        return this;
	    };
	    LocalLogger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        (_a = this.warns).push.apply(_a, args);
	        return this;
	        var _a;
	    };
	    LocalLogger.prototype.info = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        (_a = this.infos).push.apply(_a, args);
	        return this;
	        var _a;
	    };
	    LocalLogger.prototype.debug = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        (_a = this.debugs).push.apply(_a, args);
	        return this;
	        var _a;
	    };
	    return LocalLogger;
	}());
	exports.LocalLogger = LocalLogger;
	function wrap(f) {
	    return function () {
	        current = new LocalLogger();
	        f(current);
	        reset();
	    };
	}
	exports.wrap = wrap;
	/**
	 * Set the singleton logger to be a custom logger
	 */
	function set(newLogger) {
	    current = newLogger;
	    return current;
	}
	exports.set = set;
	/**
	 * Reset the main logger to use the default Vega Logger
	 */
	function reset() {
	    current = main;
	    return current;
	}
	exports.reset = reset;
	function warn() {
	    var _ = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        _[_i] = arguments[_i];
	    }
	    current.warn.apply(current, arguments);
	}
	exports.warn = warn;
	function info() {
	    var _ = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        _[_i] = arguments[_i];
	    }
	    current.info.apply(current, arguments);
	}
	exports.info = info;
	function debug() {
	    var _ = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        _[_i] = arguments[_i];
	    }
	    current.debug.apply(current, arguments);
	}
	exports.debug = debug;
	/**
	 * Collection of all Vega-Lite Error Messages
	 */
	var message;
	(function (message) {
	    message.INVALID_SPEC = 'Invalid spec';
	    // FIT
	    message.FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
	    message.CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of "rangeStep" when "autosize" is "fit".';
	    // SELECTION
	    function cannotProjectOnChannelWithoutField(channel) {
	        return "Cannot project a selection on encoding channel \"" + channel + "\", which has no field.";
	    }
	    message.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;
	    function nearestNotSupportForContinuous(mark) {
	        return "The \"nearest\" transform is not supported for " + mark + " marks.";
	    }
	    message.nearestNotSupportForContinuous = nearestNotSupportForContinuous;
	    function selectionNotFound(name) {
	        return "Cannot find a selection named \"" + name + "\"";
	    }
	    message.selectionNotFound = selectionNotFound;
	    message.SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
	    // REPEAT
	    function noSuchRepeatedValue(field) {
	        return "Unknown repeated value \"" + field + "\".";
	    }
	    message.noSuchRepeatedValue = noSuchRepeatedValue;
	    // CONCAT
	    message.CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views.';
	    // REPEAT
	    message.REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views.';
	    // TITLE
	    function cannotSetTitleAnchor(type) {
	        return "Cannot set title \"anchor\" for a " + type + " spec";
	    }
	    message.cannotSetTitleAnchor = cannotSetTitleAnchor;
	    // DATA
	    function unrecognizedParse(p) {
	        return "Unrecognized parse \"" + p + "\".";
	    }
	    message.unrecognizedParse = unrecognizedParse;
	    function differentParse(field, local, ancestor) {
	        return "An ancestor parsed field \"" + field + "\" as " + ancestor + " but a child wants to parse the field as " + local + ".";
	    }
	    message.differentParse = differentParse;
	    // TRANSFORMS
	    function invalidTransformIgnored(transform) {
	        return "Ignoring an invalid transform: " + util_1.stringify(transform) + ".";
	    }
	    message.invalidTransformIgnored = invalidTransformIgnored;
	    message.NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the the data from the secondary source.';
	    // ENCODING & FACET
	    function primitiveChannelDef(channel, type, value) {
	        return "Channel " + channel + " is a " + type + ". Converted to {value: " + util_1.stringify(value) + "}.";
	    }
	    message.primitiveChannelDef = primitiveChannelDef;
	    function invalidFieldType(type) {
	        return "Invalid field type \"" + type + "\"";
	    }
	    message.invalidFieldType = invalidFieldType;
	    function invalidFieldTypeForCountAggregate(type, aggregate) {
	        return "Invalid field type \"" + type + "\" for aggregate: \"" + aggregate + "\", using \"quantitative\" instead.";
	    }
	    message.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;
	    function invalidAggregate(aggregate) {
	        return "Invalid aggregation operator \"" + aggregate + "\"";
	    }
	    message.invalidAggregate = invalidAggregate;
	    function emptyOrInvalidFieldType(type, channel, newType) {
	        return "Invalid field type \"" + type + "\" for channel \"" + channel + "\", using \"" + newType + "\" instead.";
	    }
	    message.emptyOrInvalidFieldType = emptyOrInvalidFieldType;
	    function emptyFieldDef(fieldDef, channel) {
	        return "Dropping " + util_1.stringify(fieldDef) + " from channel \"" + channel + "\" since it does not contain data field or value.";
	    }
	    message.emptyFieldDef = emptyFieldDef;
	    function incompatibleChannel(channel, markOrFacet, when) {
	        return channel + " dropped as it is incompatible with \"" + markOrFacet + "\"" + (when ? " when " + when : '') + ".";
	    }
	    message.incompatibleChannel = incompatibleChannel;
	    function facetChannelShouldBeDiscrete(channel) {
	        return channel + " encoding should be discrete (ordinal / nominal / binned).";
	    }
	    message.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;
	    function discreteChannelCannotEncode(channel, type) {
	        return "Using discrete channel \"" + channel + "\" to encode \"" + type + "\" field can be misleading as it does not encode " + (type === 'ordinal' ? 'order' : 'magnitude') + ".";
	    }
	    message.discreteChannelCannotEncode = discreteChannelCannotEncode;
	    // Mark
	    message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';
	    function unclearOrientContinuous(mark) {
	        return "Cannot clearly determine orientation for \"" + mark + "\" since both x and y channel encode continous fields. In this case, we use vertical by default";
	    }
	    message.unclearOrientContinuous = unclearOrientContinuous;
	    function unclearOrientDiscreteOrEmpty(mark) {
	        return "Cannot clearly determine orientation for \"" + mark + "\" since both x and y channel encode discrete or empty fields.";
	    }
	    message.unclearOrientDiscreteOrEmpty = unclearOrientDiscreteOrEmpty;
	    function orientOverridden(original, actual) {
	        return "Specified orient \"" + original + "\" overridden with \"" + actual + "\"";
	    }
	    message.orientOverridden = orientOverridden;
	    // SCALE
	    message.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';
	    function cannotUseScalePropertyWithNonColor(prop) {
	        return "Cannot use the scale property \"" + prop + "\" with non-color channel.";
	    }
	    message.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;
	    function unaggregateDomainHasNoEffectForRawField(fieldDef) {
	        return "Using unaggregated domain with raw field has no effect (" + util_1.stringify(fieldDef) + ").";
	    }
	    message.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;
	    function unaggregateDomainWithNonSharedDomainOp(aggregate) {
	        return "Unaggregated domain not applicable for \"" + aggregate + "\" since it produces values outside the origin domain of the source data.";
	    }
	    message.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;
	    function unaggregatedDomainWithLogScale(fieldDef) {
	        return "Unaggregated domain is currently unsupported for log scale (" + util_1.stringify(fieldDef) + ").";
	    }
	    message.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;
	    function cannotUseSizeFieldWithBandSize(positionChannel) {
	        return "Using size field when " + positionChannel + "-channel has a band scale is not supported.";
	    }
	    message.cannotUseSizeFieldWithBandSize = cannotUseSizeFieldWithBandSize;
	    function cannotApplySizeToNonOrientedMark(mark) {
	        return "Cannot apply size to non-oriented mark \"" + mark + "\".";
	    }
	    message.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;
	    function rangeStepDropped(channel) {
	        return "rangeStep for \"" + channel + "\" is dropped as top-level " + (channel === 'x' ? 'width' : 'height') + " is provided.";
	    }
	    message.rangeStepDropped = rangeStepDropped;
	    function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
	        return "Channel \"" + channel + "\" does not work with \"" + scaleType + "\" scale. We are using \"" + defaultScaleType + "\" scale instead.";
	    }
	    message.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;
	    function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
	        return "FieldDef does not work with \"" + scaleType + "\" scale. We are using \"" + defaultScaleType + "\" scale instead.";
	    }
	    message.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;
	    function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
	        return channel + "-scale's \"" + propName + "\" is dropped as it does not work with " + scaleType + " scale.";
	    }
	    message.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;
	    function scaleTypeNotWorkWithMark(mark, scaleType) {
	        return "Scale type \"" + scaleType + "\" does not work with mark \"" + mark + "\".";
	    }
	    message.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;
	    function mergeConflictingProperty(property, propertyOf, v1, v2) {
	        return "Conflicting " + propertyOf + " property \"" + property + "\" (" + util_1.stringify(v1) + " and " + util_1.stringify(v2) + ").  Using " + util_1.stringify(v1) + ".";
	    }
	    message.mergeConflictingProperty = mergeConflictingProperty;
	    function independentScaleMeansIndependentGuide(channel) {
	        return "Setting the scale to be independent for \"" + channel + "\" means we also have to set the guide (axis or legend) to be independent.";
	    }
	    message.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;
	    function conflictedDomain(channel) {
	        return "Cannot set " + channel + "-scale's \"domain\" as it is binned. Please use \"bin\"'s \"extent\" instead.";
	    }
	    message.conflictedDomain = conflictedDomain;
	    function domainSortDropped(sort) {
	        return "Dropping sort property " + util_1.stringify(sort) + " as unioned domains only support boolean or op 'count'.";
	    }
	    message.domainSortDropped = domainSortDropped;
	    message.UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';
	    message.MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';
	    // AXIS
	    message.INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';
	    // STACK
	    function cannotStackRangedMark(channel) {
	        return "Cannot stack \"" + channel + "\" if there is already \"" + channel + "2\"";
	    }
	    message.cannotStackRangedMark = cannotStackRangedMark;
	    function cannotStackNonLinearScale(scaleType) {
	        return "Cannot stack non-linear scale (" + scaleType + ")";
	    }
	    message.cannotStackNonLinearScale = cannotStackNonLinearScale;
	    function stackNonSummativeAggregate(aggregate) {
	        return "Stacking is applied even though the aggregate function is non-summative (\"" + aggregate + "\")";
	    }
	    message.stackNonSummativeAggregate = stackNonSummativeAggregate;
	    // TIMEUNIT
	    function invalidTimeUnit(unitName, value) {
	        return "Invalid " + unitName + ": " + util_1.stringify(value);
	    }
	    message.invalidTimeUnit = invalidTimeUnit;
	    function dayReplacedWithDate(fullTimeUnit) {
	        return "Time unit \"" + fullTimeUnit + "\" is not supported. We are replacing it with " + fullTimeUnit.replace('day', 'date') + ".";
	    }
	    message.dayReplacedWithDate = dayReplacedWithDate;
	    function droppedDay(d) {
	        return "Dropping day from datetime " + util_1.stringify(d) + " as day cannot be combined with other units.";
	    }
	    message.droppedDay = droppedDay;
	})(message = exports.message || (exports.message = {}));
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var datetime_1 = __webpack_require__(31);
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	var TimeUnit;
	(function (TimeUnit) {
	    TimeUnit.YEAR = 'year';
	    TimeUnit.MONTH = 'month';
	    TimeUnit.DAY = 'day';
	    TimeUnit.DATE = 'date';
	    TimeUnit.HOURS = 'hours';
	    TimeUnit.MINUTES = 'minutes';
	    TimeUnit.SECONDS = 'seconds';
	    TimeUnit.MILLISECONDS = 'milliseconds';
	    TimeUnit.YEARMONTH = 'yearmonth';
	    TimeUnit.YEARMONTHDATE = 'yearmonthdate';
	    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';
	    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';
	    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';
	    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);
	    TimeUnit.MONTHDATE = 'monthdate';
	    TimeUnit.HOURSMINUTES = 'hoursminutes';
	    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';
	    TimeUnit.MINUTESSECONDS = 'minutesseconds';
	    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';
	    TimeUnit.QUARTER = 'quarter';
	    TimeUnit.YEARQUARTER = 'yearquarter';
	    TimeUnit.QUARTERMONTH = 'quartermonth';
	    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';
	    TimeUnit.UTCYEAR = 'utcyear';
	    TimeUnit.UTCMONTH = 'utcmonth';
	    TimeUnit.UTCDAY = 'utcday';
	    TimeUnit.UTCDATE = 'utcdate';
	    TimeUnit.UTCHOURS = 'utchours';
	    TimeUnit.UTCMINUTES = 'utcminutes';
	    TimeUnit.UTCSECONDS = 'utcseconds';
	    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';
	    TimeUnit.UTCYEARMONTH = 'utcyearmonth';
	    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';
	    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';
	    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';
	    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';
	    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);
	    TimeUnit.UTCMONTHDATE = 'utcmonthdate';
	    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';
	    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';
	    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';
	    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';
	    TimeUnit.UTCQUARTER = 'utcquarter';
	    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';
	    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';
	    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';
	})(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));
	/** Time Unit that only corresponds to only one part of Date objects. */
	var LOCAL_SINGLE_TIMEUNIT_INDEX = {
	    year: 1,
	    quarter: 1,
	    month: 1,
	    day: 1,
	    date: 1,
	    hours: 1,
	    minutes: 1,
	    seconds: 1,
	    milliseconds: 1
	};
	exports.TIMEUNIT_PARTS = util_1.flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);
	function isLocalSingleTimeUnit(timeUnit) {
	    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
	}
	exports.isLocalSingleTimeUnit = isLocalSingleTimeUnit;
	var UTC_SINGLE_TIMEUNIT_INDEX = {
	    utcyear: 1,
	    utcquarter: 1,
	    utcmonth: 1,
	    utcday: 1,
	    utcdate: 1,
	    utchours: 1,
	    utcminutes: 1,
	    utcseconds: 1,
	    utcmilliseconds: 1
	};
	function isUtcSingleTimeUnit(timeUnit) {
	    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];
	}
	exports.isUtcSingleTimeUnit = isUtcSingleTimeUnit;
	var LOCAL_MULTI_TIMEUNIT_INDEX = {
	    yearquarter: 1,
	    yearquartermonth: 1,
	    yearmonth: 1,
	    yearmonthdate: 1,
	    yearmonthdatehours: 1,
	    yearmonthdatehoursminutes: 1,
	    yearmonthdatehoursminutesseconds: 1,
	    quartermonth: 1,
	    monthdate: 1,
	    hoursminutes: 1,
	    hoursminutesseconds: 1,
	    minutesseconds: 1,
	    secondsmilliseconds: 1
	};
	var UTC_MULTI_TIMEUNIT_INDEX = {
	    utcyearquarter: 1,
	    utcyearquartermonth: 1,
	    utcyearmonth: 1,
	    utcyearmonthdate: 1,
	    utcyearmonthdatehours: 1,
	    utcyearmonthdatehoursminutes: 1,
	    utcyearmonthdatehoursminutesseconds: 1,
	    utcquartermonth: 1,
	    utcmonthdate: 1,
	    utchoursminutes: 1,
	    utchoursminutesseconds: 1,
	    utcminutesseconds: 1,
	    utcsecondsmilliseconds: 1
	};
	var UTC_TIMEUNIT_INDEX = __assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
	function isUTCTimeUnit(t) {
	    return !!UTC_TIMEUNIT_INDEX[t];
	}
	exports.isUTCTimeUnit = isUTCTimeUnit;
	function getLocalTimeUnit(t) {
	    return t.substr(3);
	}
	exports.getLocalTimeUnit = getLocalTimeUnit;
	var TIMEUNIT_INDEX = __assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
	exports.TIMEUNITS = util_1.flagKeys(TIMEUNIT_INDEX);
	function isTimeUnit(t) {
	    return !!TIMEUNIT_INDEX[t];
	}
	exports.isTimeUnit = isTimeUnit;
	var SET_DATE_METHOD = {
	    year: 'setFullYear',
	    month: 'setMonth',
	    date: 'setDate',
	    hours: 'setHours',
	    minutes: 'setMinutes',
	    seconds: 'setSeconds',
	    milliseconds: 'setMilliseconds',
	    // Day and quarter have their own special cases
	    quarter: null,
	    day: null,
	};
	/**
	 * Converts a date to only have the measurements relevant to the specified unit
	 * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'
	 * Note: the base date is Jan 01 1900 00:00:00
	 */
	function convert(unit, date) {
	    var isUTC = isUTCTimeUnit(unit);
	    var result = isUTC ?
	        // start with uniform date
	        new Date(Date.UTC(0, 0, 1, 0, 0, 0, 0)) :
	        new Date(0, 0, 1, 0, 0, 0, 0);
	    for (var _i = 0, TIMEUNIT_PARTS_1 = exports.TIMEUNIT_PARTS; _i < TIMEUNIT_PARTS_1.length; _i++) {
	        var timeUnitPart = TIMEUNIT_PARTS_1[_i];
	        if (containsTimeUnit(unit, timeUnitPart)) {
	            switch (timeUnitPart) {
	                case TimeUnit.DAY:
	                    throw new Error('Cannot convert to TimeUnits containing \'day\'');
	                case TimeUnit.QUARTER: {
	                    var _a = dateMethods('month', isUTC), getDateMethod_1 = _a.getDateMethod, setDateMethod_1 = _a.setDateMethod;
	                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)
	                    result[setDateMethod_1]((Math.floor(date[getDateMethod_1]() / 3)) * 3);
	                    break;
	                }
	                default:
	                    var _b = dateMethods(timeUnitPart, isUTC), getDateMethod = _b.getDateMethod, setDateMethod = _b.setDateMethod;
	                    result[setDateMethod](date[getDateMethod]());
	            }
	        }
	    }
	    return result;
	}
	exports.convert = convert;
	function dateMethods(singleUnit, isUtc) {
	    var rawSetDateMethod = SET_DATE_METHOD[singleUnit];
	    var setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;
	    var getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);
	    return { setDateMethod: setDateMethod, getDateMethod: getDateMethod };
	}
	function getTimeUnitParts(timeUnit) {
	    return exports.TIMEUNIT_PARTS.reduce(function (parts, part) {
	        if (containsTimeUnit(timeUnit, part)) {
	            return parts.concat(part);
	        }
	        return parts;
	    }, []);
	}
	exports.getTimeUnitParts = getTimeUnitParts;
	/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */
	function containsTimeUnit(fullTimeUnit, timeUnit) {
	    var index = fullTimeUnit.indexOf(timeUnit);
	    return index > -1 &&
	        (timeUnit !== TimeUnit.SECONDS ||
	            index === 0 ||
	            fullTimeUnit.charAt(index - 1) !== 'i' // exclude milliseconds
	        );
	}
	exports.containsTimeUnit = containsTimeUnit;
	/**
	 * Returns Vega expresssion for a given timeUnit and fieldRef
	 */
	function fieldExpr(fullTimeUnit, field) {
	    var fieldRef = "datum" + util_1.accessPath(field);
	    var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';
	    function func(timeUnit) {
	        if (timeUnit === TimeUnit.QUARTER) {
	            // quarter starting at 0 (0,3,6,9).
	            return "(" + utc + "quarter(" + fieldRef + ")-1)";
	        }
	        else {
	            return "" + utc + timeUnit + "(" + fieldRef + ")";
	        }
	    }
	    var d = exports.TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {
	        if (containsTimeUnit(fullTimeUnit, tu)) {
	            dateExpr[tu] = func(tu);
	        }
	        return dateExpr;
	    }, {});
	    return datetime_1.dateTimeExpr(d);
	}
	exports.fieldExpr = fieldExpr;
	/**
	 * returns the signal expression used for axis labels for a time unit
	 */
	function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {
	    if (!timeUnit) {
	        return undefined;
	    }
	    var dateComponents = [];
	    var expression = '';
	    var hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);
	    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {
	        // special expression for quarter as prefix
	        expression = "'Q' + quarter(" + field + ")";
	    }
	    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {
	        // By default use short month name
	        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');
	    }
	    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {
	        dateComponents.push(shortTimeLabels ? '%a' : '%A');
	    }
	    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {
	        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year
	    }
	    if (hasYear) {
	        dateComponents.push(shortTimeLabels ? '%y' : '%Y');
	    }
	    var timeComponents = [];
	    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {
	        timeComponents.push('%H');
	    }
	    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {
	        timeComponents.push('%M');
	    }
	    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {
	        timeComponents.push('%S');
	    }
	    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {
	        timeComponents.push('%L');
	    }
	    var dateTimeComponents = [];
	    if (dateComponents.length > 0) {
	        dateTimeComponents.push(dateComponents.join(' '));
	    }
	    if (timeComponents.length > 0) {
	        dateTimeComponents.push(timeComponents.join(':'));
	    }
	    if (dateTimeComponents.length > 0) {
	        if (expression) {
	            // Add space between quarter and main time format
	            expression += " + ' ' + ";
	        }
	        // We only use utcFormat for utc scale
	        // For utc time units, the data is already converted as a part of timeUnit transform.
	        // Thus, utc time units should use timeFormat to avoid shifting the time twice.
	        if (isUTCScale) {
	            expression += "utcFormat(" + field + ", '" + dateTimeComponents.join(' ') + "')";
	        }
	        else {
	            expression += "timeFormat(" + field + ", '" + dateTimeComponents.join(' ') + "')";
	        }
	    }
	    // If expression is still an empty string, return undefined instead.
	    return expression || undefined;
	}
	exports.formatExpression = formatExpression;
	function normalizeTimeUnit(timeUnit) {
	    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {
	        log.warn(log.message.dayReplacedWithDate(timeUnit));
	        return timeUnit.replace('day', 'date');
	    }
	    return timeUnit;
	}
	exports.normalizeTimeUnit = normalizeTimeUnit;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	// DateTime definition object
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	/*
	 * A designated year that starts on Sunday.
	 */
	var SUNDAY_YEAR = 2006;
	function isDateTime(o) {
	    return !!o && (!!o.year || !!o.quarter || !!o.month || !!o.date || !!o.day ||
	        !!o.hours || !!o.minutes || !!o.seconds || !!o.milliseconds);
	}
	exports.isDateTime = isDateTime;
	exports.MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
	exports.SHORT_MONTHS = exports.MONTHS.map(function (m) { return m.substr(0, 3); });
	exports.DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
	exports.SHORT_DAYS = exports.DAYS.map(function (d) { return d.substr(0, 3); });
	function normalizeQuarter(q) {
	    if (util_1.isNumber(q)) {
	        if (q > 4) {
	            log.warn(log.message.invalidTimeUnit('quarter', q));
	        }
	        // We accept 1-based quarter, so need to readjust to 0-based quarter
	        return (q - 1) + '';
	    }
	    else {
	        // Invalid quarter
	        throw new Error(log.message.invalidTimeUnit('quarter', q));
	    }
	}
	function normalizeMonth(m) {
	    if (util_1.isNumber(m)) {
	        // We accept 1-based month, so need to readjust to 0-based month
	        return (m - 1) + '';
	    }
	    else {
	        var lowerM = m.toLowerCase();
	        var monthIndex = exports.MONTHS.indexOf(lowerM);
	        if (monthIndex !== -1) {
	            return monthIndex + ''; // 0 for january, ...
	        }
	        var shortM = lowerM.substr(0, 3);
	        var shortMonthIndex = exports.SHORT_MONTHS.indexOf(shortM);
	        if (shortMonthIndex !== -1) {
	            return shortMonthIndex + '';
	        }
	        // Invalid month
	        throw new Error(log.message.invalidTimeUnit('month', m));
	    }
	}
	function normalizeDay(d) {
	    if (util_1.isNumber(d)) {
	        // mod so that this can be both 0-based where 0 = sunday
	        // and 1-based where 7=sunday
	        return (d % 7) + '';
	    }
	    else {
	        var lowerD = d.toLowerCase();
	        var dayIndex = exports.DAYS.indexOf(lowerD);
	        if (dayIndex !== -1) {
	            return dayIndex + ''; // 0 for january, ...
	        }
	        var shortD = lowerD.substr(0, 3);
	        var shortDayIndex = exports.SHORT_DAYS.indexOf(shortD);
	        if (shortDayIndex !== -1) {
	            return shortDayIndex + '';
	        }
	        // Invalid day
	        throw new Error(log.message.invalidTimeUnit('day', d));
	    }
	}
	/**
	 * Return Vega Expression for a particular date time.
	 * @param d
	 * @param normalize whether to normalize quarter, month, day.
	 */
	function dateTimeExpr(d, normalize) {
	    if (normalize === void 0) { normalize = false; }
	    var units = [];
	    if (normalize && d.day !== undefined) {
	        if (util_1.keys(d).length > 1) {
	            log.warn(log.message.droppedDay(d));
	            d = util_1.duplicate(d);
	            delete d.day;
	        }
	    }
	    if (d.year !== undefined) {
	        units.push(d.year);
	    }
	    else if (d.day !== undefined) {
	        // Set year to 2006 for working with day since January 1 2006 is a Sunday
	        units.push(SUNDAY_YEAR);
	    }
	    else {
	        units.push(0);
	    }
	    if (d.month !== undefined) {
	        var month = normalize ? normalizeMonth(d.month) : d.month;
	        units.push(month);
	    }
	    else if (d.quarter !== undefined) {
	        var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
	        units.push(quarter + '*3');
	    }
	    else {
	        units.push(0); // months start at zero in JS
	    }
	    if (d.date !== undefined) {
	        units.push(d.date);
	    }
	    else if (d.day !== undefined) {
	        // HACK: Day only works as a standalone unit
	        // This is only correct because we always set year to 2006 for day
	        var day = normalize ? normalizeDay(d.day) : d.day;
	        units.push(day + '+1');
	    }
	    else {
	        units.push(1); // Date starts at 1 in JS
	    }
	    // Note: can't use TimeUnit enum here as importing it will create
	    // circular dependency problem!
	    for (var _i = 0, _a = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _a.length; _i++) {
	        var timeUnit = _a[_i];
	        if (d[timeUnit] !== undefined) {
	            units.push(d[timeUnit]);
	        }
	        else {
	            units.push(0);
	        }
	    }
	    if (d.utc) {
	        return "utc(" + units.join(', ') + ")";
	    }
	    else {
	        return "datetime(" + units.join(', ') + ")";
	    }
	}
	exports.dateTimeExpr = dateTimeExpr;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/** Constants and utilities for data type */
	/** Data type based on level of measurement */
	var Type;
	(function (Type) {
	    Type.QUANTITATIVE = 'quantitative';
	    Type.ORDINAL = 'ordinal';
	    Type.TEMPORAL = 'temporal';
	    Type.NOMINAL = 'nominal';
	    Type.LATITUDE = 'latitude';
	    Type.LONGITUDE = 'longitude';
	    Type.GEOJSON = 'geojson';
	})(Type = exports.Type || (exports.Type = {}));
	var TYPE_INDEX = {
	    quantitative: 1,
	    ordinal: 1,
	    temporal: 1,
	    nominal: 1,
	    latitude: 1,
	    longitude: 1,
	    geojson: 1
	};
	function isType(t) {
	    return !!TYPE_INDEX[t];
	}
	exports.isType = isType;
	exports.QUANTITATIVE = Type.QUANTITATIVE;
	exports.ORDINAL = Type.ORDINAL;
	exports.TEMPORAL = Type.TEMPORAL;
	exports.NOMINAL = Type.NOMINAL;
	exports.LATITUDE = Type.LATITUDE;
	exports.LONGITUDE = Type.LONGITUDE;
	exports.GEOJSON = Type.GEOJSON;
	/**
	 * Get full, lowercase type name for a given type.
	 * @param  type
	 * @return Full type name.
	 */
	function getFullName(type) {
	    if (type) {
	        type = type.toLowerCase();
	        switch (type) {
	            case 'q':
	            case exports.QUANTITATIVE:
	                return 'quantitative';
	            case 't':
	            case exports.TEMPORAL:
	                return 'temporal';
	            case 'o':
	            case exports.ORDINAL:
	                return 'ordinal';
	            case 'n':
	            case exports.NOMINAL:
	                return 'nominal';
	            case exports.LATITUDE:
	                return 'latitude';
	            case exports.LONGITUDE:
	                return 'longitude';
	            case exports.GEOJSON:
	                return 'geojson';
	        }
	    }
	    // If we get invalid input, return undefined type.
	    return undefined;
	}
	exports.getFullName = getFullName;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsNENBQTRDO0FBQzVDLDhDQUE4QztBQUU5QyxJQUFpQixJQUFJLENBU3BCO0FBVEQsV0FBaUIsSUFBSTtJQUNOLGlCQUFZLEdBQW1CLGNBQWMsQ0FBQztJQUM5QyxZQUFPLEdBQWMsU0FBUyxDQUFDO0lBQy9CLGFBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsWUFBTyxHQUFjLFNBQVMsQ0FBQztJQUUvQixhQUFRLEdBQWUsVUFBVSxDQUFDO0lBQ2xDLGNBQVMsR0FBZ0IsV0FBVyxDQUFDO0lBQ3JDLFlBQU8sR0FBYyxTQUFTLENBQUM7QUFDOUMsQ0FBQyxFQVRnQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFTcEI7QUFNRCxJQUFNLFVBQVUsR0FBZTtJQUM3QixZQUFZLEVBQUUsQ0FBQztJQUNmLE9BQU8sRUFBRSxDQUFDO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxPQUFPLEVBQUUsQ0FBQztJQUNWLFFBQVEsRUFBRSxDQUFDO0lBQ1gsU0FBUyxFQUFFLENBQUM7SUFDWixPQUFPLEVBQUUsQ0FBQztDQUNYLENBQUM7QUFFRixnQkFBdUIsQ0FBTTtJQUMzQixNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRkQsd0JBRUM7QUFFWSxRQUFBLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQ2pDLFFBQUEsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDdkIsUUFBQSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN6QixRQUFBLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRXZCLFFBQUEsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDekIsUUFBQSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUMzQixRQUFBLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBRXBDOzs7O0dBSUc7QUFDSCxxQkFBNEIsSUFBaUI7SUFDM0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNULElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNiLEtBQUssR0FBRyxDQUFDO1lBQ1QsS0FBSyxvQkFBWTtnQkFDZixNQUFNLENBQUMsY0FBYyxDQUFDO1lBQ3hCLEtBQUssR0FBRyxDQUFDO1lBQ1QsS0FBSyxnQkFBUTtnQkFDWCxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ3BCLEtBQUssR0FBRyxDQUFDO1lBQ1QsS0FBSyxlQUFPO2dCQUNWLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDbkIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLGVBQU87Z0JBQ1YsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNuQixLQUFLLGdCQUFRO2dCQUNYLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFDcEIsS0FBSyxpQkFBUztnQkFDWixNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ3JCLEtBQUssZUFBTztnQkFDVixNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0lBQ0Qsa0RBQWtEO0lBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQTFCRCxrQ0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYWd9IGZyb20gJy4vdXRpbCc7XG4vKiogQ29uc3RhbnRzIGFuZCB1dGlsaXRpZXMgZm9yIGRhdGEgdHlwZSAqL1xuLyoqIERhdGEgdHlwZSBiYXNlZCBvbiBsZXZlbCBvZiBtZWFzdXJlbWVudCAqL1xuXG5leHBvcnQgbmFtZXNwYWNlIFR5cGUge1xuICBleHBvcnQgY29uc3QgUVVBTlRJVEFUSVZFOiAncXVhbnRpdGF0aXZlJyA9ICdxdWFudGl0YXRpdmUnO1xuICBleHBvcnQgY29uc3QgT1JESU5BTDogJ29yZGluYWwnID0gJ29yZGluYWwnO1xuICBleHBvcnQgY29uc3QgVEVNUE9SQUw6ICd0ZW1wb3JhbCcgPSAndGVtcG9yYWwnO1xuICBleHBvcnQgY29uc3QgTk9NSU5BTDogJ25vbWluYWwnID0gJ25vbWluYWwnO1xuXG4gIGV4cG9ydCBjb25zdCBMQVRJVFVERTogJ2xhdGl0dWRlJyA9ICdsYXRpdHVkZSc7XG4gIGV4cG9ydCBjb25zdCBMT05HSVRVREU6ICdsb25naXR1ZGUnID0gJ2xvbmdpdHVkZSc7XG4gIGV4cG9ydCBjb25zdCBHRU9KU09OOiAnZ2VvanNvbicgPSAnZ2VvanNvbic7XG59XG5leHBvcnQgdHlwZSBCYXNpY1R5cGUgPSB0eXBlb2YgVHlwZS5RVUFOVElUQVRJVkUgfCB0eXBlb2YgVHlwZS5PUkRJTkFMIHwgdHlwZW9mIFR5cGUuVEVNUE9SQUwgfCB0eXBlb2YgVHlwZS5OT01JTkFMO1xuZXhwb3J0IHR5cGUgR2VvVHlwZSA9IHR5cGVvZiBUeXBlLkxBVElUVURFIHwgdHlwZW9mIFR5cGUuTE9OR0lUVURFIHwgdHlwZW9mIFR5cGUuR0VPSlNPTjtcblxuZXhwb3J0IHR5cGUgVHlwZSA9IEJhc2ljVHlwZSB8IEdlb1R5cGU7XG5cbmNvbnN0IFRZUEVfSU5ERVg6IEZsYWc8VHlwZT4gPSB7XG4gIHF1YW50aXRhdGl2ZTogMSxcbiAgb3JkaW5hbDogMSxcbiAgdGVtcG9yYWw6IDEsXG4gIG5vbWluYWw6IDEsXG4gIGxhdGl0dWRlOiAxLFxuICBsb25naXR1ZGU6IDEsXG4gIGdlb2pzb246IDFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodDogYW55KTogdCBpcyBUeXBlIHtcbiAgcmV0dXJuICEhVFlQRV9JTkRFWFt0XTtcbn1cblxuZXhwb3J0IGNvbnN0IFFVQU5USVRBVElWRSA9IFR5cGUuUVVBTlRJVEFUSVZFO1xuZXhwb3J0IGNvbnN0IE9SRElOQUwgPSBUeXBlLk9SRElOQUw7XG5leHBvcnQgY29uc3QgVEVNUE9SQUwgPSBUeXBlLlRFTVBPUkFMO1xuZXhwb3J0IGNvbnN0IE5PTUlOQUwgPSBUeXBlLk5PTUlOQUw7XG5cbmV4cG9ydCBjb25zdCBMQVRJVFVERSA9IFR5cGUuTEFUSVRVREU7XG5leHBvcnQgY29uc3QgTE9OR0lUVURFID0gVHlwZS5MT05HSVRVREU7XG5leHBvcnQgY29uc3QgR0VPSlNPTiA9IFR5cGUuR0VPSlNPTjtcblxuLyoqXG4gKiBHZXQgZnVsbCwgbG93ZXJjYXNlIHR5cGUgbmFtZSBmb3IgYSBnaXZlbiB0eXBlLlxuICogQHBhcmFtICB0eXBlXG4gKiBAcmV0dXJuIEZ1bGwgdHlwZSBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVsbE5hbWUodHlwZTogVHlwZXxzdHJpbmcpOiBUeXBlIHtcbiAgaWYgKHR5cGUpIHtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncSc6XG4gICAgICBjYXNlIFFVQU5USVRBVElWRTpcbiAgICAgICAgcmV0dXJuICdxdWFudGl0YXRpdmUnO1xuICAgICAgY2FzZSAndCc6XG4gICAgICBjYXNlIFRFTVBPUkFMOlxuICAgICAgICByZXR1cm4gJ3RlbXBvcmFsJztcbiAgICAgIGNhc2UgJ28nOlxuICAgICAgY2FzZSBPUkRJTkFMOlxuICAgICAgICByZXR1cm4gJ29yZGluYWwnO1xuICAgICAgY2FzZSAnbic6XG4gICAgICBjYXNlIE5PTUlOQUw6XG4gICAgICAgIHJldHVybiAnbm9taW5hbCc7XG4gICAgICBjYXNlIExBVElUVURFOlxuICAgICAgICByZXR1cm4gJ2xhdGl0dWRlJztcbiAgICAgIGNhc2UgTE9OR0lUVURFOlxuICAgICAgICByZXR1cm4gJ2xvbmdpdHVkZSc7XG4gICAgICBjYXNlIEdFT0pTT046XG4gICAgICAgIHJldHVybiAnZ2VvanNvbic7XG4gICAgfVxuICB9XG4gIC8vIElmIHdlIGdldCBpbnZhbGlkIGlucHV0LCByZXR1cm4gdW5kZWZpbmVkIHR5cGUuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function getMarkSpecificConfigMixins(markSpecificConfig, channel) {
	    var value = markSpecificConfig[channel];
	    return value !== undefined ? (_a = {}, _a[channel] = { value: value }, _a) : {};
	    var _a;
	}
	exports.getMarkSpecificConfigMixins = getMarkSpecificConfigMixins;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvc2l0ZW1hcmsvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EscUNBQTRDLGtCQUE4QixFQUFFLE9BQTJCO0lBQ3JHLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsV0FBRSxHQUFDLE9BQU8sSUFBRyxFQUFDLEtBQUssT0FBQSxFQUFDLE1BQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7QUFDekQsQ0FBQztBQUhELGtFQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOb25Qb3NpdGlvbkNoYW5uZWx9IGZyb20gJy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtNYXJrQ29uZmlnfSBmcm9tICcuLi9tYXJrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcmtTcGVjaWZpY0NvbmZpZ01peGlucyhtYXJrU3BlY2lmaWNDb25maWc6IE1hcmtDb25maWcsIGNoYW5uZWw6IE5vblBvc2l0aW9uQ2hhbm5lbCkge1xuICBjb25zdCB2YWx1ZSA9IG1hcmtTcGVjaWZpY0NvbmZpZ1tjaGFubmVsXTtcbiAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB7W2NoYW5uZWxdOiB7dmFsdWV9fSA6IHt9O1xufVxuIl19

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ERRORBAR = 'error-bar';
	function normalizeErrorBar(spec) {
	    // TODO: use selection
	    var _m = spec.mark, _sel = spec.selection, _p = spec.projection, encoding = spec.encoding, outerSpec = __rest(spec, ["mark", "selection", "projection", "encoding"]);
	    var _s = encoding.size, encodingWithoutSize = __rest(encoding, ["size"]);
	    var _x2 = encoding.x2, _y2 = encoding.y2, encodingWithoutX2Y2 = __rest(encoding, ["x2", "y2"]);
	    var _x = encodingWithoutX2Y2.x, _y = encodingWithoutX2Y2.y, encodingWithoutX_X2_Y_Y2 = __rest(encodingWithoutX2Y2, ["x", "y"]);
	    if (!encoding.x2 && !encoding.y2) {
	        throw new Error('Neither x2 or y2 provided');
	    }
	    return __assign({}, outerSpec, { layer: [
	            {
	                mark: 'rule',
	                encoding: encodingWithoutSize
	            }, {
	                mark: 'tick',
	                encoding: encodingWithoutX2Y2
	            }, {
	                mark: 'tick',
	                encoding: encoding.x2 ? __assign({ x: encoding.x2, y: encoding.y }, encodingWithoutX_X2_Y_Y2) : __assign({ x: encoding.x, y: encoding.y2 }, encodingWithoutX_X2_Y_Y2)
	            }
	        ] });
	}
	exports.normalizeErrorBar = normalizeErrorBar;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JiYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9lcnJvcmJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS2EsUUFBQSxRQUFRLEdBQWdCLFdBQVcsQ0FBQztBQUdqRCwyQkFBa0MsSUFBZ0Q7SUFDaEYsc0JBQXNCO0lBQ2YsSUFBQSxjQUFRLEVBQUUscUJBQWUsRUFBRSxvQkFBYyxFQUFFLHdCQUFRLEVBQUUseUVBQVksQ0FBUztJQUMxRSxJQUFBLGtCQUFRLEVBQUUsZ0RBQXNCLENBQWE7SUFDN0MsSUFBQSxpQkFBTyxFQUFFLGlCQUFPLEVBQUUsb0RBQXNCLENBQWE7SUFDckQsSUFBQSwwQkFBSyxFQUFFLDBCQUFLLEVBQUUsa0VBQTJCLENBQXdCO0lBRXhFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsTUFBTSxjQUNELFNBQVMsSUFDWixLQUFLLEVBQUU7WUFDTDtnQkFDRSxJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsbUJBQW1CO2FBQzlCLEVBQUM7Z0JBQ0EsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLG1CQUFtQjthQUM5QixFQUFFO2dCQUNELElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsWUFDckIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLEVBQ2QsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQ1Ysd0JBQXdCLEVBQzNCLENBQUMsWUFDRCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFDYixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsSUFDWCx3QkFBd0IsQ0FDNUI7YUFDRjtTQUNGLElBQ0Q7QUFDSixDQUFDO0FBbENELDhDQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmllbGR9IGZyb20gJy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7RW5jb2Rpbmd9IGZyb20gJy4vLi4vZW5jb2RpbmcnO1xuaW1wb3J0IHtHZW5lcmljVW5pdFNwZWMsIExheWVyU3BlY30gZnJvbSAnLi8uLi9zcGVjJztcblxuXG5leHBvcnQgY29uc3QgRVJST1JCQVI6ICdlcnJvci1iYXInID0gJ2Vycm9yLWJhcic7XG5leHBvcnQgdHlwZSBFUlJPUkJBUiA9IHR5cGVvZiBFUlJPUkJBUjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUVycm9yQmFyKHNwZWM6IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxGaWVsZD4sIEVSUk9SQkFSPik6IExheWVyU3BlYyB7XG4gIC8vIFRPRE86IHVzZSBzZWxlY3Rpb25cbiAgY29uc3Qge21hcms6IF9tLCBzZWxlY3Rpb246IF9zZWwsIHByb2plY3Rpb246IF9wLCBlbmNvZGluZywgLi4ub3V0ZXJTcGVjfSA9IHNwZWM7XG4gIGNvbnN0IHtzaXplOiBfcywgLi4uZW5jb2RpbmdXaXRob3V0U2l6ZX0gPSBlbmNvZGluZztcbiAgY29uc3Qge3gyOiBfeDIsIHkyOiBfeTIsIC4uLmVuY29kaW5nV2l0aG91dFgyWTJ9ID0gZW5jb2Rpbmc7XG4gIGNvbnN0IHt4OiBfeCwgeTogX3ksIC4uLmVuY29kaW5nV2l0aG91dFhfWDJfWV9ZMn0gPSBlbmNvZGluZ1dpdGhvdXRYMlkyO1xuXG4gIGlmICghZW5jb2RpbmcueDIgJiYgIWVuY29kaW5nLnkyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOZWl0aGVyIHgyIG9yIHkyIHByb3ZpZGVkJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLm91dGVyU3BlYyxcbiAgICBsYXllcjogW1xuICAgICAge1xuICAgICAgICBtYXJrOiAncnVsZScsXG4gICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1dpdGhvdXRTaXplXG4gICAgICB9LHsgLy8gTG93ZXIgdGlja1xuICAgICAgICBtYXJrOiAndGljaycsXG4gICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1dpdGhvdXRYMlkyXG4gICAgICB9LCB7IC8vIFVwcGVyIHRpY2tcbiAgICAgICAgbWFyazogJ3RpY2snLFxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmcueDIgPyB7XG4gICAgICAgICAgeDogZW5jb2RpbmcueDIsXG4gICAgICAgICAgeTogZW5jb2RpbmcueSxcbiAgICAgICAgICAuLi5lbmNvZGluZ1dpdGhvdXRYX1gyX1lfWTJcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICB4OiBlbmNvZGluZy54LFxuICAgICAgICAgIHk6IGVuY29kaW5nLnkyLFxuICAgICAgICAgIC4uLmVuY29kaW5nV2l0aG91dFhfWDJfWV9ZMlxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuIl19

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var config_1 = __webpack_require__(36);
	var vlFieldDef = __webpack_require__(28);
	var log = __webpack_require__(29);
	var spec_1 = __webpack_require__(42);
	var toplevelprops_1 = __webpack_require__(44);
	var util_1 = __webpack_require__(14);
	var buildmodel_1 = __webpack_require__(49);
	var assemble_1 = __webpack_require__(115);
	var optimize_1 = __webpack_require__(80);
	/**
	 * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.
	 *
	 * At a high-level, we make the following transformations in different phases:
	 *
	 * Input spec
	 *     |
	 *     |  (Normalization)
	 *     v
	 * Normalized Spec
	 *     |
	 *     |  (Build Model)
	 *     v
	 * A model tree of the spec
	 *     |
	 *     |  (Parse)
	 *     v
	 * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
	 *     |
	 *     | (Optimize)
	 *     v
	 * A model tree with parsed components with the data component optimized
	 *     |
	 *     | (Assemble)
	 *     v
	 * Vega spec
	 */
	function compile(inputSpec, opt) {
	    if (opt === void 0) { opt = {}; }
	    // 0. Augment opt with default opts
	    if (opt.logger) {
	        // set the singleton logger to the provided logger
	        log.set(opt.logger);
	    }
	    if (opt.fieldTitle) {
	        // set the singleton field title formatter
	        vlFieldDef.setTitleFormatter(opt.fieldTitle);
	    }
	    try {
	        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
	        var config = config_1.initConfig(util_1.mergeDeep({}, opt.config, inputSpec.config));
	        // 2. Normalize: Convert input spec -> normalized spec
	        // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
	        var spec = spec_1.normalize(inputSpec, config);
	        // - Normalize autosize to be a autosize properties object.
	        var autosize = toplevelprops_1.normalizeAutoSize(inputSpec.autosize, config.autosize, spec_1.isLayerSpec(spec) || spec_1.isUnitSpec(spec));
	        // 3. Build Model: normalized spec -> Model (a tree structure)
	        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
	        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.
	        var model = buildmodel_1.buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');
	        // 4 Parse: Model --> Model with components (components = intermediate that can be merged
	        // and assembled easily)
	        // In this phase, we do a bottom-up traversal over the whole tree to
	        // parse for each type of components once (e.g., data, layout, mark, scale).
	        // By doing bottom-up traversal, we start parsing components of unit specs and
	        // then merge child components of parent composite specs.
	        //
	        // Please see inside model.parse() for order of different components parsed.
	        model.parse();
	        // 5. Optimize the dataflow.  This will modify the data component of the model.
	        optimize_1.optimizeDataflow(model.component.data);
	        // 6. Assemble: convert model and components --> Vega Spec.
	        return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize));
	    }
	    finally {
	        // Reset the singleton logger if a logger is provided
	        if (opt.logger) {
	            log.reset();
	        }
	        // Reset the singleton field title formatter if provided
	        if (opt.fieldTitle) {
	            vlFieldDef.resetTitleFormatter();
	        }
	    }
	}
	exports.compile = compile;
	function getTopLevelProperties(topLevelSpec, config, autosize) {
	    return __assign({ autosize: util_1.keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, toplevelprops_1.extractTopLevelProperties(config), toplevelprops_1.extractTopLevelProperties(topLevelSpec));
	}
	/*
	 * Assemble the top-level model.
	 *
	 * Note: this couldn't be `model.assemble()` since the top-level model
	 * needs some special treatment to generate top-level properties.
	 */
	function assembleTopLevelModel(model, topLevelProperties) {
	    // TODO: change type to become VgSpec
	    // Config with Vega-Lite only config removed.
	    var vgConfig = model.config ? config_1.stripAndRedirectConfig(model.config) : undefined;
	    var data = [].concat(model.assembleSelectionData([]), 
	    // only assemble data in the root
	    assemble_1.assembleRootData(model.component.data));
	    var projections = model.assembleProjections();
	    var title = model.assembleTitle();
	    var style = model.assembleGroupStyle();
	    var layoutSignals = model.assembleLayoutSignals();
	    // move width and height signals with values to top level
	    layoutSignals = layoutSignals.filter(function (signal) {
	        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
	            topLevelProperties[signal.name] = +signal.value;
	            return false;
	        }
	        return true;
	    });
	    var output = __assign({ $schema: 'https://vega.github.io/schema/vega/v3.0.json' }, (model.description ? { description: model.description } : {}), topLevelProperties, (title ? { title: title } : {}), (style ? { style: style } : {}), { data: data }, (projections.length > 0 ? { projections: projections } : {}), model.assembleGroup(layoutSignals.concat(model.assembleSelectionTopLevelSignals([]))), (vgConfig ? { config: vgConfig } : {}));
	    return {
	        spec: output
	        // TODO: add warning / errors here
	    };
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var compositemark_1 = __webpack_require__(24);
	var index_1 = __webpack_require__(24);
	var guide_1 = __webpack_require__(37);
	var legend_1 = __webpack_require__(38);
	var mark_1 = __webpack_require__(25);
	var mark = __webpack_require__(25);
	var scale_1 = __webpack_require__(39);
	var selection_1 = __webpack_require__(40);
	var title_1 = __webpack_require__(41);
	var util_1 = __webpack_require__(14);
	exports.defaultViewConfig = {
	    width: 200,
	    height: 200
	};
	exports.defaultConfig = {
	    padding: 5,
	    timeFormat: '%b %d, %Y',
	    countTitle: 'Number of Records',
	    invalidValues: 'filter',
	    view: exports.defaultViewConfig,
	    mark: mark.defaultMarkConfig,
	    area: {},
	    bar: mark.defaultBarConfig,
	    circle: {},
	    geoshape: {},
	    line: {},
	    point: {},
	    rect: {},
	    rule: { color: 'black' },
	    square: {},
	    text: { color: 'black' },
	    tick: mark.defaultTickConfig,
	    box: { size: 14 },
	    boxWhisker: {},
	    boxMid: { color: 'white' },
	    scale: scale_1.defaultScaleConfig,
	    projection: {},
	    axis: {},
	    axisX: {},
	    axisY: { minExtent: 30 },
	    axisLeft: {},
	    axisRight: {},
	    axisTop: {},
	    axisBottom: {},
	    axisBand: {},
	    legend: legend_1.defaultLegendConfig,
	    selection: selection_1.defaultConfig,
	    style: {},
	    title: {},
	};
	function initConfig(config) {
	    return util_1.mergeDeep(util_1.duplicate(exports.defaultConfig), config);
	}
	exports.initConfig = initConfig;
	var MARK_STYLES = ['view'].concat(mark_1.PRIMITIVE_MARKS, compositemark_1.COMPOSITE_MARK_STYLES);
	var VL_ONLY_CONFIG_PROPERTIES = [
	    'padding', 'numberFormat', 'timeFormat', 'countTitle',
	    'stack', 'scale', 'selection', 'invalidValues',
	    'overlay' // FIXME: Redesign and unhide this
	];
	var VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = __assign({ view: ['width', 'height'] }, mark_1.VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX, index_1.VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);
	function stripAndRedirectConfig(config) {
	    config = util_1.duplicate(config);
	    for (var _i = 0, VL_ONLY_CONFIG_PROPERTIES_1 = VL_ONLY_CONFIG_PROPERTIES; _i < VL_ONLY_CONFIG_PROPERTIES_1.length; _i++) {
	        var prop = VL_ONLY_CONFIG_PROPERTIES_1[_i];
	        delete config[prop];
	    }
	    // Remove Vega-Lite only axis/legend config
	    if (config.axis) {
	        for (var _a = 0, VL_ONLY_GUIDE_CONFIG_1 = guide_1.VL_ONLY_GUIDE_CONFIG; _a < VL_ONLY_GUIDE_CONFIG_1.length; _a++) {
	            var prop = VL_ONLY_GUIDE_CONFIG_1[_a];
	            delete config.axis[prop];
	        }
	    }
	    if (config.legend) {
	        for (var _b = 0, VL_ONLY_GUIDE_CONFIG_2 = guide_1.VL_ONLY_GUIDE_CONFIG; _b < VL_ONLY_GUIDE_CONFIG_2.length; _b++) {
	            var prop = VL_ONLY_GUIDE_CONFIG_2[_b];
	            delete config.legend[prop];
	        }
	    }
	    // Remove Vega-Lite only generic mark config
	    if (config.mark) {
	        for (var _c = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_1 = mark_1.VL_ONLY_MARK_CONFIG_PROPERTIES; _c < VL_ONLY_MARK_CONFIG_PROPERTIES_1.length; _c++) {
	            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_1[_c];
	            delete config.mark[prop];
	        }
	    }
	    for (var _d = 0, MARK_STYLES_1 = MARK_STYLES; _d < MARK_STYLES_1.length; _d++) {
	        var markType = MARK_STYLES_1[_d];
	        // Remove Vega-Lite-only mark config
	        for (var _e = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_2 = mark_1.VL_ONLY_MARK_CONFIG_PROPERTIES; _e < VL_ONLY_MARK_CONFIG_PROPERTIES_2.length; _e++) {
	            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_2[_e];
	            delete config[markType][prop];
	        }
	        // Remove Vega-Lite only mark-specific config
	        var vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];
	        if (vlOnlyMarkSpecificConfigs) {
	            for (var _f = 0, vlOnlyMarkSpecificConfigs_1 = vlOnlyMarkSpecificConfigs; _f < vlOnlyMarkSpecificConfigs_1.length; _f++) {
	                var prop = vlOnlyMarkSpecificConfigs_1[_f];
	                delete config[markType][prop];
	            }
	        }
	        // Redirect mark config to config.style so that mark config only affect its own mark type
	        // without affecting other marks that share the same underlying Vega marks.
	        // For example, config.rect should not affect bar marks.
	        redirectConfig(config, markType);
	    }
	    // Redirect config.title -- so that title config do not
	    // affect header labels, which also uses `title` directive to implement.
	    redirectConfig(config, 'title', 'group-title');
	    // Remove empty config objects
	    for (var prop in config) {
	        if (util_1.isObject(config[prop]) && util_1.keys(config[prop]).length === 0) {
	            delete config[prop];
	        }
	    }
	    return util_1.keys(config).length > 0 ? config : undefined;
	}
	exports.stripAndRedirectConfig = stripAndRedirectConfig;
	function redirectConfig(config, prop, toProp) {
	    var propConfig = prop === 'title' ? title_1.extractTitleConfig(config.title).mark : config[prop];
	    if (prop === 'view') {
	        toProp = 'cell'; // View's default style is "cell"
	    }
	    var style = __assign({}, propConfig, config.style[prop]);
	    // set config.style if it is not an empty object
	    if (util_1.keys(style).length > 0) {
	        config.style[toProp || prop] = style;
	    }
	    delete config[prop];
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3VpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFzQ2EsUUFBQSxvQkFBb0IsR0FBZ0MsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWYWx1ZURlZn0gZnJvbSAnLi9maWVsZGRlZic7XG5pbXBvcnQge1ZnRW5jb2RlQ2hhbm5lbH0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBHdWlkZSB7XG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0dGluZyBwYXR0ZXJuIGZvciBsYWJlbHMuIFRoaXMgaXMgRDMncyBbbnVtYmVyIGZvcm1hdCBwYXR0ZXJuXShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZm9ybWF0I2xvY2FsZV9mb3JtYXQpIGZvciBxdWFudGl0YXRpdmUgZmllbGRzIGFuZCBEMydzIFt0aW1lIGZvcm1hdCBwYXR0ZXJuXShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtdGltZS1mb3JtYXQjbG9jYWxlX2Zvcm1hdCkgZm9yIHRpbWUgZmllbGQuXG4gICAqXG4gICAqIFNlZSB0aGUgW2Zvcm1hdCBkb2N1bWVudGF0aW9uXShmb3JtYXQuaHRtbCkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgZGVyaXZlZCBmcm9tIFtudW1iZXJGb3JtYXRdKGNvbmZpZy5odG1sI2Zvcm1hdCkgY29uZmlnIGZvciBxdWFudGl0YXRpdmUgZmllbGRzIGFuZCBmcm9tIFt0aW1lRm9ybWF0XShjb25maWcuaHRtbCNmb3JtYXQpIGNvbmZpZyBmb3IgdGVtcG9yYWwgZmllbGRzLlxuICAgKi9cbiAgZm9ybWF0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHRpdGxlIGZvciB0aGUgZmllbGQuIElmIGBudWxsYCwgdGhlIHRpdGxlIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICBkZXJpdmVkIGZyb20gdGhlIGZpZWxkJ3MgbmFtZSBhbmQgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gKGBhZ2dyZWdhdGVgLCBgYmluYCBhbmQgYHRpbWVVbml0YCkuICBJZiB0aGUgZmllbGQgaGFzIGFuIGFnZ3JlZ2F0ZSBmdW5jdGlvbiwgdGhlIGZ1bmN0aW9uIGlzIGRpc3BsYXllZCBhcyBhIHBhcnQgb2YgdGhlIHRpdGxlIChlLmcuLCBgXCJTdW0gb2YgUHJvZml0XCJgKS4gSWYgdGhlIGZpZWxkIGlzIGJpbm5lZCBvciBoYXMgYSB0aW1lIHVuaXQgYXBwbGllZCwgdGhlIGFwcGxpZWQgZnVuY3Rpb24gd2lsbCBiZSBkZW5vdGVkIGluIHBhcmVudGhlc2VzIChlLmcuLCBgXCJQcm9maXQgKGJpbm5lZClcImAsIGBcIlRyYW5zYWN0aW9uIERhdGUgKHllYXItbW9udGgpXCJgKS4gIE90aGVyd2lzZSwgdGhlIHRpdGxlIGlzIHNpbXBseSB0aGUgZmllbGQgbmFtZS5cbiAgICpcbiAgICogX19Ob3RlX186IFlvdSBjYW4gY3VzdG9taXplIHRoZSBkZWZhdWx0IGZpZWxkIHRpdGxlIGZvcm1hdCBieSBwcm92aWRpbmcgdGhlIFtgZmllbGRUaXRsZWAgcHJvcGVydHkgaW4gdGhlIFtjb25maWddKGNvbmZpZy5odG1sKSBvciBbYGZpZWxkVGl0bGVgIGZ1bmN0aW9uIHZpYSB0aGUgYGNvbXBpbGVgIGZ1bmN0aW9uJ3Mgb3B0aW9uc10oY29tcGlsZS5odG1sI2ZpZWxkLXRpdGxlKS5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nIHwgbnVsbDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgVmxPbmx5R3VpZGVDb25maWcge1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG1vbnRoIG5hbWVzIGFuZCB3ZWVrZGF5IG5hbWVzIHNob3VsZCBiZSBhYmJyZXZpYXRlZC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICBgZmFsc2VgXG4gICAqL1xuICBzaG9ydFRpbWVMYWJlbHM/OiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCB0eXBlIEd1aWRlRW5jb2RpbmdFbnRyeSA9IHtcbiAgW2sgaW4gVmdFbmNvZGVDaGFubmVsXT86IFZhbHVlRGVmO1xufTtcblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfR1VJREVfQ09ORklHOiAoa2V5b2YgVmxPbmx5R3VpZGVDb25maWcpW10gPSBbJ3Nob3J0VGltZUxhYmVscyddO1xuIl19

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	exports.defaultLegendConfig = {};
	var COMMON_LEGEND_PROPERTY_INDEX = {
	    entryPadding: 1,
	    format: 1,
	    offset: 1,
	    orient: 1,
	    padding: 1,
	    tickCount: 1,
	    title: 1,
	    type: 1,
	    values: 1,
	    zindex: 1
	};
	var VG_LEGEND_PROPERTY_INDEX = __assign({}, COMMON_LEGEND_PROPERTY_INDEX, { 
	    // channel scales
	    opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, 
	    // encode
	    encode: 1 });
	exports.LEGEND_PROPERTIES = util_1.flagKeys(COMMON_LEGEND_PROPERTY_INDEX);
	exports.VG_LEGEND_PROPERTIES = util_1.flagKeys(VG_LEGEND_PROPERTY_INDEX);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xlZ2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRUEsK0JBQXNDO0FBd0V6QixRQUFBLG1CQUFtQixHQUFpQixFQUFFLENBQUM7QUFFcEQsSUFBTSw0QkFBNEIsR0FBb0M7SUFDcEUsWUFBWSxFQUFFLENBQUM7SUFDZixNQUFNLEVBQUUsQ0FBQztJQUNULE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLEVBQUUsQ0FBQztJQUNWLFNBQVMsRUFBRSxDQUFDO0lBQ1osS0FBSyxFQUFFLENBQUM7SUFDUixJQUFJLEVBQUUsQ0FBQztJQUNQLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7Q0FDVixDQUFDO0FBRUYsSUFBTSx3QkFBd0IsZ0JBQ3pCLDRCQUE0QjtJQUMvQixpQkFBaUI7SUFDakIsT0FBTyxFQUFFLENBQUMsRUFDVixLQUFLLEVBQUUsQ0FBQyxFQUNSLE1BQU0sRUFBRSxDQUFDLEVBQ1QsSUFBSSxFQUFFLENBQUMsRUFDUCxJQUFJLEVBQUUsQ0FBQztJQUNQLFNBQVM7SUFDVCxNQUFNLEVBQUUsQ0FBQyxHQUNWLENBQUM7QUFFVyxRQUFBLGlCQUFpQixHQUFHLGVBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRTNELFFBQUEsb0JBQW9CLEdBQUcsZUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RhdGVUaW1lfSBmcm9tICcuL2RhdGV0aW1lJztcbmltcG9ydCB7R3VpZGUsIEd1aWRlRW5jb2RpbmdFbnRyeSwgVmxPbmx5R3VpZGVDb25maWd9IGZyb20gJy4vZ3VpZGUnO1xuaW1wb3J0IHtGbGFnLCBmbGFnS2V5c30gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7VmdMZWdlbmQsIFZnTGVnZW5kQmFzZSwgVmdMZWdlbmRDb25maWd9IGZyb20gJy4vdmVnYS5zY2hlbWEnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVnZW5kQ29uZmlnIGV4dGVuZHMgVmdMZWdlbmRDb25maWcsIFZsT25seUd1aWRlQ29uZmlnIHt9XG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIGxlZ2VuZCBvciBib29sZWFuIGZsYWcgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdG8gc2hvdyBpdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZWdlbmQgZXh0ZW5kcyBWZ0xlZ2VuZEJhc2UsIEd1aWRlIHtcbiAgLyoqXG4gICAqIE1hcmsgZGVmaW5pdGlvbnMgZm9yIGN1c3RvbSBsZWdlbmQgZW5jb2RpbmcuXG4gICAqXG4gICAqIEBoaWRlXG4gICAqL1xuICBlbmNvZGluZz86IExlZ2VuZEVuY29kaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzaXJlZCBudW1iZXIgb2YgdGljayB2YWx1ZXMgZm9yIHF1YW50aXRhdGl2ZSBsZWdlbmRzLlxuICAgKi9cbiAgdGlja0NvdW50PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBFeHBsaWNpdGx5IHNldCB0aGUgdmlzaWJsZSBsZWdlbmQgdmFsdWVzLlxuICAgKi9cbiAgdmFsdWVzPzogbnVtYmVyW10gfCBzdHJpbmdbXSB8IERhdGVUaW1lW107XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBsZWdlbmQuIFVzZSBgXCJzeW1ib2xcImAgdG8gY3JlYXRlIGEgZGlzY3JldGUgbGVnZW5kIGFuZCBgXCJncmFkaWVudFwiYCBmb3IgYSBjb250aW51b3VzIGNvbG9yIGdyYWRpZW50LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYFwiZ3JhZGllbnRcImAgZm9yIG5vbi1iaW5uZWQgcXVhbnRpdGF0aXZlIGZpZWxkcyBhbmQgdGVtcG9yYWwgZmllbGRzOyBgXCJzeW1ib2xcImAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdHlwZT86ICdzeW1ib2wnIHwgJ2dyYWRpZW50JztcblxuICAvKipcbiAgICogQSBub24tcG9zaXRpdmUgaW50ZWdlciBpbmRpY2F0aW5nIHotaW5kZXggb2YgdGhlIGxlZ2VuZC5cbiAgICogSWYgemluZGV4IGlzIDAsIGxlZ2VuZCBzaG91bGQgYmUgZHJhd24gYmVoaW5kIGFsbCBjaGFydCBlbGVtZW50cy5cbiAgICogVG8gcHV0IHRoZW0gaW4gZnJvbnQsIHVzZSB6aW5kZXggPSAxLlxuICAgKiBAVEpTLXR5cGUgaW50ZWdlclxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICB6aW5kZXg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIExlZ2VuZEVuY29kaW5nID0ge1xuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciB0aGUgbGVnZW5kIGNvbnRhaW5lci5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBjcmVhdGluZyBsZWdlbmQgd2l0aCBjdXN0b20geCwgeSBwb3NpdGlvbi5cbiAgICovXG4gIGxlZ2VuZD86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciB0aGUgbGVnZW5kIHRpdGxlIHRleHQgbWFyay5cbiAgICovXG4gIHRpdGxlPzogR3VpZGVFbmNvZGluZ0VudHJ5O1xuXG4gIC8qKlxuICAgKiBDdXN0b20gZW5jb2RpbmcgZm9yIGxlZ2VuZCBsYWJlbCB0ZXh0IG1hcmtzLlxuICAgKi9cbiAgbGFiZWxzPzogR3VpZGVFbmNvZGluZ0VudHJ5O1xuXG4gIC8qKlxuICAgKiBDdXN0b20gZW5jb2RpbmcgZm9yIGxlZ2VuZCBzeW1ib2wgbWFya3MuXG4gICAqL1xuICBzeW1ib2xzPzogR3VpZGVFbmNvZGluZ0VudHJ5O1xuXG4gIC8qKlxuICAgKiBDdXN0b20gZW5jb2RpbmcgZm9yIGxlZ2VuZCBncmFkaWVudCBmaWxsZWQgcmVjdCBtYXJrcy5cbiAgICovXG4gIGdyYWRpZW50PzogR3VpZGVFbmNvZGluZ0VudHJ5O1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRMZWdlbmRDb25maWc6IExlZ2VuZENvbmZpZyA9IHt9O1xuXG5jb25zdCBDT01NT05fTEVHRU5EX1BST1BFUlRZX0lOREVYOiBGbGFnPGtleW9mIChWZ0xlZ2VuZCB8IExlZ2VuZCk+ID0ge1xuICBlbnRyeVBhZGRpbmc6IDEsXG4gIGZvcm1hdDogMSxcbiAgb2Zmc2V0OiAxLFxuICBvcmllbnQ6IDEsXG4gIHBhZGRpbmc6IDEsXG4gIHRpY2tDb3VudDogMSxcbiAgdGl0bGU6IDEsXG4gIHR5cGU6IDEsXG4gIHZhbHVlczogMSxcbiAgemluZGV4OiAxXG59O1xuXG5jb25zdCBWR19MRUdFTkRfUFJPUEVSVFlfSU5ERVg6IEZsYWc8a2V5b2YgVmdMZWdlbmQ+ID0ge1xuICAuLi5DT01NT05fTEVHRU5EX1BST1BFUlRZX0lOREVYLFxuICAvLyBjaGFubmVsIHNjYWxlc1xuICBvcGFjaXR5OiAxLFxuICBzaGFwZTogMSxcbiAgc3Ryb2tlOiAxLFxuICBmaWxsOiAxLFxuICBzaXplOiAxLFxuICAvLyBlbmNvZGVcbiAgZW5jb2RlOiAxXG59O1xuXG5leHBvcnQgY29uc3QgTEVHRU5EX1BST1BFUlRJRVMgPSBmbGFnS2V5cyhDT01NT05fTEVHRU5EX1BST1BFUlRZX0lOREVYKTtcblxuZXhwb3J0IGNvbnN0IFZHX0xFR0VORF9QUk9QRVJUSUVTID0gZmxhZ0tleXMoVkdfTEVHRU5EX1BST1BFUlRZX0lOREVYKTtcbiJdfQ==

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	var ScaleType;
	(function (ScaleType) {
	    // Continuous - Quantitative
	    ScaleType.LINEAR = 'linear';
	    ScaleType.BIN_LINEAR = 'bin-linear';
	    ScaleType.LOG = 'log';
	    ScaleType.POW = 'pow';
	    ScaleType.SQRT = 'sqrt';
	    // Continuous - Time
	    ScaleType.TIME = 'time';
	    ScaleType.UTC = 'utc';
	    // sequential
	    ScaleType.SEQUENTIAL = 'sequential';
	    // Quantile, Quantize, threshold
	    ScaleType.QUANTILE = 'quantile';
	    ScaleType.QUANTIZE = 'quantize';
	    ScaleType.THRESHOLD = 'threshold';
	    ScaleType.ORDINAL = 'ordinal';
	    ScaleType.BIN_ORDINAL = 'bin-ordinal';
	    ScaleType.POINT = 'point';
	    ScaleType.BAND = 'band';
	})(ScaleType = exports.ScaleType || (exports.ScaleType = {}));
	/**
	 * Index for scale categories -- only scale of the same categories can be merged together.
	 * Current implementation is trying to be conservative and avoid merging scale type that might not work together
	 */
	var SCALE_CATEGORY_INDEX = {
	    linear: 'numeric',
	    log: 'numeric',
	    pow: 'numeric',
	    sqrt: 'numeric',
	    'bin-linear': 'bin-linear',
	    time: 'time',
	    utc: 'time',
	    sequential: 'sequential',
	    ordinal: 'ordinal',
	    'bin-ordinal': 'bin-ordinal',
	    point: 'ordinal-position',
	    band: 'ordinal-position'
	};
	exports.SCALE_TYPES = util_1.keys(SCALE_CATEGORY_INDEX);
	/**
	 * Whether the two given scale types can be merged together.
	 */
	function scaleCompatible(scaleType1, scaleType2) {
	    var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
	    var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
	    return scaleCategory1 === scaleCategory2 ||
	        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||
	        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time');
	}
	exports.scaleCompatible = scaleCompatible;
	/**
	 * Index for scale predecence -- high score = higher priority for merging.
	 */
	var SCALE_PRECEDENCE_INDEX = {
	    // numeric
	    linear: 0,
	    log: 1,
	    pow: 1,
	    sqrt: 1,
	    // time
	    time: 0,
	    utc: 0,
	    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
	    point: 10,
	    band: 11,
	    // non grouped types
	    'bin-linear': 0,
	    sequential: 0,
	    ordinal: 0,
	    'bin-ordinal': 0,
	};
	/**
	 * Return scale categories -- only scale of the same categories can be merged together.
	 */
	function scaleTypePrecedence(scaleType) {
	    return SCALE_PRECEDENCE_INDEX[scaleType];
	}
	exports.scaleTypePrecedence = scaleTypePrecedence;
	exports.CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc'];
	var CONTINUOUS_TO_CONTINUOUS_INDEX = util_1.toSet(exports.CONTINUOUS_TO_CONTINUOUS_SCALES);
	exports.CONTINUOUS_DOMAIN_SCALES = exports.CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['sequential' /* TODO add 'quantile', 'quantize', 'threshold'*/]);
	var CONTINUOUS_DOMAIN_INDEX = util_1.toSet(exports.CONTINUOUS_DOMAIN_SCALES);
	exports.DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
	var DISCRETE_DOMAIN_INDEX = util_1.toSet(exports.DISCRETE_DOMAIN_SCALES);
	var BIN_SCALES_INDEX = util_1.toSet(['bin-linear', 'bin-ordinal']);
	exports.TIME_SCALE_TYPES = ['time', 'utc'];
	function hasDiscreteDomain(type) {
	    return type in DISCRETE_DOMAIN_INDEX;
	}
	exports.hasDiscreteDomain = hasDiscreteDomain;
	function isBinScale(type) {
	    return type in BIN_SCALES_INDEX;
	}
	exports.isBinScale = isBinScale;
	function hasContinuousDomain(type) {
	    return type in CONTINUOUS_DOMAIN_INDEX;
	}
	exports.hasContinuousDomain = hasContinuousDomain;
	function isContinuousToContinuous(type) {
	    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
	}
	exports.isContinuousToContinuous = isContinuousToContinuous;
	exports.defaultScaleConfig = {
	    textXRangeStep: 90,
	    rangeStep: 21,
	    pointPadding: 0.5,
	    bandPaddingInner: 0.1,
	    facetSpacing: 16,
	    minBandSize: 2,
	    minFontSize: 8,
	    maxFontSize: 40,
	    minOpacity: 0.3,
	    maxOpacity: 0.8,
	    // FIXME: revise if these *can* become ratios of rangeStep
	    minSize: 9,
	    minStrokeWidth: 1,
	    maxStrokeWidth: 4
	};
	function isExtendedScheme(scheme) {
	    return scheme && !!scheme['name'];
	}
	exports.isExtendedScheme = isExtendedScheme;
	function isSelectionDomain(domain) {
	    return domain && domain['selection'];
	}
	exports.isSelectionDomain = isSelectionDomain;
	var SCALE_PROPERTY_INDEX = {
	    type: 1,
	    domain: 1,
	    range: 1,
	    rangeStep: 1,
	    scheme: 1,
	    // Other properties
	    reverse: 1,
	    round: 1,
	    // quantitative / time
	    clamp: 1,
	    nice: 1,
	    // quantitative
	    base: 1,
	    exponent: 1,
	    interpolate: 1,
	    zero: 1,
	    // band/point
	    padding: 1,
	    paddingInner: 1,
	    paddingOuter: 1
	};
	exports.SCALE_PROPERTIES = util_1.flagKeys(SCALE_PROPERTY_INDEX);
	var type = SCALE_PROPERTY_INDEX.type, domain = SCALE_PROPERTY_INDEX.domain, range = SCALE_PROPERTY_INDEX.range, rangeStep = SCALE_PROPERTY_INDEX.rangeStep, scheme = SCALE_PROPERTY_INDEX.scheme, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeStep", "scheme"]);
	exports.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = util_1.flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
	function scaleTypeSupportProperty(scaleType, propName) {
	    switch (propName) {
	        case 'type':
	        case 'domain':
	        case 'reverse':
	        case 'range':
	            return true;
	        case 'scheme':
	            return util_1.contains(['sequential', 'ordinal', 'bin-ordinal', 'quantile', 'quantize'], scaleType);
	        case 'interpolate':
	            // FIXME(https://github.com/vega/vega-lite/issues/2902) how about ordinal?
	            return util_1.contains(['linear', 'bin-linear', 'pow', 'log', 'sqrt', 'utc', 'time'], scaleType);
	        case 'round':
	            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';
	        case 'padding':
	            return isContinuousToContinuous(scaleType) || util_1.contains(['point', 'band'], scaleType);
	        case 'paddingOuter':
	        case 'rangeStep':
	            return util_1.contains(['point', 'band'], scaleType);
	        case 'paddingInner':
	            return scaleType === 'band';
	        case 'clamp':
	            return isContinuousToContinuous(scaleType) || scaleType === 'sequential';
	        case 'nice':
	            return isContinuousToContinuous(scaleType) || scaleType === 'sequential' || scaleType === 'quantize';
	        case 'exponent':
	            return scaleType === 'pow';
	        case 'base':
	            return scaleType === 'log';
	        case 'zero':
	            return hasContinuousDomain(scaleType) && !util_1.contains([
	                'log',
	                'time', 'utc',
	                'bin-linear',
	                'threshold',
	                'quantile' // quantile depends on distribution so zero does not matter
	            ], scaleType);
	    }
	    /* istanbul ignore next: should never reach here*/
	    throw new Error("Invalid scale property " + propName + ".");
	}
	exports.scaleTypeSupportProperty = scaleTypeSupportProperty;
	/**
	 * Returns undefined if the input channel supports the input scale property name
	 */
	function channelScalePropertyIncompatability(channel, propName) {
	    switch (propName) {
	        case 'interpolate':
	        case 'scheme':
	            if (channel !== 'color') {
	                return log.message.cannotUseScalePropertyWithNonColor(channel);
	            }
	            return undefined;
	        case 'type':
	        case 'domain':
	        case 'range':
	        case 'base':
	        case 'exponent':
	        case 'nice':
	        case 'padding':
	        case 'paddingInner':
	        case 'paddingOuter':
	        case 'rangeStep':
	        case 'reverse':
	        case 'round':
	        case 'clamp':
	        case 'zero':
	            return undefined; // GOOD!
	    }
	    /* istanbul ignore next: it should never reach here */
	    throw new Error("Invalid scale property \"" + propName + "\".");
	}
	exports.channelScalePropertyIncompatability = channelScalePropertyIncompatability;
	function channelSupportScaleType(channel, scaleType) {
	    switch (channel) {
	        case channel_1.Channel.X:
	        case channel_1.Channel.Y:
	        case channel_1.Channel.SIZE: // TODO: size and opacity can support ordinal with more modification
	        case channel_1.Channel.OPACITY:
	            // Although it generally doesn't make sense to use band with size and opacity,
	            // it can also work since we use band: 0.5 to get midpoint.
	            return isContinuousToContinuous(scaleType) || util_1.contains(['band', 'point'], scaleType);
	        case channel_1.Channel.COLOR:
	            return scaleType !== 'band'; // band does not make sense with color
	        case channel_1.Channel.SHAPE:
	            return scaleType === 'ordinal'; // shape = lookup only
	    }
	    /* istanbul ignore next: it should never reach here */
	    return false;
	}
	exports.channelSupportScaleType = channelSupportScaleType;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NhbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBa0M7QUFFbEMsMkJBQTZCO0FBQzdCLCtCQUE2RDtBQUU3RCxJQUFpQixTQUFTLENBc0J6QjtBQXRCRCxXQUFpQixTQUFTO0lBQ3hCLDRCQUE0QjtJQUNmLGdCQUFNLEdBQWEsUUFBUSxDQUFDO0lBQzVCLG9CQUFVLEdBQWlCLFlBQVksQ0FBQztJQUN4QyxhQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ25CLGFBQUcsR0FBVSxLQUFLLENBQUM7SUFDbkIsY0FBSSxHQUFXLE1BQU0sQ0FBQztJQUNuQyxvQkFBb0I7SUFDUCxjQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLGFBQUcsR0FBVSxLQUFLLENBQUM7SUFDaEMsYUFBYTtJQUNBLG9CQUFVLEdBQWlCLFlBQVksQ0FBQztJQUVyRCxnQ0FBZ0M7SUFDbkIsa0JBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsa0JBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsbUJBQVMsR0FBZ0IsV0FBVyxDQUFDO0lBRXJDLGlCQUFPLEdBQWMsU0FBUyxDQUFDO0lBQy9CLHFCQUFXLEdBQWtCLGFBQWEsQ0FBQztJQUMzQyxlQUFLLEdBQVksT0FBTyxDQUFDO0lBQ3pCLGNBQUksR0FBVyxNQUFNLENBQUM7QUFDckMsQ0FBQyxFQXRCZ0IsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFzQnpCO0FBVUQ7OztHQUdHO0FBQ0gsSUFBTSxvQkFBb0IsR0FHdEI7SUFDRixNQUFNLEVBQUUsU0FBUztJQUNqQixHQUFHLEVBQUUsU0FBUztJQUNkLEdBQUcsRUFBRSxTQUFTO0lBQ2QsSUFBSSxFQUFFLFNBQVM7SUFDZixZQUFZLEVBQUUsWUFBWTtJQUMxQixJQUFJLEVBQUUsTUFBTTtJQUNaLEdBQUcsRUFBRSxNQUFNO0lBQ1gsVUFBVSxFQUFFLFlBQVk7SUFDeEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsYUFBYSxFQUFFLGFBQWE7SUFDNUIsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QixJQUFJLEVBQUUsa0JBQWtCO0NBQ3pCLENBQUM7QUFFVyxRQUFBLFdBQVcsR0FBRyxXQUFJLENBQUMsb0JBQW9CLENBQWdCLENBQUM7QUFFckU7O0dBRUc7QUFDSCx5QkFBZ0MsVUFBcUIsRUFBRSxVQUFxQjtJQUMxRSxJQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxJQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsY0FBYyxLQUFLLGNBQWM7UUFDdEMsQ0FBQyxjQUFjLEtBQUssa0JBQWtCLElBQUksY0FBYyxLQUFLLE1BQU0sQ0FBQztRQUNwRSxDQUFDLGNBQWMsS0FBSyxrQkFBa0IsSUFBSSxjQUFjLEtBQUssTUFBTSxDQUFDLENBQUM7QUFDekUsQ0FBQztBQU5ELDBDQU1DO0FBRUQ7O0dBRUc7QUFDSCxJQUFNLHNCQUFzQixHQUd4QjtJQUNGLFVBQVU7SUFDVixNQUFNLEVBQUUsQ0FBQztJQUNULEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixJQUFJLEVBQUUsQ0FBQztJQUNQLE9BQU87SUFDUCxJQUFJLEVBQUUsQ0FBQztJQUNQLEdBQUcsRUFBRSxDQUFDO0lBQ04sNkdBQTZHO0lBQzdHLEtBQUssRUFBRSxFQUFFO0lBQ1QsSUFBSSxFQUFFLEVBQUU7SUFDUixvQkFBb0I7SUFDcEIsWUFBWSxFQUFFLENBQUM7SUFDZixVQUFVLEVBQUUsQ0FBQztJQUNiLE9BQU8sRUFBRSxDQUFDO0lBQ1YsYUFBYSxFQUFFLENBQUM7Q0FDakIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsNkJBQW9DLFNBQW9CO0lBQ3RELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsa0RBRUM7QUFFWSxRQUFBLCtCQUErQixHQUFnQixDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFILElBQU0sOEJBQThCLEdBQUcsWUFBSyxDQUFDLHVDQUErQixDQUFDLENBQUM7QUFFakUsUUFBQSx3QkFBd0IsR0FBZ0IsdUNBQStCLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLGlEQUFpRCxDQUFDLENBQUMsQ0FBQztBQUM5SixJQUFNLHVCQUF1QixHQUFHLFlBQUssQ0FBQyxnQ0FBd0IsQ0FBQyxDQUFDO0FBRW5ELFFBQUEsc0JBQXNCLEdBQWdCLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0YsSUFBTSxxQkFBcUIsR0FBRyxZQUFLLENBQUMsOEJBQXNCLENBQUMsQ0FBQztBQUU1RCxJQUFNLGdCQUFnQixHQUFHLFlBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBRWpELFFBQUEsZ0JBQWdCLEdBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTdELDJCQUFrQyxJQUFlO0lBQy9DLE1BQU0sQ0FBQyxJQUFJLElBQUkscUJBQXFCLENBQUM7QUFDdkMsQ0FBQztBQUZELDhDQUVDO0FBRUQsb0JBQTJCLElBQWU7SUFDeEMsTUFBTSxDQUFDLElBQUksSUFBSSxnQkFBZ0IsQ0FBQztBQUNsQyxDQUFDO0FBRkQsZ0NBRUM7QUFFRCw2QkFBb0MsSUFBZTtJQUdqRCxNQUFNLENBQUMsSUFBSSxJQUFJLHVCQUF1QixDQUFDO0FBQ3pDLENBQUM7QUFKRCxrREFJQztBQUVELGtDQUF5QyxJQUFlO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLElBQUksOEJBQThCLENBQUM7QUFDaEQsQ0FBQztBQUZELDREQUVDO0FBa0xZLFFBQUEsa0JBQWtCLEdBQUc7SUFDaEMsY0FBYyxFQUFFLEVBQUU7SUFDbEIsU0FBUyxFQUFFLEVBQUU7SUFDYixZQUFZLEVBQUUsR0FBRztJQUNqQixnQkFBZ0IsRUFBRSxHQUFHO0lBQ3JCLFlBQVksRUFBRSxFQUFFO0lBRWhCLFdBQVcsRUFBRSxDQUFDO0lBRWQsV0FBVyxFQUFFLENBQUM7SUFDZCxXQUFXLEVBQUUsRUFBRTtJQUVmLFVBQVUsRUFBRSxHQUFHO0lBQ2YsVUFBVSxFQUFFLEdBQUc7SUFFZiwwREFBMEQ7SUFDMUQsT0FBTyxFQUFFLENBQUM7SUFFVixjQUFjLEVBQUUsQ0FBQztJQUNqQixjQUFjLEVBQUUsQ0FBQztDQUNsQixDQUFDO0FBa0RGLDBCQUFpQyxNQUE2QjtJQUM1RCxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUZELDRDQUVDO0FBRUQsMkJBQWtDLE1BQWM7SUFDOUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUZELDhDQUVDO0FBa0xELElBQU0sb0JBQW9CLEdBQXNCO0lBQzlDLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxLQUFLLEVBQUUsQ0FBQztJQUNSLFNBQVMsRUFBRSxDQUFDO0lBQ1osTUFBTSxFQUFFLENBQUM7SUFDVCxtQkFBbUI7SUFDbkIsT0FBTyxFQUFFLENBQUM7SUFDVixLQUFLLEVBQUUsQ0FBQztJQUNSLHNCQUFzQjtJQUN0QixLQUFLLEVBQUUsQ0FBQztJQUNSLElBQUksRUFBRSxDQUFDO0lBQ1AsZUFBZTtJQUNmLElBQUksRUFBRSxDQUFDO0lBQ1AsUUFBUSxFQUFFLENBQUM7SUFDWCxXQUFXLEVBQUUsQ0FBQztJQUNkLElBQUksRUFBRSxDQUFDO0lBQ1AsYUFBYTtJQUNiLE9BQU8sRUFBRSxDQUFDO0lBQ1YsWUFBWSxFQUFFLENBQUM7SUFDZixZQUFZLEVBQUUsQ0FBQztDQUNoQixDQUFDO0FBRVcsUUFBQSxnQkFBZ0IsR0FBRyxlQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUV4RCxJQUFBLGdDQUFJLEVBQUUsb0NBQU0sRUFBRSxrQ0FBSyxFQUFFLDBDQUFTLEVBQUUsb0NBQU0sRUFBRSxrSUFBa0QsQ0FBeUI7QUFFN0csUUFBQSwyQ0FBMkMsR0FBRyxlQUFRLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUVySCxrQ0FBeUMsU0FBb0IsRUFBRSxRQUFxQjtJQUNsRixNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxLQUFLLFFBQVE7WUFDWCxNQUFNLENBQUMsZUFBUSxDQUFDLENBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQy9GLEtBQUssYUFBYTtZQUNoQiwwRUFBMEU7WUFDMUUsTUFBTSxDQUFDLGVBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVGLEtBQUssT0FBTztZQUNWLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEtBQUssTUFBTSxJQUFJLFNBQVMsS0FBSyxPQUFPLENBQUM7UUFDOUYsS0FBSyxTQUFTO1lBQ1osTUFBTSxDQUFDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLGVBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2RixLQUFLLGNBQWMsQ0FBQztRQUNwQixLQUFLLFdBQVc7WUFDZCxNQUFNLENBQUMsZUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELEtBQUssY0FBYztZQUNqQixNQUFNLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQztRQUM5QixLQUFLLE9BQU87WUFDVixNQUFNLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxLQUFLLFlBQVksQ0FBQztRQUMzRSxLQUFLLE1BQU07WUFDVCxNQUFNLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxLQUFLLFlBQVksSUFBSSxTQUFnQixLQUFLLFVBQVUsQ0FBQztRQUM5RyxLQUFLLFVBQVU7WUFDYixNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQztRQUM3QixLQUFLLE1BQU07WUFDVCxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQztRQUM3QixLQUFLLE1BQU07WUFDVCxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFRLENBQUM7Z0JBQ2pELEtBQUs7Z0JBQ0wsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsWUFBWTtnQkFDWixXQUFXO2dCQUNYLFVBQVUsQ0FBQywyREFBMkQ7YUFDdkUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBQ0Qsa0RBQWtEO0lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTBCLFFBQVEsTUFBRyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQXhDRCw0REF3Q0M7QUFFRDs7R0FFRztBQUNILDZDQUFvRCxPQUFnQixFQUFFLFFBQXFCO0lBQ3pGLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxRQUFRO1lBQ1gsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLENBQUM7WUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ25CLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE9BQU8sQ0FBQztRQUNiLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxVQUFVLENBQUM7UUFDaEIsS0FBSyxNQUFNLENBQUM7UUFDWixLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssY0FBYyxDQUFDO1FBQ3BCLEtBQUssY0FBYyxDQUFDO1FBQ3BCLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLE9BQU8sQ0FBQztRQUNiLEtBQUssTUFBTTtZQUNULE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRO0lBQzlCLENBQUM7SUFDRCxzREFBc0Q7SUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBMkIsUUFBUSxRQUFJLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBMUJELGtGQTBCQztBQUVELGlDQUF3QyxPQUFnQixFQUFFLFNBQW9CO0lBQzVFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEIsS0FBSyxpQkFBTyxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssaUJBQU8sQ0FBQyxDQUFDLENBQUM7UUFDZixLQUFLLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsb0VBQW9FO1FBQ3ZGLEtBQUssaUJBQU8sQ0FBQyxPQUFPO1lBQ2xCLDhFQUE4RTtZQUM5RSwyREFBMkQ7WUFDM0QsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLGVBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2RixLQUFLLGlCQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFJLHNDQUFzQztRQUN4RSxLQUFLLGlCQUFPLENBQUMsS0FBSztZQUNoQixNQUFNLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLHNCQUFzQjtJQUMxRCxDQUFDO0lBQ0Qsc0RBQXNEO0lBQ3RELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBaEJELDBEQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbm5lbH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7RGF0ZVRpbWV9IGZyb20gJy4vZGF0ZXRpbWUnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcbmltcG9ydCB7Y29udGFpbnMsIEZsYWcsIGZsYWdLZXlzLCBrZXlzLCB0b1NldH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBTY2FsZVR5cGUge1xuICAvLyBDb250aW51b3VzIC0gUXVhbnRpdGF0aXZlXG4gIGV4cG9ydCBjb25zdCBMSU5FQVI6ICdsaW5lYXInID0gJ2xpbmVhcic7XG4gIGV4cG9ydCBjb25zdCBCSU5fTElORUFSOiAnYmluLWxpbmVhcicgPSAnYmluLWxpbmVhcic7XG4gIGV4cG9ydCBjb25zdCBMT0c6ICdsb2cnID0gJ2xvZyc7XG4gIGV4cG9ydCBjb25zdCBQT1c6ICdwb3cnID0gJ3Bvdyc7XG4gIGV4cG9ydCBjb25zdCBTUVJUOiAnc3FydCcgPSAnc3FydCc7XG4gIC8vIENvbnRpbnVvdXMgLSBUaW1lXG4gIGV4cG9ydCBjb25zdCBUSU1FOiAndGltZScgPSAndGltZSc7XG4gIGV4cG9ydCBjb25zdCBVVEM6ICd1dGMnID0gJ3V0Yyc7XG4gIC8vIHNlcXVlbnRpYWxcbiAgZXhwb3J0IGNvbnN0IFNFUVVFTlRJQUw6ICdzZXF1ZW50aWFsJyA9ICdzZXF1ZW50aWFsJztcblxuICAvLyBRdWFudGlsZSwgUXVhbnRpemUsIHRocmVzaG9sZFxuICBleHBvcnQgY29uc3QgUVVBTlRJTEU6ICdxdWFudGlsZScgPSAncXVhbnRpbGUnO1xuICBleHBvcnQgY29uc3QgUVVBTlRJWkU6ICdxdWFudGl6ZScgPSAncXVhbnRpemUnO1xuICBleHBvcnQgY29uc3QgVEhSRVNIT0xEOiAndGhyZXNob2xkJyA9ICd0aHJlc2hvbGQnO1xuXG4gIGV4cG9ydCBjb25zdCBPUkRJTkFMOiAnb3JkaW5hbCcgPSAnb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBCSU5fT1JESU5BTDogJ2Jpbi1vcmRpbmFsJyA9ICdiaW4tb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBQT0lOVDogJ3BvaW50JyA9ICdwb2ludCc7XG4gIGV4cG9ydCBjb25zdCBCQU5EOiAnYmFuZCcgPSAnYmFuZCc7XG59XG5cbmV4cG9ydCB0eXBlIFNjYWxlVHlwZSA9IHR5cGVvZiBTY2FsZVR5cGUuTElORUFSIHwgdHlwZW9mIFNjYWxlVHlwZS5CSU5fTElORUFSIHxcbiAgdHlwZW9mIFNjYWxlVHlwZS5MT0cgfCB0eXBlb2YgU2NhbGVUeXBlLlBPVyB8IHR5cGVvZiBTY2FsZVR5cGUuU1FSVCB8XG4gIHR5cGVvZiBTY2FsZVR5cGUuVElNRSB8IHR5cGVvZiBTY2FsZVR5cGUuVVRDIHxcbiAgLy8gVE9ETzogYWRkICdxdWFudGl6ZScsICdxdWFudGlsZScsICd0aHJlc2hvbGQnIGJhY2sgd2hlbiB3ZSByZWFsbHkgc3VwcG9ydCB0aGVtXG4gIHR5cGVvZiBTY2FsZVR5cGUuU0VRVUVOVElBTCB8IC8vIHR5cGVvZiBTY2FsZVR5cGUuUVVBTlRJTEUgfCB0eXBlb2YgU2NhbGVUeXBlLlFVQU5USVpFIHwgdHlwZW9mIFNjYWxlVHlwZS5USFJFU0hPTEQgfFxuICB0eXBlb2YgU2NhbGVUeXBlLk9SRElOQUwgfCB0eXBlb2YgU2NhbGVUeXBlLkJJTl9PUkRJTkFMIHwgdHlwZW9mIFNjYWxlVHlwZS5QT0lOVCB8IHR5cGVvZiBTY2FsZVR5cGUuQkFORDtcblxuXG4vKipcbiAqIEluZGV4IGZvciBzY2FsZSBjYXRlZ29yaWVzIC0tIG9ubHkgc2NhbGUgb2YgdGhlIHNhbWUgY2F0ZWdvcmllcyBjYW4gYmUgbWVyZ2VkIHRvZ2V0aGVyLlxuICogQ3VycmVudCBpbXBsZW1lbnRhdGlvbiBpcyB0cnlpbmcgdG8gYmUgY29uc2VydmF0aXZlIGFuZCBhdm9pZCBtZXJnaW5nIHNjYWxlIHR5cGUgdGhhdCBtaWdodCBub3Qgd29yayB0b2dldGhlclxuICovXG5jb25zdCBTQ0FMRV9DQVRFR09SWV9JTkRFWDoge1xuICAvLyBVc2luZyBNYXBwZWQgVHlwZSB0byBkZWNsYXJlIHR5cGUgKGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWwjbWFwcGVkLXR5cGVzKVxuICBbayBpbiBTY2FsZVR5cGVdOiBTY2FsZVR5cGUgfCAnbnVtZXJpYycgfCAnb3JkaW5hbC1wb3NpdGlvbidcbn0gPSB7XG4gIGxpbmVhcjogJ251bWVyaWMnLFxuICBsb2c6ICdudW1lcmljJyxcbiAgcG93OiAnbnVtZXJpYycsXG4gIHNxcnQ6ICdudW1lcmljJyxcbiAgJ2Jpbi1saW5lYXInOiAnYmluLWxpbmVhcicsIC8vIFRPRE86IHNob3VsZCBiaW4tbGluZWFyIHN1cHBvcnQgbWVyZ2luZyB3aXRoIG90aGVyXG4gIHRpbWU6ICd0aW1lJyxcbiAgdXRjOiAndGltZScsXG4gIHNlcXVlbnRpYWw6ICdzZXF1ZW50aWFsJyxcbiAgb3JkaW5hbDogJ29yZGluYWwnLFxuICAnYmluLW9yZGluYWwnOiAnYmluLW9yZGluYWwnLCAvLyBUT0RPOiBzaG91bGQgYmluLW9yZGluYWwgc3VwcG9ydCBtZXJnaW5nIHdpdGggb3RoZXJcbiAgcG9pbnQ6ICdvcmRpbmFsLXBvc2l0aW9uJyxcbiAgYmFuZDogJ29yZGluYWwtcG9zaXRpb24nXG59O1xuXG5leHBvcnQgY29uc3QgU0NBTEVfVFlQRVMgPSBrZXlzKFNDQUxFX0NBVEVHT1JZX0lOREVYKSBhcyBTY2FsZVR5cGVbXTtcblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB0d28gZ2l2ZW4gc2NhbGUgdHlwZXMgY2FuIGJlIG1lcmdlZCB0b2dldGhlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQ29tcGF0aWJsZShzY2FsZVR5cGUxOiBTY2FsZVR5cGUsIHNjYWxlVHlwZTI6IFNjYWxlVHlwZSkge1xuICBjb25zdCBzY2FsZUNhdGVnb3J5MSA9IFNDQUxFX0NBVEVHT1JZX0lOREVYW3NjYWxlVHlwZTFdO1xuICBjb25zdCBzY2FsZUNhdGVnb3J5MiA9IFNDQUxFX0NBVEVHT1JZX0lOREVYW3NjYWxlVHlwZTJdO1xuICByZXR1cm4gc2NhbGVDYXRlZ29yeTEgPT09IHNjYWxlQ2F0ZWdvcnkyIHx8XG4gICAgKHNjYWxlQ2F0ZWdvcnkxID09PSAnb3JkaW5hbC1wb3NpdGlvbicgJiYgc2NhbGVDYXRlZ29yeTIgPT09ICd0aW1lJykgfHxcbiAgICAoc2NhbGVDYXRlZ29yeTIgPT09ICdvcmRpbmFsLXBvc2l0aW9uJyAmJiBzY2FsZUNhdGVnb3J5MSA9PT0gJ3RpbWUnKTtcbn1cblxuLyoqXG4gKiBJbmRleCBmb3Igc2NhbGUgcHJlZGVjZW5jZSAtLSBoaWdoIHNjb3JlID0gaGlnaGVyIHByaW9yaXR5IGZvciBtZXJnaW5nLlxuICovXG5jb25zdCBTQ0FMRV9QUkVDRURFTkNFX0lOREVYOiB7XG4gIC8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG4gIFtrIGluIFNjYWxlVHlwZV06IG51bWJlclxufSA9IHtcbiAgLy8gbnVtZXJpY1xuICBsaW5lYXI6IDAsXG4gIGxvZzogMSxcbiAgcG93OiAxLFxuICBzcXJ0OiAxLFxuICAvLyB0aW1lXG4gIHRpbWU6IDAsXG4gIHV0YzogMCxcbiAgLy8gb3JkaW5hbC1wb3NpdGlvbiAtLSB0aGVzZSBoYXZlIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gY29udGludW91cyBzY2FsZXMgYXMgdGhleSBzdXBwb3J0IG1vcmUgdHlwZXMgb2YgZGF0YVxuICBwb2ludDogMTAsXG4gIGJhbmQ6IDExLCAvLyBiYW5kIGhhcyBoaWdoZXIgcHJlY2VkZW5jZSBhcyBpdCBpcyBiZXR0ZXIgZm9yIGludGVyYWN0aW9uXG4gIC8vIG5vbiBncm91cGVkIHR5cGVzXG4gICdiaW4tbGluZWFyJzogMCxcbiAgc2VxdWVudGlhbDogMCxcbiAgb3JkaW5hbDogMCxcbiAgJ2Jpbi1vcmRpbmFsJzogMCxcbn07XG5cbi8qKlxuICogUmV0dXJuIHNjYWxlIGNhdGVnb3JpZXMgLS0gb25seSBzY2FsZSBvZiB0aGUgc2FtZSBjYXRlZ29yaWVzIGNhbiBiZSBtZXJnZWQgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVR5cGVQcmVjZWRlbmNlKHNjYWxlVHlwZTogU2NhbGVUeXBlKTogbnVtYmVyIHtcbiAgcmV0dXJuIFNDQUxFX1BSRUNFREVOQ0VfSU5ERVhbc2NhbGVUeXBlXTtcbn1cblxuZXhwb3J0IGNvbnN0IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVM6IFNjYWxlVHlwZVtdID0gWydsaW5lYXInLCAnYmluLWxpbmVhcicsICdsb2cnLCAncG93JywgJ3NxcnQnLCAndGltZScsICd1dGMnXTtcbmNvbnN0IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19JTkRFWCA9IHRvU2V0KENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVMpO1xuXG5leHBvcnQgY29uc3QgQ09OVElOVU9VU19ET01BSU5fU0NBTEVTOiBTY2FsZVR5cGVbXSA9IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVMuY29uY2F0KFsnc2VxdWVudGlhbCcgLyogVE9ETyBhZGQgJ3F1YW50aWxlJywgJ3F1YW50aXplJywgJ3RocmVzaG9sZCcqL10pO1xuY29uc3QgQ09OVElOVU9VU19ET01BSU5fSU5ERVggPSB0b1NldChDT05USU5VT1VTX0RPTUFJTl9TQ0FMRVMpO1xuXG5leHBvcnQgY29uc3QgRElTQ1JFVEVfRE9NQUlOX1NDQUxFUzogU2NhbGVUeXBlW10gPSBbJ29yZGluYWwnLCAnYmluLW9yZGluYWwnLCAncG9pbnQnLCAnYmFuZCddO1xuY29uc3QgRElTQ1JFVEVfRE9NQUlOX0lOREVYID0gdG9TZXQoRElTQ1JFVEVfRE9NQUlOX1NDQUxFUyk7XG5cbmNvbnN0IEJJTl9TQ0FMRVNfSU5ERVggPSB0b1NldChbJ2Jpbi1saW5lYXInLCAnYmluLW9yZGluYWwnXSk7XG5cbmV4cG9ydCBjb25zdCBUSU1FX1NDQUxFX1RZUEVTOiBTY2FsZVR5cGVbXSA9IFsndGltZScsICd1dGMnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Rpc2NyZXRlRG9tYWluKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ29yZGluYWwnIHwgJ2Jpbi1vcmRpbmFsJyB8ICdwb2ludCcgfCAnYmFuZCcge1xuICByZXR1cm4gdHlwZSBpbiBESVNDUkVURV9ET01BSU5fSU5ERVg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JpblNjYWxlKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ2Jpbi1saW5lYXInIHwgJ2Jpbi1vcmRpbmFsJyB7XG4gIHJldHVybiB0eXBlIGluIEJJTl9TQ0FMRVNfSU5ERVg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250aW51b3VzRG9tYWluKHR5cGU6IFNjYWxlVHlwZSk6XG4gIHR5cGUgaXMgJ2xpbmVhcicgfCAnbG9nJyB8ICdwb3cnIHwgJ3NxcnQnIHwgJ3RpbWUnIHwgJ3V0Yyd8XG4gICAgICAgICAgJ3NlcXVlbnRpYWwnIC8qIFRPRE8gYWRkIHwgJ3F1YW50aWxlJyB8ICdxdWFudGl6ZScgfCAndGhyZXNob2xkJyAqLyB7XG4gIHJldHVybiB0eXBlIGluIENPTlRJTlVPVVNfRE9NQUlOX0lOREVYO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250aW51b3VzVG9Db250aW51b3VzKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ2xpbmVhcicgfCAnYmluLWxpbmVhcicgfCAnbG9nJyB8ICdwb3cnIHwgJ3NxcnQnIHwgJ3RpbWUnIHwgJ3V0Yycge1xuICByZXR1cm4gdHlwZSBpbiBDT05USU5VT1VTX1RPX0NPTlRJTlVPVVNfSU5ERVg7XG59XG5cbmV4cG9ydCB0eXBlIE5pY2VUaW1lID0gJ3NlY29uZCcgfCAnbWludXRlJyB8ICdob3VyJyB8ICdkYXknIHwgJ3dlZWsnIHwgJ21vbnRoJyB8ICd5ZWFyJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2FsZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCByb3VuZHMgbnVtZXJpYyBvdXRwdXQgdmFsdWVzIHRvIGludGVnZXJzLlxuICAgKiBUaGlzIGNhbiBiZSBoZWxwZnVsIGZvciBzbmFwcGluZyB0byB0aGUgcGl4ZWwgZ3JpZC5cbiAgICogKE9ubHkgYXZhaWxhYmxlIGZvciBgeGAsIGB5YCwgYW5kIGBzaXplYCBzY2FsZXMuKVxuICAgKi9cbiAgcm91bmQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB2YWx1ZXMgdGhhdCBleGNlZWQgdGhlIGRhdGEgZG9tYWluIGFyZSBjbGFtcGVkIHRvIGVpdGhlciB0aGUgbWluaW11bSBvciBtYXhpbXVtIHJhbmdlIHZhbHVlXG4gICAqL1xuICBjbGFtcD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAgRGVmYXVsdCByYW5nZSBzdGVwIGZvciBgeGAgYmFuZCBhbmQgcG9pbnQgc2NhbGVzIG9mIHRleHQgbWFya3MuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgOTBgXG4gICAqXG4gICAqICBAbWluaW11bSAwXG4gICAqL1xuICB0ZXh0WFJhbmdlU3RlcD86IG51bWJlcjsgLy8gRklYTUU6IGNvbnNpZGVyIGlmIHdlIHdpbGwgcmVuYW1lIHRoaXMgXCJ0YWJsZUNvbHVtbldpZHRoXCJcblxuICAvKipcbiAgICogRGVmYXVsdCByYW5nZSBzdGVwIGZvciBiYW5kIGFuZCBwb2ludCBzY2FsZXMgb2YgKDEpIHRoZSBgeWAgY2hhbm5lbFxuICAgKiBhbmQgKDIpIHRoZSBgeGAgY2hhbm5lbCB3aGVuIHRoZSBtYXJrIGlzIG5vdCBgdGV4dGAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMjFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHJhbmdlU3RlcD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgaW5uZXIgcGFkZGluZyBmb3IgYHhgIGFuZCBgeWAgYmFuZC1vcmRpbmFsIHNjYWxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgYmFuZFBhZGRpbmdJbm5lcj86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBvdXRlciBwYWRkaW5nIGZvciBgeGAgYW5kIGB5YCBiYW5kLW9yZGluYWwgc2NhbGVzLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCBieSBkZWZhdWx0LCBiYW5kIHNjYWxlJ3MgcGFkZGluZ091dGVyIGlzIHBhZGRpbmdJbm5lci8yLlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIGJhbmRQYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgcGFkZGluZyBmb3IgY29udGludW91cyBzY2FsZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdDpfXyBgNWAgZm9yIGNvbnRpbnVvdXMgeC1zY2FsZSBvZiBhIHZlcnRpY2FsIGJhciBhbmQgY29udGludW91cyB5LXNjYWxlIG9mIGEgaG9yaXpvbnRhbCBiYXIuOyBgMGAgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBjb250aW51b3VzUGFkZGluZz86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBvdXRlciBwYWRkaW5nIGZvciBgeGAgYW5kIGB5YCBwb2ludC1vcmRpbmFsIHNjYWxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjVgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgcG9pbnRQYWRkaW5nPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVc2UgdGhlIHNvdXJjZSBkYXRhIHJhbmdlIGJlZm9yZSBhZ2dyZWdhdGlvbiBhcyBzY2FsZSBkb21haW4gaW5zdGVhZCBvZiBhZ2dyZWdhdGVkIGRhdGEgZm9yIGFnZ3JlZ2F0ZSBheGlzLlxuICAgKlxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyBgZG9tYWluYCB0byBgXCJ1bmFnZ3JlZ2F0ZVwiYCBmb3IgYWdncmVnYXRlZCBfcXVhbnRpdGF0aXZlXyBmaWVsZHMgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogVGhpcyBwcm9wZXJ0eSBvbmx5IHdvcmtzIHdpdGggYWdncmVnYXRlIGZ1bmN0aW9ucyB0aGF0IHByb2R1Y2UgdmFsdWVzIHdpdGhpbiB0aGUgcmF3IGRhdGEgZG9tYWluIChgXCJtZWFuXCJgLCBgXCJhdmVyYWdlXCJgLCBgXCJtZWRpYW5cImAsIGBcInExXCJgLCBgXCJxM1wiYCwgYFwibWluXCJgLCBgXCJtYXhcImApLiBGb3Igb3RoZXIgYWdncmVnYXRpb25zIHRoYXQgcHJvZHVjZSB2YWx1ZXMgb3V0c2lkZSBvZiB0aGUgcmF3IGRhdGEgZG9tYWluIChlLmcuIGBcImNvdW50XCJgLCBgXCJzdW1cImApLCB0aGlzIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgZmFsc2VgXG4gICAqL1xuICB1c2VVbmFnZ3JlZ2F0ZWREb21haW4/OiBib29sZWFuO1xuXG4gIC8vIG5pY2Ugc2hvdWxkIGRlcGVuZHMgb24gdHlwZSAocXVhbnRpdGF0aXZlIG9yIHRlbXBvcmFsKSwgc29cbiAgLy8gbGV0J3Mgbm90IG1ha2UgYSBjb25maWcuXG5cbiAgLy8gQ29uZmlncyBmb3IgUmFuZ2VcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWF4IHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gYmFyJ3Mgc2l6ZS9iYW5kU2l6ZS5cbiAgICpcbiAgICogSWYgdW5kZWZpbmVkIChkZWZhdWx0KSwgd2Ugd2lsbCB1c2UgdGhlIHNjYWxlJ3MgYHJhbmdlU3RlcGAgLSAxLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtYXhCYW5kU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWluIHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gYmFyIGFuZCB0aWNrJ3Mgc2l6ZS9iYW5kU2l6ZSBzY2FsZSB3aXRoIHplcm89ZmFsc2UuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMmBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWluQmFuZFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG1heCB2YWx1ZSBmb3IgbWFwcGluZyBxdWFudGl0YXRpdmUgZmllbGRzIHRvIHRleHQncyBzaXplL2ZvbnRTaXplLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDQwYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtYXhGb250U2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWluIHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gdGljaydzIHNpemUvZm9udFNpemUgc2NhbGUgd2l0aCB6ZXJvPWZhbHNlXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgOGBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWluRm9udFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgbWluaW11bSBvcGFjaXR5IGZvciBtYXBwaW5nIGEgZmllbGQgdG8gb3BhY2l0eS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjNgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgbWluT3BhY2l0eT86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBtYXggb3BhY2l0eSBmb3IgbWFwcGluZyBhIGZpZWxkIHRvIG9wYWNpdHkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMC44YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIG1heE9wYWNpdHk/OiBudW1iZXI7XG5cblxuICAvKipcbiAgICogRGVmYXVsdCBtaW5pbXVtIHZhbHVlIGZvciBwb2ludCBzaXplIHNjYWxlIHdpdGggemVybz1mYWxzZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGA5YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtaW5TaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IG1heCB2YWx1ZSBmb3IgcG9pbnQgc2l6ZSBzY2FsZS5cbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWF4U2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBtaW5pbXVtIHN0cm9rZVdpZHRoIGZvciBzdHJva2VXaWR0aCAob3IgcnVsZS9saW5lJ3Mgc2l6ZSkgc2NhbGUgd2l0aCB6ZXJvPWZhbHNlLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIG1pblN0cm9rZVdpZHRoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IG1heCBzdHJva2VXaWR0aCBmb3Igc3Ryb2tlV2lkdGggIChvciBydWxlL2xpbmUncyBzaXplKSBzY2FsZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGA0YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtYXhTdHJva2VXaWR0aD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTY2FsZUNvbmZpZyA9IHtcbiAgdGV4dFhSYW5nZVN0ZXA6IDkwLFxuICByYW5nZVN0ZXA6IDIxLFxuICBwb2ludFBhZGRpbmc6IDAuNSxcbiAgYmFuZFBhZGRpbmdJbm5lcjogMC4xLFxuICBmYWNldFNwYWNpbmc6IDE2LFxuXG4gIG1pbkJhbmRTaXplOiAyLFxuXG4gIG1pbkZvbnRTaXplOiA4LFxuICBtYXhGb250U2l6ZTogNDAsXG5cbiAgbWluT3BhY2l0eTogMC4zLFxuICBtYXhPcGFjaXR5OiAwLjgsXG5cbiAgLy8gRklYTUU6IHJldmlzZSBpZiB0aGVzZSAqY2FuKiBiZWNvbWUgcmF0aW9zIG9mIHJhbmdlU3RlcFxuICBtaW5TaXplOiA5LCAvLyBQb2ludCBzaXplIGlzIGFyZWEuIEZvciBzcXVhcmUgcG9pbnQsIDkgPSAzIHBpeGVsIF4gMiwgbm90IHRvbyBzbWFsbCFcblxuICBtaW5TdHJva2VXaWR0aDogMSxcbiAgbWF4U3Ryb2tlV2lkdGg6IDRcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZW1lUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgY29sb3Igc2NoZW1lIG5hbWUgZm9yIHNlcXVlbnRpYWwvb3JkaW5hbCBzY2FsZXMgKGUuZy4sIGBcImNhdGVnb3J5MTBcImAgb3IgYFwidmlyaWRpc1wiYCkuXG4gICAqXG4gICAqIEZvciB0aGUgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZCBzY2hlbWUsIHBsZWFzZSByZWZlciB0byB0aGUgW1ZlZ2EgU2NoZW1lXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9zY2hlbWVzLyNyZWZlcmVuY2UpIHJlZmVyZW5jZS5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogRm9yIHNlcXVlbnRpYWwgYW5kIGRpdmVyZ2luZyBzY2hlbWVzIG9ubHksIGRldGVybWluZXMgdGhlIGV4dGVudCBvZiB0aGUgY29sb3IgcmFuZ2UgdG8gdXNlLiBGb3IgZXhhbXBsZSBgWzAuMiwgMV1gIHdpbGwgcmVzY2FsZSB0aGUgY29sb3Igc2NoZW1lIHN1Y2ggdGhhdCBjb2xvciB2YWx1ZXMgaW4gdGhlIHJhbmdlIF9bMCwgMC4yKV8gYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHNjaGVtZS5cbiAgICovXG4gIGV4dGVudD86IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbG9ycyB0byB1c2UgaW4gdGhlIHNjaGVtZS4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBzY2FsZSB0eXBlcyBzdWNoIGFzIGBcInF1YW50aXplXCJgLCB3aGljaCB1c2UgdGhlIGxlbmd0aCBvZiB0aGUgc2NhbGUgcmFuZ2UgdG8gZGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgZGlzY3JldGUgYmlucyBmb3IgdGhlIHNjYWxlIGRvbWFpbi5cbiAgICpcbiAgICogQGhpZGVcbiAgICovXG4gIGNvdW50PzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBTZWxlY3Rpb25Eb21haW4gPSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiBhIHNlbGVjdGlvbi5cbiAgICovXG4gIHNlbGVjdGlvbjogc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGZpZWxkIG5hbWUgdG8gZXh0cmFjdCBzZWxlY3RlZCB2YWx1ZXMgZm9yLCB3aGVuIGEgc2VsZWN0aW9uIGlzIFtwcm9qZWN0ZWRdKHByb2plY3QuaHRtbClcbiAgICogb3ZlciBtdWx0aXBsZSBmaWVsZHMgb3IgZW5jb2RpbmdzLlxuICAgKi9cbiAgZmllbGQ/OiBzdHJpbmdcbn0gfCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiBhIHNlbGVjdGlvbi5cbiAgICovXG4gIHNlbGVjdGlvbjogc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGVuY29kaW5nIGNoYW5uZWwgdG8gZXh0cmFjdCBzZWxlY3RlZCB2YWx1ZXMgZm9yLCB3aGVuIGEgc2VsZWN0aW9uIGlzIFtwcm9qZWN0ZWRdKHByb2plY3QuaHRtbClcbiAgICogb3ZlciBtdWx0aXBsZSBmaWVsZHMgb3IgZW5jb2RpbmdzLlxuICAgKi9cbiAgZW5jb2Rpbmc/OiBzdHJpbmdcbn07XG5cbmV4cG9ydCB0eXBlIERvbWFpbiA9IG51bWJlcltdIHwgc3RyaW5nW10gfCBib29sZWFuW10gfCBEYXRlVGltZVtdIHwgJ3VuYWdncmVnYXRlZCcgfCBTZWxlY3Rpb25Eb21haW47XG5leHBvcnQgdHlwZSBTY2hlbWUgPSBzdHJpbmcgfCBTY2hlbWVQYXJhbXM7XG5cbmV4cG9ydCB0eXBlIFJhbmdlID0gbnVtYmVyW10gfCBzdHJpbmdbXSB8IHN0cmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXh0ZW5kZWRTY2hlbWUoc2NoZW1lOiBzdHJpbmcgfCBTY2hlbWVQYXJhbXMpOiBzY2hlbWUgaXMgU2NoZW1lUGFyYW1zIHtcbiAgcmV0dXJuIHNjaGVtZSAmJiAhIXNjaGVtZVsnbmFtZSddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTZWxlY3Rpb25Eb21haW4oZG9tYWluOiBEb21haW4pOiBkb21haW4gaXMgU2VsZWN0aW9uRG9tYWluIHtcbiAgcmV0dXJuIGRvbWFpbiAmJiBkb21haW5bJ3NlbGVjdGlvbiddO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjYWxlIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHNjYWxlLiAgVmVnYS1MaXRlIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgY2F0ZWdvcmllcyBvZiBzY2FsZSB0eXBlczpcbiAgICpcbiAgICogMSkgWyoqQ29udGludW91cyBTY2FsZXMqKl0oc2NhbGUuaHRtbCNjb250aW51b3VzKSAtLSBtYXBwaW5nIGNvbnRpbnVvdXMgZG9tYWlucyB0byBjb250aW51b3VzIG91dHB1dCByYW5nZXMgKFtgXCJsaW5lYXJcImBdKHNjYWxlLmh0bWwjbGluZWFyKSwgW2BcInBvd1wiYF0oc2NhbGUuaHRtbCNwb3cpLCBbYFwic3FydFwiYF0oc2NhbGUuaHRtbCNzcXJ0KSwgW2BcImxvZ1wiYF0oc2NhbGUuaHRtbCNsb2cpLCBbYFwidGltZVwiYF0oc2NhbGUuaHRtbCN0aW1lKSwgW2BcInV0Y1wiYF0oc2NhbGUuaHRtbCN1dGMpLCBbYFwic2VxdWVudGlhbFwiYF0oc2NhbGUuaHRtbCNzZXF1ZW50aWFsKSkuXG4gICAqXG4gICAqIDIpIFsqKkRpc2NyZXRlIFNjYWxlcyoqXShzY2FsZS5odG1sI2Rpc2NyZXRlKSAtLSBtYXBwaW5nIGRpc2NyZXRlIGRvbWFpbnMgdG8gZGlzY3JldGUgKFtgXCJvcmRpbmFsXCJgXShzY2FsZS5odG1sI29yZGluYWwpKSBvciBjb250aW51b3VzIChbYFwiYmFuZFwiYF0oc2NhbGUuaHRtbCNiYW5kKSBhbmQgW2BcInBvaW50XCJgXShzY2FsZS5odG1sI3BvaW50KSkgb3V0cHV0IHJhbmdlcy5cbiAgICpcbiAgICogMykgWyoqRGlzY3JldGl6aW5nIFNjYWxlcyoqXShzY2FsZS5odG1sI2Rpc2NyZXRpemluZykgLS0gbWFwcGluZyBjb250aW51b3VzIGRvbWFpbnMgdG8gZGlzY3JldGUgb3V0cHV0IHJhbmdlcyAoW2BcImJpbi1saW5lYXJcImBdKHNjYWxlLmh0bWwjYmluLWxpbmVhcikgYW5kIFtgXCJiaW4tb3JkaW5hbFwiYF0oc2NhbGUuaHRtbCNiaW4tb3JkaW5hbCkpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gcGxlYXNlIHNlZSB0aGUgW3NjYWxlIHR5cGUgdGFibGVdKHNjYWxlLmh0bWwjdHlwZSkuXG4gICAqL1xuICB0eXBlPzogU2NhbGVUeXBlO1xuXG4gIC8qKlxuICAgKiBDdXN0b21pemVkIGRvbWFpbiB2YWx1ZXMuXG4gICAqXG4gICAqIEZvciBfcXVhbnRpdGF0aXZlXyBmaWVsZHMsIGBkb21haW5gIGNhbiB0YWtlIHRoZSBmb3JtIG9mIGEgdHdvLWVsZW1lbnQgYXJyYXkgd2l0aCBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcy4gIFtQaWVjZXdpc2Ugc2NhbGVzXShzY2FsZS5odG1sI3BpZWNld2lzZSkgY2FuIGJlIGNyZWF0ZWQgYnkgcHJvdmlkaW5nIGEgYGRvbWFpbmAgd2l0aCBtb3JlIHRoYW4gdHdvIGVudHJpZXMuXG4gICAqIElmIHRoZSBpbnB1dCBmaWVsZCBpcyBhZ2dyZWdhdGVkLCBgZG9tYWluYCBjYW4gYWxzbyBiZSBhIHN0cmluZyB2YWx1ZSBgXCJ1bmFnZ3JlZ2F0ZWRcImAsIGluZGljYXRpbmcgdGhhdCB0aGUgZG9tYWluIHNob3VsZCBpbmNsdWRlIHRoZSByYXcgZGF0YSB2YWx1ZXMgcHJpb3IgdG8gdGhlIGFnZ3JlZ2F0aW9uLlxuICAgKlxuICAgKiBGb3IgX3RlbXBvcmFsXyBmaWVsZHMsIGBkb21haW5gIGNhbiBiZSBhIHR3by1lbGVtZW50IGFycmF5IG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWVzLCBpbiB0aGUgZm9ybSBvZiBlaXRoZXIgdGltZXN0YW1wcyBvciB0aGUgW0RhdGVUaW1lIGRlZmluaXRpb24gb2JqZWN0c10odHlwZXMuaHRtbCNkYXRldGltZSkuXG4gICAqXG4gICAqIEZvciBfb3JkaW5hbF8gYW5kIF9ub21pbmFsXyBmaWVsZHMsIGBkb21haW5gIGNhbiBiZSBhbiBhcnJheSB0aGF0IGxpc3RzIHZhbGlkIGlucHV0IHZhbHVlcy5cbiAgICpcbiAgICogVGhlIGBzZWxlY3Rpb25gIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIFtpbnRlcmFjdGl2ZWx5IGRldGVybWluZV0oc2VsZWN0aW9uLmh0bWwjc2NhbGUtZG9tYWlucykgdGhlIHNjYWxlIGRvbWFpbi5cbiAgICovXG4gIGRvbWFpbj86IG51bWJlcltdIHwgc3RyaW5nW10gfCBib29sZWFuW10gfCBEYXRlVGltZVtdIHwgJ3VuYWdncmVnYXRlZCcgfCBTZWxlY3Rpb25Eb21haW47XG5cblxuICAvLyBIaWRlIGJlY2F1c2Ugd2UgbWlnaHQgbm90IHJlYWxseSBuZWVkIHRoaXMuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCByZXZlcnNlcyB0aGUgb3JkZXIgb2YgdGhlIHNjYWxlIHJhbmdlLlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYGZhbHNlYC5cbiAgICpcbiAgICogQGhpZGVcbiAgICovXG4gIHJldmVyc2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgcmFuZ2Ugb2YgdGhlIHNjYWxlLiBPbmUgb2Y6XG4gICAqXG4gICAqIC0gQSBzdHJpbmcgaW5kaWNhdGluZyBhIFtwcmUtZGVmaW5lZCBuYW1lZCBzY2FsZSByYW5nZV0oc2NhbGUuaHRtbCNyYW5nZS1jb25maWcpIChlLmcuLCBleGFtcGxlLCBgXCJzeW1ib2xcImAsIG9yIGBcImRpdmVyZ2luZ1wiYCkuXG4gICAqXG4gICAqIC0gRm9yIFtjb250aW51b3VzIHNjYWxlc10oc2NhbGUuaHRtbCNjb250aW51b3VzKSwgdHdvLWVsZW1lbnQgYXJyYXkgaW5kaWNhdGluZyAgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMsIG9yIGFuIGFycmF5IHdpdGggbW9yZSB0aGFuIHR3byBlbnRyaWVzIGZvciBzcGVjaWZ5aW5nIGEgW3BpZWNld2lzZSBzY2FsZV0oc2NhbGUuaHRtbCNwaWVjZXdpc2UpLlxuICAgKlxuICAgKiAtIEZvciBbZGlzY3JldGVdKHNjYWxlLmh0bWwjZGlzY3JldGUpIGFuZCBbZGlzY3JldGl6aW5nXShzY2FsZS5odG1sI2Rpc2NyZXRpemluZykgc2NhbGVzLCBhbiBhcnJheSBvZiBkZXNpcmVkIG91dHB1dCB2YWx1ZXMuXG4gICAqXG4gICAqIF9fTm90ZXM6X19cbiAgICpcbiAgICogMSkgRm9yIFtzZXF1ZW50aWFsXShzY2FsZS5odG1sI3NlcXVlbnRpYWwpLCBbb3JkaW5hbF0oc2NhbGUuaHRtbCNvcmRpbmFsKSwgYW5kIGRpc2NyZXRpemluZyBjb2xvciBzY2FsZXMsIHlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgY29sb3IgW2BzY2hlbWVgXShzY2FsZS5odG1sI3NjaGVtZSkgaW5zdGVhZCBvZiBgcmFuZ2VgLlxuICAgKlxuICAgKiAyKSBBbnkgZGlyZWN0bHkgc3BlY2lmaWVkIGByYW5nZWAgZm9yIGB4YCBhbmQgYHlgIGNoYW5uZWxzIHdpbGwgYmUgaWdub3JlZC4gUmFuZ2UgY2FuIGJlIGN1c3RvbWl6ZWQgdmlhIHRoZSB2aWV3J3MgY29ycmVzcG9uZGluZyBbc2l6ZV0oc2l6ZS5odG1sKSAoYHdpZHRoYCBhbmQgYGhlaWdodGApIG9yIHZpYSBbcmFuZ2Ugc3RlcHMgYW5kIHBhZGRpbmdzIHByb3BlcnRpZXNdKCNyYW5nZS1zdGVwKSBmb3IgW2JhbmRdKCNiYW5kKSBhbmQgW3BvaW50XSgjcG9pbnQpIHNjYWxlcy5cbiAgICovXG4gIHJhbmdlPzogbnVtYmVyW10gfCBzdHJpbmdbXSB8IHN0cmluZztcblxuICAvLyBvcmRpbmFsXG4gIC8qKlxuICAgKiBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgc3RhcnRzIG9mIGFkamFjZW50IGJhbmRzIG9yIHBvaW50cyBpbiBbYmFuZF0oc2NhbGUuaHRtbCNiYW5kKSBhbmQgW3BvaW50XShzY2FsZS5odG1sI3BvaW50KSBzY2FsZXMuXG4gICAqXG4gICAqIElmIGByYW5nZVN0ZXBgIGlzIGBudWxsYCBvciBpZiB0aGUgdmlldyBjb250YWlucyB0aGUgc2NhbGUncyBjb3JyZXNwb25kaW5nIFtzaXplXShzaXplLmh0bWwpIChgd2lkdGhgIGZvciBgeGAgc2NhbGVzIGFuZCBgaGVpZ2h0YCBmb3IgYHlgIHNjYWxlcyksIGByYW5nZVN0ZXBgIHdpbGwgYmUgYXV0b21hdGljYWxseSBkZXRlcm1pbmVkIHRvIGZpdCB0aGUgc2l6ZSBvZiB0aGUgdmlldy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICBkZXJpdmVkIHRoZSBbc2NhbGUgY29uZmlnXShjb25maWcuaHRtbCNzY2FsZS1jb25maWcpJ3MgYHRleHRYUmFuZ2VTdGVwYCAoYDkwYCBieSBkZWZhdWx0KSBmb3IgeC1zY2FsZXMgb2YgYHRleHRgIG1hcmtzIGFuZCBgcmFuZ2VTdGVwYCAoYDIxYCBieSBkZWZhdWx0KSBmb3IgeC1zY2FsZXMgb2Ygb3RoZXIgbWFya3MgYW5kIHktc2NhbGVzLlxuICAgKlxuICAgKiBfX1dhcm5pbmdfXzogSWYgYHJhbmdlU3RlcGAgaXMgYG51bGxgIGFuZCB0aGUgY2FyZGluYWxpdHkgb2YgdGhlIHNjYWxlJ3MgZG9tYWluIGlzIGhpZ2hlciB0aGFuIGB3aWR0aGAgb3IgYGhlaWdodGAsIHRoZSByYW5nZVN0ZXAgbWlnaHQgYmVjb21lIGxlc3MgdGhhbiBvbmUgcGl4ZWwgYW5kIHRoZSBtYXJrIG1pZ2h0IG5vdCBhcHBlYXIgY29ycmVjdGx5LlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICByYW5nZVN0ZXA/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHN0cmluZyBpbmRpY2F0aW5nIGEgY29sb3IgW3NjaGVtZV0oc2NhbGUuaHRtbCNzY2hlbWUpIG5hbWUgKGUuZy4sIGBcImNhdGVnb3J5MTBcImAgb3IgYFwidmlyaWRpc1wiYCkgb3IgYSBbc2NoZW1lIHBhcmFtZXRlciBvYmplY3RdKHNjYWxlLmh0bWwjc2NoZW1lLXBhcmFtcykuXG4gICAqXG4gICAqIERpc2NyZXRlIGNvbG9yIHNjaGVtZXMgbWF5IGJlIHVzZWQgd2l0aCBbZGlzY3JldGVdKHNjYWxlLmh0bWwjZGlzY3JldGUpIG9yIFtkaXNjcmV0aXppbmddKHNjYWxlLmh0bWwjZGlzY3JldGl6aW5nKSBzY2FsZXMuIENvbnRpbnVvdXMgY29sb3Igc2NoZW1lcyBhcmUgaW50ZW5kZWQgZm9yIHVzZSB3aXRoIFtzZXF1ZW50aWFsXShzY2FsZXMuaHRtbCNzZXF1ZW50aWFsKSBzY2FsZXMuXG4gICAqXG4gICAqIEZvciB0aGUgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZCBzY2hlbWUsIHBsZWFzZSByZWZlciB0byB0aGUgW1ZlZ2EgU2NoZW1lXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9zY2hlbWVzLyNyZWZlcmVuY2UpIHJlZmVyZW5jZS5cbiAgICovXG4gIHNjaGVtZT86IHN0cmluZyB8IFNjaGVtZVBhcmFtcztcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZHMgbnVtZXJpYyBvdXRwdXQgdmFsdWVzIHRvIGludGVnZXJzLiBUaGlzIGNhbiBiZSBoZWxwZnVsIGZvciBzbmFwcGluZyB0byB0aGUgcGl4ZWwgZ3JpZC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBmYWxzZWAuXG4gICAqL1xuICByb3VuZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZvciBfW2NvbnRpbnVvdXNdKHNjYWxlLmh0bWwjY29udGludW91cylfIHNjYWxlcywgZXhwYW5kcyB0aGUgc2NhbGUgZG9tYWluIHRvIGFjY29tbW9kYXRlIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHBpeGVscyBvbiBlYWNoIG9mIHRoZSBzY2FsZSByYW5nZS4gVGhlIHNjYWxlIHJhbmdlIG11c3QgcmVwcmVzZW50IHBpeGVscyBmb3IgdGhpcyBwYXJhbWV0ZXIgdG8gZnVuY3Rpb24gYXMgaW50ZW5kZWQuIFBhZGRpbmcgYWRqdXN0bWVudCBpcyBwZXJmb3JtZWTCoHByaW9ywqB0byBhbGwgb3RoZXIgYWRqdXN0bWVudHMsIGluY2x1ZGluZyB0aGUgZWZmZWN0cyBvZiB0aGXCoHplcm8swqBuaWNlLMKgZG9tYWluTWluLCBhbmTCoGRvbWFpbk1heMKgcHJvcGVydGllcy5cbiAgICpcbiAgICogRm9yIF9bYmFuZF0oc2NhbGUuaHRtbCNiYW5kKV8gc2NhbGVzLCBzaG9ydGN1dCBmb3Igc2V0dGluZyBgcGFkZGluZ0lubmVyYCBhbmQgYHBhZGRpbmdPdXRlcmAgdG8gdGhlIHNhbWUgdmFsdWUuXG4gICAqXG4gICAqIEZvciBfW3BvaW50XShzY2FsZS5odG1sI3BvaW50KV8gc2NhbGVzLCBhbGlhcyBmb3IgYHBhZGRpbmdPdXRlcmAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBGb3IgX2NvbnRpbnVvdXNfIHNjYWxlcywgZGVyaXZlZCBmcm9tIHRoZSBbc2NhbGUgY29uZmlnXShzY2FsZS5odG1sI2NvbmZpZykncyBgY29udGludW91c1BhZGRpbmdgLlxuICAgKiBGb3IgX2JhbmQgYW5kIHBvaW50XyBzY2FsZXMsIHNlZSBgcGFkZGluZ0lubmVyYCBhbmQgYHBhZGRpbmdPdXRlcmAuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHBhZGRpbmc/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbm5lciBwYWRkaW5nIChzcGFjaW5nKSB3aXRoaW4gZWFjaCBiYW5kIHN0ZXAgb2YgYmFuZCBzY2FsZXMsIGFzIGEgZnJhY3Rpb24gb2YgdGhlIHN0ZXAgc2l6ZS4gVGhpcyB2YWx1ZSBtdXN0IGxpZSBpbiB0aGUgcmFuZ2UgWzAsMV0uXG4gICAqXG4gICAqIEZvciBwb2ludCBzY2FsZSwgdGhpcyBwcm9wZXJ0eSBpcyBpbnZhbGlkIGFzIHBvaW50IHNjYWxlcyBkbyBub3QgaGF2ZSBpbnRlcm5hbCBiYW5kIHdpZHRocyAob25seSBzdGVwIHNpemVzIGJldHdlZW4gYmFuZHMpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gZGVyaXZlZCBmcm9tIHRoZSBbc2NhbGUgY29uZmlnXShzY2FsZS5odG1sI2NvbmZpZykncyBgYmFuZFBhZGRpbmdJbm5lcmAuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgcGFkZGluZ0lubmVyPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0ZXIgcGFkZGluZyAoc3BhY2luZykgYXQgdGhlIGVuZHMgb2YgdGhlIHJhbmdlIG9mIGJhbmQgYW5kIHBvaW50IHNjYWxlcyxcbiAgICogYXMgYSBmcmFjdGlvbiBvZiB0aGUgc3RlcCBzaXplLiBUaGlzIHZhbHVlIG11c3QgbGllIGluIHRoZSByYW5nZSBbMCwxXS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGRlcml2ZWQgZnJvbSB0aGUgW3NjYWxlIGNvbmZpZ10oc2NhbGUuaHRtbCNjb25maWcpJ3MgYGJhbmRQYWRkaW5nT3V0ZXJgIGZvciBiYW5kIHNjYWxlcyBhbmQgYHBvaW50UGFkZGluZ2AgZm9yIHBvaW50IHNjYWxlcy5cbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSAxXG4gICAqL1xuICBwYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG5cbiAgLy8gdHlwaWNhbFxuICAvKipcbiAgICogSWYgYHRydWVgLCB2YWx1ZXMgdGhhdCBleGNlZWQgdGhlIGRhdGEgZG9tYWluIGFyZSBjbGFtcGVkIHRvIGVpdGhlciB0aGUgbWluaW11bSBvciBtYXhpbXVtIHJhbmdlIHZhbHVlXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBkZXJpdmVkIGZyb20gdGhlIFtzY2FsZSBjb25maWddKGNvbmZpZy5odG1sI3NjYWxlLWNvbmZpZykncyBgY2xhbXBgIChgdHJ1ZWAgYnkgZGVmYXVsdCkuXG4gICAqL1xuICBjbGFtcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEV4dGVuZGluZyB0aGUgZG9tYWluIHNvIHRoYXQgaXQgc3RhcnRzIGFuZCBlbmRzIG9uIG5pY2Ugcm91bmQgdmFsdWVzLiBUaGlzIG1ldGhvZCB0eXBpY2FsbHkgbW9kaWZpZXMgdGhlIHNjYWxl4oCZcyBkb21haW4sIGFuZCBtYXkgb25seSBleHRlbmQgdGhlIGJvdW5kcyB0byB0aGUgbmVhcmVzdCByb3VuZCB2YWx1ZS4gTmljaW5nIGlzIHVzZWZ1bCBpZiB0aGUgZG9tYWluIGlzIGNvbXB1dGVkIGZyb20gZGF0YSBhbmQgbWF5IGJlIGlycmVndWxhci4gRm9yIGV4YW1wbGUsIGZvciBhIGRvbWFpbiBvZiBfWzAuMjAxNDc54oCmLCAwLjk5NjY3OeKApl1fLCBhIG5pY2UgZG9tYWluIG1pZ2h0IGJlIF9bMC4yLCAxLjBdXy5cbiAgICpcbiAgICogRm9yIHF1YW50aXRhdGl2ZSBzY2FsZXMgc3VjaCBhcyBsaW5lYXIsIGBuaWNlYCBjYW4gYmUgZWl0aGVyIGEgYm9vbGVhbiBmbGFnIG9yIGEgbnVtYmVyLiBJZiBgbmljZWAgaXMgYSBudW1iZXIsIGl0IHdpbGwgcmVwcmVzZW50IGEgZGVzaXJlZCB0aWNrIGNvdW50LiBUaGlzIGFsbG93cyBncmVhdGVyIGNvbnRyb2wgb3ZlciB0aGUgc3RlcCBzaXplIHVzZWQgdG8gZXh0ZW5kIHRoZSBib3VuZHMsIGd1YXJhbnRlZWluZyB0aGF0IHRoZSByZXR1cm5lZCB0aWNrcyB3aWxsIGV4YWN0bHkgY292ZXIgdGhlIGRvbWFpbi5cbiAgICpcbiAgICogRm9yIHRlbXBvcmFsIGZpZWxkcyB3aXRoIHRpbWUgYW5kIHV0YyBzY2FsZXMsIHRoZSBgbmljZWAgdmFsdWUgY2FuIGJlIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIGRlc2lyZWQgdGltZSBpbnRlcnZhbC4gTGVnYWwgdmFsdWVzIGFyZSBgXCJtaWxsaXNlY29uZFwiYCwgYFwic2Vjb25kXCJgLCBgXCJtaW51dGVcImAsIGBcImhvdXJcImAsIGBcImRheVwiYCwgYFwid2Vla1wiYCwgYFwibW9udGhcImAsIGFuZCBgXCJ5ZWFyXCJgLiBBbHRlcm5hdGl2ZWx5LCBgdGltZWAgYW5kIGB1dGNgIHNjYWxlcyBjYW4gYWNjZXB0IGFuIG9iamVjdC12YWx1ZWQgaW50ZXJ2YWwgc3BlY2lmaWVyIG9mIHRoZSBmb3JtIGB7XCJpbnRlcnZhbFwiOiBcIm1vbnRoXCIsIFwic3RlcFwiOiAzfWAsIHdoaWNoIGluY2x1ZGVzIGEgZGVzaXJlZCBudW1iZXIgb2YgaW50ZXJ2YWwgc3RlcHMuIEhlcmUsIHRoZSBkb21haW4gd291bGQgc25hcCB0byBxdWFydGVyIChKYW4sIEFwciwgSnVsLCBPY3QpIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAgZm9yIHVuYmlubmVkIF9xdWFudGl0YXRpdmVfIGZpZWxkczsgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAqXG4gICAqL1xuICBuaWNlPzogYm9vbGVhbiB8IG51bWJlciB8IE5pY2VUaW1lIHwge2ludGVydmFsOiBzdHJpbmcsIHN0ZXA6IG51bWJlcn07XG5cbiAgLyoqXG4gICAqIFRoZSBsb2dhcml0aG0gYmFzZSBvZiB0aGUgYGxvZ2Agc2NhbGUgKGRlZmF1bHQgYDEwYCkuXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZXhwb25lbnQgb2YgdGhlIGBwb3dgIHNjYWxlLlxuICAgKi9cbiAgZXhwb25lbnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZW5zdXJlcyB0aGF0IGEgemVybyBiYXNlbGluZSB2YWx1ZSBpcyBpbmNsdWRlZCBpbiB0aGUgc2NhbGUgZG9tYWluLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYHRydWVgIGZvciB4IGFuZCB5IGNoYW5uZWxzIGlmIHRoZSBxdWFudGl0YXRpdmUgZmllbGQgaXMgbm90IGJpbm5lZCBhbmQgbm8gY3VzdG9tIGBkb21haW5gIGlzIHByb3ZpZGVkOyBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICpcbiAgICogX19Ob3RlOl9fIExvZywgdGltZSwgYW5kIHV0YyBzY2FsZXMgZG8gbm90IHN1cHBvcnQgYHplcm9gLlxuICAgKi9cbiAgemVybz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlcnBvbGF0aW9uIG1ldGhvZCBmb3IgcmFuZ2UgdmFsdWVzLiBCeSBkZWZhdWx0LCBhIGdlbmVyYWwgaW50ZXJwb2xhdG9yIGZvciBudW1iZXJzLCBkYXRlcywgc3RyaW5ncyBhbmQgY29sb3JzIChpbiBSR0Igc3BhY2UpIGlzIHVzZWQuIEZvciBjb2xvciByYW5nZXMsIHRoaXMgcHJvcGVydHkgYWxsb3dzIGludGVycG9sYXRpb24gaW4gYWx0ZXJuYXRpdmUgY29sb3Igc3BhY2VzLiBMZWdhbCB2YWx1ZXMgaW5jbHVkZSBgcmdiYCwgYGhzbGAsIGBoc2wtbG9uZ2AsIGBsYWJgLCBgaGNsYCwgYGhjbC1sb25nYCwgYGN1YmVoZWxpeGAgYW5kIGBjdWJlaGVsaXgtbG9uZ2AgKCctbG9uZycgdmFyaWFudHMgdXNlIGxvbmdlciBwYXRocyBpbiBwb2xhciBjb29yZGluYXRlIHNwYWNlcykuIElmIG9iamVjdC12YWx1ZWQsIHRoaXMgcHJvcGVydHkgYWNjZXB0cyBhbiBvYmplY3Qgd2l0aCBhIHN0cmluZy12YWx1ZWQgX3R5cGVfIHByb3BlcnR5IGFuZCBhbiBvcHRpb25hbCBudW1lcmljIF9nYW1tYV8gcHJvcGVydHkgYXBwbGljYWJsZSB0byByZ2IgYW5kIGN1YmVoZWxpeCBpbnRlcnBvbGF0b3JzLiBGb3IgbW9yZSwgc2VlIHRoZSBbZDMtaW50ZXJwb2xhdGUgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWludGVycG9sYXRlKS5cbiAgICpcbiAgICogX19Ob3RlOl9fIFNlcXVlbnRpYWwgc2NhbGVzIGRvIG5vdCBzdXBwb3J0IGBpbnRlcnBvbGF0ZWAgYXMgdGhleSBoYXZlIGEgZml4ZWQgaW50ZXJwb2xhdG9yLiAgU2luY2UgVmVnYS1MaXRlIHVzZXMgc2VxdWVudGlhbCBzY2FsZXMgZm9yIHF1YW50aXRhdGl2ZSBmaWVsZHMgYnkgZGVmYXVsdCwgeW91IGhhdmUgdG8gc2V0IHRoZSBzY2FsZSBgdHlwZWAgdG8gb3RoZXIgcXVhbnRpdGF0aXZlIHNjYWxlIHR5cGUgc3VjaCBhcyBgXCJsaW5lYXJcImAgdG8gY3VzdG9taXplIGBpbnRlcnBvbGF0ZWAuXG4gICAqL1xuICBpbnRlcnBvbGF0ZT86IEludGVycG9sYXRlIHwgSW50ZXJwb2xhdGVQYXJhbXM7XG59XG5cbmV4cG9ydCB0eXBlIEludGVycG9sYXRlID0gJ3JnYid8ICdsYWInIHwgJ2hjbCcgfCAnaHNsJyB8ICdoc2wtbG9uZycgfCAnaGNsLWxvbmcnIHwgJ2N1YmVoZWxpeCcgfCAnY3ViZWhlbGl4LWxvbmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEludGVycG9sYXRlUGFyYW1zIHtcbiAgdHlwZTogJ3JnYicgfCAnY3ViZWhlbGl4JyB8ICdjdWJlaGVsaXgtbG9uZyc7XG4gIGdhbW1hPzogbnVtYmVyO1xufVxuXG5jb25zdCBTQ0FMRV9QUk9QRVJUWV9JTkRFWDogRmxhZzxrZXlvZiBTY2FsZT4gPSB7XG4gIHR5cGU6IDEsXG4gIGRvbWFpbjogMSxcbiAgcmFuZ2U6IDEsXG4gIHJhbmdlU3RlcDogMSxcbiAgc2NoZW1lOiAxLFxuICAvLyBPdGhlciBwcm9wZXJ0aWVzXG4gIHJldmVyc2U6IDEsXG4gIHJvdW5kOiAxLFxuICAvLyBxdWFudGl0YXRpdmUgLyB0aW1lXG4gIGNsYW1wOiAxLFxuICBuaWNlOiAxLFxuICAvLyBxdWFudGl0YXRpdmVcbiAgYmFzZTogMSxcbiAgZXhwb25lbnQ6IDEsXG4gIGludGVycG9sYXRlOiAxLFxuICB6ZXJvOiAxLCAvLyB6ZXJvIGRlcGVuZHMgb24gZG9tYWluXG4gIC8vIGJhbmQvcG9pbnRcbiAgcGFkZGluZzogMSxcbiAgcGFkZGluZ0lubmVyOiAxLFxuICBwYWRkaW5nT3V0ZXI6IDFcbn07XG5cbmV4cG9ydCBjb25zdCBTQ0FMRV9QUk9QRVJUSUVTID0gZmxhZ0tleXMoU0NBTEVfUFJPUEVSVFlfSU5ERVgpO1xuXG5jb25zdCB7dHlwZSwgZG9tYWluLCByYW5nZSwgcmFuZ2VTdGVwLCBzY2hlbWUsIC4uLk5PTl9UWVBFX0RPTUFJTl9SQU5HRV9WRUdBX1NDQUxFX1BST1BFUlRZX0lOREVYfSA9IFNDQUxFX1BST1BFUlRZX0lOREVYO1xuXG5leHBvcnQgY29uc3QgTk9OX1RZUEVfRE9NQUlOX1JBTkdFX1ZFR0FfU0NBTEVfUFJPUEVSVElFUyA9IGZsYWdLZXlzKE5PTl9UWVBFX0RPTUFJTl9SQU5HRV9WRUdBX1NDQUxFX1BST1BFUlRZX0lOREVYKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlVHlwZVN1cHBvcnRQcm9wZXJ0eShzY2FsZVR5cGU6IFNjYWxlVHlwZSwgcHJvcE5hbWU6IGtleW9mIFNjYWxlKSB7XG4gIHN3aXRjaCAocHJvcE5hbWUpIHtcbiAgICBjYXNlICd0eXBlJzpcbiAgICBjYXNlICdkb21haW4nOlxuICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgIGNhc2UgJ3JhbmdlJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ3NjaGVtZSc6XG4gICAgICByZXR1cm4gY29udGFpbnMoWydzZXF1ZW50aWFsJywgJ29yZGluYWwnLCAnYmluLW9yZGluYWwnLCAncXVhbnRpbGUnLCAncXVhbnRpemUnXSwgc2NhbGVUeXBlKTtcbiAgICBjYXNlICdpbnRlcnBvbGF0ZSc6XG4gICAgICAvLyBGSVhNRShodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI5MDIpIGhvdyBhYm91dCBvcmRpbmFsP1xuICAgICAgcmV0dXJuIGNvbnRhaW5zKFsnbGluZWFyJywgJ2Jpbi1saW5lYXInLCAncG93JywgJ2xvZycsICdzcXJ0JywgJ3V0YycsICd0aW1lJ10sIHNjYWxlVHlwZSk7XG4gICAgY2FzZSAncm91bmQnOlxuICAgICAgcmV0dXJuIGlzQ29udGludW91c1RvQ29udGludW91cyhzY2FsZVR5cGUpIHx8IHNjYWxlVHlwZSA9PT0gJ2JhbmQnIHx8IHNjYWxlVHlwZSA9PT0gJ3BvaW50JztcbiAgICBjYXNlICdwYWRkaW5nJzpcbiAgICAgIHJldHVybiBpc0NvbnRpbnVvdXNUb0NvbnRpbnVvdXMoc2NhbGVUeXBlKSB8fCBjb250YWlucyhbJ3BvaW50JywgJ2JhbmQnXSwgc2NhbGVUeXBlKTtcbiAgICBjYXNlICdwYWRkaW5nT3V0ZXInOlxuICAgIGNhc2UgJ3JhbmdlU3RlcCc6XG4gICAgICByZXR1cm4gY29udGFpbnMoWydwb2ludCcsICdiYW5kJ10sIHNjYWxlVHlwZSk7XG4gICAgY2FzZSAncGFkZGluZ0lubmVyJzpcbiAgICAgIHJldHVybiBzY2FsZVR5cGUgPT09ICdiYW5kJztcbiAgICBjYXNlICdjbGFtcCc6XG4gICAgICByZXR1cm4gaXNDb250aW51b3VzVG9Db250aW51b3VzKHNjYWxlVHlwZSkgfHwgc2NhbGVUeXBlID09PSAnc2VxdWVudGlhbCc7XG4gICAgY2FzZSAnbmljZSc6XG4gICAgICByZXR1cm4gaXNDb250aW51b3VzVG9Db250aW51b3VzKHNjYWxlVHlwZSkgfHwgc2NhbGVUeXBlID09PSAnc2VxdWVudGlhbCcgfHwgc2NhbGVUeXBlIGFzIGFueSA9PT0gJ3F1YW50aXplJztcbiAgICBjYXNlICdleHBvbmVudCc6XG4gICAgICByZXR1cm4gc2NhbGVUeXBlID09PSAncG93JztcbiAgICBjYXNlICdiYXNlJzpcbiAgICAgIHJldHVybiBzY2FsZVR5cGUgPT09ICdsb2cnO1xuICAgIGNhc2UgJ3plcm8nOlxuICAgICAgcmV0dXJuIGhhc0NvbnRpbnVvdXNEb21haW4oc2NhbGVUeXBlKSAmJiAhY29udGFpbnMoW1xuICAgICAgICAnbG9nJywgIC8vIGxvZyBzY2FsZSBjYW5ub3QgaGF2ZSB6ZXJvIHZhbHVlXG4gICAgICAgICd0aW1lJywgJ3V0YycsIC8vIHplcm8gaXMgbm90IG1lYW5pbmdmdWwgZm9yIHRpbWVcbiAgICAgICAgJ2Jpbi1saW5lYXInLCAvLyBiaW5uaW5nIHNob3VsZCBub3QgYXV0b21hdGljYWxseSBhZGQgemVyb1xuICAgICAgICAndGhyZXNob2xkJywgLy8gdGhyZXNob2xkIHJlcXVpcmVzIGN1c3RvbSBkb21haW4gc28gemVybyBkb2VzIG5vdCBtYXR0ZXJcbiAgICAgICAgJ3F1YW50aWxlJyAvLyBxdWFudGlsZSBkZXBlbmRzIG9uIGRpc3RyaWJ1dGlvbiBzbyB6ZXJvIGRvZXMgbm90IG1hdHRlclxuICAgICAgXSwgc2NhbGVUeXBlKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUqL1xuICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc2NhbGUgcHJvcGVydHkgJHtwcm9wTmFtZX0uYCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIGlucHV0IGNoYW5uZWwgc3VwcG9ydHMgdGhlIGlucHV0IHNjYWxlIHByb3BlcnR5IG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYW5uZWxTY2FsZVByb3BlcnR5SW5jb21wYXRhYmlsaXR5KGNoYW5uZWw6IENoYW5uZWwsIHByb3BOYW1lOiBrZXlvZiBTY2FsZSk6IHN0cmluZyB7XG4gIHN3aXRjaCAocHJvcE5hbWUpIHtcbiAgICBjYXNlICdpbnRlcnBvbGF0ZSc6XG4gICAgY2FzZSAnc2NoZW1lJzpcbiAgICAgIGlmIChjaGFubmVsICE9PSAnY29sb3InKSB7XG4gICAgICAgIHJldHVybiBsb2cubWVzc2FnZS5jYW5ub3RVc2VTY2FsZVByb3BlcnR5V2l0aE5vbkNvbG9yKGNoYW5uZWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjYXNlICd0eXBlJzpcbiAgICBjYXNlICdkb21haW4nOlxuICAgIGNhc2UgJ3JhbmdlJzpcbiAgICBjYXNlICdiYXNlJzpcbiAgICBjYXNlICdleHBvbmVudCc6XG4gICAgY2FzZSAnbmljZSc6XG4gICAgY2FzZSAncGFkZGluZyc6XG4gICAgY2FzZSAncGFkZGluZ0lubmVyJzpcbiAgICBjYXNlICdwYWRkaW5nT3V0ZXInOlxuICAgIGNhc2UgJ3JhbmdlU3RlcCc6XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgY2FzZSAncm91bmQnOlxuICAgIGNhc2UgJ2NsYW1wJzpcbiAgICBjYXNlICd6ZXJvJzpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIEdPT0QhXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGl0IHNob3VsZCBuZXZlciByZWFjaCBoZXJlICovXG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzY2FsZSBwcm9wZXJ0eSBcIiR7cHJvcE5hbWV9XCIuYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsU3VwcG9ydFNjYWxlVHlwZShjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSk6IGJvb2xlYW4ge1xuICBzd2l0Y2ggKGNoYW5uZWwpIHtcbiAgICBjYXNlIENoYW5uZWwuWDpcbiAgICBjYXNlIENoYW5uZWwuWTpcbiAgICBjYXNlIENoYW5uZWwuU0laRTogLy8gVE9ETzogc2l6ZSBhbmQgb3BhY2l0eSBjYW4gc3VwcG9ydCBvcmRpbmFsIHdpdGggbW9yZSBtb2RpZmljYXRpb25cbiAgICBjYXNlIENoYW5uZWwuT1BBQ0lUWTpcbiAgICAgIC8vIEFsdGhvdWdoIGl0IGdlbmVyYWxseSBkb2Vzbid0IG1ha2Ugc2Vuc2UgdG8gdXNlIGJhbmQgd2l0aCBzaXplIGFuZCBvcGFjaXR5LFxuICAgICAgLy8gaXQgY2FuIGFsc28gd29yayBzaW5jZSB3ZSB1c2UgYmFuZDogMC41IHRvIGdldCBtaWRwb2ludC5cbiAgICAgIHJldHVybiBpc0NvbnRpbnVvdXNUb0NvbnRpbnVvdXMoc2NhbGVUeXBlKSB8fCBjb250YWlucyhbJ2JhbmQnLCAncG9pbnQnXSwgc2NhbGVUeXBlKTtcbiAgICBjYXNlIENoYW5uZWwuQ09MT1I6XG4gICAgICByZXR1cm4gc2NhbGVUeXBlICE9PSAnYmFuZCc7ICAgIC8vIGJhbmQgZG9lcyBub3QgbWFrZSBzZW5zZSB3aXRoIGNvbG9yXG4gICAgY2FzZSBDaGFubmVsLlNIQVBFOlxuICAgICAgcmV0dXJuIHNjYWxlVHlwZSA9PT0gJ29yZGluYWwnOyAvLyBzaGFwZSA9IGxvb2t1cCBvbmx5XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGl0IHNob3VsZCBuZXZlciByZWFjaCBoZXJlICovXG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SELECTION_ID = '_vgsid_';
	exports.defaultConfig = {
	    single: {
	        on: 'click',
	        fields: [exports.SELECTION_ID],
	        resolve: 'global',
	        empty: 'all'
	    },
	    multi: {
	        on: 'click',
	        fields: [exports.SELECTION_ID],
	        toggle: 'event.shiftKey',
	        resolve: 'global',
	        empty: 'all'
	    },
	    interval: {
	        on: '[mousedown, window:mouseup] > window:mousemove!',
	        encodings: ['x', 'y'],
	        translate: '[mousedown, window:mouseup] > window:mousemove!',
	        zoom: 'wheel!',
	        mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },
	        resolve: 'global'
	    }
	};
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	function extractTitleConfig(titleConfig) {
	    var 
	    // These are non-mark title config that need to be hardcoded
	    anchor = titleConfig.anchor, offset = titleConfig.offset, orient = titleConfig.orient, 
	    // color needs to be redirect to fill
	    color = titleConfig.color, 
	    // The rest are mark config.
	    titleMarkConfig = __rest(titleConfig, ["anchor", "offset", "orient", "color"]);
	    var mark = __assign({}, titleMarkConfig, color ? { fill: color } : {});
	    var nonMark = __assign({}, anchor ? { anchor: anchor } : {}, offset ? { offset: offset } : {}, orient ? { orient: orient } : {});
	    return { mark: mark, nonMark: nonMark };
	}
	exports.extractTitleConfig = extractTitleConfig;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGl0bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQSw0QkFBbUMsV0FBMEI7SUFNekQ7SUFEQSw0REFBNEQ7SUFDNUQsMkJBQU0sRUFBRSwyQkFBTSxFQUFFLDJCQUFNO0lBQ3RCLHFDQUFxQztJQUNyQyx5QkFBSztJQUNMLDRCQUE0QjtJQUM1Qiw4RUFBa0IsQ0FDSjtJQUVoQixJQUFNLElBQUksZ0JBQ0wsZUFBZSxFQUNmLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDOUIsQ0FBQztJQUVGLElBQU0sT0FBTyxnQkFDUixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxRQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxRQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUN0QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxRQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUMxQixDQUFDO0lBRUYsTUFBTSxDQUFDLEVBQUMsSUFBSSxNQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUN6QixDQUFDO0FBekJELGdEQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QW5jaG9yLCBUaXRsZU9yaWVudCwgVmdNYXJrQ29uZmlnLCBWZ1RpdGxlQ29uZmlnfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IGludGVyZmFjZSBUaXRsZUJhc2Uge1xuICAvKipcbiAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSB0aXRsZSByZWxhdGl2ZSB0byB0aGUgY2hhcnQuIE9uZSBvZiBgXCJ0b3BcImAgKHRoZSBkZWZhdWx0KSwgYFwiYm90dG9tXCJgLCBgXCJsZWZ0XCJgLCBvciBgXCJyaWdodFwiYC5cbiAgICovXG4gIG9yaWVudD86IFRpdGxlT3JpZW50O1xuXG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIHBvc2l0aW9uIGZvciBwbGFjaW5nIHRoZSB0aXRsZS4gT25lIG9mIGBcInN0YXJ0XCJgLCBgXCJtaWRkbGVcImAsIG9yIGBcImVuZFwiYC4gRm9yIGV4YW1wbGUsIHdpdGggYW4gb3JpZW50YXRpb24gb2YgdG9wIHRoZXNlIGFuY2hvciBwb3NpdGlvbnMgbWFwIHRvIGEgbGVmdC0sIGNlbnRlci0sIG9yIHJpZ2h0LWFsaWduZWQgdGl0bGUuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgXCJtaWRkbGVcImAgZm9yIFtzaW5nbGVdKHNwZWMuaHRtbCkgYW5kIFtsYXllcmVkXShsYXllci5odG1sKSB2aWV3cy5cbiAgICogYFwic3RhcnRcImAgZm9yIG90aGVyIGNvbXBvc2l0ZSB2aWV3cy5cbiAgICpcbiAgICogX19Ob3RlOl9fIFtGb3Igbm93XShodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI4NzUpLCBgYW5jaG9yYCBpcyBvbmx5IGN1c3RvbWl6YWJsZSBvbmx5IGZvciBbc2luZ2xlXShzcGVjLmh0bWwpIGFuZCBbbGF5ZXJlZF0obGF5ZXIuaHRtbCkgdmlld3MuICBGb3Igb3RoZXIgY29tcG9zaXRlIHZpZXdzLCBgYW5jaG9yYCBpcyBhbHdheXMgYFwic3RhcnRcImAuXG4gICAqL1xuICBhbmNob3I/OiBBbmNob3I7XG5cbiAgLyoqXG4gICAqIFRoZSBvcnRob2dvbmFsIG9mZnNldCBpbiBwaXhlbHMgYnkgd2hpY2ggdG8gZGlzcGxhY2UgdGhlIHRpdGxlIGZyb20gaXRzIHBvc2l0aW9uIGFsb25nIHRoZSBlZGdlIG9mIHRoZSBjaGFydC5cbiAgICovXG4gIG9mZnNldD86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBbbWFyayBzdHlsZSBwcm9wZXJ0eV0oY29uZmlnLmh0bWwjc3R5bGUpIHRvIGFwcGx5IHRvIHRoZSB0aXRsZSB0ZXh0IG1hcmsuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgXCJncm91cC10aXRsZVwiYC5cbiAgICovXG4gIHN0eWxlPzogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgLy8gVE9ETzogbmFtZSwgZW5jb2RlLCBpbnRlcmFjdGl2ZSwgemluZGV4XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGl0bGVQYXJhbXMgZXh0ZW5kcyBUaXRsZUJhc2Uge1xuICAvKipcbiAgICogVGhlIHRpdGxlIHRleHQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VGl0bGVDb25maWcodGl0bGVDb25maWc6IFZnVGl0bGVDb25maWcpOiB7XG4gIG1hcms6IFZnTWFya0NvbmZpZyxcbiAgbm9uTWFyazogVGl0bGVCYXNlXG59IHtcbiAgY29uc3Qge1xuICAgIC8vIFRoZXNlIGFyZSBub24tbWFyayB0aXRsZSBjb25maWcgdGhhdCBuZWVkIHRvIGJlIGhhcmRjb2RlZFxuICAgIGFuY2hvciwgb2Zmc2V0LCBvcmllbnQsXG4gICAgLy8gY29sb3IgbmVlZHMgdG8gYmUgcmVkaXJlY3QgdG8gZmlsbFxuICAgIGNvbG9yLFxuICAgIC8vIFRoZSByZXN0IGFyZSBtYXJrIGNvbmZpZy5cbiAgICAuLi50aXRsZU1hcmtDb25maWdcbiAgfSA9IHRpdGxlQ29uZmlnO1xuXG4gIGNvbnN0IG1hcms6IFZnTWFya0NvbmZpZyA9IHtcbiAgICAuLi50aXRsZU1hcmtDb25maWcsXG4gICAgLi4uY29sb3IgPyB7ZmlsbDogY29sb3J9IDoge31cbiAgfTtcblxuICBjb25zdCBub25NYXJrOiBUaXRsZUJhc2UgPSB7XG4gICAgLi4uYW5jaG9yID8ge2FuY2hvcn0gOiB7fSxcbiAgICAuLi5vZmZzZXQgPyB7b2Zmc2V0fSA6IHt9LFxuICAgIC4uLm9yaWVudCA/IHtvcmllbnR9IDoge31cbiAgfTtcblxuICByZXR1cm4ge21hcmssIG5vbk1hcmt9O1xufVxuIl19

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var compositeMark = __webpack_require__(24);
	var encoding_1 = __webpack_require__(27);
	var vlEncoding = __webpack_require__(27);
	var log = __webpack_require__(29);
	var mark_1 = __webpack_require__(25);
	var stack_1 = __webpack_require__(43);
	var util_1 = __webpack_require__(14);
	/* Custom type guards */
	function isFacetSpec(spec) {
	    return spec['facet'] !== undefined;
	}
	exports.isFacetSpec = isFacetSpec;
	function isUnitSpec(spec) {
	    return !!spec['mark'];
	}
	exports.isUnitSpec = isUnitSpec;
	function isLayerSpec(spec) {
	    return spec['layer'] !== undefined;
	}
	exports.isLayerSpec = isLayerSpec;
	function isRepeatSpec(spec) {
	    return spec['repeat'] !== undefined;
	}
	exports.isRepeatSpec = isRepeatSpec;
	function isConcatSpec(spec) {
	    return isVConcatSpec(spec) || isHConcatSpec(spec);
	}
	exports.isConcatSpec = isConcatSpec;
	function isVConcatSpec(spec) {
	    return spec['vconcat'] !== undefined;
	}
	exports.isVConcatSpec = isVConcatSpec;
	function isHConcatSpec(spec) {
	    return spec['hconcat'] !== undefined;
	}
	exports.isHConcatSpec = isHConcatSpec;
	/**
	 * Decompose extended unit specs into composition of pure unit specs.
	 */
	// TODO: consider moving this to another file.  Maybe vl.spec.normalize or vl.normalize
	function normalize(spec, config) {
	    if (isFacetSpec(spec)) {
	        return normalizeFacet(spec, config);
	    }
	    if (isLayerSpec(spec)) {
	        return normalizeLayer(spec, config);
	    }
	    if (isRepeatSpec(spec)) {
	        return normalizeRepeat(spec, config);
	    }
	    if (isVConcatSpec(spec)) {
	        return normalizeVConcat(spec, config);
	    }
	    if (isHConcatSpec(spec)) {
	        return normalizeHConcat(spec, config);
	    }
	    if (isUnitSpec(spec)) {
	        var hasRow = encoding_1.channelHasField(spec.encoding, channel_1.ROW);
	        var hasColumn = encoding_1.channelHasField(spec.encoding, channel_1.COLUMN);
	        if (hasRow || hasColumn) {
	            return normalizeFacetedUnit(spec, config);
	        }
	        return normalizeNonFacetUnit(spec, config);
	    }
	    throw new Error(log.message.INVALID_SPEC);
	}
	exports.normalize = normalize;
	function normalizeFacet(spec, config) {
	    var subspec = spec.spec, rest = __rest(spec, ["spec"]);
	    return __assign({}, rest, { 
	        // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
	        spec: normalize(subspec, config) });
	}
	function normalizeLayer(spec, config) {
	    var layer = spec.layer, rest = __rest(spec, ["layer"]);
	    return __assign({}, rest, { layer: layer.map(function (subspec) { return isLayerSpec(subspec) ? normalizeLayer(subspec, config) : normalizeNonFacetUnit(subspec, config); }) });
	}
	function normalizeRepeat(spec, config) {
	    var subspec = spec.spec, rest = __rest(spec, ["spec"]);
	    return __assign({}, rest, { spec: normalize(subspec, config) });
	}
	function normalizeVConcat(spec, config) {
	    var vconcat = spec.vconcat, rest = __rest(spec, ["vconcat"]);
	    return __assign({}, rest, { vconcat: vconcat.map(function (subspec) { return normalize(subspec, config); }) });
	}
	function normalizeHConcat(spec, config) {
	    var hconcat = spec.hconcat, rest = __rest(spec, ["hconcat"]);
	    return __assign({}, rest, { hconcat: hconcat.map(function (subspec) { return normalize(subspec, config); }) });
	}
	function normalizeFacetedUnit(spec, config) {
	    // New encoding in the inside spec should not contain row / column
	    // as row/column should be moved to facet
	    var _a = spec.encoding, row = _a.row, column = _a.column, encoding = __rest(_a, ["row", "column"]);
	    // Mark and encoding should be moved into the inner spec
	    var mark = spec.mark, width = spec.width, projection = spec.projection, height = spec.height, selection = spec.selection, _ = spec.encoding, outerSpec = __rest(spec, ["mark", "width", "projection", "height", "selection", "encoding"]);
	    return __assign({}, outerSpec, { facet: __assign({}, (row ? { row: row } : {}), (column ? { column: column } : {})), spec: normalizeNonFacetUnit(__assign({}, (projection ? { projection: projection } : {}), { mark: mark }, (width ? { width: width } : {}), (height ? { height: height } : {}), { encoding: encoding }, (selection ? { selection: selection } : {})), config) });
	}
	function isNonFacetUnitSpecWithPrimitiveMark(spec) {
	    return mark_1.isPrimitiveMark(spec.mark);
	}
	function normalizeNonFacetUnit(spec, config) {
	    if (isNonFacetUnitSpecWithPrimitiveMark(spec)) {
	        // TODO: thoroughly test
	        if (encoding_1.isRanged(spec.encoding)) {
	            return normalizeRangedUnit(spec);
	        }
	        var overlayConfig = config && config.overlay;
	        var overlayWithLine = overlayConfig && spec.mark === mark_1.AREA &&
	            util_1.contains(['linepoint', 'line'], overlayConfig.area);
	        var overlayWithPoint = overlayConfig && ((overlayConfig.line && spec.mark === mark_1.LINE) ||
	            (overlayConfig.area === 'linepoint' && spec.mark === mark_1.AREA));
	        // TODO: consider moving this to become another case of compositeMark
	        if (overlayWithPoint || overlayWithLine) {
	            return normalizeOverlay(spec, overlayWithPoint, overlayWithLine, config);
	        }
	        return spec; // Nothing to normalize
	    }
	    else {
	        return compositeMark.normalize(spec, config);
	    }
	}
	function normalizeRangedUnit(spec) {
	    var hasX = encoding_1.channelHasField(spec.encoding, channel_1.X);
	    var hasY = encoding_1.channelHasField(spec.encoding, channel_1.Y);
	    var hasX2 = encoding_1.channelHasField(spec.encoding, channel_1.X2);
	    var hasY2 = encoding_1.channelHasField(spec.encoding, channel_1.Y2);
	    if ((hasX2 && !hasX) || (hasY2 && !hasY)) {
	        var normalizedSpec = util_1.duplicate(spec);
	        if (hasX2 && !hasX) {
	            normalizedSpec.encoding.x = normalizedSpec.encoding.x2;
	            delete normalizedSpec.encoding.x2;
	        }
	        if (hasY2 && !hasY) {
	            normalizedSpec.encoding.y = normalizedSpec.encoding.y2;
	            delete normalizedSpec.encoding.y2;
	        }
	        return normalizedSpec;
	    }
	    return spec;
	}
	// FIXME(#1804): re-design this
	function normalizeOverlay(spec, overlayWithPoint, overlayWithLine, config) {
	    // _ is used to denote a dropped property of the unit spec
	    // which should not be carried over to the layer spec
	    var mark = spec.mark, selection = spec.selection, projection = spec.projection, encoding = spec.encoding, outerSpec = __rest(spec, ["mark", "selection", "projection", "encoding"]);
	    var layer = [{ mark: mark, encoding: encoding }];
	    // Need to copy stack config to overlayed layer
	    var stackProps = stack_1.stack(mark, encoding, config ? config.stack : undefined);
	    var overlayEncoding = encoding;
	    if (stackProps) {
	        var stackFieldChannel = stackProps.fieldChannel, offset = stackProps.offset;
	        overlayEncoding = __assign({}, encoding, (_a = {}, _a[stackFieldChannel] = __assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})), _a));
	    }
	    if (overlayWithLine) {
	        layer.push(__assign({}, (projection ? { projection: projection } : {}), { mark: {
	                type: 'line',
	                style: 'lineOverlay'
	            } }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));
	    }
	    if (overlayWithPoint) {
	        layer.push(__assign({}, (projection ? { projection: projection } : {}), { mark: {
	                type: 'point',
	                filled: true,
	                style: 'pointOverlay'
	            } }, (selection ? { selection: selection } : {}), { encoding: overlayEncoding }));
	    }
	    return __assign({}, outerSpec, { layer: layer });
	    var _a;
	}
	// TODO: add vl.spec.validate & move stuff from vl.validate to here
	/* Accumulate non-duplicate fieldDefs in a dictionary */
	function accumulate(dict, defs) {
	    defs.forEach(function (fieldDef) {
	        // Consider only pure fieldDef properties (ignoring scale, axis, legend)
	        var pureFieldDef = ['field', 'type', 'value', 'timeUnit', 'bin', 'aggregate'].reduce(function (f, key) {
	            if (fieldDef[key] !== undefined) {
	                f[key] = fieldDef[key];
	            }
	            return f;
	        }, {});
	        var key = util_1.hash(pureFieldDef);
	        dict[key] = dict[key] || fieldDef;
	    });
	    return dict;
	}
	/* Recursively get fieldDefs from a spec, returns a dictionary of fieldDefs */
	function fieldDefIndex(spec, dict) {
	    if (dict === void 0) { dict = {}; }
	    // FIXME(https://github.com/vega/vega-lite/issues/2207): Support fieldDefIndex for repeat
	    if (isLayerSpec(spec)) {
	        spec.layer.forEach(function (layer) {
	            if (isUnitSpec(layer)) {
	                accumulate(dict, vlEncoding.fieldDefs(layer.encoding));
	            }
	            else {
	                fieldDefIndex(layer, dict);
	            }
	        });
	    }
	    else if (isFacetSpec(spec)) {
	        accumulate(dict, vlEncoding.fieldDefs(spec.facet));
	        fieldDefIndex(spec.spec, dict);
	    }
	    else if (isRepeatSpec(spec)) {
	        fieldDefIndex(spec.spec, dict);
	    }
	    else if (isConcatSpec(spec)) {
	        var childSpec = isVConcatSpec(spec) ? spec.vconcat : spec.hconcat;
	        childSpec.forEach(function (child) { return fieldDefIndex(child, dict); });
	    }
	    else {
	        accumulate(dict, vlEncoding.fieldDefs(spec.encoding));
	    }
	    return dict;
	}
	/* Returns all non-duplicate fieldDefs in a spec in a flat array */
	function fieldDefs(spec) {
	    return util_1.vals(fieldDefIndex(spec));
	}
	exports.fieldDefs = fieldDefs;
	function isStacked(spec, config) {
	    config = config || spec.config;
	    if (mark_1.isPrimitiveMark(spec.mark)) {
	        return stack_1.stack(spec.mark, spec.encoding, config ? config.stack : undefined) !== null;
	    }
	    return false;
	}
	exports.isStacked = isStacked;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBb0Q7QUFDcEQsK0NBQWlEO0FBR2pELHVDQUFrRjtBQUNsRix1Q0FBeUM7QUFHekMsMkJBQTZCO0FBQzdCLCtCQUEyRTtBQUszRSxpQ0FBOEI7QUFJOUIsK0JBQTZEO0FBcU03RCx3QkFBd0I7QUFHeEIscUJBQTRCLElBQWM7SUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUZELGtDQUVDO0FBRUQsb0JBQTJCLElBQWM7SUFDdkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUZELGdDQUVDO0FBRUQscUJBQTRCLElBQWM7SUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUZELGtDQUVDO0FBRUQsc0JBQTZCLElBQWM7SUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdEMsQ0FBQztBQUZELG9DQUVDO0FBRUQsc0JBQTZCLElBQWM7SUFDekMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUZELG9DQUVDO0FBRUQsdUJBQThCLElBQWM7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQUZELHNDQUVDO0FBRUQsdUJBQThCLElBQWM7SUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQUZELHNDQUVDO0FBRUQ7O0dBRUc7QUFDSCx1RkFBdUY7QUFDdkYsbUJBQTBCLElBQTBCLEVBQUUsTUFBYztJQUNsRSxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFNLE1BQU0sR0FBRywwQkFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBRyxDQUFDLENBQUM7UUFDbkQsSUFBTSxTQUFTLEdBQUcsMEJBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFNLENBQUMsQ0FBQztRQUV6RCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFDRCxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQTFCRCw4QkEwQkM7QUFFRCx3QkFBd0IsSUFBeUMsRUFBRSxNQUFjO0lBQ3hFLElBQUEsbUJBQWEsRUFBRSw2QkFBTyxDQUFTO0lBQ3RDLE1BQU0sY0FDRCxJQUFJO1FBQ1AsdUdBQXVHO1FBQ3ZHLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBUSxJQUN2QztBQUNKLENBQUM7QUFFRCx3QkFBd0IsSUFBeUMsRUFBRSxNQUFjO0lBQ3hFLElBQUEsa0JBQVksRUFBRSw4QkFBTyxDQUFTO0lBQ3JDLE1BQU0sY0FDRCxJQUFJLElBQ1AsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBL0YsQ0FBK0YsQ0FBQyxJQUM5SDtBQUNKLENBQUM7QUFFRCx5QkFBeUIsSUFBMEMsRUFBRSxNQUFjO0lBQzFFLElBQUEsbUJBQWEsRUFBRSw2QkFBTyxDQUFTO0lBQ3RDLE1BQU0sY0FDRCxJQUFJLElBQ1AsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQ2hDO0FBQ0osQ0FBQztBQUVELDBCQUEwQixJQUEyQyxFQUFFLE1BQWM7SUFDNUUsSUFBQSxzQkFBZ0IsRUFBRSxnQ0FBTyxDQUFTO0lBQ3pDLE1BQU0sY0FDRCxJQUFJLElBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQixDQUFDLElBQzdEO0FBQ0osQ0FBQztBQUVELDBCQUEwQixJQUEyQyxFQUFFLE1BQWM7SUFDNUUsSUFBQSxzQkFBZ0IsRUFBRSxnQ0FBTyxDQUFTO0lBQ3pDLE1BQU0sY0FDRCxJQUFJLElBQ1AsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQixDQUFDLElBQzdEO0FBQ0osQ0FBQztBQUVELDhCQUE4QixJQUE4QixFQUFFLE1BQWM7SUFDMUUsa0VBQWtFO0lBQ2xFLHlDQUF5QztJQUN6QyxJQUFNLGtCQUF1RCxFQUF0RCxZQUFRLEVBQUUsa0JBQWMsRUFBRSx3Q0FBNEIsQ0FBQztJQUU5RCx3REFBd0Q7SUFDakQsSUFBQSxnQkFBSSxFQUFFLGtCQUFLLEVBQUUsNEJBQVUsRUFBRSxvQkFBTSxFQUFFLDBCQUFTLEVBQUUsaUJBQVcsRUFBRSw0RkFBWSxDQUFTO0lBRXJGLE1BQU0sY0FDRCxTQUFTLElBQ1osS0FBSyxlQUNBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLEdBQUcsS0FBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNsQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFNUIsSUFBSSxFQUFFLHFCQUFxQixjQUN0QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLFlBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDbkMsSUFBSSxNQUFBLElBQ0QsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxPQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3RCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUMzQixRQUFRLFVBQUEsSUFDTCxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FDaEMsTUFBTSxDQUFDLElBQ1Y7QUFDSixDQUFDO0FBRUQsNkNBQTZDLElBQStDO0lBRXhGLE1BQU0sQ0FBQyxzQkFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBR0QsK0JBQStCLElBQStDLEVBQUUsTUFBYztJQUM1RixFQUFFLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsd0JBQXdCO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUVELElBQU0sYUFBYSxHQUFrQixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM5RCxJQUFNLGVBQWUsR0FBRyxhQUFhLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFJO1lBQ3pELGVBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBTSxnQkFBZ0IsR0FBRyxhQUFhLElBQUksQ0FDeEMsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBSSxDQUFDO1lBQzFDLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFJLENBQUMsQ0FDM0QsQ0FBQztRQUNGLHFFQUFxRTtRQUNyRSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsSUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCO0lBQ3RDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQztBQUVELDZCQUE2QixJQUFjO0lBQ3pDLElBQU0sSUFBSSxHQUFHLDBCQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFDLENBQUMsQ0FBQztJQUMvQyxJQUFNLElBQUksR0FBRywwQkFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBTSxLQUFLLEdBQUcsMEJBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQUUsQ0FBQyxDQUFDO0lBQ2pELElBQU0sS0FBSyxHQUFHLDBCQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFFLENBQUMsQ0FBQztJQUNqRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQU0sY0FBYyxHQUFHLGdCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQixjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUN2RCxPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3BDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ3ZELE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDcEMsQ0FBQztRQUVELE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBR0QsK0JBQStCO0FBQy9CLDBCQUEwQixJQUFjLEVBQUUsZ0JBQXlCLEVBQUUsZUFBd0IsRUFBRSxNQUFjO0lBQzNHLDBEQUEwRDtJQUMxRCxxREFBcUQ7SUFDOUMsSUFBQSxnQkFBSSxFQUFFLDBCQUFTLEVBQUUsNEJBQVUsRUFBRSx3QkFBUSxFQUFFLHlFQUFZLENBQVM7SUFDbkUsSUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFDLElBQUksTUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFDLENBQUMsQ0FBQztJQUVqQywrQ0FBK0M7SUFDL0MsSUFBTSxVQUFVLEdBQUcsYUFBSyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU1RSxJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDL0IsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNSLElBQUEsMkNBQStCLEVBQUUsMEJBQU0sQ0FBZTtRQUM3RCxlQUFlLGdCQUNWLFFBQVEsZUFDVixpQkFBaUIsaUJBQ2IsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQzNCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BRXJDLENBQUM7SUFDSixDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNwQixLQUFLLENBQUMsSUFBSSxjQUNMLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLFVBQVUsWUFBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUNuQyxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLGFBQWE7YUFDckIsSUFDRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDakMsUUFBUSxFQUFFLGVBQWUsSUFDekIsQ0FBQztJQUNMLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDckIsS0FBSyxDQUFDLElBQUksY0FDTCxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLFlBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDbkMsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRSxPQUFPO2dCQUNiLE1BQU0sRUFBRSxJQUFJO2dCQUNaLEtBQUssRUFBRSxjQUFjO2FBQ3RCLElBQ0UsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxXQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ2pDLFFBQVEsRUFBRSxlQUFlLElBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxjQUNELFNBQVMsSUFDWixLQUFLLE9BQUEsSUFDTDs7QUFDSixDQUFDO0FBRUQsbUVBQW1FO0FBRW5FLHdEQUF3RDtBQUN4RCxvQkFBb0IsSUFBUyxFQUFFLElBQXVCO0lBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRO1FBQzVCLHdFQUF3RTtRQUN4RSxJQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLEdBQUc7WUFDNUYsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNELE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDUCxJQUFNLEdBQUcsR0FBRyxXQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELDhFQUE4RTtBQUM5RSx1QkFBMEIsSUFBNEMsRUFBRSxJQUE0QjtJQUE1QixxQkFBQSxFQUFBLFNBQTRCO0lBQ2xHLHlGQUF5RjtJQUN6RixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUN0QixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixVQUFVLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0IsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwRSxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLFVBQVUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxtRUFBbUU7QUFDbkUsbUJBQTBCLElBQTRDO0lBQ3BFLE1BQU0sQ0FBQyxXQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUZELDhCQUVDO0FBRUQsbUJBQTBCLElBQXdDLEVBQUUsTUFBZTtJQUNqRixNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsRUFBRSxDQUFDLENBQUMsc0JBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxhQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUM3QixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDbEMsS0FBSyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDZixDQUFDO0FBUkQsOEJBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NPTFVNTiwgUk9XLCBYLCBYMiwgWSwgWTJ9IGZyb20gJy4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBjb21wb3NpdGVNYXJrIGZyb20gJy4vY29tcG9zaXRlbWFyayc7XG5pbXBvcnQge0NvbmZpZywgT3ZlcmxheUNvbmZpZ30gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHtEYXRhfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHtjaGFubmVsSGFzRmllbGQsIEVuY29kaW5nLCBFbmNvZGluZ1dpdGhGYWNldCwgaXNSYW5nZWR9IGZyb20gJy4vZW5jb2RpbmcnO1xuaW1wb3J0ICogYXMgdmxFbmNvZGluZyBmcm9tICcuL2VuY29kaW5nJztcbmltcG9ydCB7RmFjZXRNYXBwaW5nfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7RmllbGQsIEZpZWxkRGVmLCBSZXBlYXRSZWZ9IGZyb20gJy4vZmllbGRkZWYnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcbmltcG9ydCB7QW55TWFyaywgQVJFQSwgaXNQcmltaXRpdmVNYXJrLCBMSU5FLCBNYXJrLCBNYXJrRGVmfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHtQcm9qZWN0aW9ufSBmcm9tICcuL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtSZXBlYXR9IGZyb20gJy4vcmVwZWF0JztcbmltcG9ydCB7UmVzb2x2ZX0gZnJvbSAnLi9yZXNvbHZlJztcbmltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuL3NlbGVjdGlvbic7XG5pbXBvcnQge3N0YWNrfSBmcm9tICcuL3N0YWNrJztcbmltcG9ydCB7VGl0bGVQYXJhbXN9IGZyb20gJy4vdGl0bGUnO1xuaW1wb3J0IHtUb3BMZXZlbFByb3BlcnRpZXN9IGZyb20gJy4vdG9wbGV2ZWxwcm9wcyc7XG5pbXBvcnQge1RyYW5zZm9ybX0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHtjb250YWlucywgRGljdCwgZHVwbGljYXRlLCBoYXNoLCB2YWxzfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCB0eXBlIFRvcExldmVsPFMgZXh0ZW5kcyBCYXNlU3BlYz4gPSBTICYgVG9wTGV2ZWxQcm9wZXJ0aWVzICYge1xuICAvKipcbiAgICogVVJMIHRvIFtKU09OIHNjaGVtYV0oaHR0cDovL2pzb24tc2NoZW1hLm9yZy8pIGZvciBhIFZlZ2EtTGl0ZSBzcGVjaWZpY2F0aW9uLiBVbmxlc3MgeW91IGhhdmUgYSByZWFzb24gdG8gY2hhbmdlIHRoaXMsIHVzZSBgaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby9zY2hlbWEvdmVnYS1saXRlL3YyLmpzb25gLiBTZXR0aW5nIHRoZSBgJHNjaGVtYWAgcHJvcGVydHkgYWxsb3dzIGF1dG9tYXRpYyB2YWxpZGF0aW9uIGFuZCBhdXRvY29tcGxldGUgaW4gZWRpdG9ycyB0aGF0IHN1cHBvcnQgSlNPTiBzY2hlbWEuXG4gICAqIEBmb3JtYXQgdXJpXG4gICAqL1xuICAkc2NoZW1hPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBWZWdhLUxpdGUgY29uZmlndXJhdGlvbiBvYmplY3QuICBUaGlzIHByb3BlcnR5IGNhbiBvbmx5IGJlIGRlZmluZWQgYXQgdGhlIHRvcC1sZXZlbCBvZiBhIHNwZWNpZmljYXRpb24uXG4gICAqL1xuICBjb25maWc/OiBDb25maWc7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VTcGVjIHtcbiAgLyoqXG4gICAqIFRpdGxlIGZvciB0aGUgcGxvdC5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nIHwgVGl0bGVQYXJhbXM7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIHZpc3VhbGl6YXRpb24gZm9yIGxhdGVyIHJlZmVyZW5jZS5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIG9mIHRoaXMgbWFyayBmb3IgY29tbWVudGluZyBwdXJwb3NlLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZXNjcmliaW5nIHRoZSBkYXRhIHNvdXJjZVxuICAgKi9cbiAgZGF0YT86IERhdGE7XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGRhdGEgdHJhbnNmb3JtYXRpb25zIHN1Y2ggYXMgZmlsdGVyIGFuZCBuZXcgZmllbGQgY2FsY3VsYXRpb24uXG4gICAqL1xuICB0cmFuc2Zvcm0/OiBUcmFuc2Zvcm1bXTtcbn1cblxuLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI1MDMpOiBNYWtlIHRoaXMgZ2VuZXJpYyBzbyB3ZSBjYW4gc3VwcG9ydCBzb21lIGZvcm0gb2YgdG9wLWRvd24gc2l6aW5nLlxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRTaXplTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiBhIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgKlxuICAgKiAtIElmIGEgdmlldydzIFtgYXV0b3NpemVgXShzaXplLmh0bWwjYXV0b3NpemUpIHR5cGUgaXMgYFwiZml0XCJgIG9yIGl0cyB4LWNoYW5uZWwgaGFzIGEgW2NvbnRpbnVvdXMgc2NhbGVdKHNjYWxlLmh0bWwjY29udGludW91cyksIHRoZSB3aWR0aCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBbYGNvbmZpZy52aWV3LndpZHRoYF0oc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gRm9yIHgtYXhpcyB3aXRoIGEgYmFuZCBvciBwb2ludCBzY2FsZTogaWYgW2ByYW5nZVN0ZXBgXShzY2FsZS5odG1sI2JhbmQpIGlzIGEgbnVtZXJpYyB2YWx1ZSBvciB1bnNwZWNpZmllZCwgdGhlIHdpZHRoIGlzIFtkZXRlcm1pbmVkIGJ5IHRoZSByYW5nZSBzdGVwLCBwYWRkaW5ncywgYW5kIHRoZSBjYXJkaW5hbGl0eSBvZiB0aGUgZmllbGQgbWFwcGVkIHRvIHgtY2hhbm5lbF0oc2NhbGUuaHRtbCNiYW5kKS4gICBPdGhlcndpc2UsIGlmIHRoZSBgcmFuZ2VTdGVwYCBpcyBgbnVsbGAsIHRoZSB3aWR0aCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBbYGNvbmZpZy52aWV3LndpZHRoYF0oc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gSWYgbm8gZmllbGQgaXMgbWFwcGVkIHRvIGB4YCBjaGFubmVsLCB0aGUgYHdpZHRoYCB3aWxsIGJlIHRoZSB2YWx1ZSBvZiBbYGNvbmZpZy5zY2FsZS50ZXh0WFJhbmdlU3RlcGBdKHNpemUuaHRtbCNkZWZhdWx0LXdpZHRoLWFuZC1oZWlnaHQpIGZvciBgdGV4dGAgbWFyayBhbmQgdGhlIHZhbHVlIG9mIGByYW5nZVN0ZXBgIGZvciBvdGhlciBtYXJrcy5cbiAgICpcbiAgICogX19Ob3RlOl9fIEZvciBwbG90cyB3aXRoIFtgcm93YCBhbmQgYGNvbHVtbmAgY2hhbm5lbHNdKGVuY29kaW5nLmh0bWwjZmFjZXQpLCB0aGlzIHJlcHJlc2VudHMgdGhlIHdpZHRoIG9mIGEgc2luZ2xlIHZpZXcuXG4gICAqXG4gICAqIF9fU2VlIGFsc286X18gVGhlIGRvY3VtZW50YXRpb24gZm9yIFt3aWR0aCBhbmQgaGVpZ2h0XShzaXplLmh0bWwpIGNvbnRhaW5zIG1vcmUgZXhhbXBsZXMuXG4gICAqL1xuICB3aWR0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiBhIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfX1xuICAgKiAtIElmIGEgdmlldydzIFtgYXV0b3NpemVgXShzaXplLmh0bWwjYXV0b3NpemUpIHR5cGUgaXMgYFwiZml0XCJgIG9yIGl0cyB5LWNoYW5uZWwgaGFzIGEgW2NvbnRpbnVvdXMgc2NhbGVdKHNjYWxlLmh0bWwjY29udGludW91cyksIHRoZSBoZWlnaHQgd2lsbCBiZSB0aGUgdmFsdWUgb2YgW2Bjb25maWcudmlldy5oZWlnaHRgXShzcGVjLmh0bWwjY29uZmlnKS5cbiAgICogLSBGb3IgeS1heGlzIHdpdGggYSBiYW5kIG9yIHBvaW50IHNjYWxlOiBpZiBbYHJhbmdlU3RlcGBdKHNjYWxlLmh0bWwjYmFuZCkgaXMgYSBudW1lcmljIHZhbHVlIG9yIHVuc3BlY2lmaWVkLCB0aGUgaGVpZ2h0IGlzIFtkZXRlcm1pbmVkIGJ5IHRoZSByYW5nZSBzdGVwLCBwYWRkaW5ncywgYW5kIHRoZSBjYXJkaW5hbGl0eSBvZiB0aGUgZmllbGQgbWFwcGVkIHRvIHktY2hhbm5lbF0oc2NhbGUuaHRtbCNiYW5kKS4gT3RoZXJ3aXNlLCBpZiB0aGUgYHJhbmdlU3RlcGAgaXMgYG51bGxgLCB0aGUgaGVpZ2h0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIFtgY29uZmlnLnZpZXcuaGVpZ2h0YF0oc3BlYy5odG1sI2NvbmZpZykuXG4gICAqIC0gSWYgbm8gZmllbGQgaXMgbWFwcGVkIHRvIGB5YCBjaGFubmVsLCB0aGUgYGhlaWdodGAgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHJhbmdlU3RlcGAuXG4gICAqXG4gICAqIF9fTm90ZV9fOiBGb3IgcGxvdHMgd2l0aCBbYHJvd2AgYW5kIGBjb2x1bW5gIGNoYW5uZWxzXShlbmNvZGluZy5odG1sI2ZhY2V0KSwgdGhpcyByZXByZXNlbnRzIHRoZSBoZWlnaHQgb2YgYSBzaW5nbGUgdmlldy5cbiAgICpcbiAgICogX19TZWUgYWxzbzpfXyBUaGUgZG9jdW1lbnRhdGlvbiBmb3IgW3dpZHRoIGFuZCBoZWlnaHRdKHNpemUuaHRtbCkgY29udGFpbnMgbW9yZSBleGFtcGxlcy5cbiAgICovXG4gIGhlaWdodD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljVW5pdFNwZWM8RSBleHRlbmRzIEVuY29kaW5nPGFueT4sIE0+IGV4dGVuZHMgQmFzZVNwZWMsIExheW91dFNpemVNaXhpbnMge1xuXG4gIC8qKlxuICAgKiBBIHN0cmluZyBkZXNjcmliaW5nIHRoZSBtYXJrIHR5cGUgKG9uZSBvZiBgXCJiYXJcImAsIGBcImNpcmNsZVwiYCwgYFwic3F1YXJlXCJgLCBgXCJ0aWNrXCJgLCBgXCJsaW5lXCJgLFxuICAgKiAqIGBcImFyZWFcImAsIGBcInBvaW50XCJgLCBgXCJydWxlXCJgLCBgXCJnZW9zaGFwZVwiYCwgYW5kIGBcInRleHRcImApIG9yIGEgW21hcmsgZGVmaW5pdGlvbiBvYmplY3RdKG1hcmsuaHRtbCNtYXJrLWRlZikuXG4gICAqL1xuICBtYXJrOiBNO1xuXG4gIC8qKlxuICAgKiBBIGtleS12YWx1ZSBtYXBwaW5nIGJldHdlZW4gZW5jb2RpbmcgY2hhbm5lbHMgYW5kIGRlZmluaXRpb24gb2YgZmllbGRzLlxuICAgKi9cbiAgZW5jb2Rpbmc6IEU7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZWZpbmluZyBwcm9wZXJ0aWVzIG9mIGdlb2dyYXBoaWMgcHJvamVjdGlvbi5cbiAgICpcbiAgICogV29ya3Mgd2l0aCBgXCJnZW9zaGFwZVwiYCBtYXJrcyBhbmQgYFwicG9pbnRcImAgb3IgYFwibGluZVwiYCBtYXJrcyB0aGF0IGhhdmUgYSBjaGFubmVsIChvbmUgb3IgbW9yZSBvZiBgXCJYXCJgLCBgXCJYMlwiYCwgYFwiWVwiYCwgYFwiWTJcImApIHdpdGggdHlwZSBgXCJsYXRpdHVkZVwiYCwgb3IgYFwibG9uZ2l0dWRlXCJgLlxuICAgKi9cbiAgcHJvamVjdGlvbj86IFByb2plY3Rpb247XG5cbiAgLyoqXG4gICAqIEEga2V5LXZhbHVlIG1hcHBpbmcgYmV0d2VlbiBzZWxlY3Rpb24gbmFtZXMgYW5kIGRlZmluaXRpb25zLlxuICAgKi9cbiAgc2VsZWN0aW9uPzoge1tuYW1lOiBzdHJpbmddOiBTZWxlY3Rpb25EZWZ9O1xufVxuXG5leHBvcnQgdHlwZSBVbml0U3BlYyA9IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxzdHJpbmcgfCBSZXBlYXRSZWY+LCBNYXJrIHwgTWFya0RlZj47XG5cbi8qKlxuICogVW5pdCBzcGVjIHRoYXQgY2FuIGhhdmUgYSBjb21wb3NpdGUgbWFyay5cbiAqL1xuZXhwb3J0IHR5cGUgQ29tcG9zaXRlVW5pdFNwZWMgPSBHZW5lcmljVW5pdFNwZWM8RW5jb2Rpbmc8c3RyaW5nIHwgUmVwZWF0UmVmPiwgQW55TWFyaz47XG5cbi8qKlxuICogVW5pdCBzcGVjIHRoYXQgY2FuIGhhdmUgYSBjb21wb3NpdGUgbWFyayBhbmQgcm93IG9yIGNvbHVtbiBjaGFubmVscy5cbiAqL1xuZXhwb3J0IHR5cGUgRmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjID0gR2VuZXJpY1VuaXRTcGVjPEVuY29kaW5nV2l0aEZhY2V0PHN0cmluZyB8IFJlcGVhdFJlZj4sIEFueU1hcms+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyaWNMYXllclNwZWM8VSBleHRlbmRzIEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IGV4dGVuZHMgQmFzZVNwZWMsIExheW91dFNpemVNaXhpbnMge1xuICAvKipcbiAgICogTGF5ZXIgb3Igc2luZ2xlIHZpZXcgc3BlY2lmaWNhdGlvbnMgdG8gYmUgbGF5ZXJlZC5cbiAgICpcbiAgICogX19Ob3RlX186IFNwZWNpZmljYXRpb25zIGluc2lkZSBgbGF5ZXJgIGNhbm5vdCB1c2UgYHJvd2AgYW5kIGBjb2x1bW5gIGNoYW5uZWxzIGFzIGxheWVyaW5nIGZhY2V0IHNwZWNpZmljYXRpb25zIGlzIG5vdCBhbGxvd2VkLlxuICAgKi9cbiAgbGF5ZXI6IChHZW5lcmljTGF5ZXJTcGVjPFU+IHwgVSlbXTtcblxuICAvKipcbiAgICogU2NhbGUsIGF4aXMsIGFuZCBsZWdlbmQgcmVzb2x1dGlvbnMgZm9yIGxheWVycy5cbiAgICovXG4gIHJlc29sdmU/OiBSZXNvbHZlO1xufVxuXG5leHBvcnQgdHlwZSBMYXllclNwZWMgPSBHZW5lcmljTGF5ZXJTcGVjPFVuaXRTcGVjPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljRmFjZXRTcGVjPFUgZXh0ZW5kcyBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiBleHRlbmRzIEJhc2VTcGVjIHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBtYXBwaW5ncyBiZXR3ZWVuIGByb3dgIGFuZCBgY29sdW1uYCBjaGFubmVscyBhbmQgdGhlaXIgZmllbGQgZGVmaW5pdGlvbnMuXG4gICAqL1xuICBmYWNldDogRmFjZXRNYXBwaW5nPHN0cmluZyB8IFJlcGVhdFJlZj47XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lmaWNhdGlvbiBvZiB0aGUgdmlldyB0aGF0IGdldHMgZmFjZXRlZC5cbiAgICovXG4gIHNwZWM6IEdlbmVyaWNMYXllclNwZWM8VT4gfCBVO1xuICAvLyBUT0RPOiByZXBsYWNlIHRoaXMgd2l0aCBHZW5lcmljU3BlYzxVPiBvbmNlIHdlIHN1cHBvcnQgYWxsIGNhc2VzO1xuXG4gIC8qKlxuICAgKiBTY2FsZSwgYXhpcywgYW5kIGxlZ2VuZCByZXNvbHV0aW9ucyBmb3IgZmFjZXRzLlxuICAgKi9cbiAgcmVzb2x2ZT86IFJlc29sdmU7XG59XG5cbmV4cG9ydCB0eXBlIEZhY2V0U3BlYyA9IEdlbmVyaWNGYWNldFNwZWM8VW5pdFNwZWM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyaWNSZXBlYXRTcGVjPFUgZXh0ZW5kcyBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiBleHRlbmRzIEJhc2VTcGVjIHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IGRlc2NyaWJlcyB3aGF0IGZpZWxkcyBzaG91bGQgYmUgcmVwZWF0ZWQgaW50byB2aWV3cyB0aGF0IGFyZSBsYWlkIG91dCBhcyBhIGByb3dgIG9yIGBjb2x1bW5gLlxuICAgKi9cbiAgcmVwZWF0OiBSZXBlYXQ7XG5cbiAgc3BlYzogR2VuZXJpY1NwZWM8VT47XG5cbiAgLyoqXG4gICAqIFNjYWxlIGFuZCBsZWdlbmQgcmVzb2x1dGlvbnMgZm9yIHJlcGVhdGVkIGNoYXJ0cy5cbiAgICovXG4gIHJlc29sdmU/OiBSZXNvbHZlO1xufVxuXG5leHBvcnQgdHlwZSBSZXBlYXRTcGVjID0gR2VuZXJpY1JlcGVhdFNwZWM8VW5pdFNwZWM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyaWNWQ29uY2F0U3BlYzxVIGV4dGVuZHMgR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4gZXh0ZW5kcyBCYXNlU3BlYyB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2Ygdmlld3MgdGhhdCBzaG91bGQgYmUgY29uY2F0ZW5hdGVkIGFuZCBwdXQgaW50byBhIGNvbHVtbi5cbiAgICovXG4gIHZjb25jYXQ6IChHZW5lcmljU3BlYzxVPilbXTtcblxuICAvKipcbiAgICogU2NhbGUsIGF4aXMsIGFuZCBsZWdlbmQgcmVzb2x1dGlvbnMgZm9yIHZlcnRpY2FsbHkgY29uY2F0ZW5hdGVkIGNoYXJ0cy5cbiAgICovXG4gIHJlc29sdmU/OiBSZXNvbHZlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyaWNIQ29uY2F0U3BlYzxVIGV4dGVuZHMgR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4gZXh0ZW5kcyBCYXNlU3BlYyB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2Ygdmlld3MgdGhhdCBzaG91bGQgYmUgY29uY2F0ZW5hdGVkIGFuZCBwdXQgaW50byBhIHJvdy5cbiAgICovXG4gIGhjb25jYXQ6IChHZW5lcmljU3BlYzxVPilbXTtcblxuICAvKipcbiAgICogU2NhbGUsIGF4aXMsIGFuZCBsZWdlbmQgcmVzb2x1dGlvbnMgZm9yIGhvcml6b250YWxseSBjb25jYXRlbmF0ZWQgY2hhcnRzLlxuICAgKi9cbiAgcmVzb2x2ZT86IFJlc29sdmU7XG59XG5cbmV4cG9ydCB0eXBlIENvbmNhdFNwZWMgPSBHZW5lcmljVkNvbmNhdFNwZWM8VW5pdFNwZWM+IHwgR2VuZXJpY0hDb25jYXRTcGVjPFVuaXRTcGVjPjtcblxuZXhwb3J0IHR5cGUgR2VuZXJpY1NwZWM8VSBleHRlbmRzIEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+ID0gVSB8IEdlbmVyaWNMYXllclNwZWM8VT4gfCBHZW5lcmljRmFjZXRTcGVjPFU+IHwgR2VuZXJpY1JlcGVhdFNwZWM8VT4gfCBHZW5lcmljVkNvbmNhdFNwZWM8VT4gfCBHZW5lcmljSENvbmNhdFNwZWM8VT47XG5cbmV4cG9ydCB0eXBlIFNwZWMgPSBHZW5lcmljU3BlYzxVbml0U3BlYz47XG5cbmV4cG9ydCB0eXBlIFRvcExldmVsRXh0ZW5kZWRTcGVjID0gVG9wTGV2ZWw8RmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjPiB8IFRvcExldmVsPEdlbmVyaWNMYXllclNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+PiB8IFRvcExldmVsPEdlbmVyaWNGYWNldFNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+PiB8IFRvcExldmVsPEdlbmVyaWNSZXBlYXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPj4gfCBUb3BMZXZlbDxHZW5lcmljVkNvbmNhdFNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+PiB8IFRvcExldmVsPEdlbmVyaWNIQ29uY2F0U3BlYzxDb21wb3NpdGVVbml0U3BlYz4+O1xuXG4vKiBDdXN0b20gdHlwZSBndWFyZHMgKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNGYWNldFNwZWMoc3BlYzogQmFzZVNwZWMpOiBzcGVjIGlzIEdlbmVyaWNGYWNldFNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4ge1xuICByZXR1cm4gc3BlY1snZmFjZXQnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbml0U3BlYyhzcGVjOiBCYXNlU3BlYyk6IHNwZWMgaXMgRmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjIHwgVW5pdFNwZWMge1xuICByZXR1cm4gISFzcGVjWydtYXJrJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xheWVyU3BlYyhzcGVjOiBCYXNlU3BlYyk6IHNwZWMgaXMgR2VuZXJpY0xheWVyU3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiB7XG4gIHJldHVybiBzcGVjWydsYXllciddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlcGVhdFNwZWMoc3BlYzogQmFzZVNwZWMpOiBzcGVjIGlzIEdlbmVyaWNSZXBlYXRTcGVjPEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+IHtcbiAgcmV0dXJuIHNwZWNbJ3JlcGVhdCddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbmNhdFNwZWMoc3BlYzogQmFzZVNwZWMpOiBzcGVjIGlzIEdlbmVyaWNWQ29uY2F0U3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiB8IEdlbmVyaWNIQ29uY2F0U3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiB7XG4gIHJldHVybiBpc1ZDb25jYXRTcGVjKHNwZWMpIHx8IGlzSENvbmNhdFNwZWMoc3BlYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZDb25jYXRTcGVjKHNwZWM6IEJhc2VTcGVjKTogc3BlYyBpcyBHZW5lcmljVkNvbmNhdFNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4ge1xuICByZXR1cm4gc3BlY1sndmNvbmNhdCddICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hDb25jYXRTcGVjKHNwZWM6IEJhc2VTcGVjKTogc3BlYyBpcyBHZW5lcmljSENvbmNhdFNwZWM8R2VuZXJpY1VuaXRTcGVjPGFueSwgYW55Pj4ge1xuICByZXR1cm4gc3BlY1snaGNvbmNhdCddICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRGVjb21wb3NlIGV4dGVuZGVkIHVuaXQgc3BlY3MgaW50byBjb21wb3NpdGlvbiBvZiBwdXJlIHVuaXQgc3BlY3MuXG4gKi9cbi8vIFRPRE86IGNvbnNpZGVyIG1vdmluZyB0aGlzIHRvIGFub3RoZXIgZmlsZS4gIE1heWJlIHZsLnNwZWMubm9ybWFsaXplIG9yIHZsLm5vcm1hbGl6ZVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShzcGVjOiBUb3BMZXZlbEV4dGVuZGVkU3BlYywgY29uZmlnOiBDb25maWcpOiBTcGVjIHtcbiAgaWYgKGlzRmFjZXRTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUZhY2V0KHNwZWMsIGNvbmZpZyk7XG4gIH1cbiAgaWYgKGlzTGF5ZXJTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUxheWVyKHNwZWMsIGNvbmZpZyk7XG4gIH1cbiAgaWYgKGlzUmVwZWF0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBub3JtYWxpemVSZXBlYXQoc3BlYywgY29uZmlnKTtcbiAgfVxuICBpZiAoaXNWQ29uY2F0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBub3JtYWxpemVWQ29uY2F0KHNwZWMsIGNvbmZpZyk7XG4gIH1cbiAgaWYgKGlzSENvbmNhdFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplSENvbmNhdChzcGVjLCBjb25maWcpO1xuICB9XG4gIGlmIChpc1VuaXRTcGVjKHNwZWMpKSB7XG4gICAgY29uc3QgaGFzUm93ID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIFJPVyk7XG4gICAgY29uc3QgaGFzQ29sdW1uID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIENPTFVNTik7XG5cbiAgICBpZiAoaGFzUm93IHx8IGhhc0NvbHVtbikge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZUZhY2V0ZWRVbml0KHNwZWMsIGNvbmZpZyk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVOb25GYWNldFVuaXQoc3BlYywgY29uZmlnKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2UuSU5WQUxJRF9TUEVDKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRmFjZXQoc3BlYzogR2VuZXJpY0ZhY2V0U3BlYzxDb21wb3NpdGVVbml0U3BlYz4sIGNvbmZpZzogQ29uZmlnKTogRmFjZXRTcGVjIHtcbiAgY29uc3Qge3NwZWM6IHN1YnNwZWMsIC4uLnJlc3R9ID0gc3BlYztcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIC8vIFRPRE86IHJlbW92ZSBcImFueVwiIG9uY2Ugd2Ugc3VwcG9ydCBhbGwgZmFjZXQgbGlzdGVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2EtbGl0ZS9pc3N1ZXMvMjc2MFxuICAgIHNwZWM6IG5vcm1hbGl6ZShzdWJzcGVjLCBjb25maWcpIGFzIGFueVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVMYXllcihzcGVjOiBHZW5lcmljTGF5ZXJTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPiwgY29uZmlnOiBDb25maWcpOiBMYXllclNwZWMge1xuICBjb25zdCB7bGF5ZXI6IGxheWVyLCAuLi5yZXN0fSA9IHNwZWM7XG4gIHJldHVybiB7XG4gICAgLi4ucmVzdCxcbiAgICBsYXllcjogbGF5ZXIubWFwKChzdWJzcGVjKSA9PiBpc0xheWVyU3BlYyhzdWJzcGVjKSA/IG5vcm1hbGl6ZUxheWVyKHN1YnNwZWMsIGNvbmZpZykgOiBub3JtYWxpemVOb25GYWNldFVuaXQoc3Vic3BlYywgY29uZmlnKSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUmVwZWF0KHNwZWM6IEdlbmVyaWNSZXBlYXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPiwgY29uZmlnOiBDb25maWcpOiBSZXBlYXRTcGVjIHtcbiAgY29uc3Qge3NwZWM6IHN1YnNwZWMsIC4uLnJlc3R9ID0gc3BlYztcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIHNwZWM6IG5vcm1hbGl6ZShzdWJzcGVjLCBjb25maWcpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZDb25jYXQoc3BlYzogR2VuZXJpY1ZDb25jYXRTcGVjPENvbXBvc2l0ZVVuaXRTcGVjPiwgY29uZmlnOiBDb25maWcpOiBDb25jYXRTcGVjIHtcbiAgY29uc3Qge3Zjb25jYXQ6IHZjb25jYXQsIC4uLnJlc3R9ID0gc3BlYztcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIHZjb25jYXQ6IHZjb25jYXQubWFwKChzdWJzcGVjKSA9PiBub3JtYWxpemUoc3Vic3BlYywgY29uZmlnKSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplSENvbmNhdChzcGVjOiBHZW5lcmljSENvbmNhdFNwZWM8Q29tcG9zaXRlVW5pdFNwZWM+LCBjb25maWc6IENvbmZpZyk6IENvbmNhdFNwZWMge1xuICBjb25zdCB7aGNvbmNhdDogaGNvbmNhdCwgLi4ucmVzdH0gPSBzcGVjO1xuICByZXR1cm4ge1xuICAgIC4uLnJlc3QsXG4gICAgaGNvbmNhdDogaGNvbmNhdC5tYXAoKHN1YnNwZWMpID0+IG5vcm1hbGl6ZShzdWJzcGVjLCBjb25maWcpKVxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVGYWNldGVkVW5pdChzcGVjOiBGYWNldGVkQ29tcG9zaXRlVW5pdFNwZWMsIGNvbmZpZzogQ29uZmlnKTogRmFjZXRTcGVjIHtcbiAgLy8gTmV3IGVuY29kaW5nIGluIHRoZSBpbnNpZGUgc3BlYyBzaG91bGQgbm90IGNvbnRhaW4gcm93IC8gY29sdW1uXG4gIC8vIGFzIHJvdy9jb2x1bW4gc2hvdWxkIGJlIG1vdmVkIHRvIGZhY2V0XG4gIGNvbnN0IHtyb3c6IHJvdywgY29sdW1uOiBjb2x1bW4sIC4uLmVuY29kaW5nfSA9IHNwZWMuZW5jb2Rpbmc7XG5cbiAgLy8gTWFyayBhbmQgZW5jb2Rpbmcgc2hvdWxkIGJlIG1vdmVkIGludG8gdGhlIGlubmVyIHNwZWNcbiAgY29uc3Qge21hcmssIHdpZHRoLCBwcm9qZWN0aW9uLCBoZWlnaHQsIHNlbGVjdGlvbiwgZW5jb2Rpbmc6IF8sIC4uLm91dGVyU3BlY30gPSBzcGVjO1xuXG4gIHJldHVybiB7XG4gICAgLi4ub3V0ZXJTcGVjLFxuICAgIGZhY2V0OiB7XG4gICAgICAuLi4ocm93ID8ge3Jvd30gOiB7fSksXG4gICAgICAuLi4oY29sdW1uID8ge2NvbHVtbn06IHt9KSxcbiAgICB9LFxuICAgIHNwZWM6IG5vcm1hbGl6ZU5vbkZhY2V0VW5pdCh7XG4gICAgICAuLi4ocHJvamVjdGlvbiA/IHtwcm9qZWN0aW9ufSA6IHt9KSxcbiAgICAgIG1hcmssXG4gICAgICAuLi4od2lkdGggPyB7d2lkdGh9IDoge30pLFxuICAgICAgLi4uKGhlaWdodCA/IHtoZWlnaHR9IDoge30pLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICAuLi4oc2VsZWN0aW9uID8ge3NlbGVjdGlvbn0gOiB7fSlcbiAgICB9LCBjb25maWcpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzTm9uRmFjZXRVbml0U3BlY1dpdGhQcmltaXRpdmVNYXJrKHNwZWM6IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxGaWVsZD4sIEFueU1hcms+KTpcbiAgc3BlYyBpcyBHZW5lcmljVW5pdFNwZWM8RW5jb2Rpbmc8RmllbGQ+LCBNYXJrPiB7XG4gICAgcmV0dXJuIGlzUHJpbWl0aXZlTWFyayhzcGVjLm1hcmspO1xufVxuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5vbkZhY2V0VW5pdChzcGVjOiBHZW5lcmljVW5pdFNwZWM8RW5jb2Rpbmc8RmllbGQ+LCBBbnlNYXJrPiwgY29uZmlnOiBDb25maWcpIHtcbiAgaWYgKGlzTm9uRmFjZXRVbml0U3BlY1dpdGhQcmltaXRpdmVNYXJrKHNwZWMpKSB7XG4gICAgLy8gVE9ETzogdGhvcm91Z2hseSB0ZXN0XG4gICAgaWYgKGlzUmFuZ2VkKHNwZWMuZW5jb2RpbmcpKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplUmFuZ2VkVW5pdChzcGVjKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdmVybGF5Q29uZmlnOiBPdmVybGF5Q29uZmlnID0gY29uZmlnICYmIGNvbmZpZy5vdmVybGF5O1xuICAgIGNvbnN0IG92ZXJsYXlXaXRoTGluZSA9IG92ZXJsYXlDb25maWcgJiYgc3BlYy5tYXJrID09PSBBUkVBICYmXG4gICAgICBjb250YWlucyhbJ2xpbmVwb2ludCcsICdsaW5lJ10sIG92ZXJsYXlDb25maWcuYXJlYSk7XG4gICAgY29uc3Qgb3ZlcmxheVdpdGhQb2ludCA9IG92ZXJsYXlDb25maWcgJiYgKFxuICAgICAgKG92ZXJsYXlDb25maWcubGluZSAmJiBzcGVjLm1hcmsgPT09IExJTkUpIHx8XG4gICAgICAob3ZlcmxheUNvbmZpZy5hcmVhID09PSAnbGluZXBvaW50JyAmJiBzcGVjLm1hcmsgPT09IEFSRUEpXG4gICAgKTtcbiAgICAvLyBUT0RPOiBjb25zaWRlciBtb3ZpbmcgdGhpcyB0byBiZWNvbWUgYW5vdGhlciBjYXNlIG9mIGNvbXBvc2l0ZU1hcmtcbiAgICBpZiAob3ZlcmxheVdpdGhQb2ludCB8fCBvdmVybGF5V2l0aExpbmUpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVPdmVybGF5KHNwZWMsIG92ZXJsYXlXaXRoUG9pbnQsIG92ZXJsYXlXaXRoTGluZSwgY29uZmlnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3BlYzsgLy8gTm90aGluZyB0byBub3JtYWxpemVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29tcG9zaXRlTWFyay5ub3JtYWxpemUoc3BlYywgY29uZmlnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVSYW5nZWRVbml0KHNwZWM6IFVuaXRTcGVjKSB7XG4gIGNvbnN0IGhhc1ggPSBjaGFubmVsSGFzRmllbGQoc3BlYy5lbmNvZGluZywgWCk7XG4gIGNvbnN0IGhhc1kgPSBjaGFubmVsSGFzRmllbGQoc3BlYy5lbmNvZGluZywgWSk7XG4gIGNvbnN0IGhhc1gyID0gY2hhbm5lbEhhc0ZpZWxkKHNwZWMuZW5jb2RpbmcsIFgyKTtcbiAgY29uc3QgaGFzWTIgPSBjaGFubmVsSGFzRmllbGQoc3BlYy5lbmNvZGluZywgWTIpO1xuICBpZiAoKGhhc1gyICYmICFoYXNYKSB8fCAoaGFzWTIgJiYgIWhhc1kpKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFNwZWMgPSBkdXBsaWNhdGUoc3BlYyk7XG4gICAgaWYgKGhhc1gyICYmICFoYXNYKSB7XG4gICAgICBub3JtYWxpemVkU3BlYy5lbmNvZGluZy54ID0gbm9ybWFsaXplZFNwZWMuZW5jb2RpbmcueDI7XG4gICAgICBkZWxldGUgbm9ybWFsaXplZFNwZWMuZW5jb2RpbmcueDI7XG4gICAgfVxuICAgIGlmIChoYXNZMiAmJiAhaGFzWSkge1xuICAgICAgbm9ybWFsaXplZFNwZWMuZW5jb2RpbmcueSA9IG5vcm1hbGl6ZWRTcGVjLmVuY29kaW5nLnkyO1xuICAgICAgZGVsZXRlIG5vcm1hbGl6ZWRTcGVjLmVuY29kaW5nLnkyO1xuICAgIH1cblxuICAgIHJldHVybiBub3JtYWxpemVkU3BlYztcbiAgfVxuICByZXR1cm4gc3BlYztcbn1cblxuXG4vLyBGSVhNRSgjMTgwNCk6IHJlLWRlc2lnbiB0aGlzXG5mdW5jdGlvbiBub3JtYWxpemVPdmVybGF5KHNwZWM6IFVuaXRTcGVjLCBvdmVybGF5V2l0aFBvaW50OiBib29sZWFuLCBvdmVybGF5V2l0aExpbmU6IGJvb2xlYW4sIGNvbmZpZzogQ29uZmlnKTogTGF5ZXJTcGVjIHtcbiAgLy8gXyBpcyB1c2VkIHRvIGRlbm90ZSBhIGRyb3BwZWQgcHJvcGVydHkgb2YgdGhlIHVuaXQgc3BlY1xuICAvLyB3aGljaCBzaG91bGQgbm90IGJlIGNhcnJpZWQgb3ZlciB0byB0aGUgbGF5ZXIgc3BlY1xuICBjb25zdCB7bWFyaywgc2VsZWN0aW9uLCBwcm9qZWN0aW9uLCBlbmNvZGluZywgLi4ub3V0ZXJTcGVjfSA9IHNwZWM7XG4gIGNvbnN0IGxheWVyID0gW3ttYXJrLCBlbmNvZGluZ31dO1xuXG4gIC8vIE5lZWQgdG8gY29weSBzdGFjayBjb25maWcgdG8gb3ZlcmxheWVkIGxheWVyXG4gIGNvbnN0IHN0YWNrUHJvcHMgPSBzdGFjayhtYXJrLCBlbmNvZGluZywgY29uZmlnID8gY29uZmlnLnN0YWNrIDogdW5kZWZpbmVkKTtcblxuICBsZXQgb3ZlcmxheUVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmIChzdGFja1Byb3BzKSB7XG4gICAgY29uc3Qge2ZpZWxkQ2hhbm5lbDogc3RhY2tGaWVsZENoYW5uZWwsIG9mZnNldH0gPSBzdGFja1Byb3BzO1xuICAgIG92ZXJsYXlFbmNvZGluZyA9IHtcbiAgICAgIC4uLmVuY29kaW5nLFxuICAgICAgW3N0YWNrRmllbGRDaGFubmVsXToge1xuICAgICAgICAuLi5lbmNvZGluZ1tzdGFja0ZpZWxkQ2hhbm5lbF0sXG4gICAgICAgIC4uLihvZmZzZXQgPyB7c3RhY2s6IG9mZnNldH0gOiB7fSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKG92ZXJsYXlXaXRoTGluZSkge1xuICAgIGxheWVyLnB1c2goe1xuICAgICAgLi4uKHByb2plY3Rpb24gPyB7cHJvamVjdGlvbn0gOiB7fSksXG4gICAgICBtYXJrOiB7XG4gICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgc3R5bGU6ICdsaW5lT3ZlcmxheSdcbiAgICAgIH0sXG4gICAgICAuLi4oc2VsZWN0aW9uID8ge3NlbGVjdGlvbn0gOiB7fSksXG4gICAgICBlbmNvZGluZzogb3ZlcmxheUVuY29kaW5nXG4gICAgfSk7XG4gIH1cbiAgaWYgKG92ZXJsYXlXaXRoUG9pbnQpIHtcbiAgICBsYXllci5wdXNoKHtcbiAgICAgIC4uLihwcm9qZWN0aW9uID8ge3Byb2plY3Rpb259IDoge30pLFxuICAgICAgbWFyazoge1xuICAgICAgICB0eXBlOiAncG9pbnQnLFxuICAgICAgICBmaWxsZWQ6IHRydWUsXG4gICAgICAgIHN0eWxlOiAncG9pbnRPdmVybGF5J1xuICAgICAgfSxcbiAgICAgIC4uLihzZWxlY3Rpb24gPyB7c2VsZWN0aW9ufSA6IHt9KSxcbiAgICAgIGVuY29kaW5nOiBvdmVybGF5RW5jb2RpbmdcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4ub3V0ZXJTcGVjLFxuICAgIGxheWVyXG4gIH07XG59XG5cbi8vIFRPRE86IGFkZCB2bC5zcGVjLnZhbGlkYXRlICYgbW92ZSBzdHVmZiBmcm9tIHZsLnZhbGlkYXRlIHRvIGhlcmVcblxuLyogQWNjdW11bGF0ZSBub24tZHVwbGljYXRlIGZpZWxkRGVmcyBpbiBhIGRpY3Rpb25hcnkgKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGUoZGljdDogYW55LCBkZWZzOiBGaWVsZERlZjxGaWVsZD5bXSk6IGFueSB7XG4gIGRlZnMuZm9yRWFjaChmdW5jdGlvbihmaWVsZERlZikge1xuICAgIC8vIENvbnNpZGVyIG9ubHkgcHVyZSBmaWVsZERlZiBwcm9wZXJ0aWVzIChpZ25vcmluZyBzY2FsZSwgYXhpcywgbGVnZW5kKVxuICAgIGNvbnN0IHB1cmVGaWVsZERlZiA9IFsnZmllbGQnLCAndHlwZScsICd2YWx1ZScsICd0aW1lVW5pdCcsICdiaW4nLCAnYWdncmVnYXRlJ10ucmVkdWNlKChmLCBrZXkpID0+IHtcbiAgICAgIGlmIChmaWVsZERlZltrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZltrZXldID0gZmllbGREZWZba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBrZXkgPSBoYXNoKHB1cmVGaWVsZERlZik7XG4gICAgZGljdFtrZXldID0gZGljdFtrZXldIHx8IGZpZWxkRGVmO1xuICB9KTtcbiAgcmV0dXJuIGRpY3Q7XG59XG5cbi8qIFJlY3Vyc2l2ZWx5IGdldCBmaWVsZERlZnMgZnJvbSBhIHNwZWMsIHJldHVybnMgYSBkaWN0aW9uYXJ5IG9mIGZpZWxkRGVmcyAqL1xuZnVuY3Rpb24gZmllbGREZWZJbmRleDxUPihzcGVjOiBHZW5lcmljU3BlYzxHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+PiwgZGljdDogRGljdDxGaWVsZERlZjxUPj4gPSB7fSk6IERpY3Q8RmllbGREZWY8VD4+IHtcbiAgLy8gRklYTUUoaHR0cHM6Ly9naXRodWIuY29tL3ZlZ2EvdmVnYS1saXRlL2lzc3Vlcy8yMjA3KTogU3VwcG9ydCBmaWVsZERlZkluZGV4IGZvciByZXBlYXRcbiAgaWYgKGlzTGF5ZXJTcGVjKHNwZWMpKSB7XG4gICAgc3BlYy5sYXllci5mb3JFYWNoKGxheWVyID0+IHtcbiAgICAgIGlmIChpc1VuaXRTcGVjKGxheWVyKSkge1xuICAgICAgICBhY2N1bXVsYXRlKGRpY3QsIHZsRW5jb2RpbmcuZmllbGREZWZzKGxheWVyLmVuY29kaW5nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZERlZkluZGV4KGxheWVyLCBkaWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc0ZhY2V0U3BlYyhzcGVjKSkge1xuICAgIGFjY3VtdWxhdGUoZGljdCwgdmxFbmNvZGluZy5maWVsZERlZnMoc3BlYy5mYWNldCkpO1xuICAgIGZpZWxkRGVmSW5kZXgoc3BlYy5zcGVjLCBkaWN0KTtcbiAgfSBlbHNlIGlmIChpc1JlcGVhdFNwZWMoc3BlYykpIHtcbiAgICBmaWVsZERlZkluZGV4KHNwZWMuc3BlYywgZGljdCk7XG4gIH0gZWxzZSBpZiAoaXNDb25jYXRTcGVjKHNwZWMpKSB7XG4gICAgY29uc3QgY2hpbGRTcGVjID0gaXNWQ29uY2F0U3BlYyhzcGVjKSA/IHNwZWMudmNvbmNhdCA6IHNwZWMuaGNvbmNhdDtcbiAgICBjaGlsZFNwZWMuZm9yRWFjaChjaGlsZCA9PiBmaWVsZERlZkluZGV4KGNoaWxkLCBkaWN0KSk7XG4gIH0gZWxzZSB7IC8vIFVuaXQgU3BlY1xuICAgIGFjY3VtdWxhdGUoZGljdCwgdmxFbmNvZGluZy5maWVsZERlZnMoc3BlYy5lbmNvZGluZykpO1xuICB9XG4gIHJldHVybiBkaWN0O1xufVxuXG4vKiBSZXR1cm5zIGFsbCBub24tZHVwbGljYXRlIGZpZWxkRGVmcyBpbiBhIHNwZWMgaW4gYSBmbGF0IGFycmF5ICovXG5leHBvcnQgZnVuY3Rpb24gZmllbGREZWZzKHNwZWM6IEdlbmVyaWNTcGVjPEdlbmVyaWNVbml0U3BlYzxhbnksIGFueT4+KTogRmllbGREZWY8YW55PltdIHtcbiAgcmV0dXJuIHZhbHMoZmllbGREZWZJbmRleChzcGVjKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YWNrZWQoc3BlYzogVG9wTGV2ZWw8RmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjPiwgY29uZmlnPzogQ29uZmlnKTogYm9vbGVhbiB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCBzcGVjLmNvbmZpZztcbiAgaWYgKGlzUHJpbWl0aXZlTWFyayhzcGVjLm1hcmspKSB7XG4gICAgcmV0dXJuIHN0YWNrKHNwZWMubWFyaywgc3BlYy5lbmNvZGluZyxcbiAgICAgICAgICAgIGNvbmZpZyA/IGNvbmZpZy5zdGFjayA6IHVuZGVmaW5lZFxuICAgICAgICAgICkgIT09IG51bGw7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var aggregate_1 = __webpack_require__(13);
	var channel_1 = __webpack_require__(23);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var mark_1 = __webpack_require__(25);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var STACK_OFFSET_INDEX = {
	    zero: 1,
	    center: 1,
	    normalize: 1
	};
	function isStackOffset(s) {
	    return !!STACK_OFFSET_INDEX[s];
	}
	exports.isStackOffset = isStackOffset;
	exports.STACKABLE_MARKS = [mark_1.BAR, mark_1.AREA, mark_1.RULE, mark_1.POINT, mark_1.CIRCLE, mark_1.SQUARE, mark_1.LINE, mark_1.TEXT, mark_1.TICK];
	exports.STACK_BY_DEFAULT_MARKS = [mark_1.BAR, mark_1.AREA];
	function potentialStackedChannel(encoding) {
	    var xDef = encoding.x;
	    var yDef = encoding.y;
	    if (fielddef_1.isFieldDef(xDef) && fielddef_1.isFieldDef(yDef)) {
	        if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {
	            if (xDef.stack) {
	                return 'x';
	            }
	            else if (yDef.stack) {
	                return 'y';
	            }
	            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y
	            if ((!!xDef.aggregate) !== (!!yDef.aggregate)) {
	                return xDef.aggregate ? 'x' : 'y';
	            }
	        }
	        else if (xDef.type === 'quantitative') {
	            return 'x';
	        }
	        else if (yDef.type === 'quantitative') {
	            return 'y';
	        }
	    }
	    else if (fielddef_1.isFieldDef(xDef) && xDef.type === 'quantitative') {
	        return 'x';
	    }
	    else if (fielddef_1.isFieldDef(yDef) && yDef.type === 'quantitative') {
	        return 'y';
	    }
	    return undefined;
	}
	// Note: CompassQL uses this method and only pass in required properties of each argument object.
	// If required properties change, make sure to update CompassQL.
	function stack(m, encoding, stackConfig) {
	    var mark = mark_1.isMarkDef(m) ? m.type : m;
	    // Should have stackable mark
	    if (!util_1.contains(exports.STACKABLE_MARKS, mark)) {
	        return null;
	    }
	    var fieldChannel = potentialStackedChannel(encoding);
	    if (!fieldChannel) {
	        return null;
	    }
	    var stackedFieldDef = encoding[fieldChannel];
	    var stackedField = fielddef_1.isStringFieldDef(stackedFieldDef) ? fielddef_1.vgField(stackedFieldDef, {}) : undefined;
	    var dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';
	    var dimensionDef = encoding[dimensionChannel];
	    var dimensionField = fielddef_1.isStringFieldDef(dimensionDef) ? fielddef_1.vgField(dimensionDef, {}) : undefined;
	    // Should have grouping level of detail that is different from the dimension field
	    var stackBy = channel_1.NONPOSITION_CHANNELS.reduce(function (sc, channel) {
	        if (encoding_1.channelHasField(encoding, channel)) {
	            var channelDef = encoding[channel];
	            (util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (cDef) {
	                var fieldDef = fielddef_1.getFieldDef(cDef);
	                if (fieldDef.aggregate) {
	                    return;
	                }
	                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat
	                var f = fielddef_1.isStringFieldDef(fieldDef) ? fielddef_1.vgField(fieldDef, {}) : undefined;
	                if (
	                // if fielddef is a repeat, just include it in the stack by
	                !f ||
	                    // otherwise, the field must be different from x and y fields.
	                    (f !== dimensionField && f !== stackedField)) {
	                    sc.push({ channel: channel, fieldDef: fieldDef });
	                }
	            });
	        }
	        return sc;
	    }, []);
	    if (stackBy.length === 0) {
	        return null;
	    }
	    // Automatically determine offset
	    var offset = undefined;
	    if (stackedFieldDef.stack !== undefined) {
	        offset = stackedFieldDef.stack;
	    }
	    else if (util_1.contains(exports.STACK_BY_DEFAULT_MARKS, mark)) {
	        // Bar and Area with sum ops are automatically stacked by default
	        offset = stackConfig === undefined ? 'zero' : stackConfig;
	    }
	    else {
	        offset = stackConfig;
	    }
	    if (!offset || !isStackOffset(offset)) {
	        return null;
	    }
	    // If stacked, check scale type if it is linear
	    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== scale_1.ScaleType.LINEAR) {
	        log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));
	        return null;
	    }
	    // Check if it is a ranged mark
	    if (encoding_1.channelHasField(encoding, fieldChannel === channel_1.X ? channel_1.X2 : channel_1.Y2)) {
	        log.warn(log.message.cannotStackRangedMark(fieldChannel));
	        return null;
	    }
	    // Warn if stacking summative aggregate
	    if (stackedFieldDef.aggregate && !util_1.contains(aggregate_1.SUM_OPS, stackedFieldDef.aggregate)) {
	        log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));
	    }
	    return {
	        groupbyChannel: dimensionDef ? dimensionChannel : undefined,
	        fieldChannel: fieldChannel,
	        impute: util_1.contains(['area', 'line'], mark),
	        stackBy: stackBy,
	        offset: offset
	    };
	}
	exports.stack = stack;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(45);
	var log = __webpack_require__(29);
	function _normalizeAutoSize(autosize) {
	    return util_1.isString(autosize) ? { type: autosize } : autosize || {};
	}
	function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer) {
	    if (isUnitOrLayer === void 0) { isUnitOrLayer = true; }
	    var autosize = __assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));
	    if (autosize.type === 'fit') {
	        if (!isUnitOrLayer) {
	            log.warn(log.message.FIT_NON_SINGLE);
	            autosize.type = 'pad';
	        }
	    }
	    return autosize;
	}
	exports.normalizeAutoSize = normalizeAutoSize;
	var TOP_LEVEL_PROPERTIES = [
	    'background', 'padding'
	    // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
	];
	function extractTopLevelProperties(t) {
	    return TOP_LEVEL_PROPERTIES.reduce(function (o, p) {
	        if (t && t[p] !== undefined) {
	            o[p] = t[p];
	        }
	        return o;
	    }, {});
	}
	exports.extractTopLevelProperties = extractTopLevelProperties;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wbGV2ZWxwcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b3BsZXZlbHByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw2QkFBOEI7QUFDOUIsMkJBQTZCO0FBMEQ3Qiw0QkFBNEIsUUFBdUM7SUFDakUsTUFBTSxDQUFDLGVBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7QUFDaEUsQ0FBQztBQUVELDJCQUFrQyxnQkFBK0MsRUFBRSxjQUE2QyxFQUFFLGFBQTZCO0lBQTdCLDhCQUFBLEVBQUEsb0JBQTZCO0lBQzdKLElBQU0sUUFBUSxjQUNaLElBQUksRUFBRSxLQUFLLElBQ1Isa0JBQWtCLENBQUMsY0FBYyxDQUFDLEVBQ2xDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQ3hDLENBQUM7SUFFRixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyQyxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQWZELDhDQWVDO0FBRUQsSUFBTSxvQkFBb0IsR0FBaUM7SUFDekQsWUFBWSxFQUFFLFNBQVM7SUFDdkIsbUhBQW1IO0NBQ3BILENBQUM7QUFFRixtQ0FBd0UsQ0FBSTtJQUMxRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNULENBQUM7QUFQRCw4REFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmd9IGZyb20gJ3V0aWwnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcblxuLyoqXG4gKiBAbWluaW11bSAwXG4gKi9cbmV4cG9ydCB0eXBlIFBhZGRpbmcgPSBudW1iZXIgfCB7dG9wPzogbnVtYmVyLCBib3R0b20/OiBudW1iZXIsIGxlZnQ/OiBudW1iZXIsIHJpZ2h0PzogbnVtYmVyfTtcblxuZXhwb3J0IGludGVyZmFjZSBUb3BMZXZlbFByb3BlcnRpZXMge1xuICAvKipcbiAgICogQ1NTIGNvbG9yIHByb3BlcnR5IHRvIHVzZSBhcyB0aGUgYmFja2dyb3VuZCBvZiB2aXN1YWxpemF0aW9uLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gbm9uZSAodHJhbnNwYXJlbnQpXG4gICAqL1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2aXN1YWxpemF0aW9uIHBhZGRpbmcsIGluIHBpeGVscywgZnJvbSB0aGUgZWRnZSBvZiB0aGUgdmlzdWFsaXphdGlvbiBjYW52YXMgdG8gdGhlIGRhdGEgcmVjdGFuZ2xlLiAgSWYgYSBudW1iZXIsIHNwZWNpZmllcyBwYWRkaW5nIGZvciBhbGwgc2lkZXMuXG4gICAqIElmIGFuIG9iamVjdCwgdGhlIHZhbHVlIHNob3VsZCBoYXZlIHRoZSBmb3JtYXQgYHtcImxlZnRcIjogNSwgXCJ0b3BcIjogNSwgXCJyaWdodFwiOiA1LCBcImJvdHRvbVwiOiA1fWAgdG8gc3BlY2lmeSBwYWRkaW5nIGZvciBlYWNoIHNpZGUgb2YgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgNWBcbiAgICovXG4gIHBhZGRpbmc/OiBQYWRkaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIGhvdyB0aGUgdmlzdWFsaXphdGlvbiBzaXplIHNob3VsZCBiZSBkZXRlcm1pbmVkLiBJZiBhIHN0cmluZywgc2hvdWxkIGJlIG9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLlxuICAgKiBPYmplY3QgdmFsdWVzIGNhbiBhZGRpdGlvbmFsbHkgc3BlY2lmeSBwYXJhbWV0ZXJzIGZvciBjb250ZW50IHNpemluZyBhbmQgYXV0b21hdGljIHJlc2l6aW5nLlxuICAgKiBgXCJmaXRcImAgaXMgb25seSBzdXBwb3J0ZWQgZm9yIHNpbmdsZSBhbmQgbGF5ZXJlZCB2aWV3cyB0aGF0IGRvbid0IHVzZSBgcmFuZ2VTdGVwYC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBwYWRgXG4gICAqL1xuICBhdXRvc2l6ZT86IEF1dG9zaXplVHlwZSB8IEF1dG9TaXplUGFyYW1zO1xufVxuXG5leHBvcnQgdHlwZSBBdXRvc2l6ZVR5cGUgPSAncGFkJyB8ICdmaXQnIHwgJ25vbmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9TaXplUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBzaXppbmcgZm9ybWF0IHR5cGUuIE9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLiBTZWUgdGhlIFthdXRvc2l6ZSB0eXBlXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NpemUuaHRtbCNhdXRvc2l6ZSkgZG9jdW1lbnRhdGlvbiBmb3IgZGVzY3JpcHRpb25zIG9mIGVhY2guXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgXCJwYWRcImBcbiAgICovXG4gIHR5cGU/OiBBdXRvc2l6ZVR5cGU7XG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgYXV0b3NpemUgbGF5b3V0IHNob3VsZCBiZSByZS1jYWxjdWxhdGVkIG9uIGV2ZXJ5IHZpZXcgdXBkYXRlLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWVfXzogYGZhbHNlYFxuICAgKi9cbiAgcmVzaXplPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgc2l6ZSBjYWxjdWxhdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkLCBvbmUgb2YgYFwiY29udGVudFwiYCBvciBgXCJwYWRkaW5nXCJgLiBUaGUgZGVmYXVsdCBzZXR0aW5nIChgXCJjb250ZW50XCJgKSBpbnRlcHJldHMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgc2V0dGluZ3MgYXMgdGhlIGRhdGEgcmVjdGFuZ2xlIChwbG90dGluZykgZGltZW5zaW9ucywgdG8gd2hpY2ggcGFkZGluZyBpcyB0aGVuIGFkZGVkLiBJbiBjb250cmFzdCwgdGhlIGBcInBhZGRpbmdcImAgc2V0dGluZyBpbmNsdWRlcyB0aGUgcGFkZGluZyB3aXRoaW4gdGhlIHZpZXcgc2l6ZSBjYWxjdWxhdGlvbnMsIHN1Y2ggdGhhdCB0aGUgd2lkdGggYW5kIGhlaWdodCBzZXR0aW5ncyBpbmRpY2F0ZSB0aGUgKip0b3RhbCoqIGludGVuZGVkIHNpemUgb2YgdGhlIHZpZXcuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgXCJjb250ZW50XCJgXG4gICAqL1xuICBjb250YWlucz86ICdjb250ZW50JyB8ICdwYWRkaW5nJztcbn1cblxuZnVuY3Rpb24gX25vcm1hbGl6ZUF1dG9TaXplKGF1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcykge1xuICByZXR1cm4gaXNTdHJpbmcoYXV0b3NpemUpID8ge3R5cGU6IGF1dG9zaXplfSA6IGF1dG9zaXplIHx8IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXV0b1NpemUodG9wTGV2ZWxBdXRvc2l6ZTogQXV0b3NpemVUeXBlIHwgQXV0b1NpemVQYXJhbXMsIGNvbmZpZ0F1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcywgaXNVbml0T3JMYXllcjogYm9vbGVhbiA9IHRydWUpOiBBdXRvU2l6ZVBhcmFtcyB7XG4gIGNvbnN0IGF1dG9zaXplOiBBdXRvU2l6ZVBhcmFtcyA9IHtcbiAgICB0eXBlOiAncGFkJyxcbiAgICAuLi5fbm9ybWFsaXplQXV0b1NpemUoY29uZmlnQXV0b3NpemUpLFxuICAgIC4uLl9ub3JtYWxpemVBdXRvU2l6ZSh0b3BMZXZlbEF1dG9zaXplKVxuICB9O1xuXG4gIGlmIChhdXRvc2l6ZS50eXBlID09PSAnZml0Jykge1xuICAgIGlmICghaXNVbml0T3JMYXllcikge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuRklUX05PTl9TSU5HTEUpO1xuICAgICAgYXV0b3NpemUudHlwZSA9ICdwYWQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdXRvc2l6ZTtcbn1cblxuY29uc3QgVE9QX0xFVkVMX1BST1BFUlRJRVM6IChrZXlvZiBUb3BMZXZlbFByb3BlcnRpZXMpW10gPSBbXG4gICdiYWNrZ3JvdW5kJywgJ3BhZGRpbmcnXG4gIC8vIFdlIGRvIG5vdCBpbmNsdWRlIFwiYXV0b3NpemVcIiBoZXJlIGFzIGl0IGlzIHN1cHBvcnRlZCBieSBvbmx5IHVuaXQgYW5kIGxheWVyIHNwZWNzIGFuZCB0aHVzIG5lZWQgdG8gYmUgbm9ybWFsaXplZFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUb3BMZXZlbFByb3BlcnRpZXM8VCBleHRlbmRzIFRvcExldmVsUHJvcGVydGllcz4odDogVCkge1xuICByZXR1cm4gVE9QX0xFVkVMX1BST1BFUlRJRVMucmVkdWNlKChvLCBwKSA9PiB7XG4gICAgaWYgKHQgJiYgdFtwXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvW3BdID0gdFtwXTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH0sIHt9KTtcbn1cbiJdfQ==

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(47);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(48);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(46)))

/***/ }),
/* 46 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var spec_1 = __webpack_require__(42);
	var concat_1 = __webpack_require__(50);
	var facet_1 = __webpack_require__(114);
	var layer_1 = __webpack_require__(117);
	var repeat_1 = __webpack_require__(135);
	var unit_1 = __webpack_require__(123);
	function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {
	    if (spec_1.isFacetSpec(spec)) {
	        return new facet_1.FacetModel(spec, parent, parentGivenName, repeater, config);
	    }
	    if (spec_1.isLayerSpec(spec)) {
	        return new layer_1.LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
	    }
	    if (spec_1.isUnitSpec(spec)) {
	        return new unit_1.UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
	    }
	    if (spec_1.isRepeatSpec(spec)) {
	        return new repeat_1.RepeatModel(spec, parent, parentGivenName, repeater, config);
	    }
	    if (spec_1.isConcatSpec(spec)) {
	        return new concat_1.ConcatModel(spec, parent, parentGivenName, repeater, config);
	    }
	    throw new Error(log.message.INVALID_SPEC);
	}
	exports.buildModel = buildModel;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRtb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2J1aWxkbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw0QkFBOEI7QUFDOUIsZ0NBQWlIO0FBQ2pILG1DQUFxQztBQUNyQyxpQ0FBbUM7QUFDbkMsaUNBQW1DO0FBRW5DLG1DQUFxQztBQUVyQywrQkFBaUM7QUFFakMsb0JBQTJCLElBQVUsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFDM0UsUUFBMEIsRUFBRSxRQUF1QixFQUFFLE1BQWMsRUFBRSxHQUFZO0lBQ2pGLEVBQUUsQ0FBQyxDQUFDLGtCQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLGtCQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxrQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxrQkFBVSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxpQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxtQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsSUFBSSxvQkFBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsbUJBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsTUFBTSxDQUFDLElBQUksb0JBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBdkJELGdDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2lzQ29uY2F0U3BlYywgaXNGYWNldFNwZWMsIGlzTGF5ZXJTcGVjLCBpc1JlcGVhdFNwZWMsIGlzVW5pdFNwZWMsIExheW91dFNpemVNaXhpbnMsIFNwZWN9IGZyb20gJy4uL3NwZWMnO1xuaW1wb3J0IHtDb25jYXRNb2RlbH0gZnJvbSAnLi9jb25jYXQnO1xuaW1wb3J0IHtGYWNldE1vZGVsfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7TGF5ZXJNb2RlbH0gZnJvbSAnLi9sYXllcic7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7UmVwZWF0TW9kZWx9IGZyb20gJy4vcmVwZWF0JztcbmltcG9ydCB7UmVwZWF0ZXJWYWx1ZX0gZnJvbSAnLi9yZXBlYXRlcic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi91bml0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTW9kZWwoc3BlYzogU3BlYywgcGFyZW50OiBNb2RlbCwgcGFyZW50R2l2ZW5OYW1lOiBzdHJpbmcsXG4gIHVuaXRTaXplOiBMYXlvdXRTaXplTWl4aW5zLCByZXBlYXRlcjogUmVwZWF0ZXJWYWx1ZSwgY29uZmlnOiBDb25maWcsIGZpdDogYm9vbGVhbik6IE1vZGVsIHtcbiAgaWYgKGlzRmFjZXRTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5ldyBGYWNldE1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCByZXBlYXRlciwgY29uZmlnKTtcbiAgfVxuXG4gIGlmIChpc0xheWVyU3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgTGF5ZXJNb2RlbChzcGVjLCBwYXJlbnQsIHBhcmVudEdpdmVuTmFtZSwgdW5pdFNpemUsIHJlcGVhdGVyLCBjb25maWcsIGZpdCk7XG4gIH1cblxuICBpZiAoaXNVbml0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgVW5pdE1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCB1bml0U2l6ZSwgcmVwZWF0ZXIsIGNvbmZpZywgZml0KTtcbiAgfVxuXG4gIGlmIChpc1JlcGVhdFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbmV3IFJlcGVhdE1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCByZXBlYXRlciwgY29uZmlnKTtcbiAgfVxuXG4gIGlmIChpc0NvbmNhdFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbmV3IENvbmNhdE1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCByZXBlYXRlciwgY29uZmlnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihsb2cubWVzc2FnZS5JTlZBTElEX1NQRUMpO1xufVxuIl19

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var spec_1 = __webpack_require__(42);
	var baseconcat_1 = __webpack_require__(51);
	var buildmodel_1 = __webpack_require__(49);
	var parse_1 = __webpack_require__(113);
	var ConcatModel = /** @class */ (function (_super) {
	    __extends(ConcatModel, _super);
	    function ConcatModel(spec, parent, parentGivenName, repeater, config) {
	        var _this = _super.call(this, spec, parent, parentGivenName, config, spec.resolve) || this;
	        _this.type = 'concat';
	        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
	            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);
	        }
	        _this.isVConcat = spec_1.isVConcatSpec(spec);
	        _this.children = (spec_1.isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map(function (child, i) {
	            return buildmodel_1.buildModel(child, _this, _this.getName('concat_' + i), undefined, repeater, config, false);
	        });
	        return _this;
	    }
	    ConcatModel.prototype.parseLayoutSize = function () {
	        parse_1.parseConcatLayoutSize(this);
	    };
	    ConcatModel.prototype.parseAxisGroup = function () {
	        return null;
	    };
	    ConcatModel.prototype.assembleLayout = function () {
	        // TODO: allow customization
	        return __assign({ padding: { row: 10, column: 10 }, offset: 10 }, (this.isVConcat ? { columns: 1 } : {}), { bounds: 'full', 
	            // Use align each so it can work with multiple plots with different size
	            align: 'each' });
	    };
	    return ConcatModel;
	}(baseconcat_1.BaseConcatModel));
	exports.ConcatModel = ConcatModel;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsNEJBQThCO0FBQzlCLGdDQUFrRDtBQUVsRCwyQ0FBNkM7QUFDN0MsMkNBQXdDO0FBQ3hDLDRDQUF5RDtBQUl6RDtJQUFpQywrQkFBZTtJQU85QyxxQkFBWSxJQUFnQixFQUFFLE1BQWEsRUFBRSxlQUF1QixFQUFFLFFBQXVCLEVBQUUsTUFBYztRQUE3RyxZQUNFLGtCQUFNLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBVzNEO1FBbEJlLFVBQUksR0FBYSxRQUFRLENBQUM7UUFTeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoSCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBRUQsS0FBSSxDQUFDLFNBQVMsR0FBRyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLEtBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsS0FBSyxFQUFFLENBQUM7WUFDL0UsTUFBTSxDQUFDLHVCQUFVLENBQUMsS0FBSyxFQUFFLEtBQUksRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRyxDQUFDLENBQUMsQ0FBQzs7SUFDTCxDQUFDO0lBRU0scUNBQWUsR0FBdEI7UUFDRSw2QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBR00sb0NBQWMsR0FBckI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLG9DQUFjLEdBQXJCO1FBQ0UsNEJBQTRCO1FBQzVCLE1BQU0sWUFDSixPQUFPLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUMsRUFDOUIsTUFBTSxFQUFFLEVBQUUsSUFDUCxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDdkMsTUFBTSxFQUFFLE1BQU07WUFDZCx3RUFBd0U7WUFDeEUsS0FBSyxFQUFFLE1BQU0sSUFDYjtJQUNKLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUF6Q0QsQ0FBaUMsNEJBQWUsR0F5Qy9DO0FBekNZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7Q29uY2F0U3BlYywgaXNWQ29uY2F0U3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge1ZnTGF5b3V0fSBmcm9tICcuLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0Jhc2VDb25jYXRNb2RlbH0gZnJvbSAnLi9iYXNlY29uY2F0JztcbmltcG9ydCB7YnVpbGRNb2RlbH0gZnJvbSAnLi9idWlsZG1vZGVsJztcbmltcG9ydCB7cGFyc2VDb25jYXRMYXlvdXRTaXplfSBmcm9tICcuL2xheW91dHNpemUvcGFyc2UnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQge1JlcGVhdGVyVmFsdWV9IGZyb20gJy4vcmVwZWF0ZXInO1xuXG5leHBvcnQgY2xhc3MgQ29uY2F0TW9kZWwgZXh0ZW5kcyBCYXNlQ29uY2F0TW9kZWwge1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ2NvbmNhdCcgPSAnY29uY2F0JztcblxuICBwdWJsaWMgcmVhZG9ubHkgY2hpbGRyZW46IE1vZGVsW107XG5cbiAgcHVibGljIHJlYWRvbmx5IGlzVkNvbmNhdDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihzcGVjOiBDb25jYXRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgcmVwZWF0ZXI6IFJlcGVhdGVyVmFsdWUsIGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIGNvbmZpZywgc3BlYy5yZXNvbHZlKTtcblxuICAgIGlmIChzcGVjLnJlc29sdmUgJiYgc3BlYy5yZXNvbHZlLmF4aXMgJiYgKHNwZWMucmVzb2x2ZS5heGlzLnggPT09ICdzaGFyZWQnIHx8IHNwZWMucmVzb2x2ZS5heGlzLnkgPT09ICdzaGFyZWQnKSkge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuQ09OQ0FUX0NBTk5PVF9TSEFSRV9BWElTKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzVkNvbmNhdCA9IGlzVkNvbmNhdFNwZWMoc3BlYyk7XG5cbiAgICB0aGlzLmNoaWxkcmVuID0gKGlzVkNvbmNhdFNwZWMoc3BlYykgPyBzcGVjLnZjb25jYXQgOiBzcGVjLmhjb25jYXQpLm1hcCgoY2hpbGQsIGkpID0+IHtcbiAgICAgIHJldHVybiBidWlsZE1vZGVsKGNoaWxkLCB0aGlzLCB0aGlzLmdldE5hbWUoJ2NvbmNhdF8nICsgaSksIHVuZGVmaW5lZCwgcmVwZWF0ZXIsIGNvbmZpZywgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHBhcnNlTGF5b3V0U2l6ZSgpIHtcbiAgICBwYXJzZUNvbmNhdExheW91dFNpemUodGhpcyk7XG4gIH1cblxuXG4gIHB1YmxpYyBwYXJzZUF4aXNHcm91cCgpOiB2b2lkIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZUxheW91dCgpOiBWZ0xheW91dCB7XG4gICAgLy8gVE9ETzogYWxsb3cgY3VzdG9taXphdGlvblxuICAgIHJldHVybiB7XG4gICAgICBwYWRkaW5nOiB7cm93OiAxMCwgY29sdW1uOiAxMH0sXG4gICAgICBvZmZzZXQ6IDEwLFxuICAgICAgLi4uKHRoaXMuaXNWQ29uY2F0ID8ge2NvbHVtbnM6IDF9IDoge30pLFxuICAgICAgYm91bmRzOiAnZnVsbCcsXG4gICAgICAvLyBVc2UgYWxpZ24gZWFjaCBzbyBpdCBjYW4gd29yayB3aXRoIG11bHRpcGxlIHBsb3RzIHdpdGggZGlmZmVyZW50IHNpemVcbiAgICAgIGFsaWduOiAnZWFjaCdcbiAgICB9O1xuICB9XG59XG4iXX0=

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var parse_1 = __webpack_require__(52);
	var assemble_1 = __webpack_require__(63);
	var model_1 = __webpack_require__(57);
	var BaseConcatModel = /** @class */ (function (_super) {
	    __extends(BaseConcatModel, _super);
	    function BaseConcatModel(spec, parent, parentGivenName, config, resolve) {
	        return _super.call(this, spec, parent, parentGivenName, config, resolve) || this;
	    }
	    BaseConcatModel.prototype.parseData = function () {
	        this.component.data = parse_1.parseData(this);
	        this.children.forEach(function (child) {
	            child.parseData();
	        });
	    };
	    BaseConcatModel.prototype.parseSelection = function () {
	        var _this = this;
	        // Merge selections up the hierarchy so that they may be referenced
	        // across unit specs. Persist their definitions within each child
	        // to assemble signals which remain within output Vega unit groups.
	        this.component.selection = {};
	        var _loop_1 = function (child) {
	            child.parseSelection();
	            util_1.keys(child.component.selection).forEach(function (key) {
	                _this.component.selection[key] = child.component.selection[key];
	            });
	        };
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            _loop_1(child);
	        }
	    };
	    BaseConcatModel.prototype.parseMarkGroup = function () {
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parseMarkGroup();
	        }
	    };
	    BaseConcatModel.prototype.parseAxisAndHeader = function () {
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parseAxisAndHeader();
	        }
	        // TODO(#2415): support shared axes
	    };
	    BaseConcatModel.prototype.assembleSelectionTopLevelSignals = function (signals) {
	        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);
	    };
	    BaseConcatModel.prototype.assembleSelectionSignals = function () {
	        this.children.forEach(function (child) { return child.assembleSelectionSignals(); });
	        return [];
	    };
	    BaseConcatModel.prototype.assembleLayoutSignals = function () {
	        return this.children.reduce(function (signals, child) {
	            return signals.concat(child.assembleLayoutSignals());
	        }, assemble_1.assembleLayoutSignals(this));
	    };
	    BaseConcatModel.prototype.assembleSelectionData = function (data) {
	        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, []);
	    };
	    BaseConcatModel.prototype.assembleMarks = function () {
	        // only children have marks
	        return this.children.map(function (child) {
	            var title = child.assembleTitle();
	            var style = child.assembleGroupStyle();
	            var layoutSizeEncodeEntry = child.assembleLayoutSize();
	            return __assign({ type: 'group', name: child.getName('group') }, (title ? { title: title } : {}), (style ? { style: style } : {}), (layoutSizeEncodeEntry ? {
	                encode: {
	                    update: layoutSizeEncodeEntry
	                }
	            } : {}), child.assembleGroup());
	        });
	    };
	    return BaseConcatModel;
	}(model_1.Model));
	exports.BaseConcatModel = BaseConcatModel;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZWNvbmNhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2Jhc2Vjb25jYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxnQ0FBNkI7QUFFN0Isc0NBQXVDO0FBQ3ZDLGtEQUE0RDtBQUM1RCxpQ0FBOEI7QUFFOUI7SUFBOEMsbUNBQUs7SUFDakQseUJBQVksSUFBYyxFQUFFLE1BQWEsRUFBRSxlQUF1QixFQUFFLE1BQWMsRUFBRSxPQUFnQjtlQUNsRyxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxtQ0FBUyxHQUFoQjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO1lBQzFCLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSx3Q0FBYyxHQUFyQjtRQUFBLGlCQVdDO1FBVkMsbUVBQW1FO1FBQ25FLGlFQUFpRTtRQUNqRSxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dDQUNuQixLQUFLO1lBQ2QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLFdBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7Z0JBQzFDLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUxELEdBQUcsQ0FBQyxDQUFnQixVQUFhLEVBQWIsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFiLGNBQWEsRUFBYixJQUFhO1lBQTVCLElBQU0sS0FBSyxTQUFBO29CQUFMLEtBQUs7U0FLZjtJQUNILENBQUM7SUFFTSx3Q0FBYyxHQUFyQjtRQUNFLEdBQUcsQ0FBQyxDQUFnQixVQUFhLEVBQWIsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFiLGNBQWEsRUFBYixJQUFhO1lBQTVCLElBQU0sS0FBSyxTQUFBO1lBQ2QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVNLDRDQUFrQixHQUF6QjtRQUNFLEdBQUcsQ0FBQyxDQUFnQixVQUFhLEVBQWIsS0FBQSxJQUFJLENBQUMsUUFBUSxFQUFiLGNBQWEsRUFBYixJQUFhO1lBQTVCLElBQU0sS0FBSyxTQUFBO1lBQ2QsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDNUI7UUFFRCxtQ0FBbUM7SUFDckMsQ0FBQztJQUVNLDBEQUFnQyxHQUF2QyxVQUF3QyxPQUFjO1FBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQUUsRUFBRSxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsRUFBRSxDQUFDLEVBQTFDLENBQTBDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQUVNLGtEQUF3QixHQUEvQjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEVBQWhDLENBQWdDLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVNLCtDQUFxQixHQUE1QjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQU8sRUFBRSxLQUFLO1lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFDdkQsQ0FBQyxFQUFFLGdDQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLCtDQUFxQixHQUE1QixVQUE2QixJQUFjO1FBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQUUsRUFBRSxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLEVBQS9CLENBQStCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLHVDQUFhLEdBQXBCO1FBQ0UsMkJBQTJCO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtBQUs7WUFDNUIsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3BDLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3pDLElBQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDekQsTUFBTSxZQUNKLElBQUksRUFBRSxPQUFPLEVBQ2IsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQ3pCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssT0FBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUN0QixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDdEIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sRUFBRTtvQkFDTixNQUFNLEVBQUUscUJBQXFCO2lCQUM5QjthQUNGLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNKLEtBQUssQ0FBQyxhQUFhLEVBQUUsRUFDeEI7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUE3RUQsQ0FBOEMsYUFBSyxHQTZFbEQ7QUE3RXFCLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge1Jlc29sdmV9IGZyb20gJy4uL3Jlc29sdmUnO1xuaW1wb3J0IHtCYXNlU3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge2tleXN9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0RhdGEsIFZnU2lnbmFsfSBmcm9tICcuLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge3BhcnNlRGF0YX0gZnJvbSAnLi9kYXRhL3BhcnNlJztcbmltcG9ydCB7YXNzZW1ibGVMYXlvdXRTaWduYWxzfSBmcm9tICcuL2xheW91dHNpemUvYXNzZW1ibGUnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQ29uY2F0TW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKHNwZWM6IEJhc2VTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgY29uZmlnOiBDb25maWcsIHJlc29sdmU6IFJlc29sdmUpIHtcbiAgICBzdXBlcihzcGVjLCBwYXJlbnQsIHBhcmVudEdpdmVuTmFtZSwgY29uZmlnLCByZXNvbHZlKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZURhdGEoKSB7XG4gICAgdGhpcy5jb21wb25lbnQuZGF0YSA9IHBhcnNlRGF0YSh0aGlzKTtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICBjaGlsZC5wYXJzZURhdGEoKTtcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgcGFyc2VTZWxlY3Rpb24oKSB7XG4gICAgLy8gTWVyZ2Ugc2VsZWN0aW9ucyB1cCB0aGUgaGllcmFyY2h5IHNvIHRoYXQgdGhleSBtYXkgYmUgcmVmZXJlbmNlZFxuICAgIC8vIGFjcm9zcyB1bml0IHNwZWNzLiBQZXJzaXN0IHRoZWlyIGRlZmluaXRpb25zIHdpdGhpbiBlYWNoIGNoaWxkXG4gICAgLy8gdG8gYXNzZW1ibGUgc2lnbmFscyB3aGljaCByZW1haW4gd2l0aGluIG91dHB1dCBWZWdhIHVuaXQgZ3JvdXBzLlxuICAgIHRoaXMuY29tcG9uZW50LnNlbGVjdGlvbiA9IHt9O1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgY2hpbGQucGFyc2VTZWxlY3Rpb24oKTtcbiAgICAgIGtleXMoY2hpbGQuY29tcG9uZW50LnNlbGVjdGlvbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50LnNlbGVjdGlvbltrZXldID0gY2hpbGQuY29tcG9uZW50LnNlbGVjdGlvbltrZXldO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBhcnNlTWFya0dyb3VwKCkge1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgY2hpbGQucGFyc2VNYXJrR3JvdXAoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcGFyc2VBeGlzQW5kSGVhZGVyKCkge1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgY2hpbGQucGFyc2VBeGlzQW5kSGVhZGVyKCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETygjMjQxNSk6IHN1cHBvcnQgc2hhcmVkIGF4ZXNcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZVNlbGVjdGlvblRvcExldmVsU2lnbmFscyhzaWduYWxzOiBhbnlbXSk6IFZnU2lnbmFsW10ge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnJlZHVjZSgoc2csIGNoaWxkKSA9PiBjaGlsZC5hc3NlbWJsZVNlbGVjdGlvblRvcExldmVsU2lnbmFscyhzZyksIHNpZ25hbHMpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlU2VsZWN0aW9uU2lnbmFscygpOiBWZ1NpZ25hbFtdIHtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiBjaGlsZC5hc3NlbWJsZVNlbGVjdGlvblNpZ25hbHMoKSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlTGF5b3V0U2lnbmFscygpOiBWZ1NpZ25hbFtdIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5yZWR1Y2UoKHNpZ25hbHMsIGNoaWxkKSA9PiB7XG4gICAgICByZXR1cm4gc2lnbmFscy5jb25jYXQoY2hpbGQuYXNzZW1ibGVMYXlvdXRTaWduYWxzKCkpO1xuICAgIH0sIGFzc2VtYmxlTGF5b3V0U2lnbmFscyh0aGlzKSk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVTZWxlY3Rpb25EYXRhKGRhdGE6IFZnRGF0YVtdKTogVmdEYXRhW10ge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnJlZHVjZSgoZGIsIGNoaWxkKSA9PiBjaGlsZC5hc3NlbWJsZVNlbGVjdGlvbkRhdGEoZGIpLCBbXSk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVNYXJrcygpOiBhbnlbXSB7XG4gICAgLy8gb25seSBjaGlsZHJlbiBoYXZlIG1hcmtzXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKGNoaWxkID0+IHtcbiAgICAgIGNvbnN0IHRpdGxlID0gY2hpbGQuYXNzZW1ibGVUaXRsZSgpO1xuICAgICAgY29uc3Qgc3R5bGUgPSBjaGlsZC5hc3NlbWJsZUdyb3VwU3R5bGUoKTtcbiAgICAgIGNvbnN0IGxheW91dFNpemVFbmNvZGVFbnRyeSA9IGNoaWxkLmFzc2VtYmxlTGF5b3V0U2l6ZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2dyb3VwJyxcbiAgICAgICAgbmFtZTogY2hpbGQuZ2V0TmFtZSgnZ3JvdXAnKSxcbiAgICAgICAgLi4uKHRpdGxlID8ge3RpdGxlfSA6IHt9KSxcbiAgICAgICAgLi4uKHN0eWxlID8ge3N0eWxlfSA6IHt9KSxcbiAgICAgICAgLi4uKGxheW91dFNpemVFbmNvZGVFbnRyeSA/IHtcbiAgICAgICAgICBlbmNvZGU6IHtcbiAgICAgICAgICAgIHVwZGF0ZTogbGF5b3V0U2l6ZUVuY29kZUVudHJ5XG4gICAgICAgICAgfVxuICAgICAgICB9IDoge30pLFxuICAgICAgICAuLi5jaGlsZC5hc3NlbWJsZUdyb3VwKClcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var data_1 = __webpack_require__(53);
	var datetime_1 = __webpack_require__(31);
	var log = __webpack_require__(29);
	var predicate_1 = __webpack_require__(54);
	var transform_1 = __webpack_require__(58);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var selection_1 = __webpack_require__(55);
	var aggregate_1 = __webpack_require__(81);
	var bin_1 = __webpack_require__(106);
	var calculate_1 = __webpack_require__(107);
	var dataflow_1 = __webpack_require__(82);
	var facet_1 = __webpack_require__(83);
	var filter_1 = __webpack_require__(108);
	var filterinvalid_1 = __webpack_require__(84);
	var formatparse_1 = __webpack_require__(86);
	var geojson_1 = __webpack_require__(109);
	var geopoint_1 = __webpack_require__(110);
	var indentifier_1 = __webpack_require__(111);
	var lookup_1 = __webpack_require__(112);
	var source_1 = __webpack_require__(87);
	var stack_1 = __webpack_require__(89);
	var timeunit_1 = __webpack_require__(88);
	function parseRoot(model, sources) {
	    if (model.data || !model.parent) {
	        // if the model defines a data source or is the root, create a source node
	        var source = new source_1.SourceNode(model.data);
	        var hash = source.hash();
	        if (hash in sources) {
	            // use a reference if we already have a source
	            return sources[hash];
	        }
	        else {
	            // otherwise add a new one
	            sources[hash] = source;
	            return source;
	        }
	    }
	    else {
	        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
	        return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;
	    }
	}
	/**
	 * Parses a transforms array into a chain of connected dataflow nodes.
	 */
	function parseTransformArray(model) {
	    var first = null;
	    var node;
	    var previous;
	    var lookupCounter = 0;
	    function insert(newNode) {
	        if (!first) {
	            // A parent may be inserted during node construction
	            // (e.g., selection FilterNodes may add a TimeUnitNode).
	            first = newNode.parent || newNode;
	        }
	        else if (newNode.parent) {
	            previous.insertAsParentOf(newNode);
	        }
	        else {
	            newNode.parent = previous;
	        }
	        previous = newNode;
	    }
	    model.transforms.forEach(function (t) {
	        if (transform_1.isCalculate(t)) {
	            node = new calculate_1.CalculateNode(t);
	        }
	        else if (transform_1.isFilter(t)) {
	            // Automatically add a parse node for filters with filter objects
	            var parse = {};
	            var filter = t.filter;
	            var val = null;
	            // For EqualFilter, just use the equal property.
	            // For RangeFilter and OneOfFilter, all array members should have
	            // the same type, so we only use the first one.
	            if (predicate_1.isFieldEqualPredicate(filter)) {
	                val = filter.equal;
	            }
	            else if (predicate_1.isFieldRangePredicate(filter)) {
	                val = filter.range[0];
	            }
	            else if (predicate_1.isFieldOneOfPredicate(filter)) {
	                val = (filter.oneOf || filter['in'])[0];
	            } // else -- for filter expression, we can't infer anything
	            if (val) {
	                if (datetime_1.isDateTime(val)) {
	                    parse[filter['field']] = 'date';
	                }
	                else if (vega_util_1.isNumber(val)) {
	                    parse[filter['field']] = 'number';
	                }
	                else if (vega_util_1.isString(val)) {
	                    parse[filter['field']] = 'string';
	                }
	            }
	            if (util_1.keys(parse).length > 0) {
	                var parseNode = new formatparse_1.ParseNode(parse);
	                insert(parseNode);
	            }
	            node = new filter_1.FilterNode(model, t.filter);
	        }
	        else if (transform_1.isBin(t)) {
	            node = bin_1.BinNode.makeFromTransform(t, { model: model });
	        }
	        else if (transform_1.isTimeUnit(t)) {
	            node = timeunit_1.TimeUnitNode.makeFromTransform(t);
	        }
	        else if (transform_1.isAggregate(t)) {
	            node = aggregate_1.AggregateNode.makeFromTransform(t);
	            if (selection_1.requiresSelectionId(model)) {
	                insert(node);
	                node = new indentifier_1.IdentifierNode();
	            }
	        }
	        else if (transform_1.isLookup(t)) {
	            node = lookup_1.LookupNode.make(model, t, lookupCounter++);
	        }
	        else {
	            log.warn(log.message.invalidTransformIgnored(t));
	            return;
	        }
	        insert(node);
	    });
	    var last = node;
	    return { first: first, last: last };
	}
	exports.parseTransformArray = parseTransformArray;
	/*
	Description of the dataflow (http://asciiflow.com/):
	     +--------+
	     | Source |
	     +---+----+
	         |
	         v
	     Transforms
	(Filter, Calculate, ...)
	         |
	         v
	     FormatParse
	         |
	         v
	      Binning
	         |
	         v
	      Timeunit
	         |
	         v
	      +--+--+
	      | Raw |
	      +-----+
	         |
	         v
	     Aggregate
	         |
	         v
	       Stack
	         |
	         v
	     Path Order
	         |
	         v
	  Invalid Filter
	         |
	         v
	   +----------+
	   |   Main   |
	   +----------+
	         |
	         v
	     +-------+
	     | Facet |----> "column", "column-layout", and "row"
	     +-------+
	         |
	         v
	  ...Child data...
	*/
	function parseData(model) {
	    var root = parseRoot(model, model.component.data.sources);
	    var outputNodes = model.component.data.outputNodes;
	    var outputNodeRefCounts = model.component.data.outputNodeRefCounts;
	    // the current head of the tree that we are appending to
	    var head = root;
	    // Default discrete selections require an identifier transform to
	    // uniquely identify data points as the _id field is volatile. Add
	    // this transform at the head of our pipeline such that the identifier
	    // field is available for all subsequent datasets. Additional identifier
	    // transforms will be necessary when new tuples are constructed
	    // (e.g., post-aggregation).
	    if (selection_1.requiresSelectionId(model) && !model.parent) {
	        var ident = new indentifier_1.IdentifierNode();
	        ident.parent = head;
	        head = ident;
	    }
	    // HACK: This is equivalent for merging bin extent for union scale.
	    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale
	    var parentIsLayer = model.parent && model_1.isLayerModel(model.parent);
	    if (model_1.isUnitModel(model) || model_1.isFacetModel(model)) {
	        if (parentIsLayer) {
	            var bin = bin_1.BinNode.makeBinFromEncoding(model);
	            if (bin) {
	                bin.parent = head;
	                head = bin;
	            }
	        }
	    }
	    if (model.transforms.length > 0) {
	        var _a = parseTransformArray(model), first = _a.first, last = _a.last;
	        first.parent = head;
	        head = last;
	    }
	    var parse = formatparse_1.ParseNode.make(model);
	    if (parse) {
	        parse.parent = head;
	        head = parse;
	    }
	    if (model_1.isUnitModel(model) || model_1.isFacetModel(model)) {
	        if (!parentIsLayer) {
	            var bin = bin_1.BinNode.makeBinFromEncoding(model);
	            if (bin) {
	                bin.parent = head;
	                head = bin;
	            }
	        }
	        for (var _i = 0, _b = geojson_1.GeoJSONNode.makeAll(model); _i < _b.length; _i++) {
	            var geojson = _b[_i];
	            geojson.parent = head;
	            head = geojson;
	        }
	        for (var _c = 0, _d = geopoint_1.GeoPointNode.makeAll(model); _c < _d.length; _c++) {
	            var geopoint = _d[_c];
	            geopoint.parent = head;
	            head = geopoint;
	        }
	        var tu = timeunit_1.TimeUnitNode.makeFromEncoding(model);
	        if (tu) {
	            tu.parent = head;
	            head = tu;
	        }
	    }
	    // add an output node pre aggregation
	    var rawName = model.getName(data_1.RAW);
	    var raw = new dataflow_1.OutputNode(rawName, data_1.RAW, outputNodeRefCounts);
	    outputNodes[rawName] = raw;
	    raw.parent = head;
	    head = raw;
	    if (model_1.isUnitModel(model)) {
	        var agg = aggregate_1.AggregateNode.makeFromEncoding(model);
	        if (agg) {
	            agg.parent = head;
	            head = agg;
	            if (selection_1.requiresSelectionId(model)) {
	                var ident = new indentifier_1.IdentifierNode();
	                ident.parent = head;
	                head = ident;
	            }
	        }
	        var stack = stack_1.StackNode.make(model);
	        if (stack) {
	            stack.parent = head;
	            head = stack;
	        }
	    }
	    if (model_1.isUnitModel(model)) {
	        var filter = filterinvalid_1.FilterInvalidNode.make(model);
	        if (filter) {
	            filter.parent = head;
	            head = filter;
	        }
	    }
	    // output node for marks
	    var mainName = model.getName(data_1.MAIN);
	    var main = new dataflow_1.OutputNode(mainName, data_1.MAIN, outputNodeRefCounts);
	    outputNodes[mainName] = main;
	    main.parent = head;
	    head = main;
	    // add facet marker
	    var facetRoot = null;
	    if (model_1.isFacetModel(model)) {
	        var facetName = model.getName('facet');
	        facetRoot = new facet_1.FacetNode(model, facetName, main.getSource());
	        outputNodes[facetName] = facetRoot;
	        facetRoot.parent = head;
	        head = facetRoot;
	    }
	    // add the format parse from this model so that children don't parse the same field again
	    var ancestorParse = __assign({}, model.component.data.ancestorParse, (parse ? parse.parse : {}));
	    return __assign({}, model.component.data, { outputNodes: outputNodes,
	        outputNodeRefCounts: outputNodeRefCounts,
	        raw: raw,
	        main: main,
	        facetRoot: facetRoot,
	        ancestorParse: ancestorParse });
	}
	exports.parseData = parseData;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function isUrlData(data) {
	    return !!data['url'];
	}
	exports.isUrlData = isUrlData;
	function isInlineData(data) {
	    return !!data['values'];
	}
	exports.isInlineData = isInlineData;
	function isNamedData(data) {
	    return !!data['name'];
	}
	exports.isNamedData = isNamedData;
	exports.MAIN = 'main';
	exports.RAW = 'raw';
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBMEdBLG1CQUEwQixJQUFxQztJQUM3RCxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBRkQsOEJBRUM7QUFFRCxzQkFBNkIsSUFBcUM7SUFDaEUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUZELG9DQUVDO0FBRUQscUJBQTRCLElBQW1CO0lBQzdDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFGRCxrQ0FFQztBQUlZLFFBQUEsSUFBSSxHQUFXLE1BQU0sQ0FBQztBQUN0QixRQUFBLEdBQUcsR0FBVSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZnRGF0YX0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG4vKlxuICogQ29uc3RhbnRzIGFuZCB1dGlsaXRpZXMgZm9yIGRhdGEuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhRm9ybWF0QmFzZSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gYXV0byAodGhlIGRlZmF1bHQpLCBwZXJmb3JtIGF1dG9tYXRpYyB0eXBlIGluZmVyZW5jZSB0byBkZXRlcm1pbmUgdGhlIGRlc2lyZWQgZGF0YSB0eXBlcy5cbiAgICogQWx0ZXJuYXRpdmVseSwgYSBwYXJzaW5nIGRpcmVjdGl2ZSBvYmplY3QgY2FuIGJlIHByb3ZpZGVkIGZvciBleHBsaWNpdCBkYXRhIHR5cGVzLiBFYWNoIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgY29ycmVzcG9uZHMgdG8gYSBmaWVsZCBuYW1lLCBhbmQgdGhlIHZhbHVlIHRvIHRoZSBkZXNpcmVkIGRhdGEgdHlwZSAob25lIG9mIGBcIm51bWJlclwiYCwgYFwiYm9vbGVhblwiYCBvciBgXCJkYXRlXCJgKS5cbiAgICogRm9yIGV4YW1wbGUsIGBcInBhcnNlXCI6IHtcIm1vZGlmaWVkX29uXCI6IFwiZGF0ZVwifWAgcGFyc2VzIHRoZSBgbW9kaWZpZWRfb25gIGZpZWxkIGluIGVhY2ggaW5wdXQgcmVjb3JkIGEgRGF0ZSB2YWx1ZS5cbiAgICpcbiAgICogRm9yIGBcImRhdGVcImAsIHdlIHBhcnNlIGRhdGEgYmFzZWQgdXNpbmcgSmF2YXNjcmlwdCdzIFtgRGF0ZS5wYXJzZSgpYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZS9wYXJzZSkuXG4gICAqIEZvciBTcGVjaWZpYyBkYXRlIGZvcm1hdHMgY2FuIGJlIHByb3ZpZGVkIChlLmcuLCBge2ZvbzogJ2RhdGU6XCIlbSVkJVlcIid9YCksIHVzaW5nIHRoZSBbZDMtdGltZS1mb3JtYXQgc3ludGF4XShodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtdGltZS1mb3JtYXQjbG9jYWxlX2Zvcm1hdCkuIFVUQyBkYXRlIGZvcm1hdCBwYXJzaW5nIGlzIHN1cHBvcnRlZCBzaW1pbGFybHkgKGUuZy4sIGB7Zm9vOiAndXRjOlwiJW0lZCVZXCInfWApLiBTZWUgbW9yZSBhYm91dCBbVVRDIHRpbWVdKHRpbWV1bml0Lmh0bWwjdXRjKVxuICAgKi9cbiAgcGFyc2U/OiAnYXV0bycgfCBvYmplY3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3N2RGF0YUZvcm1hdCBleHRlbmRzIERhdGFGb3JtYXRCYXNlIHtcbiAgLyoqXG4gICAqIFR5cGUgb2YgaW5wdXQgZGF0YTogYFwianNvblwiYCwgYFwiY3N2XCJgLCBgXCJ0c3ZcImAuXG4gICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB0eXBlIGlzIGRldGVybWluZWQgYnkgdGhlIGV4dGVuc2lvbiBvZiB0aGUgZmlsZSBVUkwuXG4gICAqIElmIG5vIGV4dGVuc2lvbiBpcyBkZXRlY3RlZCwgYFwianNvblwiYCB3aWxsIGJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIHR5cGU/OiAnY3N2JyB8ICd0c3YnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25EYXRhRm9ybWF0IGV4dGVuZHMgRGF0YUZvcm1hdEJhc2Uge1xuICAvKipcbiAgICogVHlwZSBvZiBpbnB1dCBkYXRhOiBgXCJqc29uXCJgLCBgXCJjc3ZcImAsIGBcInRzdlwiYC5cbiAgICogVGhlIGRlZmF1bHQgZm9ybWF0IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBmaWxlIFVSTC5cbiAgICogSWYgbm8gZXh0ZW5zaW9uIGlzIGRldGVjdGVkLCBgXCJqc29uXCJgIHdpbGwgYmUgdXNlZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgdHlwZT86ICdqc29uJztcbiAgLyoqXG4gICAqIFRoZSBKU09OIHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIGRlc2lyZWQgZGF0YS5cbiAgICogVGhpcyBwYXJhbWV0ZXIgY2FuIGJlIHVzZWQgd2hlbiB0aGUgbG9hZGVkIEpTT04gZmlsZSBtYXkgaGF2ZSBzdXJyb3VuZGluZyBzdHJ1Y3R1cmUgb3IgbWV0YS1kYXRhLlxuICAgKiBGb3IgZXhhbXBsZSBgXCJwcm9wZXJ0eVwiOiBcInZhbHVlcy5mZWF0dXJlc1wiYCBpcyBlcXVpdmFsZW50IHRvIHJldHJpZXZpbmcgYGpzb24udmFsdWVzLmZlYXR1cmVzYFxuICAgKiBmcm9tIHRoZSBsb2FkZWQgSlNPTiBvYmplY3QuXG4gICAqL1xuICBwcm9wZXJ0eT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3BvRGF0YUZvcm1hdCBleHRlbmRzIERhdGFGb3JtYXRCYXNlIHtcbiAgLyoqXG4gICAqIFR5cGUgb2YgaW5wdXQgZGF0YTogYFwianNvblwiYCwgYFwiY3N2XCJgLCBgXCJ0c3ZcImAuXG4gICAqIFRoZSBkZWZhdWx0IGZvcm1hdCB0eXBlIGlzIGRldGVybWluZWQgYnkgdGhlIGV4dGVuc2lvbiBvZiB0aGUgZmlsZSBVUkwuXG4gICAqIElmIG5vIGV4dGVuc2lvbiBpcyBkZXRlY3RlZCwgYFwianNvblwiYCB3aWxsIGJlIHVzZWQgYnkgZGVmYXVsdC5cbiAgICovXG4gIHR5cGU/OiAndG9wb2pzb24nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIFRvcG9KU09OIG9iamVjdCBzZXQgdG8gY29udmVydCB0byBhIEdlb0pTT04gZmVhdHVyZSBjb2xsZWN0aW9uLlxuICAgKiBGb3IgZXhhbXBsZSwgaW4gYSBtYXAgb2YgdGhlIHdvcmxkLCB0aGVyZSBtYXkgYmUgYW4gb2JqZWN0IHNldCBuYW1lZCBgXCJjb3VudHJpZXNcImAuXG4gICAqIFVzaW5nIHRoZSBmZWF0dXJlIHByb3BlcnR5LCB3ZSBjYW4gZXh0cmFjdCB0aGlzIHNldCBhbmQgZ2VuZXJhdGUgYSBHZW9KU09OIGZlYXR1cmUgb2JqZWN0IGZvciBlYWNoIGNvdW50cnkuXG4gICAqL1xuICBmZWF0dXJlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIFRvcG9KU09OIG9iamVjdCBzZXQgdG8gY29udmVydCB0byBtZXNoLlxuICAgKiBTaW1pbGFyIHRvIHRoZSBgZmVhdHVyZWAgb3B0aW9uLCBgbWVzaGAgZXh0cmFjdHMgYSBuYW1lZCBUb3BvSlNPTiBvYmplY3Qgc2V0LlxuICAgKiAgVW5saWtlIHRoZSBgZmVhdHVyZWAgb3B0aW9uLCB0aGUgY29ycmVzcG9uZGluZyBnZW8gZGF0YSBpcyByZXR1cm5lZCBhcyBhIHNpbmdsZSwgdW5pZmllZCBtZXNoIGluc3RhbmNlLCBub3QgYXMgaW5kaXZpZHVhbCBHZW9KU09OIGZlYXR1cmVzLlxuICAgKiBFeHRyYWN0aW5nIGEgbWVzaCBpcyB1c2VmdWwgZm9yIG1vcmUgZWZmaWNpZW50bHkgZHJhd2luZyBib3JkZXJzIG9yIG90aGVyIGdlb2dyYXBoaWMgZWxlbWVudHMgdGhhdCB5b3UgZG8gbm90IG5lZWQgdG8gYXNzb2NpYXRlIHdpdGggc3BlY2lmaWMgcmVnaW9ucyBzdWNoIGFzIGluZGl2aWR1YWwgY291bnRyaWVzLCBzdGF0ZXMgb3IgY291bnRpZXMuXG4gICAqL1xuICBtZXNoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBEYXRhRm9ybWF0ID0gQ3N2RGF0YUZvcm1hdCB8IEpzb25EYXRhRm9ybWF0IHwgVG9wb0RhdGFGb3JtYXQ7XG5cbmV4cG9ydCB0eXBlIERhdGFGb3JtYXRUeXBlID0gJ2pzb24nIHwgJ2NzdicgfCAndHN2JyB8ICd0b3BvanNvbic7XG5cbmV4cG9ydCB0eXBlIERhdGEgPSBVcmxEYXRhIHwgSW5saW5lRGF0YSB8IE5hbWVkRGF0YTtcblxuZXhwb3J0IGludGVyZmFjZSBVcmxEYXRhIHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZm9ybWF0IGZvciBwYXJzaW5nIHRoZSBkYXRhIGZpbGUuXG4gICAqL1xuICBmb3JtYXQ/OiBEYXRhRm9ybWF0O1xuXG4gIC8qKlxuICAgKiBBbiBVUkwgZnJvbSB3aGljaCB0byBsb2FkIHRoZSBkYXRhIHNldC4gVXNlIHRoZSBgZm9ybWF0LnR5cGVgIHByb3BlcnR5XG4gICAqIHRvIGVuc3VyZSB0aGUgbG9hZGVkIGRhdGEgaXMgY29ycmVjdGx5IHBhcnNlZC5cbiAgICovXG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZURhdGEge1xuICAvKipcbiAgICogQW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBmb3JtYXQgZm9yIHBhcnNpbmcgdGhlIGRhdGEgdmFsdWVzLlxuICAgKi9cbiAgZm9ybWF0PzogRGF0YUZvcm1hdDtcbiAgLyoqXG4gICAqIFRoZSBmdWxsIGRhdGEgc2V0LCBpbmNsdWRlZCBpbmxpbmUuIFRoaXMgY2FuIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgb3IgcHJpbWl0aXZlIHZhbHVlcyBvciBhIHN0cmluZy5cbiAgICogQXJyYXlzIG9mIHByaW1pdGl2ZSB2YWx1ZXMgYXJlIGluZ2VzdGVkIGFzIG9iamVjdHMgd2l0aCBhIGBkYXRhYCBwcm9wZXJ0eS4gU3RyaW5ncyBhcmUgcGFyc2VkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCB0eXBlLlxuICAgKi9cbiAgdmFsdWVzOiBudW1iZXJbXSB8IHN0cmluZ1tdIHwgYm9vbGVhbltdIHwgb2JqZWN0W10gfCBzdHJpbmcgfCBvYmplY3Q7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZWREYXRhIHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZm9ybWF0IGZvciBwYXJzaW5nIHRoZSBkYXRhLlxuICAgKi9cbiAgZm9ybWF0PzogRGF0YUZvcm1hdDtcbiAgLyoqXG4gICAqIFByb3ZpZGUgYSBwbGFjZWhvbGRlciBuYW1lIGFuZCBiaW5kIGRhdGEgYXQgcnVudGltZS5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXJsRGF0YShkYXRhOiBQYXJ0aWFsPERhdGE+IHwgUGFydGlhbDxWZ0RhdGE+KTogZGF0YSBpcyBVcmxEYXRhIHtcbiAgcmV0dXJuICEhZGF0YVsndXJsJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lubGluZURhdGEoZGF0YTogUGFydGlhbDxEYXRhPiB8IFBhcnRpYWw8VmdEYXRhPik6IGRhdGEgaXMgSW5saW5lRGF0YSB7XG4gIHJldHVybiAhIWRhdGFbJ3ZhbHVlcyddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lZERhdGEoZGF0YTogUGFydGlhbDxEYXRhPik6IGRhdGEgaXMgTmFtZWREYXRhIHtcbiAgcmV0dXJuICEhZGF0YVsnbmFtZSddO1xufVxuXG5leHBvcnQgdHlwZSBEYXRhU291cmNlVHlwZSA9ICdyYXcnIHwgJ21haW4nIHwgJ3JvdycgfCAnY29sdW1uJyB8ICdsb29rdXAnO1xuXG5leHBvcnQgY29uc3QgTUFJTjogJ21haW4nID0gJ21haW4nO1xuZXhwb3J0IGNvbnN0IFJBVzogJ3JhdycgPSAncmF3JztcbiJdfQ==

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var selection_1 = __webpack_require__(55);
	var datetime_1 = __webpack_require__(31);
	var fielddef_1 = __webpack_require__(28);
	var timeunit_1 = __webpack_require__(30);
	var util_1 = __webpack_require__(14);
	function isSelectionPredicate(predicate) {
	    return predicate && predicate['selection'];
	}
	exports.isSelectionPredicate = isSelectionPredicate;
	function isFieldEqualPredicate(predicate) {
	    return predicate && !!predicate.field && predicate.equal !== undefined;
	}
	exports.isFieldEqualPredicate = isFieldEqualPredicate;
	function isFieldRangePredicate(predicate) {
	    if (predicate && predicate.field) {
	        if (util_1.isArray(predicate.range) && predicate.range.length === 2) {
	            return true;
	        }
	    }
	    return false;
	}
	exports.isFieldRangePredicate = isFieldRangePredicate;
	function isFieldOneOfPredicate(predicate) {
	    return predicate && !!predicate.field && (util_1.isArray(predicate.oneOf) ||
	        util_1.isArray(predicate.in) // backward compatibility
	    );
	}
	exports.isFieldOneOfPredicate = isFieldOneOfPredicate;
	function isFieldPredicate(predicate) {
	    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate);
	}
	exports.isFieldPredicate = isFieldPredicate;
	/**
	 * Converts a predicate into an expression.
	 */
	// model is only used for selection filters.
	function expression(model, filterOp, node) {
	    return util_1.logicalExpr(filterOp, function (predicate) {
	        if (util_1.isString(predicate)) {
	            return predicate;
	        }
	        else if (isSelectionPredicate(predicate)) {
	            return selection_1.selectionPredicate(model, predicate.selection, node);
	        }
	        else {
	            return fieldFilterExpression(predicate);
	        }
	    });
	}
	exports.expression = expression;
	// This method is used by Voyager.  Do not change its behavior without changing Voyager.
	function fieldFilterExpression(predicate, useInRange) {
	    if (useInRange === void 0) { useInRange = true; }
	    var fieldExpr = predicate.timeUnit ?
	        // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
	        // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
	        // TODO: support utc
	        ('time(' + timeunit_1.fieldExpr(predicate.timeUnit, predicate.field) + ')') :
	        fielddef_1.vgField(predicate, { expr: 'datum' });
	    if (isFieldEqualPredicate(predicate)) {
	        return fieldExpr + '===' + valueExpr(predicate.equal, predicate.timeUnit);
	    }
	    else if (isFieldOneOfPredicate(predicate)) {
	        // "oneOf" was formerly "in" -- so we need to add backward compatibility
	        var oneOf = predicate.oneOf || predicate['in'];
	        return 'indexof([' +
	            oneOf.map(function (v) { return valueExpr(v, predicate.timeUnit); }).join(',') +
	            '], ' + fieldExpr + ') !== -1';
	    }
	    else if (isFieldRangePredicate(predicate)) {
	        var lower = predicate.range[0];
	        var upper = predicate.range[1];
	        if (lower !== null && upper !== null && useInRange) {
	            return 'inrange(' + fieldExpr + ', [' +
	                valueExpr(lower, predicate.timeUnit) + ', ' +
	                valueExpr(upper, predicate.timeUnit) + '])';
	        }
	        var exprs = [];
	        if (lower !== null) {
	            exprs.push(fieldExpr + " >= " + valueExpr(lower, predicate.timeUnit));
	        }
	        if (upper !== null) {
	            exprs.push(fieldExpr + " <= " + valueExpr(upper, predicate.timeUnit));
	        }
	        return exprs.length > 0 ? exprs.join(' && ') : 'true';
	    }
	    /* istanbul ignore next: it should never reach here */
	    throw new Error("Invalid field predicate: " + JSON.stringify(predicate));
	}
	exports.fieldFilterExpression = fieldFilterExpression;
	function valueExpr(v, timeUnit) {
	    if (datetime_1.isDateTime(v)) {
	        var expr = datetime_1.dateTimeExpr(v, true);
	        return 'time(' + expr + ')';
	    }
	    if (timeunit_1.isLocalSingleTimeUnit(timeUnit)) {
	        var datetime = {};
	        datetime[timeUnit] = v;
	        var expr = datetime_1.dateTimeExpr(datetime, true);
	        return 'time(' + expr + ')';
	    }
	    else if (timeunit_1.isUtcSingleTimeUnit(timeUnit)) {
	        return valueExpr(v, timeunit_1.getLocalTimeUnit(timeUnit));
	    }
	    return JSON.stringify(v);
	}
	function normalizePredicate(f) {
	    if (isFieldPredicate(f) && f.timeUnit) {
	        return __assign({}, f, { timeUnit: timeunit_1.normalizeTimeUnit(f.timeUnit) });
	    }
	    return f;
	}
	exports.normalizePredicate = normalizePredicate;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_event_selector_1 = __webpack_require__(56);
	var channel_1 = __webpack_require__(23);
	var log_1 = __webpack_require__(29);
	var selection_1 = __webpack_require__(40);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var interval_1 = __webpack_require__(95);
	var multi_1 = __webpack_require__(97);
	var single_1 = __webpack_require__(99);
	var transforms_1 = __webpack_require__(100);
	exports.STORE = '_store';
	exports.TUPLE = '_tuple';
	exports.MODIFY = '_modify';
	exports.SELECTION_DOMAIN = '_selection_domain_';
	function parseUnitSelection(model, selDefs) {
	    var selCmpts = {};
	    var selectionConfig = model.config.selection;
	    var _loop_1 = function (name_1) {
	        if (!selDefs.hasOwnProperty(name_1)) {
	            return "continue";
	        }
	        var selDef = selDefs[name_1];
	        var cfg = selectionConfig[selDef.type];
	        // Set default values from config if a property hasn't been specified,
	        // or if it is true. E.g., "translate": true should use the default
	        // event handlers for translate. However, true may be a valid value for
	        // a property (e.g., "nearest": true).
	        for (var key in cfg) {
	            // A selection should contain either `encodings` or `fields`, only use
	            // default values for these two values if neither of them is specified.
	            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {
	                continue;
	            }
	            if (key === 'mark') {
	                selDef[key] = __assign({}, cfg[key], selDef[key]);
	            }
	            if (selDef[key] === undefined || selDef[key] === true) {
	                selDef[key] = cfg[key] || selDef[key];
	            }
	        }
	        name_1 = util_1.varName(name_1);
	        var selCmpt = selCmpts[name_1] = __assign({}, selDef, { name: name_1, events: util_1.isString(selDef.on) ? vega_event_selector_1.selector(selDef.on, 'scope') : selDef.on });
	        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
	            if (txCompiler.parse) {
	                txCompiler.parse(model, selDef, selCmpt);
	            }
	        });
	    };
	    for (var name_1 in selDefs) {
	        _loop_1(name_1);
	    }
	    return selCmpts;
	}
	exports.parseUnitSelection = parseUnitSelection;
	function assembleUnitSelectionSignals(model, signals) {
	    forEachSelection(model, function (selCmpt, selCompiler) {
	        var name = selCmpt.name;
	        var modifyExpr = selCompiler.modifyExpr(model, selCmpt);
	        signals.push.apply(signals, selCompiler.signals(model, selCmpt));
	        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
	            if (txCompiler.signals) {
	                signals = txCompiler.signals(model, selCmpt, signals);
	            }
	            if (txCompiler.modifyExpr) {
	                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
	            }
	        });
	        signals.push({
	            name: name + exports.MODIFY,
	            on: [{
	                    events: { signal: name + exports.TUPLE },
	                    update: "modify(" + util_1.stringValue(selCmpt.name + exports.STORE) + ", " + modifyExpr + ")"
	                }]
	        });
	    });
	    var facetModel = getFacetModel(model);
	    if (signals.length && facetModel) {
	        var name_2 = util_1.stringValue(facetModel.getName('cell'));
	        signals.unshift({
	            name: 'facet',
	            value: {},
	            on: [{
	                    events: vega_event_selector_1.selector('mousemove', 'scope'),
	                    update: "isTuple(facet) ? facet : group(" + name_2 + ").datum"
	                }]
	        });
	    }
	    return signals;
	}
	exports.assembleUnitSelectionSignals = assembleUnitSelectionSignals;
	function assembleTopLevelSignals(model, signals) {
	    var needsUnit = false;
	    forEachSelection(model, function (selCmpt, selCompiler) {
	        if (selCompiler.topLevelSignals) {
	            signals = selCompiler.topLevelSignals(model, selCmpt, signals);
	        }
	        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
	            if (txCompiler.topLevelSignals) {
	                signals = txCompiler.topLevelSignals(model, selCmpt, signals);
	            }
	        });
	        needsUnit = true;
	    });
	    if (needsUnit) {
	        var hasUnit = signals.filter(function (s) { return s.name === 'unit'; });
	        if (!(hasUnit.length)) {
	            signals.unshift({
	                name: 'unit',
	                value: {},
	                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]
	            });
	        }
	    }
	    return signals;
	}
	exports.assembleTopLevelSignals = assembleTopLevelSignals;
	function assembleUnitSelectionData(model, data) {
	    forEachSelection(model, function (selCmpt) {
	        var contains = data.filter(function (d) { return d.name === selCmpt.name + exports.STORE; });
	        if (!contains.length) {
	            data.push({ name: selCmpt.name + exports.STORE });
	        }
	    });
	    return data;
	}
	exports.assembleUnitSelectionData = assembleUnitSelectionData;
	function assembleUnitSelectionMarks(model, marks) {
	    forEachSelection(model, function (selCmpt, selCompiler) {
	        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
	        transforms_1.forEachTransform(selCmpt, function (txCompiler) {
	            if (txCompiler.marks) {
	                marks = txCompiler.marks(model, selCmpt, marks);
	            }
	        });
	    });
	    return marks;
	}
	exports.assembleUnitSelectionMarks = assembleUnitSelectionMarks;
	function assembleLayerSelectionMarks(model, marks) {
	    model.children.forEach(function (child) {
	        if (model_1.isUnitModel(child)) {
	            marks = assembleUnitSelectionMarks(child, marks);
	        }
	    });
	    return marks;
	}
	exports.assembleLayerSelectionMarks = assembleLayerSelectionMarks;
	function selectionPredicate(model, selections, dfnode) {
	    var stores = [];
	    function expr(name) {
	        var vname = util_1.varName(name);
	        var selCmpt = model.getSelectionComponent(vname, name);
	        var store = util_1.stringValue(vname + exports.STORE);
	        if (selCmpt.timeUnit) {
	            var child = dfnode || model.component.data.raw;
	            var tunode = selCmpt.timeUnit.clone();
	            if (child.parent) {
	                tunode.insertAsParentOf(child);
	            }
	            else {
	                child.parent = tunode;
	            }
	        }
	        if (selCmpt.empty !== 'none') {
	            stores.push(store);
	        }
	        return compiler(selCmpt.type).predicate + ("(" + store + ", datum") +
	            (selCmpt.resolve === 'global' ? ')' : ", " + util_1.stringValue(selCmpt.resolve) + ")");
	    }
	    var predicateStr = util_1.logicalExpr(selections, expr);
	    return (stores.length
	        ? '!(' + stores.map(function (s) { return "length(data(" + s + "))"; }).join(' || ') + ') || '
	        : '') + ("(" + predicateStr + ")");
	}
	exports.selectionPredicate = selectionPredicate;
	// Selections are parsed _after_ scales. If a scale domain is set to
	// use a selection, the SELECTION_DOMAIN constant is used as the
	// domainRaw.signal during scale.parse and then replaced with the necessary
	// selection expression function during scale.assemble. To not pollute the
	// type signatures to account for this setup, the selection domain definition
	// is coerced to a string and appended to SELECTION_DOMAIN.
	function isRawSelectionDomain(domainRaw) {
	    return domainRaw.signal.indexOf(exports.SELECTION_DOMAIN) >= 0;
	}
	exports.isRawSelectionDomain = isRawSelectionDomain;
	function selectionScaleDomain(model, domainRaw) {
	    var selDomain = JSON.parse(domainRaw.signal.replace(exports.SELECTION_DOMAIN, ''));
	    var name = util_1.varName(selDomain.selection);
	    var selCmpt = model.component.selection && model.component.selection[name];
	    if (selCmpt) {
	        log_1.warn('Use "bind": "scales" to setup a binding for scales and selections within the same view.');
	    }
	    else {
	        selCmpt = model.getSelectionComponent(name, selDomain.selection);
	        if (!selDomain.encoding && !selDomain.field) {
	            selDomain.field = selCmpt.project[0].field;
	            if (selCmpt.project.length > 1) {
	                log_1.warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' +
	                    ("Using \"field\": " + util_1.stringValue(selDomain.field) + "."));
	            }
	        }
	        return {
	            signal: compiler(selCmpt.type).scaleDomain +
	                ("(" + util_1.stringValue(name + exports.STORE) + ", " + util_1.stringValue(selDomain.encoding || null) + ", ") +
	                util_1.stringValue(selDomain.field || null) +
	                (selCmpt.resolve === 'global' ? ')' : ", " + util_1.stringValue(selCmpt.resolve) + ")")
	        };
	    }
	    return { signal: 'null' };
	}
	exports.selectionScaleDomain = selectionScaleDomain;
	// Utility functions
	function forEachSelection(model, cb) {
	    var selections = model.component.selection;
	    for (var name_3 in selections) {
	        if (selections.hasOwnProperty(name_3)) {
	            var sel = selections[name_3];
	            cb(sel, compiler(sel.type));
	        }
	    }
	}
	function compiler(type) {
	    switch (type) {
	        case 'single':
	            return single_1.default;
	        case 'multi':
	            return multi_1.default;
	        case 'interval':
	            return interval_1.default;
	    }
	    return null;
	}
	function getFacetModel(model) {
	    var parent = model.parent;
	    while (parent) {
	        if (model_1.isFacetModel(parent)) {
	            break;
	        }
	        parent = parent.parent;
	    }
	    return parent;
	}
	function unitName(model) {
	    var name = util_1.stringValue(model.name);
	    var facet = getFacetModel(model);
	    if (facet) {
	        name += (facet.facet.row ? " + '_' + facet" + util_1.accessPath(facet.vgField('row')) : '')
	            + (facet.facet.column ? " + '_' + facet" + util_1.accessPath(facet.vgField('column')) : '');
	    }
	    return name;
	}
	exports.unitName = unitName;
	function requiresSelectionId(model) {
	    var identifier = false;
	    forEachSelection(model, function (selCmpt) {
	        identifier = identifier || selCmpt.project.some(function (proj) { return proj.field === selection_1.SELECTION_ID; });
	    });
	    return identifier;
	}
	exports.requiresSelectionId = requiresSelectionId;
	function channelSignalName(selCmpt, channel, range) {
	    return util_1.varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));
	}
	exports.channelSignalName = channelSignalName;
	function positionalProjections(selCmpt) {
	    var x = null;
	    var xi = null;
	    var y = null;
	    var yi = null;
	    selCmpt.project.forEach(function (p, i) {
	        if (p.channel === channel_1.X) {
	            x = p;
	            xi = i;
	        }
	        else if (p.channel === channel_1.Y) {
	            y = p;
	            yi = i;
	        }
	    });
	    return { x: x, xi: xi, y: y, yi: yi };
	}
	exports.positionalProjections = positionalProjections;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.vega = global.vega || {})));
	}(this, (function (exports) { 'use strict';
	
	/**
	 * Parse an event selector string.
	 * Returns an array of event stream definitions.
	 */
	var eventSelector = function(selector, source, marks) {
	  DEFAULT_SOURCE = source || VIEW;
	  MARKS = marks || DEFAULT_MARKS;
	  return parseMerge(selector.trim()).map(parseSelector);
	};
	
	var VIEW    = 'view';
	var LBRACK  = '[';
	var RBRACK  = ']';
	var LBRACE  = '{';
	var RBRACE  = '}';
	var COLON   = ':';
	var COMMA   = ',';
	var NAME    = '@';
	var GT      = '>';
	var ILLEGAL = /[[\]{}]/;
	var DEFAULT_SOURCE;
	var MARKS;
	var DEFAULT_MARKS = {
	      '*': 1,
	      arc: 1,
	      area: 1,
	      group: 1,
	      image: 1,
	      line: 1,
	      path: 1,
	      rect: 1,
	      rule: 1,
	      shape: 1,
	      symbol: 1,
	      text: 1,
	      trail: 1
	    };
	
	function isMarkType(type) {
	  return MARKS.hasOwnProperty(type);
	}
	
	function find(s, i, endChar, pushChar, popChar) {
	  var count = 0,
	      n = s.length,
	      c;
	  for (; i<n; ++i) {
	    c = s[i];
	    if (!count && c === endChar) return i;
	    else if (popChar && popChar.indexOf(c) >= 0) --count;
	    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
	  }
	  return i;
	}
	
	function parseMerge(s) {
	  var output = [],
	      start = 0,
	      n = s.length,
	      i = 0;
	
	  while (i < n) {
	    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
	    output.push(s.substring(start, i).trim());
	    start = ++i;
	  }
	
	  if (output.length === 0) {
	    throw 'Empty event selector: ' + s;
	  }
	  return output;
	}
	
	function parseSelector(s) {
	  return s[0] === '['
	    ? parseBetween(s)
	    : parseStream(s);
	}
	
	function parseBetween(s) {
	  var n = s.length,
	      i = 1,
	      b, stream;
	
	  i = find(s, i, RBRACK, LBRACK, RBRACK);
	  if (i === n) {
	    throw 'Empty between selector: ' + s;
	  }
	
	  b = parseMerge(s.substring(1, i));
	  if (b.length !== 2) {
	    throw 'Between selector must have two elements: ' + s;
	  }
	
	  s = s.slice(i + 1).trim();
	  if (s[0] !== GT) {
	    throw 'Expected \'>\' after between selector: ' + s;
	  }
	
	  b = b.map(parseSelector);
	
	  stream = parseSelector(s.slice(1).trim());
	  if (stream.between) {
	    return {
	      between: b,
	      stream: stream
	    };
	  } else {
	    stream.between = b;
	  }
	
	  return stream;
	}
	
	function parseStream(s) {
	  var stream = {source: DEFAULT_SOURCE},
	      source = [],
	      throttle = [0, 0],
	      markname = 0,
	      start = 0,
	      n = s.length,
	      i = 0, j,
	      filter;
	
	  // extract throttle from end
	  if (s[n-1] === RBRACE) {
	    i = s.lastIndexOf(LBRACE);
	    if (i >= 0) {
	      try {
	        throttle = parseThrottle(s.substring(i+1, n-1));
	      } catch (e) {
	        throw 'Invalid throttle specification: ' + s;
	      }
	      s = s.slice(0, i).trim();
	      n = s.length;
	    } else throw 'Unmatched right brace: ' + s;
	    i = 0;
	  }
	
	  if (!n) throw s;
	
	  // set name flag based on first char
	  if (s[0] === NAME) markname = ++i;
	
	  // extract first part of multi-part stream selector
	  j = find(s, i, COLON);
	  if (j < n) {
	    source.push(s.substring(start, j).trim());
	    start = i = ++j;
	  }
	
	  // extract remaining part of stream selector
	  i = find(s, i, LBRACK);
	  if (i === n) {
	    source.push(s.substring(start, n).trim());
	  } else {
	    source.push(s.substring(start, i).trim());
	    filter = [];
	    start = ++i;
	    if (start === n) throw 'Unmatched left bracket: ' + s;
	  }
	
	  // extract filters
	  while (i < n) {
	    i = find(s, i, RBRACK);
	    if (i === n) throw 'Unmatched left bracket: ' + s;
	    filter.push(s.substring(start, i).trim());
	    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
	    start = ++i;
	  }
	
	  // marshall event stream specification
	  if (!(n = source.length) || ILLEGAL.test(source[n-1])) {
	    throw 'Invalid event selector: ' + s;
	  }
	
	  if (n > 1) {
	    stream.type = source[1];
	    if (markname) {
	      stream.markname = source[0].slice(1);
	    } else if (isMarkType(source[0])) {
	      stream.marktype = source[0];
	    } else {
	      stream.source = source[0];
	    }
	  } else {
	    stream.type = source[0];
	  }
	  if (stream.type.slice(-1) === '!') {
	    stream.consume = true;
	    stream.type = stream.type.slice(0, -1);
	  }
	  if (filter != null) stream.filter = filter;
	  if (throttle[0]) stream.throttle = throttle[0];
	  if (throttle[1]) stream.debounce = throttle[1];
	
	  return stream;
	}
	
	function parseThrottle(s) {
	  var a = s.split(COMMA);
	  if (!s.length || a.length > 2) throw s;
	  return a.map(function(_) {
	    var x = +_;
	    if (x !== x) throw s;
	    return x;
	  });
	}
	
	exports.selector = eventSelector;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var channel_1 = __webpack_require__(23);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var spec_1 = __webpack_require__(42);
	var title_1 = __webpack_require__(41);
	var transform_1 = __webpack_require__(58);
	var util_1 = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var assemble_1 = __webpack_require__(60);
	var header_1 = __webpack_require__(61);
	var assemble_2 = __webpack_require__(63);
	var assemble_3 = __webpack_require__(64);
	var parse_1 = __webpack_require__(65);
	var assemble_4 = __webpack_require__(73);
	var parse_2 = __webpack_require__(74);
	var assemble_5 = __webpack_require__(77);
	var domain_1 = __webpack_require__(78);
	var parse_3 = __webpack_require__(90);
	var split_1 = __webpack_require__(67);
	var NameMap = /** @class */ (function () {
	    function NameMap() {
	        this.nameMap = {};
	    }
	    NameMap.prototype.rename = function (oldName, newName) {
	        this.nameMap[oldName] = newName;
	    };
	    NameMap.prototype.has = function (name) {
	        return this.nameMap[name] !== undefined;
	    };
	    NameMap.prototype.get = function (name) {
	        // If the name appears in the _nameMap, we need to read its new name.
	        // We have to loop over the dict just in case the new name also gets renamed.
	        while (this.nameMap[name] && name !== this.nameMap[name]) {
	            name = this.nameMap[name];
	        }
	        return name;
	    };
	    return NameMap;
	}());
	exports.NameMap = NameMap;
	/*
	  We use type guards instead of `instanceof` as `instanceof` makes
	  different parts of the compiler depend on the actual implementation of
	  the model classes, which in turn depend on different parts of the compiler.
	  Thus, `instanceof` leads to circular dependency problems.
	
	  On the other hand, type guards only make different parts of the compiler
	  depend on the type of the model classes, but not the actual implementation.
	*/
	function isUnitModel(model) {
	    return model && model.type === 'unit';
	}
	exports.isUnitModel = isUnitModel;
	function isFacetModel(model) {
	    return model && model.type === 'facet';
	}
	exports.isFacetModel = isFacetModel;
	function isRepeatModel(model) {
	    return model && model.type === 'repeat';
	}
	exports.isRepeatModel = isRepeatModel;
	function isConcatModel(model) {
	    return model && model.type === 'concat';
	}
	exports.isConcatModel = isConcatModel;
	function isLayerModel(model) {
	    return model && model.type === 'layer';
	}
	exports.isLayerModel = isLayerModel;
	var Model = /** @class */ (function () {
	    function Model(spec, parent, parentGivenName, config, resolve) {
	        var _this = this;
	        this.children = [];
	        /**
	         * Corrects the data references in marks after assemble.
	         */
	        this.correctDataNames = function (mark) {
	            // TODO: make this correct
	            // for normal data references
	            if (mark.from && mark.from.data) {
	                mark.from.data = _this.lookupDataSource(mark.from.data);
	            }
	            // for access to facet data
	            if (mark.from && mark.from.facet && mark.from.facet.data) {
	                mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);
	            }
	            return mark;
	        };
	        this.parent = parent;
	        this.config = config;
	        // If name is not provided, always use parent's givenName to avoid name conflicts.
	        this.name = spec.name || parentGivenName;
	        this.title = vega_util_1.isString(spec.title) ? { text: spec.title } : spec.title;
	        // Shared name maps
	        this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
	        this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
	        this.layoutSizeNameMap = parent ? parent.layoutSizeNameMap : new NameMap();
	        this.data = spec.data;
	        this.description = spec.description;
	        this.transforms = transform_1.normalizeTransform(spec.transform || []);
	        this.component = {
	            data: {
	                sources: parent ? parent.component.data.sources : {},
	                outputNodes: parent ? parent.component.data.outputNodes : {},
	                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
	                ancestorParse: parent ? __assign({}, parent.component.data.ancestorParse) : {},
	                // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined
	                isFaceted: spec_1.isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)
	            },
	            layoutSize: new split_1.Split(),
	            layoutHeaders: { row: {}, column: {} },
	            mark: null,
	            resolve: __assign({ scale: {}, axis: {}, legend: {} }, (resolve || {})),
	            selection: null,
	            scales: null,
	            projection: null,
	            axes: {},
	            legends: {},
	        };
	    }
	    Object.defineProperty(Model.prototype, "width", {
	        get: function () {
	            return this.getSizeSignalRef('width');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Model.prototype, "height", {
	        get: function () {
	            return this.getSizeSignalRef('height');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Model.prototype.initSize = function (size) {
	        var width = size.width, height = size.height;
	        if (width) {
	            this.component.layoutSize.set('width', width, true);
	        }
	        if (height) {
	            this.component.layoutSize.set('height', height, true);
	        }
	    };
	    Model.prototype.parse = function () {
	        this.parseScale();
	        this.parseLayoutSize(); // depends on scale
	        this.renameTopLevelLayoutSize();
	        this.parseSelection();
	        this.parseProjection();
	        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.
	        this.parseAxisAndHeader(); // depends on scale and layout size
	        this.parseLegend(); // depends on scale, markDef
	        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
	    };
	    Model.prototype.parseScale = function () {
	        parse_3.parseScale(this);
	    };
	    Model.prototype.parseProjection = function () {
	        parse_2.parseProjection(this);
	    };
	    /**
	     * Rename top-level spec's size to be just width / height, ignoring model name.
	     * This essentially merges the top-level spec's width/height signals with the width/height signals
	     * to help us reduce redundant signals declaration.
	     */
	    Model.prototype.renameTopLevelLayoutSize = function () {
	        if (this.getName('width') !== 'width') {
	            this.renameLayoutSize(this.getName('width'), 'width');
	        }
	        if (this.getName('height') !== 'height') {
	            this.renameLayoutSize(this.getName('height'), 'height');
	        }
	    };
	    Model.prototype.parseLegend = function () {
	        parse_1.parseLegend(this);
	    };
	    Model.prototype.assembleGroupStyle = function () {
	        if (this.type === 'unit' || this.type === 'layer') {
	            return 'cell';
	        }
	        return undefined;
	    };
	    Model.prototype.assembleLayoutSize = function () {
	        if (this.type === 'unit' || this.type === 'layer') {
	            return {
	                width: this.getSizeSignalRef('width'),
	                height: this.getSizeSignalRef('height')
	            };
	        }
	        return undefined;
	    };
	    Model.prototype.assembleHeaderMarks = function () {
	        var layoutHeaders = this.component.layoutHeaders;
	        var headerMarks = [];
	        for (var _i = 0, HEADER_CHANNELS_1 = header_1.HEADER_CHANNELS; _i < HEADER_CHANNELS_1.length; _i++) {
	            var channel = HEADER_CHANNELS_1[_i];
	            if (layoutHeaders[channel].title) {
	                headerMarks.push(header_1.getTitleGroup(this, channel));
	            }
	        }
	        for (var _a = 0, HEADER_CHANNELS_2 = header_1.HEADER_CHANNELS; _a < HEADER_CHANNELS_2.length; _a++) {
	            var channel = HEADER_CHANNELS_2[_a];
	            headerMarks = headerMarks.concat(header_1.getHeaderGroups(this, channel));
	        }
	        return headerMarks;
	    };
	    Model.prototype.assembleAxes = function () {
	        return assemble_1.assembleAxes(this.component.axes);
	    };
	    Model.prototype.assembleLegends = function () {
	        return assemble_3.assembleLegends(this);
	    };
	    Model.prototype.assembleProjections = function () {
	        return assemble_4.assembleProjections(this);
	    };
	    Model.prototype.assembleTitle = function () {
	        var title = __assign({}, title_1.extractTitleConfig(this.config.title).nonMark, this.title);
	        if (title.text) {
	            if (!util_1.contains(['unit', 'layer'], this.type)) {
	                // As described in https://github.com/vega/vega-lite/issues/2875:
	                // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.
	                if (title.anchor && title.anchor !== 'start') {
	                    log.warn(log.message.cannotSetTitleAnchor(this.type));
	                }
	                title.anchor = 'start';
	            }
	            return util_1.keys(title).length > 0 ? title : undefined;
	        }
	        return undefined;
	    };
	    /**
	     * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
	     */
	    Model.prototype.assembleGroup = function (signals) {
	        if (signals === void 0) { signals = []; }
	        var group = {};
	        signals = signals.concat(this.assembleSelectionSignals());
	        if (signals.length > 0) {
	            group.signals = signals;
	        }
	        var layout = this.assembleLayout();
	        if (layout) {
	            group.layout = layout;
	        }
	        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
	        // Only include scales if this spec is top-level or if parent is facet.
	        // (Otherwise, it will be merged with upper-level's scope.)
	        var scales = (!this.parent || isFacetModel(this.parent)) ? assemble_5.assembleScales(this) : [];
	        if (scales.length > 0) {
	            group.scales = scales;
	        }
	        var axes = this.assembleAxes();
	        if (axes.length > 0) {
	            group.axes = axes;
	        }
	        var legends = this.assembleLegends();
	        if (legends.length > 0) {
	            group.legends = legends;
	        }
	        return group;
	    };
	    Model.prototype.hasDescendantWithFieldOnChannel = function (channel) {
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            if (isUnitModel(child)) {
	                if (child.channelHasField(channel)) {
	                    return true;
	                }
	            }
	            else {
	                if (child.hasDescendantWithFieldOnChannel(channel)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    Model.prototype.getName = function (text) {
	        return util_1.varName((this.name ? this.name + '_' : '') + text);
	    };
	    /**
	     * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
	     */
	    Model.prototype.requestDataName = function (name) {
	        var fullName = this.getName(name);
	        // Increase ref count. This is critical because otherwise we won't create a data source.
	        // We also increase the ref counts on OutputNode.getSource() calls.
	        var refCounts = this.component.data.outputNodeRefCounts;
	        refCounts[fullName] = (refCounts[fullName] || 0) + 1;
	        return fullName;
	    };
	    Model.prototype.getSizeSignalRef = function (sizeType) {
	        if (isFacetModel(this.parent)) {
	            var channel = sizeType === 'width' ? 'x' : 'y';
	            var scaleComponent = this.component.scales[channel];
	            if (scaleComponent && !scaleComponent.merged) {
	                var type = scaleComponent.get('type');
	                var range = scaleComponent.get('range');
	                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {
	                    var scaleName = scaleComponent.get('name');
	                    var domain = domain_1.assembleDomain(this, channel);
	                    var field = domain_1.getFieldFromDomain(domain);
	                    if (field) {
	                        var fieldRef = fielddef_1.vgField({ aggregate: 'distinct', field: field }, { expr: 'datum' });
	                        return {
	                            signal: assemble_2.sizeExpr(scaleName, scaleComponent, fieldRef)
	                        };
	                    }
	                    else {
	                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
	                        return null;
	                    }
	                }
	            }
	        }
	        return {
	            signal: this.layoutSizeNameMap.get(this.getName(sizeType))
	        };
	    };
	    /**
	     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
	     */
	    Model.prototype.lookupDataSource = function (name) {
	        var node = this.component.data.outputNodes[name];
	        if (!node) {
	            // Name not found in map so let's just return what we got.
	            // This can happen if we already have the correct name.
	            return name;
	        }
	        return node.getSource();
	    };
	    Model.prototype.getSizeName = function (oldSizeName) {
	        return this.layoutSizeNameMap.get(oldSizeName);
	    };
	    Model.prototype.renameLayoutSize = function (oldName, newName) {
	        this.layoutSizeNameMap.rename(oldName, newName);
	    };
	    Model.prototype.renameScale = function (oldName, newName) {
	        this.scaleNameMap.rename(oldName, newName);
	    };
	    Model.prototype.renameProjection = function (oldName, newName) {
	        this.projectionNameMap.rename(oldName, newName);
	    };
	    /**
	     * @return scale name for a given channel after the scale has been parsed and named.
	     */
	    Model.prototype.scaleName = function (originalScaleName, parse) {
	        if (parse) {
	            // During the parse phase always return a value
	            // No need to refer to rename map because a scale can't be renamed
	            // before it has the original name.
	            return this.getName(originalScaleName);
	        }
	        // If there is a scale for the channel, it should either
	        // be in the scale component or exist in the name map
	        if (
	        // If there is a scale for the channel, there should be a local scale component for it
	        (channel_1.isChannel(originalScaleName) && channel_1.isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||
	            // in the scale name map (the the scale get merged by its parent)
	            this.scaleNameMap.has(this.getName(originalScaleName))) {
	            return this.scaleNameMap.get(this.getName(originalScaleName));
	        }
	        return undefined;
	    };
	    /**
	     * @return projection name after the projection has been parsed and named.
	     */
	    Model.prototype.projectionName = function (parse) {
	        if (parse) {
	            // During the parse phase always return a value
	            // No need to refer to rename map because a projection can't be renamed
	            // before it has the original name.
	            return this.getName('projection');
	        }
	        if ((this.component.projection && !this.component.projection.merged) || this.projectionNameMap.has(this.getName('projection'))) {
	            return this.projectionNameMap.get(this.getName('projection'));
	        }
	        return undefined;
	    };
	    /**
	     * Traverse a model's hierarchy to get the scale component for a particular channel.
	     */
	    Model.prototype.getScaleComponent = function (channel) {
	        /* istanbul ignore next: This is warning for debugging test */
	        if (!this.component.scales) {
	            throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');
	        }
	        var localScaleComponent = this.component.scales[channel];
	        if (localScaleComponent && !localScaleComponent.merged) {
	            return localScaleComponent;
	        }
	        return (this.parent ? this.parent.getScaleComponent(channel) : undefined);
	    };
	    /**
	     * Traverse a model's hierarchy to get a particular selection component.
	     */
	    Model.prototype.getSelectionComponent = function (variableName, origName) {
	        var sel = this.component.selection[variableName];
	        if (!sel && this.parent) {
	            sel = this.parent.getSelectionComponent(variableName, origName);
	        }
	        if (!sel) {
	            throw new Error(log.message.selectionNotFound(origName));
	        }
	        return sel;
	    };
	    return Model;
	}());
	exports.Model = Model;
	/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */
	var ModelWithField = /** @class */ (function (_super) {
	    __extends(ModelWithField, _super);
	    function ModelWithField() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /** Get "field" reference for vega */
	    ModelWithField.prototype.vgField = function (channel, opt) {
	        if (opt === void 0) { opt = {}; }
	        var fieldDef = this.fieldDef(channel);
	        if (!fieldDef) {
	            return undefined;
	        }
	        return fielddef_1.vgField(fieldDef, opt);
	    };
	    ModelWithField.prototype.reduceFieldDef = function (f, init, t) {
	        return encoding_1.reduce(this.getMapping(), function (acc, cd, c) {
	            var fieldDef = fielddef_1.getFieldDef(cd);
	            if (fieldDef) {
	                return f(acc, fieldDef, c);
	            }
	            return acc;
	        }, init, t);
	    };
	    ModelWithField.prototype.forEachFieldDef = function (f, t) {
	        encoding_1.forEach(this.getMapping(), function (cd, c) {
	            var fieldDef = fielddef_1.getFieldDef(cd);
	            if (fieldDef) {
	                f(fieldDef, c);
	            }
	        }, t);
	    };
	    return ModelWithField;
	}(Model));
	exports.ModelWithField = ModelWithField;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var logical_1 = __webpack_require__(20);
	var predicate_1 = __webpack_require__(54);
	function isFilter(t) {
	    return t['filter'] !== undefined;
	}
	exports.isFilter = isFilter;
	function isLookup(t) {
	    return t['lookup'] !== undefined;
	}
	exports.isLookup = isLookup;
	function isCalculate(t) {
	    return t['calculate'] !== undefined;
	}
	exports.isCalculate = isCalculate;
	function isBin(t) {
	    return !!t['bin'];
	}
	exports.isBin = isBin;
	function isTimeUnit(t) {
	    return t['timeUnit'] !== undefined;
	}
	exports.isTimeUnit = isTimeUnit;
	function isAggregate(t) {
	    return t['aggregate'] !== undefined;
	}
	exports.isAggregate = isAggregate;
	function normalizeTransform(transform) {
	    return transform.map(function (t) {
	        if (isFilter(t)) {
	            return {
	                filter: logical_1.normalizeLogicalOperand(t.filter, predicate_1.normalizePredicate)
	            };
	        }
	        return t;
	    });
	}
	exports.normalizeTransform = normalizeTransform;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLHFDQUFrRTtBQUNsRSx5Q0FBMEQ7QUFrQjFELGtCQUF5QixDQUFZO0lBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ25DLENBQUM7QUFGRCw0QkFFQztBQXlIRCxrQkFBeUIsQ0FBWTtJQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUNuQyxDQUFDO0FBRkQsNEJBRUM7QUFFRCxxQkFBNEIsQ0FBWTtJQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUN0QyxDQUFDO0FBRkQsa0NBRUM7QUFFRCxlQUFzQixDQUFZO0lBQ2hDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFGRCxzQkFFQztBQUVELG9CQUEyQixDQUFZO0lBQ3JDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ3JDLENBQUM7QUFGRCxnQ0FFQztBQUVELHFCQUE0QixDQUFZO0lBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ3RDLENBQUM7QUFGRCxrQ0FFQztBQUlELDRCQUFtQyxTQUFzQjtJQUN2RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUM7Z0JBQ0wsTUFBTSxFQUFFLGlDQUF1QixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsOEJBQWtCLENBQUM7YUFDOUQsQ0FBQztRQUNKLENBQUM7UUFDRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVEQsZ0RBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FnZ3JlZ2F0ZU9wfSBmcm9tICcuL2FnZ3JlZ2F0ZSc7XG5pbXBvcnQge0JpblBhcmFtc30gZnJvbSAnLi9iaW4nO1xuaW1wb3J0IHtEYXRhfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHtMb2dpY2FsT3BlcmFuZCwgbm9ybWFsaXplTG9naWNhbE9wZXJhbmR9IGZyb20gJy4vbG9naWNhbCc7XG5pbXBvcnQge25vcm1hbGl6ZVByZWRpY2F0ZSwgUHJlZGljYXRlfSBmcm9tICcuL3ByZWRpY2F0ZSc7XG5pbXBvcnQge1RpbWVVbml0fSBmcm9tICcuL3RpbWV1bml0JztcblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlclRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBUaGUgYGZpbHRlcmAgcHJvcGVydHkgbXVzdCBiZSBvbmUgb2YgdGhlIHByZWRpY2F0ZSBkZWZpbml0aW9uczpcbiAgICogKDEpIGFuIFtleHByZXNzaW9uXSh0eXBlcy5odG1sI2V4cHJlc3Npb24pIHN0cmluZyxcbiAgICogd2hlcmUgYGRhdHVtYCBjYW4gYmUgdXNlZCB0byByZWZlciB0byB0aGUgY3VycmVudCBkYXRhIG9iamVjdDtcbiAgICogKDIpIG9uZSBvZiB0aGUgZmllbGQgcHJlZGljYXRlczogW2VxdWFsIHByZWRpY2F0ZV0oZmlsdGVyLmh0bWwjZXF1YWwtcHJlZGljYXRlKTtcbiAgICogW3JhbmdlIHByZWNpZGF0ZV0oZmlsdGVyLmh0bWwjcmFuZ2UtcHJlZGljYXRlKSwgW29uZS1vZiBwcmVkaWNhdGVdKGZpbHRlci5odG1sI29uZS1vZi1wcmVkaWNhdGUpO1xuICAgKiAoMykgYSBbc2VsZWN0aW9uIHByZWRpY2F0ZV0oZmlsdGVyLmh0bWwjc2VsZWN0aW9uLXByZWRpY2F0ZSk7XG4gICAqIG9yICg0KSBhIGxvZ2ljYWwgb3BlcmFuZCB0aGF0IGNvbWJpbmVzICgxKSwgKDIpLCBvciAoMykuXG4gICAqL1xuICAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI5MDFcbiAgZmlsdGVyOiBMb2dpY2FsT3BlcmFuZDxQcmVkaWNhdGU+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaWx0ZXIodDogVHJhbnNmb3JtKTogdCBpcyBGaWx0ZXJUcmFuc2Zvcm0ge1xuICByZXR1cm4gdFsnZmlsdGVyJ10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWxjdWxhdGVUcmFuc2Zvcm0ge1xuICAvKipcbiAgICogQSBbZXhwcmVzc2lvbl0odHlwZXMuaHRtbCNleHByZXNzaW9uKSBzdHJpbmcuIFVzZSB0aGUgdmFyaWFibGUgYGRhdHVtYCB0byByZWZlciB0byB0aGUgY3VycmVudCBkYXRhIG9iamVjdC5cbiAgICovXG4gIGNhbGN1bGF0ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZmllbGQgZm9yIHN0b3JpbmcgdGhlIGNvbXB1dGVkIGZvcm11bGEgdmFsdWUuXG4gICAqL1xuICBhczogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpblRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3QgaW5kaWNhdGluZyBiaW4gcHJvcGVydGllcywgb3Igc2ltcGx5IGB0cnVlYCBmb3IgdXNpbmcgZGVmYXVsdCBiaW4gcGFyYW1ldGVycy5cbiAgICovXG4gIGJpbjogYm9vbGVhbiB8IEJpblBhcmFtcztcblxuICAvKipcbiAgICogVGhlIGRhdGEgZmllbGQgdG8gYmluLlxuICAgKi9cbiAgZmllbGQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBmaWVsZHMgYXQgd2hpY2ggdG8gd3JpdGUgdGhlIHN0YXJ0IGFuZCBlbmQgYmluIHZhbHVlcy5cbiAgICovXG4gIGFzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZVVuaXRUcmFuc2Zvcm0ge1xuICAvKipcbiAgICogVGhlIHRpbWVVbml0LlxuICAgKi9cbiAgdGltZVVuaXQ6IFRpbWVVbml0O1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSBmaWVsZCB0byBhcHBseSB0aW1lIHVuaXQuXG4gICAqL1xuICBmaWVsZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IGZpZWxkIHRvIHdyaXRlIHRoZSB0aW1lVW5pdCB2YWx1ZS5cbiAgICovXG4gIGFzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdncmVnYXRlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEFycmF5IG9mIG9iamVjdHMgdGhhdCBkZWZpbmUgZmllbGRzIHRvIGFnZ3JlZ2F0ZS5cbiAgICovXG4gIGFnZ3JlZ2F0ZTogQWdncmVnYXRlZEZpZWxkRGVmW107XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIGZpZWxkcyB0byBncm91cCBieS4gSWYgbm90IHNwZWNpZmllZCwgYSBzaW5nbGUgZ3JvdXAgY29udGFpbmluZyBhbGwgZGF0YSBvYmplY3RzIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIGdyb3VwYnk/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZ2dyZWdhdGVkRmllbGREZWYge1xuICAvKipcbiAgICogVGhlIGFnZ3JlZ2F0aW9uIG9wZXJhdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGZpZWxkcywgc3VjaCBhcyBzdW0sIGF2ZXJhZ2Ugb3IgY291bnQuXG4gICAqIFNlZSB0aGUgW2Z1bGwgbGlzdCBvZiBzdXBwb3J0ZWQgYWdncmVnYXRpb24gb3BlcmF0aW9uc10oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9hZ2dyZWdhdGUuaHRtbCNvcHMpXG4gICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgb3A6IEFnZ3JlZ2F0ZU9wO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSBmaWVsZCBmb3Igd2hpY2ggdG8gY29tcHV0ZSBhZ2dyZWdhdGUgZnVuY3Rpb24uXG4gICAqL1xuICBmaWVsZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IGZpZWxkIG5hbWVzIHRvIHVzZSBmb3IgZWFjaCBhZ2dyZWdhdGVkIGZpZWxkLlxuICAgKi9cbiAgYXM6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb29rdXBEYXRhIHtcbiAgLyoqXG4gICAqIFNlY29uZGFyeSBkYXRhIHNvdXJjZSB0byBsb29rdXAgaW4uXG4gICAqL1xuICBkYXRhOiBEYXRhO1xuICAvKipcbiAgICogS2V5IGluIGRhdGEgdG8gbG9va3VwLlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBGaWVsZHMgaW4gZm9yZWlnbiBkYXRhIHRvIGxvb2t1cC5cbiAgICogSWYgbm90IHNwZWNpZmljaWVkLCB0aGUgZW50aXJlIG9iamVjdCBpcyBxdWVyaWVkLlxuICAgKi9cbiAgZmllbGRzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9va3VwVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEtleSBpbiBwcmltYXJ5IGRhdGEgc291cmNlLlxuICAgKi9cbiAgbG9va3VwOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNlY29uZGFyeSBkYXRhIHJlZmVyZW5jZS5cbiAgICovXG4gIGZyb206IExvb2t1cERhdGE7XG5cbiAgLyoqXG4gICAqIFRoZSBmaWVsZCBvciBmaWVsZHMgZm9yIHN0b3JpbmcgdGhlIGNvbXB1dGVkIGZvcm11bGEgdmFsdWUuXG4gICAqIElmIGBmcm9tLmZpZWxkc2AgaXMgc3BlY2lmaWVkLCB0aGUgdHJhbnNmb3JtIHdpbGwgdXNlIHRoZSBzYW1lIG5hbWVzIGZvciBgYXNgLlxuICAgKiBJZiBgZnJvbS5maWVsZHNgIGlzIG5vdCBzcGVjaWZpZWQsIGBhc2AgaGFzIHRvIGJlIGEgc3RyaW5nIGFuZCB3ZSBwdXQgdGhlIHdob2xlIG9iamVjdCBpbnRvIHRoZSBkYXRhIHVuZGVyIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAgICovXG4gIGFzPzogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIHRvIHVzZSBpZiBsb29rdXAgZmFpbHMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgbnVsbGBcbiAgICovXG4gIGRlZmF1bHQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvb2t1cCh0OiBUcmFuc2Zvcm0pOiB0IGlzIExvb2t1cFRyYW5zZm9ybSB7XG4gIHJldHVybiB0Wydsb29rdXAnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYWxjdWxhdGUodDogVHJhbnNmb3JtKTogdCBpcyBDYWxjdWxhdGVUcmFuc2Zvcm0ge1xuICByZXR1cm4gdFsnY2FsY3VsYXRlJ10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmluKHQ6IFRyYW5zZm9ybSk6IHQgaXMgQmluVHJhbnNmb3JtIHtcbiAgcmV0dXJuICEhdFsnYmluJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVVbml0KHQ6IFRyYW5zZm9ybSk6IHQgaXMgVGltZVVuaXRUcmFuc2Zvcm0ge1xuICByZXR1cm4gdFsndGltZVVuaXQnXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZ2dyZWdhdGUodDogVHJhbnNmb3JtKTogdCBpcyBBZ2dyZWdhdGVUcmFuc2Zvcm0ge1xuICByZXR1cm4gdFsnYWdncmVnYXRlJ10gIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNmb3JtID0gRmlsdGVyVHJhbnNmb3JtIHwgQ2FsY3VsYXRlVHJhbnNmb3JtIHwgTG9va3VwVHJhbnNmb3JtIHwgQmluVHJhbnNmb3JtIHwgVGltZVVuaXRUcmFuc2Zvcm0gfCBBZ2dyZWdhdGVUcmFuc2Zvcm07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUcmFuc2Zvcm0odHJhbnNmb3JtOiBUcmFuc2Zvcm1bXSkge1xuICByZXR1cm4gdHJhbnNmb3JtLm1hcCh0ID0+IHtcbiAgICBpZiAoaXNGaWx0ZXIodCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbHRlcjogbm9ybWFsaXplTG9naWNhbE9wZXJhbmQodC5maWx0ZXIsIG5vcm1hbGl6ZVByZWRpY2F0ZSlcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9KTtcbn1cbiJdfQ==

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	function isVgSignalRef(o) {
	    return !!o['signal'];
	}
	exports.isVgSignalRef = isVgSignalRef;
	function isVgRangeStep(range) {
	    return !!range['step'];
	}
	exports.isVgRangeStep = isVgRangeStep;
	function isDataRefUnionedDomain(domain) {
	    if (!util_1.isArray(domain)) {
	        return 'fields' in domain && !('data' in domain);
	    }
	    return false;
	}
	exports.isDataRefUnionedDomain = isDataRefUnionedDomain;
	function isFieldRefUnionDomain(domain) {
	    if (!util_1.isArray(domain)) {
	        return 'fields' in domain && 'data' in domain;
	    }
	    return false;
	}
	exports.isFieldRefUnionDomain = isFieldRefUnionDomain;
	function isDataRefDomain(domain) {
	    if (!util_1.isArray(domain)) {
	        return 'field' in domain && 'data' in domain;
	    }
	    return false;
	}
	exports.isDataRefDomain = isDataRefDomain;
	function isSignalRefDomain(domain) {
	    if (!util_1.isArray(domain)) {
	        return 'signal' in domain;
	    }
	    return false;
	}
	exports.isSignalRefDomain = isSignalRefDomain;
	var VG_MARK_CONFIG_INDEX = {
	    opacity: 1,
	    fill: 1,
	    fillOpacity: 1,
	    stroke: 1,
	    strokeWidth: 1,
	    strokeOpacity: 1,
	    strokeDash: 1,
	    strokeDashOffset: 1,
	    size: 1,
	    shape: 1,
	    interpolate: 1,
	    tension: 1,
	    orient: 1,
	    align: 1,
	    baseline: 1,
	    text: 1,
	    limit: 1,
	    dx: 1,
	    dy: 1,
	    radius: 1,
	    theta: 1,
	    angle: 1,
	    font: 1,
	    fontSize: 1,
	    fontWeight: 1,
	    fontStyle: 1,
	    cursor: 1,
	    href: 1,
	};
	exports.VG_MARK_CONFIGS = util_1.flagKeys(VG_MARK_CONFIG_INDEX);
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var mainAxisReducer = getAxisReducer('main');
	var gridAxisReducer = getAxisReducer('grid');
	function getAxisReducer(axisType) {
	    return function (axes, axis) {
	        if (axis[axisType]) {
	            // Need to cast here so it's not longer partial type.
	            axes.push(axis[axisType].combine());
	        }
	        return axes;
	    };
	}
	function assembleAxes(axisComponents) {
	    return [].concat(axisComponents.x ? [].concat(axisComponents.x.reduce(mainAxisReducer, []), axisComponents.x.reduce(gridAxisReducer, [])) : [], axisComponents.y ? [].concat(axisComponents.y.reduce(mainAxisReducer, []), axisComponents.y.reduce(gridAxisReducer, [])) : []);
	}
	exports.assembleAxes = assembleAxes;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9heGlzL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsSUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLElBQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUvQyx3QkFBd0IsUUFBeUI7SUFDL0MsTUFBTSxDQUFDLFVBQUMsSUFBYyxFQUFFLElBQW1CO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIscURBQXFEO1lBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBWSxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsc0JBQTZCLGNBQWtDO0lBQzdELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUNkLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQzFCLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsRUFDNUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUM3QyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ04sY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FDMUIsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUM1QyxjQUFjLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQzdDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDUCxDQUFDO0FBQ0osQ0FBQztBQVhELG9DQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZ0F4aXN9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7QXhpc0NvbXBvbmVudCwgQXhpc0NvbXBvbmVudEluZGV4fSBmcm9tICcuL2NvbXBvbmVudCc7XG5cblxuY29uc3QgbWFpbkF4aXNSZWR1Y2VyID0gZ2V0QXhpc1JlZHVjZXIoJ21haW4nKTtcbmNvbnN0IGdyaWRBeGlzUmVkdWNlciA9IGdldEF4aXNSZWR1Y2VyKCdncmlkJyk7XG5cbmZ1bmN0aW9uIGdldEF4aXNSZWR1Y2VyKGF4aXNUeXBlOiAnbWFpbicgfCAnZ3JpZCcpIHtcbiAgcmV0dXJuIChheGVzOiBWZ0F4aXNbXSwgYXhpczogQXhpc0NvbXBvbmVudCkgPT4ge1xuICAgIGlmIChheGlzW2F4aXNUeXBlXSkge1xuICAgICAgLy8gTmVlZCB0byBjYXN0IGhlcmUgc28gaXQncyBub3QgbG9uZ2VyIHBhcnRpYWwgdHlwZS5cbiAgICAgIGF4ZXMucHVzaChheGlzW2F4aXNUeXBlXS5jb21iaW5lKCkgYXMgVmdBeGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGF4ZXM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZUF4ZXMoYXhpc0NvbXBvbmVudHM6IEF4aXNDb21wb25lbnRJbmRleCk6IFZnQXhpc1tdIHtcbiAgcmV0dXJuIFtdLmNvbmNhdChcbiAgICBheGlzQ29tcG9uZW50cy54ID8gW10uY29uY2F0KFxuICAgICAgYXhpc0NvbXBvbmVudHMueC5yZWR1Y2UobWFpbkF4aXNSZWR1Y2VyLCBbXSksXG4gICAgICBheGlzQ29tcG9uZW50cy54LnJlZHVjZShncmlkQXhpc1JlZHVjZXIsIFtdKVxuICAgICkgOiBbXSxcbiAgICBheGlzQ29tcG9uZW50cy55ID8gW10uY29uY2F0KFxuICAgICAgYXhpc0NvbXBvbmVudHMueS5yZWR1Y2UobWFpbkF4aXNSZWR1Y2VyLCBbXSksXG4gICAgICBheGlzQ29tcG9uZW50cy55LnJlZHVjZShncmlkQXhpc1JlZHVjZXIsIFtdKSxcbiAgICApIDogW11cbiAgKTtcbn1cblxuIl19

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var fielddef_1 = __webpack_require__(28);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	exports.HEADER_CHANNELS = ['row', 'column'];
	exports.HEADER_TYPES = ['header', 'footer'];
	function getHeaderType(orient) {
	    if (orient === 'top' || orient === 'left') {
	        return 'header';
	    }
	    return 'footer';
	}
	exports.getHeaderType = getHeaderType;
	function getTitleGroup(model, channel) {
	    var title = model.component.layoutHeaders[channel].title;
	    var textOrient = channel === 'row' ? 'vertical' : undefined;
	    var update = __assign({ align: { value: 'center' }, text: { value: title } }, (textOrient === 'vertical' ? { angle: { value: 270 } } : {}));
	    return {
	        name: model.getName(channel + "_title"),
	        role: channel + "-title",
	        type: 'group',
	        marks: [__assign({ type: 'text', role: channel + "-title-text", style: 'guide-title' }, (util_1.keys(update).length > 0 ? { encode: { update: update } } : {}))]
	    };
	}
	exports.getTitleGroup = getTitleGroup;
	function getHeaderGroups(model, channel) {
	    var layoutHeader = model.component.layoutHeaders[channel];
	    var groups = [];
	    for (var _i = 0, HEADER_TYPES_1 = exports.HEADER_TYPES; _i < HEADER_TYPES_1.length; _i++) {
	        var headerType = HEADER_TYPES_1[_i];
	        if (layoutHeader[headerType]) {
	            for (var _a = 0, _b = layoutHeader[headerType]; _a < _b.length; _a++) {
	                var headerCmpt = _b[_a];
	                groups.push(getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));
	            }
	        }
	    }
	    return groups;
	}
	exports.getHeaderGroups = getHeaderGroups;
	function getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {
	    if (headerCmpt) {
	        var title = null;
	        var facetFieldDef = layoutHeader.facetFieldDef;
	        if (facetFieldDef && headerCmpt.labels) {
	            var _a = facetFieldDef.header, header = _a === void 0 ? {} : _a;
	            var format = header.format, labelAngle = header.labelAngle;
	            var update = __assign({}, (labelAngle !== undefined ? { angle: { value: labelAngle } } : {})
	            // TODO(https://github.com/vega/vega-lite/issues/2446): apply label* (e.g, labelAlign, labelBaseline) here
	            );
	            title = __assign({ text: common_1.formatSignalRef(facetFieldDef, format, 'parent', model.config), offset: 10, orient: channel === 'row' ? 'left' : 'top', style: 'guide-label' }, (util_1.keys(update).length > 0 ? { encode: { update: update } } : {}));
	        }
	        var axes = headerCmpt.axes;
	        var hasAxes = axes && axes.length > 0;
	        if (title || hasAxes) {
	            var sizeChannel = channel === 'row' ? 'height' : 'width';
	            return __assign({ name: model.getName(channel + "_" + headerType), type: 'group', role: channel + "-" + headerType }, (layoutHeader.facetFieldDef ? {
	                from: { data: model.getName(channel + '_domain') },
	                sort: {
	                    field: fielddef_1.vgField(facetFieldDef, { expr: 'datum' }),
	                    order: facetFieldDef.sort || 'ascending'
	                }
	            } : {}), (title ? { title: title } : {}), (headerCmpt.sizeSignal ? {
	                encode: {
	                    update: (_b = {},
	                        _b[sizeChannel] = headerCmpt.sizeSignal,
	                        _b)
	                }
	            } : {}), (hasAxes ? { axes: axes } : {}));
	        }
	    }
	    return null;
	    var _b;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var scale_1 = __webpack_require__(39);
	var timeunit_1 = __webpack_require__(30);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	function applyConfig(e, config, // TODO(#1842): consolidate MarkConfig | TextConfig?
	    propsList) {
	    for (var _i = 0, propsList_1 = propsList; _i < propsList_1.length; _i++) {
	        var property = propsList_1[_i];
	        var value = config[property];
	        if (value !== undefined) {
	            e[property] = { value: value };
	        }
	    }
	    return e;
	}
	exports.applyConfig = applyConfig;
	function applyMarkConfig(e, model, propsList) {
	    for (var _i = 0, propsList_2 = propsList; _i < propsList_2.length; _i++) {
	        var property = propsList_2[_i];
	        var value = getMarkConfig(property, model.markDef, model.config);
	        if (value !== undefined) {
	            e[property] = { value: value };
	        }
	    }
	    return e;
	}
	exports.applyMarkConfig = applyMarkConfig;
	function getStyles(mark) {
	    return [].concat(mark.type, mark.style || []);
	}
	exports.getStyles = getStyles;
	/**
	 * Return property value from style or mark specific config property if exists.
	 * Otherwise, return general mark specific config.
	 */
	function getMarkConfig(prop, mark, config) {
	    // By default, read from mark config first!
	    var value = config.mark[prop];
	    // Then read mark specific config, which has higher precedence
	    var markSpecificConfig = config[mark.type];
	    if (markSpecificConfig[prop] !== undefined) {
	        value = markSpecificConfig[prop];
	    }
	    // Then read style config, which has even higher precedence.
	    var styles = getStyles(mark);
	    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
	        var style = styles_1[_i];
	        var styleConfig = config.style[style];
	        // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style
	        // However here we also check if it is defined, so it is okay to cast here
	        var p = prop;
	        if (styleConfig && styleConfig[p] !== undefined) {
	            value = styleConfig[p];
	        }
	    }
	    return value;
	}
	exports.getMarkConfig = getMarkConfig;
	function formatSignalRef(fieldDef, specifiedFormat, expr, config) {
	    var format = numberFormat(fieldDef, specifiedFormat, config);
	    if (fieldDef.bin) {
	        var startField = fielddef_1.vgField(fieldDef, { expr: expr });
	        var endField = fielddef_1.vgField(fieldDef, { expr: expr, binSuffix: 'end' });
	        return {
	            signal: binFormatExpression(startField, endField, format, config)
	        };
	    }
	    else if (fieldDef.type === 'quantitative') {
	        return {
	            signal: "" + formatExpr(fielddef_1.vgField(fieldDef, { expr: expr }), format)
	        };
	    }
	    else if (fielddef_1.isTimeFieldDef(fieldDef)) {
	        var isUTCScale = fielddef_1.isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === scale_1.ScaleType.UTC;
	        return {
	            signal: timeFormatExpression(fielddef_1.vgField(fieldDef, { expr: expr }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale)
	        };
	    }
	    else {
	        return {
	            signal: "''+" + fielddef_1.vgField(fieldDef, { expr: expr })
	        };
	    }
	}
	exports.formatSignalRef = formatSignalRef;
	function getSpecifiedOrDefaultValue(specifiedValue, defaultValue) {
	    if (specifiedValue !== undefined) {
	        return specifiedValue;
	    }
	    return defaultValue;
	}
	exports.getSpecifiedOrDefaultValue = getSpecifiedOrDefaultValue;
	/**
	 * Returns number format for a fieldDef
	 *
	 * @param format explicitly specified format
	 */
	function numberFormat(fieldDef, specifiedFormat, config) {
	    if (fieldDef.type === type_1.QUANTITATIVE) {
	        // add number format for quantitative type only
	        // Specified format in axis/legend has higher precedence than fieldDef.format
	        if (specifiedFormat) {
	            return specifiedFormat;
	        }
	        // TODO: need to make this work correctly for numeric ordinal / nominal type
	        return config.numberFormat;
	    }
	    return undefined;
	}
	exports.numberFormat = numberFormat;
	function formatExpr(field, format) {
	    return "format(" + field + ", \"" + (format || '') + "\")";
	}
	function numberFormatExpr(field, specifiedFormat, config) {
	    return formatExpr(field, specifiedFormat || config.numberFormat);
	}
	exports.numberFormatExpr = numberFormatExpr;
	function binFormatExpression(startField, endField, format, config) {
	    return startField + " === null || isNaN(" + startField + ") ? \"null\" : " + numberFormatExpr(startField, format, config) + " + \" - \" + " + numberFormatExpr(endField, format, config);
	}
	exports.binFormatExpression = binFormatExpression;
	/**
	 * Returns the time expression used for axis/legend labels or text mark for a temporal field
	 */
	function timeFormatExpression(field, timeUnit, format, shortTimeLabels, timeFormatConfig, isUTCScale) {
	    if (!timeUnit || format) {
	        // If there is not time unit, or if user explicitly specify format for axis/legend/text.
	        var _format = format || timeFormatConfig; // only use config.timeFormat if there is no timeUnit.
	        if (isUTCScale) {
	            return "utcFormat(" + field + ", '" + _format + "')";
	        }
	        else {
	            return "timeFormat(" + field + ", '" + _format + "')";
	        }
	    }
	    else {
	        return timeunit_1.formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);
	    }
	}
	exports.timeFormatExpression = timeFormatExpression;
	/**
	 * Return Vega sort parameters (tuple of field and order).
	 */
	function sortParams(orderDef, fieldRefOption) {
	    return (util_1.isArray(orderDef) ? orderDef : [orderDef]).reduce(function (s, orderChannelDef) {
	        s.field.push(fielddef_1.vgField(orderChannelDef, fieldRefOption));
	        s.order.push(orderChannelDef.sort || 'ascending');
	        return s;
	    }, { field: [], order: [] });
	}
	exports.sortParams = sortParams;
	function titleMerger(v1, v2) {
	    return {
	        explicit: v1.explicit,
	        value: v1.value === v2.value ?
	            v1.value : // if title is the same just use one of them
	            v1.value + ', ' + v2.value // join title with comma if different
	    };
	}
	exports.titleMerger = titleMerger;
	/**
	 * Checks whether a fieldDef for a particular channel requires a computed bin range.
	 */
	function binRequiresRange(fieldDef, channel) {
	    if (!fieldDef.bin) {
	        console.warn('Only use this method with binned field defs');
	        return false;
	    }
	    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
	    // We could check whether the axis or legend exists (not disabled) but that seems overkill.
	    return channel_1.isScaleChannel(channel) && util_1.contains(['ordinal', 'nominal'], fieldDef.type);
	}
	exports.binRequiresRange = binRequiresRange;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var scale_1 = __webpack_require__(39);
	var vega_schema_1 = __webpack_require__(59);
	var model_1 = __webpack_require__(57);
	function assembleLayoutSignals(model) {
	    return [].concat(sizeSignals(model, 'width'), sizeSignals(model, 'height'));
	}
	exports.assembleLayoutSignals = assembleLayoutSignals;
	function sizeSignals(model, sizeType) {
	    var channel = sizeType === 'width' ? 'x' : 'y';
	    var size = model.component.layoutSize.get(sizeType);
	    if (!size || size === 'merged') {
	        return [];
	    }
	    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.
	    var name = model.getSizeSignalRef(sizeType).signal;
	    if (size === 'range-step') {
	        var scaleComponent = model.getScaleComponent(channel);
	        if (scaleComponent) {
	            var type = scaleComponent.get('type');
	            var range = scaleComponent.get('range');
	            if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {
	                var scaleName = model.scaleName(channel);
	                if (model_1.isFacetModel(model.parent)) {
	                    // If parent is facet and this is an independent scale, return only signal signal
	                    // as the width/height will be calculated using the cardinality from
	                    // facet's aggregate rather than reading from scale domain
	                    var parentResolve = model.parent.component.resolve;
	                    if (parentResolve.scale[channel] === 'independent') {
	                        return [stepSignal(scaleName, range)];
	                    }
	                }
	                return [
	                    stepSignal(scaleName, range),
	                    {
	                        name: name,
	                        update: sizeExpr(scaleName, scaleComponent, "domain('" + scaleName + "').length")
	                    }
	                ];
	            }
	        }
	        /* istanbul ignore next: Condition should not happen -- only for warning in development. */
	        throw new Error('layout size is range step although there is no rangeStep.');
	    }
	    else {
	        return [{
	                name: name,
	                value: size
	            }];
	    }
	}
	exports.sizeSignals = sizeSignals;
	function stepSignal(scaleName, range) {
	    return {
	        name: scaleName + '_step',
	        value: range.step,
	    };
	}
	function sizeExpr(scaleName, scaleComponent, cardinality) {
	    var type = scaleComponent.get('type');
	    var padding = scaleComponent.get('padding');
	    var paddingOuter = scaleComponent.get('paddingOuter');
	    paddingOuter = paddingOuter !== undefined ? paddingOuter : padding;
	    var paddingInner = scaleComponent.get('paddingInner');
	    paddingInner = type === 'band' ?
	        // only band has real paddingInner
	        (paddingInner !== undefined ? paddingInner : padding) :
	        // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
	        // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
	        1;
	    return "bandspace(" + cardinality + ", " + paddingInner + ", " + paddingOuter + ") * " + scaleName + "_step";
	}
	exports.sizeExpr = sizeExpr;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sYXlvdXRzaXplL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQThDO0FBQzlDLGlEQUF1RTtBQUN2RSxrQ0FBNkM7QUFHN0MsK0JBQXNDLEtBQVk7SUFDaEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQ2QsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFDM0IsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FDN0IsQ0FBQztBQUNKLENBQUM7QUFMRCxzREFLQztBQUVELHFCQUE0QixLQUFZLEVBQUUsUUFBNEI7SUFDcEUsSUFBTSxPQUFPLEdBQUcsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakQsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsc0dBQXNHO0lBQ3RHLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFFckQsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhELEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxJQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTFDLEVBQUUsQ0FBQyxDQUFDLHlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLDJCQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUUzQyxFQUFFLENBQUMsQ0FBQyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLGlGQUFpRjtvQkFDakYsb0VBQW9FO29CQUNwRSwwREFBMEQ7b0JBQzFELElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztvQkFDckQsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQyxDQUFDO3dCQUNuRCxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ3hDLENBQUM7Z0JBQ0gsQ0FBQztnQkFFRCxNQUFNLENBQUM7b0JBQ0wsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7b0JBQzVCO3dCQUNFLElBQUksTUFBQTt3QkFDSixNQUFNLEVBQUUsUUFBUSxDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsYUFBVyxTQUFTLGNBQVcsQ0FBQztxQkFDN0U7aUJBQ0YsQ0FBQztZQUNKLENBQUM7UUFDSCxDQUFDO1FBQ0QsMkZBQTJGO1FBQzNGLE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsQ0FBQztnQkFDTixJQUFJLE1BQUE7Z0JBQ0osS0FBSyxFQUFFLElBQUk7YUFDWixDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQztBQS9DRCxrQ0ErQ0M7QUFFRCxvQkFBb0IsU0FBaUIsRUFBRSxLQUFrQjtJQUN2RCxNQUFNLENBQUM7UUFDTCxJQUFJLEVBQUUsU0FBUyxHQUFHLE9BQU87UUFDekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJO0tBQ2xCLENBQUM7QUFDSixDQUFDO0FBRUQsa0JBQXlCLFNBQWlCLEVBQUUsY0FBOEIsRUFBRSxXQUFtQjtJQUM3RixJQUFNLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLElBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsSUFBSSxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0RCxZQUFZLEdBQUcsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFbkUsSUFBSSxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0RCxZQUFZLEdBQUcsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLGtDQUFrQztRQUNsQyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN2RCwrRkFBK0Y7UUFDL0YsMkZBQTJGO1FBQzNGLENBQUMsQ0FBQztJQUNKLE1BQU0sQ0FBQyxlQUFhLFdBQVcsVUFBSyxZQUFZLFVBQUssWUFBWSxZQUFPLFNBQVMsVUFBTyxDQUFDO0FBQzNGLENBQUM7QUFkRCw0QkFjQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtoYXNEaXNjcmV0ZURvbWFpbn0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwLCBWZ1JhbmdlU3RlcCwgVmdTaWduYWx9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7aXNGYWNldE1vZGVsLCBNb2RlbH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtTY2FsZUNvbXBvbmVudH0gZnJvbSAnLi4vc2NhbGUvY29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlTGF5b3V0U2lnbmFscyhtb2RlbDogTW9kZWwpOiBWZ1NpZ25hbFtdIHtcbiAgcmV0dXJuIFtdLmNvbmNhdChcbiAgICBzaXplU2lnbmFscyhtb2RlbCwgJ3dpZHRoJyksXG4gICAgc2l6ZVNpZ25hbHMobW9kZWwsICdoZWlnaHQnKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2l6ZVNpZ25hbHMobW9kZWw6IE1vZGVsLCBzaXplVHlwZTogJ3dpZHRoJyB8ICdoZWlnaHQnKTogVmdTaWduYWxbXSB7XG4gIGNvbnN0IGNoYW5uZWwgPSBzaXplVHlwZSA9PT0gJ3dpZHRoJyA/ICd4JyA6ICd5JztcbiAgY29uc3Qgc2l6ZSA9IG1vZGVsLmNvbXBvbmVudC5sYXlvdXRTaXplLmdldChzaXplVHlwZSk7XG4gIGlmICghc2l6ZSB8fCBzaXplID09PSAnbWVyZ2VkJykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIFJlYWQgc2l6ZSBzaWduYWwgbmFtZSBmcm9tIG5hbWUgbWFwLCBqdXN0IGluIGNhc2UgaXQgaXMgdGhlIHRvcC1sZXZlbCBzaXplIHNpZ25hbCB0aGF0IGdvdCByZW5hbWVkLlxuICBjb25zdCBuYW1lID0gbW9kZWwuZ2V0U2l6ZVNpZ25hbFJlZihzaXplVHlwZSkuc2lnbmFsO1xuXG4gIGlmIChzaXplID09PSAncmFuZ2Utc3RlcCcpIHtcbiAgICBjb25zdCBzY2FsZUNvbXBvbmVudCA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuXG4gICAgaWYgKHNjYWxlQ29tcG9uZW50KSB7XG4gICAgICBjb25zdCB0eXBlID0gc2NhbGVDb21wb25lbnQuZ2V0KCd0eXBlJyk7XG4gICAgICBjb25zdCByYW5nZSA9IHNjYWxlQ29tcG9uZW50LmdldCgncmFuZ2UnKTtcblxuICAgICAgaWYgKGhhc0Rpc2NyZXRlRG9tYWluKHR5cGUpICYmIGlzVmdSYW5nZVN0ZXAocmFuZ2UpKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlTmFtZSA9IG1vZGVsLnNjYWxlTmFtZShjaGFubmVsKTtcblxuICAgICAgICBpZiAoaXNGYWNldE1vZGVsKG1vZGVsLnBhcmVudCkpIHtcbiAgICAgICAgICAvLyBJZiBwYXJlbnQgaXMgZmFjZXQgYW5kIHRoaXMgaXMgYW4gaW5kZXBlbmRlbnQgc2NhbGUsIHJldHVybiBvbmx5IHNpZ25hbCBzaWduYWxcbiAgICAgICAgICAvLyBhcyB0aGUgd2lkdGgvaGVpZ2h0IHdpbGwgYmUgY2FsY3VsYXRlZCB1c2luZyB0aGUgY2FyZGluYWxpdHkgZnJvbVxuICAgICAgICAgIC8vIGZhY2V0J3MgYWdncmVnYXRlIHJhdGhlciB0aGFuIHJlYWRpbmcgZnJvbSBzY2FsZSBkb21haW5cbiAgICAgICAgICBjb25zdCBwYXJlbnRSZXNvbHZlID0gbW9kZWwucGFyZW50LmNvbXBvbmVudC5yZXNvbHZlO1xuICAgICAgICAgIGlmIChwYXJlbnRSZXNvbHZlLnNjYWxlW2NoYW5uZWxdID09PSAnaW5kZXBlbmRlbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW3N0ZXBTaWduYWwoc2NhbGVOYW1lLCByYW5nZSldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgc3RlcFNpZ25hbChzY2FsZU5hbWUsIHJhbmdlKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdXBkYXRlOiBzaXplRXhwcihzY2FsZU5hbWUsIHNjYWxlQ29tcG9uZW50LCBgZG9tYWluKCcke3NjYWxlTmFtZX0nKS5sZW5ndGhgKVxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IENvbmRpdGlvbiBzaG91bGQgbm90IGhhcHBlbiAtLSBvbmx5IGZvciB3YXJuaW5nIGluIGRldmVsb3BtZW50LiAqL1xuICAgIHRocm93IG5ldyBFcnJvcignbGF5b3V0IHNpemUgaXMgcmFuZ2Ugc3RlcCBhbHRob3VnaCB0aGVyZSBpcyBubyByYW5nZVN0ZXAuJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFt7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWU6IHNpemVcbiAgICB9XTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGVwU2lnbmFsKHNjYWxlTmFtZTogc3RyaW5nLCByYW5nZTogVmdSYW5nZVN0ZXApOiBWZ1NpZ25hbCB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogc2NhbGVOYW1lICsgJ19zdGVwJyxcbiAgICB2YWx1ZTogcmFuZ2Uuc3RlcCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpemVFeHByKHNjYWxlTmFtZTogc3RyaW5nLCBzY2FsZUNvbXBvbmVudDogU2NhbGVDb21wb25lbnQsIGNhcmRpbmFsaXR5OiBzdHJpbmcpIHtcbiAgY29uc3QgdHlwZSA9IHNjYWxlQ29tcG9uZW50LmdldCgndHlwZScpO1xuICBjb25zdCBwYWRkaW5nID0gc2NhbGVDb21wb25lbnQuZ2V0KCdwYWRkaW5nJyk7XG4gIGxldCBwYWRkaW5nT3V0ZXIgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3BhZGRpbmdPdXRlcicpO1xuICBwYWRkaW5nT3V0ZXIgPSBwYWRkaW5nT3V0ZXIgIT09IHVuZGVmaW5lZCA/IHBhZGRpbmdPdXRlciA6IHBhZGRpbmc7XG5cbiAgbGV0IHBhZGRpbmdJbm5lciA9IHNjYWxlQ29tcG9uZW50LmdldCgncGFkZGluZ0lubmVyJyk7XG4gIHBhZGRpbmdJbm5lciA9IHR5cGUgPT09ICdiYW5kJyA/XG4gICAgLy8gb25seSBiYW5kIGhhcyByZWFsIHBhZGRpbmdJbm5lclxuICAgIChwYWRkaW5nSW5uZXIgIT09IHVuZGVmaW5lZCA/IHBhZGRpbmdJbm5lciA6IHBhZGRpbmcpIDpcbiAgICAvLyBGb3IgcG9pbnQsIGFzIGNhbGN1bGF0ZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3ZlZ2EvdmVnYS1zY2FsZS9ibG9iL21hc3Rlci9zcmMvYmFuZC5qcyNMMTI4LFxuICAgIC8vIGl0J3MgZXF1aXZhbGVudCB0byBoYXZlIHBhZGRpbmdJbm5lciA9IDEgc2luY2UgdGhlcmUgaXMgb25seSBuLTEgc3RlcHMgYmV0d2VlbiBuIHBvaW50cy5cbiAgICAxO1xuICByZXR1cm4gYGJhbmRzcGFjZSgke2NhcmRpbmFsaXR5fSwgJHtwYWRkaW5nSW5uZXJ9LCAke3BhZGRpbmdPdXRlcn0pICogJHtzY2FsZU5hbWV9X3N0ZXBgO1xufVxuXG5cbiJdfQ==

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var stringify = __webpack_require__(15);
	var util_1 = __webpack_require__(14);
	var parse_1 = __webpack_require__(65);
	function assembleLegends(model) {
	    var legendComponentIndex = model.component.legends;
	    var legendByDomain = {};
	    for (var _i = 0, _a = util_1.keys(legendComponentIndex); _i < _a.length; _i++) {
	        var channel = _a[_i];
	        var scaleComponent = model.getScaleComponent(channel);
	        var domainHash = stringify(scaleComponent.domains);
	        if (legendByDomain[domainHash]) {
	            for (var _b = 0, _c = legendByDomain[domainHash]; _b < _c.length; _b++) {
	                var mergedLegendComponent = _c[_b];
	                var merged = parse_1.mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);
	                if (!merged) {
	                    // If cannot merge, need to add this legend separately
	                    legendByDomain[domainHash].push(legendComponentIndex[channel]);
	                }
	            }
	        }
	        else {
	            legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
	        }
	    }
	    return util_1.flatten(util_1.vals(legendByDomain)).map(function (legendCmpt) { return legendCmpt.combine(); });
	}
	exports.assembleLegends = assembleLegends;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sZWdlbmQvYXNzZW1ibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUQ7QUFFbkQsbUNBQStDO0FBSS9DLGlDQUE2QztBQUU3Qyx5QkFBZ0MsS0FBWTtJQUMxQyxJQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3JELElBQU0sY0FBYyxHQUE4QyxFQUFFLENBQUM7SUFFckUsR0FBRyxDQUFDLENBQWtCLFVBQTBCLEVBQTFCLEtBQUEsV0FBSSxDQUFDLG9CQUFvQixDQUFDLEVBQTFCLGNBQTBCLEVBQTFCLElBQTBCO1FBQTNDLElBQU0sT0FBTyxTQUFBO1FBQ2hCLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RCxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsR0FBRyxDQUFDLENBQWdDLFVBQTBCLEVBQTFCLEtBQUEsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUExQixjQUEwQixFQUExQixJQUEwQjtnQkFBekQsSUFBTSxxQkFBcUIsU0FBQTtnQkFDOUIsSUFBTSxNQUFNLEdBQUcsNEJBQW9CLENBQUMscUJBQXFCLEVBQUUsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDMUYsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNaLHNEQUFzRDtvQkFDdEQsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxDQUFDO2FBQ0Y7UUFFSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7S0FDRjtJQUVELE1BQU0sQ0FBQyxjQUFPLENBQUMsV0FBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsVUFBMkIsSUFBSyxPQUFBLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0FBQ2xHLENBQUM7QUF0QkQsMENBc0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc3RyaW5naWZ5IGZyb20gJ2pzb24tc3RhYmxlLXN0cmluZ2lmeSc7XG5cbmltcG9ydCB7ZmxhdHRlbiwga2V5cywgdmFsc30gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnTGVnZW5kfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0xlZ2VuZENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHttZXJnZUxlZ2VuZENvbXBvbmVudH0gZnJvbSAnLi9wYXJzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZUxlZ2VuZHMobW9kZWw6IE1vZGVsKTogVmdMZWdlbmRbXSB7XG4gIGNvbnN0IGxlZ2VuZENvbXBvbmVudEluZGV4ID0gbW9kZWwuY29tcG9uZW50LmxlZ2VuZHM7XG4gIGNvbnN0IGxlZ2VuZEJ5RG9tYWluOiB7W2RvbWFpbkhhc2g6IHN0cmluZ106IExlZ2VuZENvbXBvbmVudFtdfSA9IHt9O1xuXG4gIGZvciAoY29uc3QgY2hhbm5lbCBvZiBrZXlzKGxlZ2VuZENvbXBvbmVudEluZGV4KSkge1xuICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgY29uc3QgZG9tYWluSGFzaCA9IHN0cmluZ2lmeShzY2FsZUNvbXBvbmVudC5kb21haW5zKTtcbiAgICBpZiAobGVnZW5kQnlEb21haW5bZG9tYWluSGFzaF0pIHtcbiAgICAgIGZvciAoY29uc3QgbWVyZ2VkTGVnZW5kQ29tcG9uZW50IG9mIGxlZ2VuZEJ5RG9tYWluW2RvbWFpbkhhc2hdKSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZCA9IG1lcmdlTGVnZW5kQ29tcG9uZW50KG1lcmdlZExlZ2VuZENvbXBvbmVudCwgbGVnZW5kQ29tcG9uZW50SW5kZXhbY2hhbm5lbF0pO1xuICAgICAgICBpZiAoIW1lcmdlZCkge1xuICAgICAgICAgIC8vIElmIGNhbm5vdCBtZXJnZSwgbmVlZCB0byBhZGQgdGhpcyBsZWdlbmQgc2VwYXJhdGVseVxuICAgICAgICAgIGxlZ2VuZEJ5RG9tYWluW2RvbWFpbkhhc2hdLnB1c2gobGVnZW5kQ29tcG9uZW50SW5kZXhbY2hhbm5lbF0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGVnZW5kQnlEb21haW5bZG9tYWluSGFzaF0gPSBbbGVnZW5kQ29tcG9uZW50SW5kZXhbY2hhbm5lbF0uY2xvbmUoKV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZsYXR0ZW4odmFscyhsZWdlbmRCeURvbWFpbikpLm1hcCgobGVnZW5kQ21wdDogTGVnZW5kQ29tcG9uZW50KSA9PiBsZWdlbmRDbXB0LmNvbWJpbmUoKSk7XG59XG4iXX0=

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var legend_1 = __webpack_require__(38);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var model_1 = __webpack_require__(57);
	var resolve_1 = __webpack_require__(66);
	var split_1 = __webpack_require__(67);
	var split_2 = __webpack_require__(67);
	var component_1 = __webpack_require__(68);
	var encode = __webpack_require__(69);
	var properties = __webpack_require__(72);
	function parseLegend(model) {
	    if (model_1.isUnitModel(model)) {
	        model.component.legends = parseUnitLegend(model);
	    }
	    else {
	        model.component.legends = parseNonUnitLegend(model);
	    }
	}
	exports.parseLegend = parseLegend;
	function parseUnitLegend(model) {
	    var encoding = model.encoding;
	    return [channel_1.COLOR, channel_1.SIZE, channel_1.SHAPE, channel_1.OPACITY].reduce(function (legendComponent, channel) {
	        var def = encoding[channel];
	        if (model.legend(channel) && model.getScaleComponent(channel) && !(fielddef_1.isFieldDef(def) && (channel === channel_1.SHAPE && def.type === type_1.GEOJSON))) {
	            legendComponent[channel] = parseLegendForChannel(model, channel);
	        }
	        return legendComponent;
	    }, {});
	}
	function getLegendDefWithScale(model, channel) {
	    // For binned field with continuous scale, use a special scale so we can overrride the mark props and labels
	    switch (channel) {
	        case channel_1.COLOR:
	            var scale = model.scaleName(channel_1.COLOR);
	            return model.markDef.filled ? { fill: scale } : { stroke: scale };
	        case channel_1.SIZE:
	            return { size: model.scaleName(channel_1.SIZE) };
	        case channel_1.SHAPE:
	            return { shape: model.scaleName(channel_1.SHAPE) };
	        case channel_1.OPACITY:
	            return { opacity: model.scaleName(channel_1.OPACITY) };
	    }
	    return null;
	}
	function parseLegendForChannel(model, channel) {
	    var fieldDef = model.fieldDef(channel);
	    var legend = model.legend(channel);
	    var legendCmpt = new component_1.LegendComponent({}, getLegendDefWithScale(model, channel));
	    legend_1.LEGEND_PROPERTIES.forEach(function (property) {
	        var value = getProperty(property, legend, channel, model);
	        if (value !== undefined) {
	            var explicit = property === 'values' ?
	                !!legend.values : // specified legend.values is already respected, but may get transformed.
	                value === legend[property];
	            if (explicit || model.config.legend[property] === undefined) {
	                legendCmpt.set(property, value, explicit);
	            }
	        }
	    });
	    // 2) Add mark property definition groups
	    var legendEncoding = legend.encoding || {};
	    var legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce(function (e, part) {
	        var value = encode[part] ?
	            // TODO: replace legendCmpt with type is sufficient
	            encode[part](fieldDef, legendEncoding[part], model, channel, legendCmpt.get('type')) : // apply rule
	            legendEncoding[part]; // no rule -- just default values
	        if (value !== undefined && util_1.keys(value).length > 0) {
	            e[part] = { update: value };
	        }
	        return e;
	    }, {});
	    if (util_1.keys(legendEncode).length > 0) {
	        legendCmpt.set('encode', legendEncode, !!legend.encoding);
	    }
	    return legendCmpt;
	}
	exports.parseLegendForChannel = parseLegendForChannel;
	function getProperty(property, specifiedLegend, channel, model) {
	    var fieldDef = model.fieldDef(channel);
	    switch (property) {
	        case 'format':
	            // We don't include temporal field here as we apply format in encode block
	            return common_1.numberFormat(fieldDef, specifiedLegend.format, model.config);
	        case 'title':
	            return common_1.getSpecifiedOrDefaultValue(specifiedLegend.title, fielddef_1.title(fieldDef, model.config));
	        case 'values':
	            return properties.values(specifiedLegend);
	        case 'type':
	            return common_1.getSpecifiedOrDefaultValue(specifiedLegend.type, properties.type(fieldDef.type, channel, model.getScaleComponent(channel).get('type')));
	    }
	    // Otherwise, return specified property.
	    return specifiedLegend[property];
	}
	function parseNonUnitLegend(model) {
	    var _a = model.component, legends = _a.legends, resolve = _a.resolve;
	    var _loop_1 = function (child) {
	        parseLegend(child);
	        util_1.keys(child.component.legends).forEach(function (channel) {
	            resolve.legend[channel] = resolve_1.parseGuideResolve(model.component.resolve, channel);
	            if (resolve.legend[channel] === 'shared') {
	                // If the resolve says shared (and has not been overridden)
	                // We will try to merge and see if there is a conflict
	                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
	                if (!legends[channel]) {
	                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.
	                    // Thus, mark legend as independent and remove the legend component.
	                    resolve.legend[channel] = 'independent';
	                    delete legends[channel];
	                }
	            }
	        });
	    };
	    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {
	        var child = _b[_i];
	        _loop_1(child);
	    }
	    util_1.keys(legends).forEach(function (channel) {
	        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            if (!child.component.legends[channel]) {
	                // skip if the child does not have a particular legend
	                continue;
	            }
	            if (resolve.legend[channel] === 'shared') {
	                // After merging shared legend, make sure to remove legend from child
	                delete child.component.legends[channel];
	            }
	        }
	    });
	    return legends;
	}
	function mergeLegendComponent(mergedLegend, childLegend) {
	    if (!mergedLegend) {
	        return childLegend.clone();
	    }
	    var mergedOrient = mergedLegend.getWithExplicit('orient');
	    var childOrient = childLegend.getWithExplicit('orient');
	    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
	        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
	        // Cannot merge due to inconsistent orient
	        return undefined;
	    }
	    var typeMerged = false;
	    var _loop_2 = function (prop) {
	        var mergedValueWithExplicit = split_2.mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', 
	        // Tie breaker function
	        function (v1, v2) {
	            switch (prop) {
	                case 'title':
	                    return common_1.titleMerger(v1, v2);
	                case 'type':
	                    // There are only two types. If we have different types, then prefer symbol over gradient.
	                    typeMerged = true;
	                    return split_1.makeImplicit('symbol');
	            }
	            return split_2.defaultTieBreaker(v1, v2, prop, 'legend');
	        });
	        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
	    };
	    // Otherwise, let's merge
	    for (var _i = 0, VG_LEGEND_PROPERTIES_1 = legend_1.VG_LEGEND_PROPERTIES; _i < VG_LEGEND_PROPERTIES_1.length; _i++) {
	        var prop = VG_LEGEND_PROPERTIES_1[_i];
	        _loop_2(prop);
	    }
	    if (typeMerged) {
	        if (((mergedLegend.implicit || {}).encode || {}).gradient) {
	            util_1.deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
	        }
	        if (((mergedLegend.explicit || {}).encode || {}).gradient) {
	            util_1.deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
	        }
	    }
	    return mergedLegend;
	}
	exports.mergeLegendComponent = mergeLegendComponent;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	function defaultScaleResolve(channel, model) {
	    if (model_1.isLayerModel(model) || model_1.isFacetModel(model)) {
	        return 'shared';
	    }
	    else if (model_1.isConcatModel(model) || model_1.isRepeatModel(model)) {
	        return util_1.contains(channel_1.POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';
	    }
	    /* istanbul ignore next: should never reach here. */
	    throw new Error('invalid model type for resolve');
	}
	exports.defaultScaleResolve = defaultScaleResolve;
	function parseGuideResolve(resolve, channel) {
	    var channelScaleResolve = resolve.scale[channel];
	    var guide = util_1.contains(channel_1.POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';
	    if (channelScaleResolve === 'independent') {
	        if (resolve[guide][channel] === 'shared') {
	            log.warn(log.message.independentScaleMeansIndependentGuide(channel));
	        }
	        return 'independent';
	    }
	    return resolve[guide][channel] || 'shared';
	}
	exports.parseGuideResolve = parseGuideResolve;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL3Jlc29sdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBaUU7QUFDakUsNEJBQThCO0FBRTlCLGdDQUFpQztBQUNqQyxpQ0FBd0Y7QUFFeEYsNkJBQW9DLE9BQXFCLEVBQUUsS0FBWTtJQUNyRSxFQUFFLENBQUMsQ0FBQyxvQkFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLG9CQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxxQkFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLHFCQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxlQUFRLENBQUMsaUNBQXVCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQy9FLENBQUM7SUFDRCxvREFBb0Q7SUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFSRCxrREFRQztBQUVELDJCQUFrQyxPQUFnQixFQUFFLE9BQXFCO0lBQ3ZFLElBQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxJQUFNLEtBQUssR0FBRyxlQUFRLENBQUMsaUNBQXVCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBRTdFLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDMUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUNELE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDO0FBQzdDLENBQUM7QUFaRCw4Q0FZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UE9TSVRJT05fU0NBTEVfQ0hBTk5FTFMsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7UmVzb2x2ZSwgUmVzb2x2ZU1vZGV9IGZyb20gJy4uL3Jlc29sdmUnO1xuaW1wb3J0IHtjb250YWluc30gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzRmFjZXRNb2RlbCwgaXNMYXllck1vZGVsLCBpc1JlcGVhdE1vZGVsLCBNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U2NhbGVSZXNvbHZlKGNoYW5uZWw6IFNjYWxlQ2hhbm5lbCwgbW9kZWw6IE1vZGVsKTogUmVzb2x2ZU1vZGUge1xuICBpZiAoaXNMYXllck1vZGVsKG1vZGVsKSB8fCBpc0ZhY2V0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuICdzaGFyZWQnO1xuICB9IGVsc2UgaWYgKGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdpbmRlcGVuZGVudCcgOiAnc2hhcmVkJztcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUuICovXG4gIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBtb2RlbCB0eXBlIGZvciByZXNvbHZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUd1aWRlUmVzb2x2ZShyZXNvbHZlOiBSZXNvbHZlLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpOiBSZXNvbHZlTW9kZSB7XG4gIGNvbnN0IGNoYW5uZWxTY2FsZVJlc29sdmUgPSByZXNvbHZlLnNjYWxlW2NoYW5uZWxdO1xuICBjb25zdCBndWlkZSA9IGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdheGlzJyA6ICdsZWdlbmQnO1xuXG4gIGlmIChjaGFubmVsU2NhbGVSZXNvbHZlID09PSAnaW5kZXBlbmRlbnQnKSB7XG4gICAgaWYgKHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdID09PSAnc2hhcmVkJykge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuaW5kZXBlbmRlbnRTY2FsZU1lYW5zSW5kZXBlbmRlbnRHdWlkZShjaGFubmVsKSk7XG4gICAgfVxuICAgIHJldHVybiAnaW5kZXBlbmRlbnQnO1xuICB9XG5cbiAgcmV0dXJuIHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdIHx8ICdzaGFyZWQnO1xufVxuIl19

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	/**
	 * Generic class for storing properties that are explicitly specified
	 * and implicitly determined by the compiler.
	 * This is important for scale/axis/legend merging as
	 * we want to prioritize properties that users explicitly specified.
	 */
	var Split = /** @class */ (function () {
	    function Split(explicit, implicit) {
	        if (explicit === void 0) { explicit = {}; }
	        if (implicit === void 0) { implicit = {}; }
	        this.explicit = explicit;
	        this.implicit = implicit;
	    }
	    Split.prototype.clone = function () {
	        return new Split(util_1.duplicate(this.explicit), util_1.duplicate(this.implicit));
	    };
	    Split.prototype.combine = function () {
	        // FIXME remove "as any".
	        // Add "as any" to avoid an error "Spread types may only be created from object types".
	        return __assign({}, this.explicit, this.implicit);
	    };
	    Split.prototype.get = function (key) {
	        // Explicit has higher precedence
	        return this.explicit[key] !== undefined ? this.explicit[key] : this.implicit[key];
	    };
	    Split.prototype.getWithExplicit = function (key) {
	        // Explicit has higher precedence
	        if (this.explicit[key] !== undefined) {
	            return { explicit: true, value: this.explicit[key] };
	        }
	        else if (this.implicit[key] !== undefined) {
	            return { explicit: false, value: this.implicit[key] };
	        }
	        return { explicit: false, value: undefined };
	    };
	    Split.prototype.setWithExplicit = function (key, value) {
	        if (value.value !== undefined) {
	            this.set(key, value.value, value.explicit);
	        }
	    };
	    Split.prototype.set = function (key, value, explicit) {
	        delete this[explicit ? 'implicit' : 'explicit'][key];
	        this[explicit ? 'explicit' : 'implicit'][key] = value;
	        return this;
	    };
	    Split.prototype.copyKeyFromSplit = function (key, s) {
	        // Explicit has higher precedence
	        if (s.explicit[key] !== undefined) {
	            this.set(key, s.explicit[key], true);
	        }
	        else if (s.implicit[key] !== undefined) {
	            this.set(key, s.implicit[key], false);
	        }
	    };
	    Split.prototype.copyKeyFromObject = function (key, s) {
	        // Explicit has higher precedence
	        if (s[key] !== undefined) {
	            this.set(key, s[key], true);
	        }
	    };
	    return Split;
	}());
	exports.Split = Split;
	function makeExplicit(value) {
	    return {
	        explicit: true,
	        value: value
	    };
	}
	exports.makeExplicit = makeExplicit;
	function makeImplicit(value) {
	    return {
	        explicit: false,
	        value: value
	    };
	}
	exports.makeImplicit = makeImplicit;
	function tieBreakByComparing(compare) {
	    return function (v1, v2, property, propertyOf) {
	        var diff = compare(v1.value, v2.value);
	        if (diff > 0) {
	            return v1;
	        }
	        else if (diff < 0) {
	            return v2;
	        }
	        return defaultTieBreaker(v1, v2, property, propertyOf);
	    };
	}
	exports.tieBreakByComparing = tieBreakByComparing;
	function defaultTieBreaker(v1, v2, property, propertyOf) {
	    if (v1.explicit && v2.explicit) {
	        log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
	    }
	    // If equal score, prefer v1.
	    return v1;
	}
	exports.defaultTieBreaker = defaultTieBreaker;
	function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker) {
	    if (tieBreaker === void 0) { tieBreaker = defaultTieBreaker; }
	    if (v1 === undefined || v1.value === undefined) {
	        // For first run
	        return v2;
	    }
	    if (v1.explicit && !v2.explicit) {
	        return v1;
	    }
	    else if (v2.explicit && !v1.explicit) {
	        return v2;
	    }
	    else if (util_1.stringify(v1.value) === util_1.stringify(v2.value)) {
	        return v1;
	    }
	    else {
	        return tieBreaker(v1, v2, property, propertyOf);
	    }
	}
	exports.mergeValuesWithExplicit = mergeValuesWithExplicit;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var split_1 = __webpack_require__(67);
	var LegendComponent = /** @class */ (function (_super) {
	    __extends(LegendComponent, _super);
	    function LegendComponent() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return LegendComponent;
	}(split_1.Split));
	exports.LegendComponent = LegendComponent;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbGVnZW5kL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFHQSxrQ0FBK0I7QUFHL0I7SUFBcUMsbUNBQXdCO0lBQTdEOztJQUErRCxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBQWhFLENBQXFDLGFBQUssR0FBc0I7QUFBbkQsMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xlZ2VuZH0gZnJvbSAnLi4vLi4vL2xlZ2VuZCc7XG5pbXBvcnQge05vblBvc2l0aW9uU2NhbGVDaGFubmVsfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7VmdMZWdlbmR9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7U3BsaXR9IGZyb20gJy4uL3NwbGl0JztcblxuXG5leHBvcnQgY2xhc3MgTGVnZW5kQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8UGFydGlhbDxWZ0xlZ2VuZD4+IHt9XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBMZWdlbmRDb21wb25lbnRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmRDb21wb25lbnR9O1xuXG5leHBvcnQgdHlwZSBMZWdlbmRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmR9O1xuIl19

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var mark_1 = __webpack_require__(25);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var mixins = __webpack_require__(70);
	function symbols(fieldDef, symbolsSpec, model, channel, type) {
	    if (type === 'gradient') {
	        return undefined;
	    }
	    var out = {};
	    var mark = model.mark();
	    switch (mark) {
	        case mark_1.BAR:
	        case mark_1.TICK:
	        case mark_1.TEXT:
	            out.shape = { value: 'square' };
	            break;
	        case mark_1.CIRCLE:
	        case mark_1.SQUARE:
	            out.shape = { value: mark };
	            break;
	        case mark_1.POINT:
	        case mark_1.LINE:
	        case mark_1.GEOSHAPE:
	        case mark_1.AREA:
	            // use default circle
	            break;
	    }
	    var filled = model.markDef.filled;
	    var config = channel === channel_1.COLOR ?
	        /* For color's legend, do not set fill (when filled) or stroke (when unfilled) property from config because the legend's `fill` or `stroke` scale should have precedence */
	        util_1.without(mark_1.FILL_STROKE_CONFIG, [filled ? 'fill' : 'stroke', 'strokeDash', 'strokeDashOffset']) :
	        /* For other legend, no need to omit. */
	        mark_1.FILL_STROKE_CONFIG;
	    config = util_1.without(config, ['strokeDash', 'strokeDashOffset']);
	    common_1.applyMarkConfig(out, model, config);
	    if (channel !== channel_1.COLOR) {
	        var colorMixins = mixins.color(model);
	        // If there are field for fill or stroke, remove them as we already apply channels.
	        if (colorMixins.fill && (colorMixins.fill['field'] || colorMixins.fill['value'] === 'transparent')) {
	            delete colorMixins.fill;
	        }
	        if (colorMixins.stroke && (colorMixins.stroke['field'] || colorMixins.stroke['value'] === 'transparent')) {
	            delete colorMixins.stroke;
	        }
	        out = __assign({}, out, colorMixins);
	    }
	    if (channel !== channel_1.SHAPE) {
	        var shapeDef = model.encoding.shape;
	        if (fielddef_1.isValueDef(shapeDef)) {
	            out.shape = { value: shapeDef.value };
	        }
	    }
	    if (channel !== channel_1.OPACITY) {
	        var opacity = getOpacityValue(model.encoding.opacity) || model.markDef.opacity;
	        if (opacity) {
	            out.opacity = { value: opacity };
	        }
	    }
	    out = __assign({}, out, symbolsSpec);
	    return util_1.keys(out).length > 0 ? out : undefined;
	}
	exports.symbols = symbols;
	function gradient(fieldDef, gradientSpec, model, channel, type) {
	    var out = {};
	    if (type === 'gradient') {
	        var opacity = getOpacityValue(model.encoding.opacity) || model.markDef.opacity;
	        if (opacity) {
	            out.opacity = { value: opacity };
	        }
	    }
	    out = __assign({}, out, gradientSpec);
	    return util_1.keys(out).length > 0 ? out : undefined;
	}
	exports.gradient = gradient;
	function labels(fieldDef, labelsSpec, model, channel, type) {
	    var legend = model.legend(channel);
	    var config = model.config;
	    var out = {};
	    if (fielddef_1.isTimeFieldDef(fieldDef)) {
	        var isUTCScale = model.getScaleComponent(channel).get('type') === scale_1.ScaleType.UTC;
	        labelsSpec = __assign({ text: {
	                signal: common_1.timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale)
	            } }, labelsSpec);
	    }
	    out = __assign({}, out, labelsSpec);
	    return util_1.keys(out).length > 0 ? out : undefined;
	}
	exports.labels = labels;
	function getOpacityValue(opacityDef) {
	    if (fielddef_1.isValueDef(opacityDef)) {
	        if (fielddef_1.hasConditionalValueDef(opacityDef)) {
	            var values = vega_util_1.isArray(opacityDef.condition) ? opacityDef.condition.map(function (c) { return c.value; }) : [opacityDef.condition.value];
	            return Math.max.apply(null, [opacityDef.value].concat(values));
	        }
	        else {
	            return opacityDef.value;
	        }
	    }
	    return undefined;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var predicate_1 = __webpack_require__(54);
	var util = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var common_1 = __webpack_require__(62);
	var selection_1 = __webpack_require__(55);
	var ref = __webpack_require__(71);
	function color(model) {
	    var config = model.config;
	    var filled = model.markDef.filled;
	    var vgChannel = filled ? 'fill' : 'stroke';
	    var e = nonPosition('color', model, {
	        vgChannel: vgChannel,
	        // Mark definition has higher predecence than config;
	        // fill/stroke has higher precedence than color.
	        defaultValue: model.markDef[vgChannel] ||
	            model.markDef.color ||
	            common_1.getMarkConfig(vgChannel, model.markDef, config) ||
	            common_1.getMarkConfig('color', model.markDef, config)
	    });
	    // If there is no fill, always fill symbols
	    // with transparent fills https://github.com/vega/vega-lite/issues/1316
	    if (!e.fill && util.contains(['bar', 'point', 'circle', 'square', 'geoshape'], model.mark())) {
	        e.fill = { value: 'transparent' };
	    }
	    return e;
	}
	exports.color = color;
	function baseEncodeEntry(model, ignoreOrient) {
	    return __assign({}, markDefProperties(model.markDef, ignoreOrient), color(model), nonPosition('opacity', model), text(model, 'tooltip'), text(model, 'href'));
	}
	exports.baseEncodeEntry = baseEncodeEntry;
	function markDefProperties(mark, ignoreOrient) {
	    return vega_schema_1.VG_MARK_CONFIGS.reduce(function (m, prop) {
	        if (mark[prop] && (!ignoreOrient || prop !== 'orient')) {
	            m[prop] = { value: mark[prop] };
	        }
	        return m;
	    }, {});
	}
	function valueIfDefined(prop, value) {
	    if (value !== undefined) {
	        return _a = {}, _a[prop] = { value: value }, _a;
	    }
	    return undefined;
	    var _a;
	}
	exports.valueIfDefined = valueIfDefined;
	/**
	 * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)
	 */
	function nonPosition(channel, model, opt) {
	    // TODO: refactor how we refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613
	    if (opt === void 0) { opt = {}; }
	    var defaultValue = opt.defaultValue, vgChannel = opt.vgChannel;
	    var defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);
	    var channelDef = model.encoding[channel];
	    return wrapCondition(model, channelDef, vgChannel || channel, function (cDef) {
	        return ref.midPoint(channel, cDef, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point
	        defaultRef);
	    });
	}
	exports.nonPosition = nonPosition;
	/**
	 * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.
	 * or a simple mixin if channel def has no condition.
	 */
	function wrapCondition(model, channelDef, vgChannel, refFn) {
	    var condition = channelDef && channelDef.condition;
	    var valueRef = refFn(channelDef);
	    if (condition) {
	        var conditions = vega_util_1.isArray(condition) ? condition : [condition];
	        var vgConditions = conditions.map(function (c) {
	            var conditionValueRef = refFn(c);
	            var test = fielddef_1.isConditionalSelection(c) ? selection_1.selectionPredicate(model, c.selection) : predicate_1.expression(model, c.test);
	            return __assign({ test: test }, conditionValueRef);
	        });
	        return _a = {},
	            _a[vgChannel] = vgConditions.concat((valueRef !== undefined ? [valueRef] : [])),
	            _a;
	    }
	    else {
	        return valueRef !== undefined ? (_b = {}, _b[vgChannel] = valueRef, _b) : {};
	    }
	    var _a, _b;
	}
	function text(model, channel) {
	    if (channel === void 0) { channel = 'text'; }
	    var channelDef = model.encoding[channel];
	    return wrapCondition(model, channelDef, channel, function (cDef) { return ref.text(cDef, model.config); });
	}
	exports.text = text;
	function bandPosition(fieldDef, channel, model) {
	    var scaleName = model.scaleName(channel);
	    var sizeChannel = channel === 'x' ? 'width' : 'height';
	    if (model.encoding.size) {
	        var orient = model.markDef.orient;
	        if (orient) {
	            var centeredBandPositionMixins = (_a = {},
	                // Use xc/yc and place the mark at the middle of the band
	                // This way we never have to deal with size's condition for x/y position.
	                _a[channel + 'c'] = ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 }),
	                _a);
	            if (fielddef_1.getFieldDef(model.encoding.size)) {
	                log.warn(log.message.cannotUseSizeFieldWithBandSize(channel));
	                // TODO: apply size to band and set scale range to some values between 0-1.
	                // return {
	                //   ...centeredBandPositionMixins,
	                //   ...bandSize('size', model, {vgChannel: sizeChannel})
	                // };
	            }
	            else if (fielddef_1.isValueDef(model.encoding.size)) {
	                return __assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));
	            }
	        }
	        else {
	            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));
	        }
	    }
	    return _b = {},
	        _b[channel] = ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),
	        _b[sizeChannel] = ref.bandRef(scaleName),
	        _b;
	    var _a, _b;
	}
	exports.bandPosition = bandPosition;
	function centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {
	    var centerChannel = channel === 'x' ? 'xc' : 'yc';
	    var sizeChannel = channel === 'x' ? 'width' : 'height';
	    return __assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));
	}
	exports.centeredBandPosition = centeredBandPosition;
	function binnedPosition(fieldDef, channel, scaleName, spacing, reverse) {
	    if (channel === 'x') {
	        return {
	            x2: ref.bin(fieldDef, scaleName, 'start', reverse ? 0 : spacing),
	            x: ref.bin(fieldDef, scaleName, 'end', reverse ? spacing : 0)
	        };
	    }
	    else {
	        return {
	            y2: ref.bin(fieldDef, scaleName, 'start', reverse ? spacing : 0),
	            y: ref.bin(fieldDef, scaleName, 'end', reverse ? 0 : spacing)
	        };
	    }
	}
	exports.binnedPosition = binnedPosition;
	/**
	 * Return mixins for point (non-band) position channels.
	 */
	function pointPosition(channel, model, defaultRef, vgChannel) {
	    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613
	    var encoding = model.encoding, stack = model.stack;
	    var valueRef = ref.stackable(channel, encoding[channel], model.scaleName(channel), model.getScaleComponent(channel), stack, defaultRef);
	    return _a = {},
	        _a[vgChannel || channel] = valueRef,
	        _a;
	    var _a;
	}
	exports.pointPosition = pointPosition;
	/**
	 * Return mixins for x2, y2.
	 * If channel is not specified, return one channel based on orientation.
	 */
	function pointPosition2(model, defaultRef, channel) {
	    var encoding = model.encoding, markDef = model.markDef, stack = model.stack;
	    channel = channel || (markDef.orient === 'horizontal' ? 'x2' : 'y2');
	    var baseChannel = channel === 'x2' ? 'x' : 'y';
	    var valueRef = ref.stackable2(channel, encoding[baseChannel], encoding[channel], model.scaleName(baseChannel), model.getScaleComponent(baseChannel), stack, defaultRef);
	    return _a = {}, _a[channel] = valueRef, _a;
	    var _a;
	}
	exports.pointPosition2 = pointPosition2;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Utility files for producing Vega ValueRef for marks
	 */
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var scale_1 = __webpack_require__(39);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	// TODO: we need to find a way to refactor these so that scaleName is a part of scale
	// but that's complicated.  For now, this is a huge step moving forward.
	/**
	 * @return Vega ValueRef for stackable x or y
	 */
	function stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {
	    if (fielddef_1.isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {
	        // x or y use stack_end so that stacked line's point mark use stack_end too.
	        return fieldRef(channelDef, scaleName, { suffix: 'end' });
	    }
	    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);
	}
	exports.stackable = stackable;
	/**
	 * @return Vega ValueRef for stackable x2 or y2
	 */
	function stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {
	    if (fielddef_1.isFieldDef(aFieldDef) && stack &&
	        // If fieldChannel is X and channel is X2 (or Y and Y2)
	        channel.charAt(0) === stack.fieldChannel.charAt(0)) {
	        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });
	    }
	    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);
	}
	exports.stackable2 = stackable2;
	/**
	 * Value Ref for binned fields
	 */
	function bin(fieldDef, scaleName, side, offset) {
	    var binSuffix = side === 'start' ? undefined : 'end';
	    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});
	}
	exports.bin = bin;
	function fieldRef(fieldDef, scaleName, opt, mixins) {
	    var ref = {
	        scale: scaleName,
	        field: fielddef_1.vgField(fieldDef, opt),
	    };
	    if (mixins) {
	        return __assign({}, ref, mixins);
	    }
	    return ref;
	}
	exports.fieldRef = fieldRef;
	function bandRef(scaleName, band) {
	    if (band === void 0) { band = true; }
	    return {
	        scale: scaleName,
	        band: band
	    };
	}
	exports.bandRef = bandRef;
	/**
	 * Signal that returns the middle of a bin. Should only be used with x and y.
	 */
	function binMidSignal(fieldDef, scaleName) {
	    return {
	        signal: "(" +
	            ("scale(\"" + scaleName + "\", " + fielddef_1.vgField(fieldDef, { expr: 'datum' }) + ")") +
	            " + " +
	            ("scale(\"" + scaleName + "\", " + fielddef_1.vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + ")") +
	            ")/2"
	    };
	}
	/**
	 * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
	 */
	function midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {
	    // TODO: datum support
	    if (channelDef) {
	        /* istanbul ignore else */
	        if (fielddef_1.isFieldDef(channelDef)) {
	            if (util_1.contains([channel_1.X, channel_1.Y, channel_1.X2, channel_1.Y2], channel) && util_1.contains([type_1.LATITUDE, type_1.LONGITUDE], channelDef.type)) {
	                return { field: fielddef_1.vgField(channelDef, { suffix: 'geo' }) };
	            }
	            if (channelDef.bin) {
	                // Use middle only for x an y to place marks in the center between start and end of the bin range.
	                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
	                if (util_1.contains([channel_1.X, channel_1.Y], channel) && channelDef.type === type_1.QUANTITATIVE) {
	                    if (stack && stack.impute) {
	                        // For stack, we computed bin_mid so we can impute.
	                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });
	                    }
	                    // For non-stack, we can just calculate bin mid on the fly using signal.
	                    return binMidSignal(channelDef, scaleName);
	                }
	                return fieldRef(channelDef, scaleName, common_1.binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});
	            }
	            var scaleType = scale.get('type');
	            if (scale_1.hasDiscreteDomain(scaleType)) {
	                if (scaleType === 'band') {
	                    // For band, to get mid point, need to offset by half of the band
	                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });
	                }
	                return fieldRef(channelDef, scaleName, { binSuffix: 'range' });
	            }
	            else {
	                return fieldRef(channelDef, scaleName, {}); // no need for bin suffix
	            }
	        }
	        else if (fielddef_1.isValueDef(channelDef)) {
	            return { value: channelDef.value };
	        }
	        else {
	            return undefined;
	        }
	    }
	    if (defaultRef === 'zeroOrMin') {
	        /* istanbul ignore else */
	        if (channel === channel_1.X || channel === channel_1.X2) {
	            return zeroOrMinX(scaleName, scale);
	        }
	        else if (channel === channel_1.Y || channel === channel_1.Y2) {
	            return zeroOrMinY(scaleName, scale);
	        }
	        else {
	            throw new Error("Unsupported channel " + channel + " for base function"); // FIXME add this to log.message
	        }
	    }
	    else if (defaultRef === 'zeroOrMax') {
	        /* istanbul ignore else */
	        if (channel === channel_1.X || channel === channel_1.X2) {
	            return zeroOrMaxX(scaleName, scale);
	        }
	        else if (channel === channel_1.Y || channel === channel_1.Y2) {
	            return zeroOrMaxY(scaleName, scale);
	        }
	        else {
	            throw new Error("Unsupported channel " + channel + " for base function"); // FIXME add this to log.message
	        }
	    }
	    return defaultRef;
	}
	exports.midPoint = midPoint;
	function text(textDef, config) {
	    // text
	    if (textDef) {
	        if (fielddef_1.isFieldDef(textDef)) {
	            return common_1.formatSignalRef(textDef, textDef.format, 'datum', config);
	        }
	        else if (fielddef_1.isValueDef(textDef)) {
	            return { value: textDef.value };
	        }
	    }
	    return undefined;
	}
	exports.text = text;
	function mid(sizeRef) {
	    return __assign({}, sizeRef, { mult: 0.5 });
	}
	exports.mid = mid;
	function zeroOrMinX(scaleName, scale) {
	    if (scaleName) {
	        // Log / Time / UTC scale do not support zero
	        if (!util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scale.get('type')) &&
	            scale.get('zero') !== false) {
	            return {
	                scale: scaleName,
	                value: 0
	            };
	        }
	    }
	    // Put the mark on the x-axis
	    return { value: 0 };
	}
	/**
	 * @returns {VgValueRef} base value if scale exists and return max value if scale does not exist
	 */
	function zeroOrMaxX(scaleName, scale) {
	    if (scaleName) {
	        // Log / Time / UTC scale do not support zero
	        if (!util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scale.get('type')) &&
	            scale.get('zero') !== false) {
	            return {
	                scale: scaleName,
	                value: 0
	            };
	        }
	    }
	    return { field: { group: 'width' } };
	}
	function zeroOrMinY(scaleName, scale) {
	    if (scaleName) {
	        // Log / Time / UTC scale do not support zero
	        if (!util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scale.get('type')) &&
	            scale.get('zero') !== false) {
	            return {
	                scale: scaleName,
	                value: 0
	            };
	        }
	    }
	    // Put the mark on the y-axis
	    return { field: { group: 'height' } };
	}
	/**
	 * @returns {VgValueRef} base value if scale exists and return max value if scale does not exist
	 */
	function zeroOrMaxY(scaleName, scale) {
	    if (scaleName) {
	        // Log / Time / UTC scale do not support zero
	        if (!util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scale.get('type')) &&
	            scale.get('zero') !== false) {
	            return {
	                scale: scaleName,
	                value: 0
	            };
	        }
	    }
	    // Put the mark on the y-axis
	    return { value: 0 };
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var datetime_1 = __webpack_require__(31);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	function values(legend) {
	    var vals = legend.values;
	    if (vals && datetime_1.isDateTime(vals[0])) {
	        return vals.map(function (dt) {
	            // normalize = true as end user won't put 0 = January
	            return { signal: datetime_1.dateTimeExpr(dt, true) };
	        });
	    }
	    return vals;
	}
	exports.values = values;
	function type(t, channel, scaleType) {
	    if (channel === channel_1.COLOR && ((t === 'quantitative' && !scale_1.isBinScale(scaleType)) ||
	        (t === 'temporal' && util_1.contains(['time', 'utc'], scaleType)))) {
	        return 'gradient';
	    }
	    return undefined;
	}
	exports.type = type;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2xlZ2VuZC9wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTZDO0FBQzdDLDJDQUFrRTtBQUVsRSxxQ0FBa0Q7QUFFbEQsbUNBQW9DO0FBRXBDLGdCQUF1QixNQUFjO0lBQ25DLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLHFCQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBRSxJQUFtQixDQUFDLEdBQUcsQ0FBQyxVQUFDLEVBQUU7WUFDakMscURBQXFEO1lBQ3JELE1BQU0sQ0FBQyxFQUFDLE1BQU0sRUFBRSx1QkFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBVEQsd0JBU0M7QUFFRCxjQUFxQixDQUFPLEVBQUUsT0FBZ0IsRUFBRSxTQUFvQjtJQUNsRSxFQUFFLENBQUMsQ0FDQyxPQUFPLEtBQUssZUFBSyxJQUFJLENBQ25CLENBQUMsQ0FBQyxLQUFLLGNBQWMsSUFBSSxDQUFDLGtCQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLEtBQUssVUFBVSxJQUFJLGVBQVEsQ0FBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUV6RSxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVZELG9CQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsLCBDT0xPUn0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0RhdGVUaW1lLCBkYXRlVGltZUV4cHIsIGlzRGF0ZVRpbWV9IGZyb20gJy4uLy4uL2RhdGV0aW1lJztcbmltcG9ydCB7TGVnZW5kfSBmcm9tICcuLi8uLi9sZWdlbmQnO1xuaW1wb3J0IHtpc0JpblNjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge2NvbnRhaW5zfSBmcm9tICcuLi8uLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlcyhsZWdlbmQ6IExlZ2VuZCkge1xuICBjb25zdCB2YWxzID0gbGVnZW5kLnZhbHVlcztcbiAgaWYgKHZhbHMgJiYgaXNEYXRlVGltZSh2YWxzWzBdKSkge1xuICAgIHJldHVybiAodmFscyBhcyBEYXRlVGltZVtdKS5tYXAoKGR0KSA9PiB7XG4gICAgICAvLyBub3JtYWxpemUgPSB0cnVlIGFzIGVuZCB1c2VyIHdvbid0IHB1dCAwID0gSmFudWFyeVxuICAgICAgcmV0dXJuIHtzaWduYWw6IGRhdGVUaW1lRXhwcihkdCwgdHJ1ZSl9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZSh0OiBUeXBlLCBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSk6ICdncmFkaWVudCcge1xuICBpZiAoXG4gICAgICBjaGFubmVsID09PSBDT0xPUiAmJiAoXG4gICAgICAgICh0ID09PSAncXVhbnRpdGF0aXZlJyAmJiAhaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB8fFxuICAgICAgICAodCA9PT0gJ3RlbXBvcmFsJyAmJiBjb250YWluczxTY2FsZVR5cGU+KFsndGltZScsICd1dGMnXSwgc2NhbGVUeXBlKSlcbiAgICAgIClcbiAgICApIHtcbiAgICByZXR1cm4gJ2dyYWRpZW50JztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(45);
	var util_2 = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var model_1 = __webpack_require__(57);
	function assembleProjections(model) {
	    if (model_1.isLayerModel(model) || model_1.isConcatModel(model) || model_1.isRepeatModel(model)) {
	        return assembleProjectionsForModelAndChildren(model);
	    }
	    else {
	        return assembleProjectionForModel(model);
	    }
	}
	exports.assembleProjections = assembleProjections;
	function assembleProjectionsForModelAndChildren(model) {
	    return model.children.reduce(function (projections, child) {
	        return projections.concat(child.assembleProjections());
	    }, assembleProjectionForModel(model));
	}
	exports.assembleProjectionsForModelAndChildren = assembleProjectionsForModelAndChildren;
	function assembleProjectionForModel(model) {
	    var component = model.component.projection;
	    if (!component || component.merged) {
	        return [];
	    }
	    var projection = component.combine();
	    var name = projection.name, rest = __rest(projection, ["name"]); // we need to extract name so that it is always present in the output and pass TS type validation
	    var size = {
	        signal: "[" + component.size.map(function (ref) { return ref.signal; }).join(', ') + "]"
	    };
	    var fit = component.data.reduce(function (sources, data) {
	        var source = vega_schema_1.isVgSignalRef(data) ? data.signal : "data('" + model.lookupDataSource(data) + "')";
	        if (!util_2.contains(sources, source)) {
	            // build a unique list of sources
	            sources.push(source);
	        }
	        return sources;
	    }, []);
	    if (fit.length <= 0) {
	        util_1.error("Projection's fit didn't find any data sources");
	    }
	    return [__assign({ name: name,
	            size: size, fit: {
	                signal: fit.length > 1 ? "[" + fit.join(', ') + "]" : fit[0]
	            } }, rest)];
	}
	exports.assembleProjectionForModel = assembleProjectionForModel;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9wcm9qZWN0aW9uL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2QkFBMkI7QUFDM0IsbUNBQW9DO0FBQ3BDLGlEQUEyRTtBQUMzRSxrQ0FBMkU7QUFFM0UsNkJBQW9DLEtBQVk7SUFDOUMsRUFBRSxDQUFDLENBQUMsb0JBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxxQkFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLHFCQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztBQUNILENBQUM7QUFORCxrREFNQztBQUVELGdEQUF1RCxLQUFZO0lBQ2pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLO1FBQzlDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQyxFQUFFLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUpELHdGQUlDO0FBRUQsb0NBQTJDLEtBQVk7SUFDckQsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsSUFBQSxzQkFBSSxFQUFFLG1DQUFPLENBQWUsQ0FBRSxpR0FBaUc7SUFFdEksSUFBTSxJQUFJLEdBQWdCO1FBQ3hCLE1BQU0sRUFBRSxNQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sRUFBVixDQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUc7S0FDbEUsQ0FBQztJQUVGLElBQU0sR0FBRyxHQUFhLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUMsT0FBTyxFQUFFLElBQUk7UUFDeEQsSUFBTSxNQUFNLEdBQVcsMkJBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBUyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQUksQ0FBQztRQUNyRyxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQVEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLGlDQUFpQztZQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2pCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixZQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQ0wsSUFBSSxNQUFBO1lBQ0osSUFBSSxNQUFBLEVBQ0osR0FBRyxFQUFFO2dCQUNILE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDeEQsSUFDRSxJQUFJLEVBQ1AsQ0FBQztBQUNMLENBQUM7QUFsQ0QsZ0VBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtlcnJvcn0gZnJvbSAndXRpbCc7XG5pbXBvcnQge2NvbnRhaW5zfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7aXNWZ1NpZ25hbFJlZiwgVmdQcm9qZWN0aW9uLCBWZ1NpZ25hbFJlZn0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtpc0NvbmNhdE1vZGVsLCBpc0xheWVyTW9kZWwsIGlzUmVwZWF0TW9kZWwsIE1vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVByb2plY3Rpb25zKG1vZGVsOiBNb2RlbCk6IFZnUHJvamVjdGlvbltdIHtcbiAgaWYgKGlzTGF5ZXJNb2RlbChtb2RlbCkgfHwgaXNDb25jYXRNb2RlbChtb2RlbCkgfHwgaXNSZXBlYXRNb2RlbChtb2RlbCkpIHtcbiAgICByZXR1cm4gYXNzZW1ibGVQcm9qZWN0aW9uc0Zvck1vZGVsQW5kQ2hpbGRyZW4obW9kZWwpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhc3NlbWJsZVByb2plY3Rpb25Gb3JNb2RlbChtb2RlbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlUHJvamVjdGlvbnNGb3JNb2RlbEFuZENoaWxkcmVuKG1vZGVsOiBNb2RlbCk6IFZnUHJvamVjdGlvbltdIHtcbiAgcmV0dXJuIG1vZGVsLmNoaWxkcmVuLnJlZHVjZSgocHJvamVjdGlvbnMsIGNoaWxkKSA9PiB7XG4gICAgcmV0dXJuIHByb2plY3Rpb25zLmNvbmNhdChjaGlsZC5hc3NlbWJsZVByb2plY3Rpb25zKCkpO1xuICB9LCBhc3NlbWJsZVByb2plY3Rpb25Gb3JNb2RlbChtb2RlbCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVQcm9qZWN0aW9uRm9yTW9kZWwobW9kZWw6IE1vZGVsKTogVmdQcm9qZWN0aW9uW10ge1xuICBjb25zdCBjb21wb25lbnQgPSBtb2RlbC5jb21wb25lbnQucHJvamVjdGlvbjtcbiAgaWYgKCFjb21wb25lbnQgfHwgY29tcG9uZW50Lm1lcmdlZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHByb2plY3Rpb24gPSBjb21wb25lbnQuY29tYmluZSgpO1xuICBjb25zdCB7bmFtZSwgLi4ucmVzdH0gPSBwcm9qZWN0aW9uOyAgLy8gd2UgbmVlZCB0byBleHRyYWN0IG5hbWUgc28gdGhhdCBpdCBpcyBhbHdheXMgcHJlc2VudCBpbiB0aGUgb3V0cHV0IGFuZCBwYXNzIFRTIHR5cGUgdmFsaWRhdGlvblxuXG4gIGNvbnN0IHNpemU6IFZnU2lnbmFsUmVmID0ge1xuICAgIHNpZ25hbDogYFske2NvbXBvbmVudC5zaXplLm1hcCgocmVmKSA9PiByZWYuc2lnbmFsKS5qb2luKCcsICcpfV1gXG4gIH07XG5cbiAgY29uc3QgZml0OiBzdHJpbmdbXSA9IGNvbXBvbmVudC5kYXRhLnJlZHVjZSgoc291cmNlcywgZGF0YSkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gaXNWZ1NpZ25hbFJlZihkYXRhKSA/IGRhdGEuc2lnbmFsIDogYGRhdGEoJyR7bW9kZWwubG9va3VwRGF0YVNvdXJjZShkYXRhKX0nKWA7XG4gICAgaWYgKCFjb250YWlucyhzb3VyY2VzLCBzb3VyY2UpKSB7XG4gICAgICAvLyBidWlsZCBhIHVuaXF1ZSBsaXN0IG9mIHNvdXJjZXNcbiAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfSwgW10pO1xuXG4gIGlmIChmaXQubGVuZ3RoIDw9IDApIHtcbiAgICBlcnJvcihcIlByb2plY3Rpb24ncyBmaXQgZGlkbid0IGZpbmQgYW55IGRhdGEgc291cmNlc1wiKTtcbiAgfVxuXG4gIHJldHVybiBbe1xuICAgIG5hbWUsXG4gICAgc2l6ZSxcbiAgICBmaXQ6IHtcbiAgICAgIHNpZ25hbDogZml0Lmxlbmd0aCA+IDEgPyBgWyR7Zml0LmpvaW4oJywgJyl9XWAgOiBmaXRbMF1cbiAgICB9LFxuICAgIC4uLnJlc3RcbiAgfV07XG59XG4iXX0=

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var data_1 = __webpack_require__(53);
	var fielddef_1 = __webpack_require__(28);
	var mark_1 = __webpack_require__(25);
	var projection_1 = __webpack_require__(75);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var component_1 = __webpack_require__(76);
	function parseProjection(model) {
	    if (model_1.isUnitModel(model)) {
	        model.component.projection = parseUnitProjection(model);
	    }
	    else {
	        // because parse happens from leaves up (unit specs before layer spec),
	        // we can be sure that the above if statement has already occured
	        // and therefore we have access to child.component.projection
	        // for each of model's children
	        model.component.projection = parseNonUnitProjections(model);
	    }
	}
	exports.parseProjection = parseProjection;
	function parseUnitProjection(model) {
	    var specifiedProjection = model.specifiedProjection, markDef = model.markDef, config = model.config, encoding = model.encoding;
	    var isGeoShapeMark = markDef && markDef.type === mark_1.GEOSHAPE;
	    var isGeoPointOrLineMark = encoding && [channel_1.X, channel_1.Y, channel_1.X2, channel_1.Y2].some(function (channel) {
	        var def = encoding[channel];
	        return fielddef_1.isFieldDef(def) && util_1.contains([type_1.LATITUDE, type_1.LONGITUDE], def.type);
	    });
	    if (isGeoShapeMark || isGeoPointOrLineMark) {
	        var data_2 = [];
	        [[channel_1.X, channel_1.Y], [channel_1.X2, channel_1.Y2]].forEach(function (posssiblePair) {
	            if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {
	                data_2.push({
	                    signal: model.getName("geojson_" + data_2.length)
	                });
	            }
	        });
	        if (model.channelHasField(channel_1.SHAPE) && model.fieldDef(channel_1.SHAPE).type === type_1.GEOJSON) {
	            data_2.push({
	                signal: model.getName("geojson_" + data_2.length)
	            });
	        }
	        if (data_2.length === 0) {
	            // main source is geojson, so we can just use that
	            data_2.push(model.requestDataName(data_1.MAIN));
	        }
	        return new component_1.ProjectionComponent(model.projectionName(true), __assign({}, (config.projection || {}), (specifiedProjection || {})), [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')], data_2);
	    }
	    return undefined;
	}
	function mergeIfNoConflict(first, second) {
	    var allPropertiesShared = util_1.every(projection_1.PROJECTION_PROPERTIES, function (prop) {
	        // neither has the poperty
	        if (!first.explicit.hasOwnProperty(prop) &&
	            !second.explicit.hasOwnProperty(prop)) {
	            return true;
	        }
	        // both have property and an equal value for property
	        if (first.explicit.hasOwnProperty(prop) &&
	            second.explicit.hasOwnProperty(prop) &&
	            // some properties might be signals or objects and require hashing for comparison
	            util_1.stringify(first.get(prop)) === util_1.stringify(second.get(prop))) {
	            return true;
	        }
	        return false;
	    });
	    var size = util_1.stringify(first.size) === util_1.stringify(second.size);
	    if (size) {
	        if (allPropertiesShared) {
	            return first;
	        }
	        else if (util_1.stringify(first.explicit) === util_1.stringify({})) {
	            return second;
	        }
	        else if (util_1.stringify(second.explicit) === util_1.stringify({})) {
	            return first;
	        }
	    }
	    // if all properties don't match, let each unit spec have its own projection
	    return null;
	}
	function parseNonUnitProjections(model) {
	    if (model.children.length === 0) {
	        return undefined;
	    }
	    var nonUnitProjection;
	    var mergable = util_1.every(model.children, function (child) {
	        parseProjection(child);
	        var projection = child.component.projection;
	        if (!projection) {
	            // child layer does not use a projection
	            return true;
	        }
	        else if (!nonUnitProjection) {
	            // cached 'projection' is null, cache this one
	            nonUnitProjection = projection;
	            return true;
	        }
	        else {
	            var merge = mergeIfNoConflict(nonUnitProjection, projection);
	            if (merge) {
	                nonUnitProjection = merge;
	            }
	            return !!merge;
	        }
	    });
	    // it cached one and all other children share the same projection,
	    if (nonUnitProjection && mergable) {
	        // so we can elevate it to the layer level
	        var name_1 = model.projectionName(true);
	        var modelProjection_1 = new component_1.ProjectionComponent(name_1, nonUnitProjection.specifiedProjection, nonUnitProjection.size, util_1.duplicate(nonUnitProjection.data));
	        // rename and assign all others as merged
	        model.children.forEach(function (child) {
	            if (child.component.projection) {
	                modelProjection_1.data = modelProjection_1.data.concat(child.component.projection.data);
	                child.renameProjection(child.component.projection.get('name'), name_1);
	                child.component.projection.merged = true;
	            }
	        });
	        return modelProjection_1;
	    }
	    return undefined;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PROJECTION_PROPERTIES = [
	    'type',
	    'clipAngle',
	    'clipExtent',
	    'center',
	    'rotate',
	    'precision',
	    'coefficient',
	    'distance',
	    'fraction',
	    'lobes',
	    'parallel',
	    'radius',
	    'ratio',
	    'spacing',
	    'tilt'
	];
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBMkRhLFFBQUEscUJBQXFCLEdBQXlCO0lBQ3pELE1BQU07SUFDTixXQUFXO0lBQ1gsWUFBWTtJQUNaLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLGFBQWE7SUFDYixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtDQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VmdQcm9qZWN0aW9uVHlwZX0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cbmV4cG9ydCB0eXBlIFByb2plY3Rpb25UeXBlID0gVmdQcm9qZWN0aW9uVHlwZTtcblxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBjYXJ0b2dyYXBoaWMgcHJvamVjdGlvbiB0byB1c2UuIFRoaXMgdmFsdWUgaXMgY2FzZS1pbnNlbnNpdGl2ZSwgZm9yIGV4YW1wbGUgYFwiYWxiZXJzXCJgIGFuZCBgXCJBbGJlcnNcImAgaW5kaWNhdGUgdGhlIHNhbWUgcHJvamVjdGlvbiB0eXBlLiBZb3UgY2FuIGZpbmQgYWxsIHZhbGlkIHByb2plY3Rpb24gdHlwZXMgW2luIHRoZSBkb2N1bWVudGF0aW9uXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3Byb2plY3Rpb24uaHRtbCNwcm9qZWN0aW9uLXR5cGVzKS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBtZXJjYXRvcmBcbiAgICovXG4gIHR5cGU/OiBQcm9qZWN0aW9uVHlwZTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgcHJvamVjdGlvbuKAmXMgY2xpcHBpbmcgY2lyY2xlIHJhZGl1cyB0byB0aGUgc3BlY2lmaWVkIGFuZ2xlIGluIGRlZ3JlZXMuIElmIGBudWxsYCwgc3dpdGNoZXMgdG8gW2FudGltZXJpZGlhbl0oaHR0cDovL2JsLm9ja3Mub3JnL21ib3N0b2NrLzM3ODg5OTkpIGN1dHRpbmcgcmF0aGVyIHRoYW4gc21hbGwtY2lyY2xlIGNsaXBwaW5nLlxuICAgKi9cbiAgY2xpcEFuZ2xlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9qZWN0aW9u4oCZcyB2aWV3cG9ydCBjbGlwIGV4dGVudCB0byB0aGUgc3BlY2lmaWVkIGJvdW5kcyBpbiBwaXhlbHMuIFRoZSBleHRlbnQgYm91bmRzIGFyZSBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgYFtbeDAsIHkwXSwgW3gxLCB5MV1dYCwgd2hlcmUgYHgwYCBpcyB0aGUgbGVmdC1zaWRlIG9mIHRoZSB2aWV3cG9ydCwgYHkwYCBpcyB0aGUgdG9wLCBgeDFgIGlzIHRoZSByaWdodCBhbmQgYHkxYCBpcyB0aGUgYm90dG9tLiBJZiBgbnVsbGAsIG5vIHZpZXdwb3J0IGNsaXBwaW5nIGlzIHBlcmZvcm1lZC5cbiAgICovXG4gIGNsaXBFeHRlbnQ/OiBudW1iZXJbXVtdO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9qZWN0aW9u4oCZcyBjZW50ZXIgdG8gdGhlIHNwZWNpZmllZCBjZW50ZXIsIGEgdHdvLWVsZW1lbnQgYXJyYXkgb2YgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBpbiBkZWdyZWVzLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYFswLCAwXWBcbiAgICovXG4gIGNlbnRlcj86IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9qZWN0aW9u4oCZcyB0aHJlZS1heGlzIHJvdGF0aW9uIHRvIHRoZSBzcGVjaWZpZWQgYW5nbGVzLCB3aGljaCBtdXN0IGJlIGEgdHdvLSBvciB0aHJlZS1lbGVtZW50IGFycmF5IG9mIG51bWJlcnMgW2BsYW1iZGFgLCBgcGhpYCwgYGdhbW1hYF0gc3BlY2lmeWluZyB0aGUgcm90YXRpb24gYW5nbGVzIGluIGRlZ3JlZXMgYWJvdXQgZWFjaCBzcGhlcmljYWwgYXhpcy4gKFRoZXNlIGNvcnJlc3BvbmQgdG8geWF3LCBwaXRjaCBhbmQgcm9sbC4pXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgWzAsIDAsIDBdYFxuICAgKi9cbiAgcm90YXRlPzogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRocmVzaG9sZCBmb3IgdGhlIHByb2plY3Rpb27igJlzIFthZGFwdGl2ZSByZXNhbXBsaW5nXShodHRwOi8vYmwub2Nrcy5vcmcvbWJvc3RvY2svMzc5NTU0NCkgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZSBpbiBwaXhlbHMuIFRoaXMgdmFsdWUgY29ycmVzcG9uZHMgdG8gdGhlIFtEb3VnbGFz4oCTUGV1Y2tlciBkaXN0YW5jZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SYW1lciVFMiU4MCU5M0RvdWdsYXMlRTIlODAlOTNQZXVja2VyX2FsZ29yaXRobSkuIElmIHByZWNpc2lvbiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBwcm9qZWN0aW9u4oCZcyBjdXJyZW50IHJlc2FtcGxpbmcgcHJlY2lzaW9uIHdoaWNoIGRlZmF1bHRzIHRvIGDiiJowLjUg4omFIDAuNzA3MTDigKZgLlxuICAgKi9cbiAgcHJlY2lzaW9uPzogU3RyaW5nO1xuXG4gIC8qIFRoZSBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgYWxsIHN1cHBvcnRlZCBmb3Igc3BlY2lmaWMgdHlwZXMgb2YgcHJvamVjdGlvbnMuIENvbnN1bHQgdGhlIGQzLWdlby1wcm9qZWN0aW9uIGxpYnJhcnkgZm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1nZW8tcHJvamVjdGlvbiAqL1xuICBjb2VmZmljaWVudD86IG51bWJlcjtcbiAgZGlzdGFuY2U/OiBudW1iZXI7XG4gIGZyYWN0aW9uPzogbnVtYmVyO1xuICBsb2Jlcz86IG51bWJlcjtcbiAgcGFyYWxsZWw/OiBudW1iZXI7XG4gIHJhZGl1cz86IG51bWJlcjtcbiAgcmF0aW8/OiBudW1iZXI7XG4gIHNwYWNpbmc/OiBudW1iZXI7XG4gIHRpbHQ/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQW55IHByb3BlcnR5IG9mIFByb2plY3Rpb24gY2FuIGJlIGluIGNvbmZpZ1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3Rpb25Db25maWcgZXh0ZW5kcyBQcm9qZWN0aW9uIHsgfVxuXG5leHBvcnQgY29uc3QgUFJPSkVDVElPTl9QUk9QRVJUSUVTOiAoa2V5b2YgUHJvamVjdGlvbilbXSA9IFtcbiAgJ3R5cGUnLFxuICAnY2xpcEFuZ2xlJyxcbiAgJ2NsaXBFeHRlbnQnLFxuICAnY2VudGVyJyxcbiAgJ3JvdGF0ZScsXG4gICdwcmVjaXNpb24nLFxuICAnY29lZmZpY2llbnQnLFxuICAnZGlzdGFuY2UnLFxuICAnZnJhY3Rpb24nLFxuICAnbG9iZXMnLFxuICAncGFyYWxsZWwnLFxuICAncmFkaXVzJyxcbiAgJ3JhdGlvJyxcbiAgJ3NwYWNpbmcnLFxuICAndGlsdCdcbl07XG4iXX0=

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var split_1 = __webpack_require__(67);
	var ProjectionComponent = /** @class */ (function (_super) {
	    __extends(ProjectionComponent, _super);
	    function ProjectionComponent(name, specifiedProjection, size, data) {
	        var _this = _super.call(this, __assign({}, specifiedProjection), // all explicit properties of projection
	        { name: name } // name as initial implicit property
	        ) || this;
	        _this.specifiedProjection = specifiedProjection;
	        _this.size = size;
	        _this.data = data;
	        _this.merged = false;
	        return _this;
	    }
	    return ProjectionComponent;
	}(split_1.Split));
	exports.ProjectionComponent = ProjectionComponent;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvcHJvamVjdGlvbi9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxrQ0FBK0I7QUFFL0I7SUFBeUMsdUNBQTRCO0lBR25FLDZCQUFZLElBQVksRUFBUyxtQkFBK0IsRUFBUyxJQUFtQixFQUFTLElBQThCO1FBQW5JLFlBQ0UsK0JBQ00sbUJBQW1CLEdBQUksd0NBQXdDO1FBQ25FLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBRSxvQ0FBb0M7U0FDN0MsU0FDRjtRQUxnQyx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQVk7UUFBUyxVQUFJLEdBQUosSUFBSSxDQUFlO1FBQVMsVUFBSSxHQUFKLElBQUksQ0FBMEI7UUFGNUgsWUFBTSxHQUFHLEtBQUssQ0FBQzs7SUFPdEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQVRELENBQXlDLGFBQUssR0FTN0M7QUFUWSxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb2plY3Rpb259IGZyb20gJy4uLy4uL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtWZ1Byb2plY3Rpb24sIFZnU2lnbmFsUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8UGFydGlhbDxWZ1Byb2plY3Rpb24+PiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHB1YmxpYyBzcGVjaWZpZWRQcm9qZWN0aW9uOiBQcm9qZWN0aW9uLCBwdWJsaWMgc2l6ZTogVmdTaWduYWxSZWZbXSwgcHVibGljIGRhdGE6IChzdHJpbmcgfCBWZ1NpZ25hbFJlZilbXSkge1xuICAgIHN1cGVyKFxuICAgICAgey4uLnNwZWNpZmllZFByb2plY3Rpb259LCAgLy8gYWxsIGV4cGxpY2l0IHByb3BlcnRpZXMgb2YgcHJvamVjdGlvblxuICAgICAge25hbWV9ICAvLyBuYW1lIGFzIGluaXRpYWwgaW1wbGljaXQgcHJvcGVydHlcbiAgICApO1xuICB9XG59XG4iXX0=

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var util_1 = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var model_1 = __webpack_require__(57);
	var selection_1 = __webpack_require__(55);
	var domain_1 = __webpack_require__(78);
	function assembleScales(model) {
	    if (model_1.isLayerModel(model) || model_1.isConcatModel(model) || model_1.isRepeatModel(model)) {
	        // For concat / layer / repeat, include scales of children too
	        return model.children.reduce(function (scales, child) {
	            return scales.concat(assembleScales(child));
	        }, assembleScalesForModel(model));
	    }
	    else {
	        // For facet, child scales would not be included in the parent's scope.
	        // For unit, there is no child.
	        return assembleScalesForModel(model);
	    }
	}
	exports.assembleScales = assembleScales;
	function assembleScalesForModel(model) {
	    return util_1.keys(model.component.scales).reduce(function (scales, channel) {
	        var scaleComponent = model.component.scales[channel];
	        if (scaleComponent.merged) {
	            // Skipped merged scales
	            return scales;
	        }
	        var scale = scaleComponent.combine();
	        // need to separate const and non const object destruction
	        var domainRaw = scale.domainRaw, range = scale.range;
	        var name = scale.name, type = scale.type, _d = scale.domainRaw, _r = scale.range, otherScaleProps = __rest(scale, ["name", "type", "domainRaw", "range"]);
	        range = assembleScaleRange(range, name, model, channel);
	        // As scale parsing occurs before selection parsing, a temporary signal
	        // is used for domainRaw. Here, we detect if this temporary signal
	        // is set, and replace it with the correct domainRaw signal.
	        // For more information, see isRawSelectionDomain in selection.ts.
	        if (domainRaw && selection_1.isRawSelectionDomain(domainRaw)) {
	            domainRaw = selection_1.selectionScaleDomain(model, domainRaw);
	        }
	        scales.push(__assign({ name: name,
	            type: type, domain: domain_1.assembleDomain(model, channel) }, (domainRaw ? { domainRaw: domainRaw } : {}), { range: range }, otherScaleProps));
	        return scales;
	    }, []);
	}
	exports.assembleScalesForModel = assembleScalesForModel;
	function assembleScaleRange(scaleRange, scaleName, model, channel) {
	    // add signals to x/y range
	    if (channel === 'x' || channel === 'y') {
	        if (vega_schema_1.isVgRangeStep(scaleRange)) {
	            // For x/y range step, use a signal created in layout assemble instead of a constant range step.
	            return {
	                step: { signal: scaleName + '_step' }
	            };
	        }
	        else if (vega_util_1.isArray(scaleRange) && scaleRange.length === 2) {
	            var r0 = scaleRange[0];
	            var r1 = scaleRange[1];
	            if (r0 === 0 && vega_schema_1.isVgSignalRef(r1)) {
	                // Replace width signal just in case it is renamed.
	                return [0, { signal: model.getSizeName(r1.signal) }];
	            }
	            else if (vega_schema_1.isVgSignalRef(r0) && r1 === 0) {
	                // Replace height signal just in case it is renamed.
	                return [{ signal: model.getSizeName(r0.signal) }, 0];
	            }
	        }
	    }
	    return scaleRange;
	}
	exports.assembleScaleRange = assembleScaleRange;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zY2FsZS9hc3NlbWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQWtDO0FBRWxDLG1DQUFnQztBQUNoQyxpREFBaUY7QUFDakYsa0NBQTJFO0FBQzNFLG9EQUFrRjtBQUNsRixtQ0FBd0M7QUFFeEMsd0JBQStCLEtBQVk7SUFDekMsRUFBRSxDQUFDLENBQUMsb0JBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxxQkFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLHFCQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLDhEQUE4RDtRQUM5RCxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxNQUFNLEVBQUUsS0FBSztZQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTix1RUFBdUU7UUFDdkUsK0JBQStCO1FBQy9CLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0FBQ0gsQ0FBQztBQVhELHdDQVdDO0FBRUQsZ0NBQXVDLEtBQVk7SUFDL0MsTUFBTSxDQUFDLFdBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQWlCLEVBQUUsT0FBcUI7UUFDbEYsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUIsd0JBQXdCO1lBQ3hCLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUVELElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV2QywwREFBMEQ7UUFDckQsSUFBQSwyQkFBUyxFQUFFLG1CQUFLLENBQVU7UUFDeEIsSUFBQSxpQkFBSSxFQUFFLGlCQUFJLEVBQUUsb0JBQWEsRUFBRSxnQkFBUyxFQUFFLHVFQUFrQixDQUFVO1FBRXpFLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RCx1RUFBdUU7UUFDdkUsa0VBQWtFO1FBQ2xFLDREQUE0RDtRQUM1RCxrRUFBa0U7UUFDbEUsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLGdDQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxTQUFTLEdBQUcsZ0NBQW9CLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFHRCxNQUFNLENBQUMsSUFBSSxZQUNULElBQUksTUFBQTtZQUNKLElBQUksTUFBQSxFQUNKLE1BQU0sRUFBRSx1QkFBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsSUFDbkMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsU0FBUyxXQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ2pDLEtBQUssRUFBRSxLQUFLLElBQ1QsZUFBZSxFQUNsQixDQUFDO1FBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDLEVBQUUsRUFBZSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQXBDRCx3REFvQ0M7QUFFRCw0QkFBbUMsVUFBbUIsRUFBRSxTQUFpQixFQUFFLEtBQVksRUFBRSxPQUFnQjtJQUN2RywyQkFBMkI7SUFDM0IsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEdBQUcsSUFBSSxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxFQUFFLENBQUMsQ0FBQywyQkFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixnR0FBZ0c7WUFDaEcsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsT0FBTyxFQUFDO2FBQ3BDLENBQUM7UUFDSixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLG1CQUFPLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSwyQkFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsbURBQW1EO2dCQUNuRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQ3JELENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsMkJBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsb0RBQW9EO2dCQUNwRCxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JELENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQXJCRCxnREFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQXJyYXl9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NoYW5uZWwsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge2tleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwLCBpc1ZnU2lnbmFsUmVmLCBWZ1JhbmdlLCBWZ1NjYWxlfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzTGF5ZXJNb2RlbCwgaXNSZXBlYXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7aXNSYXdTZWxlY3Rpb25Eb21haW4sIHNlbGVjdGlvblNjYWxlRG9tYWlufSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uJztcbmltcG9ydCB7YXNzZW1ibGVEb21haW59IGZyb20gJy4vZG9tYWluJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzKG1vZGVsOiBNb2RlbCk6IFZnU2NhbGVbXSB7XG4gIGlmIChpc0xheWVyTW9kZWwobW9kZWwpIHx8IGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgLy8gRm9yIGNvbmNhdCAvIGxheWVyIC8gcmVwZWF0LCBpbmNsdWRlIHNjYWxlcyBvZiBjaGlsZHJlbiB0b29cbiAgICByZXR1cm4gbW9kZWwuY2hpbGRyZW4ucmVkdWNlKChzY2FsZXMsIGNoaWxkKSA9PiB7XG4gICAgICByZXR1cm4gc2NhbGVzLmNvbmNhdChhc3NlbWJsZVNjYWxlcyhjaGlsZCkpO1xuICAgIH0sIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGb3IgZmFjZXQsIGNoaWxkIHNjYWxlcyB3b3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHBhcmVudCdzIHNjb3BlLlxuICAgIC8vIEZvciB1bml0LCB0aGVyZSBpcyBubyBjaGlsZC5cbiAgICByZXR1cm4gYXNzZW1ibGVTY2FsZXNGb3JNb2RlbChtb2RlbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWw6IE1vZGVsKTogVmdTY2FsZVtdIHtcbiAgICByZXR1cm4ga2V5cyhtb2RlbC5jb21wb25lbnQuc2NhbGVzKS5yZWR1Y2UoKHNjYWxlczogVmdTY2FsZVtdLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gbW9kZWwuY29tcG9uZW50LnNjYWxlc1tjaGFubmVsXTtcbiAgICAgIGlmIChzY2FsZUNvbXBvbmVudC5tZXJnZWQpIHtcbiAgICAgICAgLy8gU2tpcHBlZCBtZXJnZWQgc2NhbGVzXG4gICAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlID0gc2NhbGVDb21wb25lbnQuY29tYmluZSgpO1xuXG4gICAgICAvLyBuZWVkIHRvIHNlcGFyYXRlIGNvbnN0IGFuZCBub24gY29uc3Qgb2JqZWN0IGRlc3RydWN0aW9uXG4gICAgICBsZXQge2RvbWFpblJhdywgcmFuZ2V9ID0gc2NhbGU7XG4gICAgICBjb25zdCB7bmFtZSwgdHlwZSwgZG9tYWluUmF3OiBfZCwgcmFuZ2U6IF9yLCAuLi5vdGhlclNjYWxlUHJvcHN9ID0gc2NhbGU7XG5cbiAgICAgIHJhbmdlID0gYXNzZW1ibGVTY2FsZVJhbmdlKHJhbmdlLCBuYW1lLCBtb2RlbCwgY2hhbm5lbCk7XG5cbiAgICAgIC8vIEFzIHNjYWxlIHBhcnNpbmcgb2NjdXJzIGJlZm9yZSBzZWxlY3Rpb24gcGFyc2luZywgYSB0ZW1wb3Jhcnkgc2lnbmFsXG4gICAgICAvLyBpcyB1c2VkIGZvciBkb21haW5SYXcuIEhlcmUsIHdlIGRldGVjdCBpZiB0aGlzIHRlbXBvcmFyeSBzaWduYWxcbiAgICAgIC8vIGlzIHNldCwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgY29ycmVjdCBkb21haW5SYXcgc2lnbmFsLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBpc1Jhd1NlbGVjdGlvbkRvbWFpbiBpbiBzZWxlY3Rpb24udHMuXG4gICAgICBpZiAoZG9tYWluUmF3ICYmIGlzUmF3U2VsZWN0aW9uRG9tYWluKGRvbWFpblJhdykpIHtcbiAgICAgICAgZG9tYWluUmF3ID0gc2VsZWN0aW9uU2NhbGVEb21haW4obW9kZWwsIGRvbWFpblJhdyk7XG4gICAgICB9XG5cblxuICAgICAgc2NhbGVzLnB1c2goe1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICBkb21haW46IGFzc2VtYmxlRG9tYWluKG1vZGVsLCBjaGFubmVsKSxcbiAgICAgICAgLi4uKGRvbWFpblJhdyA/IHtkb21haW5SYXd9IDoge30pLFxuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIC4uLm90aGVyU2NhbGVQcm9wc1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgfSwgW10gYXMgVmdTY2FsZVtdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVSYW5nZShzY2FsZVJhbmdlOiBWZ1JhbmdlLCBzY2FsZU5hbWU6IHN0cmluZywgbW9kZWw6IE1vZGVsLCBjaGFubmVsOiBDaGFubmVsKSB7XG4gIC8vIGFkZCBzaWduYWxzIHRvIHgveSByYW5nZVxuICBpZiAoY2hhbm5lbCA9PT0gJ3gnIHx8IGNoYW5uZWwgPT09ICd5Jykge1xuICAgIGlmIChpc1ZnUmFuZ2VTdGVwKHNjYWxlUmFuZ2UpKSB7XG4gICAgICAvLyBGb3IgeC95IHJhbmdlIHN0ZXAsIHVzZSBhIHNpZ25hbCBjcmVhdGVkIGluIGxheW91dCBhc3NlbWJsZSBpbnN0ZWFkIG9mIGEgY29uc3RhbnQgcmFuZ2Ugc3RlcC5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0ZXA6IHtzaWduYWw6IHNjYWxlTmFtZSArICdfc3RlcCd9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShzY2FsZVJhbmdlKSAmJiBzY2FsZVJhbmdlLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgcjAgPSBzY2FsZVJhbmdlWzBdO1xuICAgICAgY29uc3QgcjEgPSBzY2FsZVJhbmdlWzFdO1xuICAgICAgaWYgKHIwID09PSAwICYmIGlzVmdTaWduYWxSZWYocjEpKSB7XG4gICAgICAgIC8vIFJlcGxhY2Ugd2lkdGggc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gWzAsIHtzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIxLnNpZ25hbCl9XTtcbiAgICAgIH0gZWxzZSBpZiAoaXNWZ1NpZ25hbFJlZihyMCkgJiYgcjEgPT09IDApIHtcbiAgICAgICAgLy8gUmVwbGFjZSBoZWlnaHQgc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gW3tzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIwLnNpZ25hbCl9LCAwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjYWxlUmFuZ2U7XG59XG4iXX0=

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var aggregate_1 = __webpack_require__(13);
	var bin_1 = __webpack_require__(22);
	var channel_1 = __webpack_require__(23);
	var data_1 = __webpack_require__(53);
	var datetime_1 = __webpack_require__(31);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var sort_1 = __webpack_require__(79);
	var util_1 = __webpack_require__(14);
	var util = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var vega_schema_2 = __webpack_require__(59);
	var common_1 = __webpack_require__(62);
	var optimize_1 = __webpack_require__(80);
	var model_1 = __webpack_require__(57);
	var selection_1 = __webpack_require__(55);
	function parseScaleDomain(model) {
	    if (model_1.isUnitModel(model)) {
	        parseUnitScaleDomain(model);
	    }
	    else {
	        parseNonUnitScaleDomain(model);
	    }
	}
	exports.parseScaleDomain = parseScaleDomain;
	function parseUnitScaleDomain(model) {
	    var scales = model.specifiedScales;
	    var localScaleComponents = model.component.scales;
	    util.keys(localScaleComponents).forEach(function (channel) {
	        var specifiedScale = scales[channel];
	        var specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;
	        var domains = parseDomainForChannel(model, channel);
	        var localScaleCmpt = localScaleComponents[channel];
	        localScaleCmpt.domains = domains;
	        if (scale_1.isSelectionDomain(specifiedDomain)) {
	            // As scale parsing occurs before selection parsing, we use a temporary
	            // signal here and append the scale.domain definition. This is replaced
	            // with the correct domainRaw signal during scale assembly.
	            // For more information, see isRawSelectionDomain in selection.ts.
	            // FIXME: replace this with a special property in the scaleComponent
	            localScaleCmpt.set('domainRaw', {
	                signal: selection_1.SELECTION_DOMAIN + util_1.hash(specifiedDomain)
	            }, true);
	        }
	        if (model.component.data.isFaceted) {
	            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
	            var facetParent = model;
	            while (!model_1.isFacetModel(facetParent) && facetParent.parent) {
	                facetParent = facetParent.parent;
	            }
	            var resolve = facetParent.component.resolve.scale[channel];
	            if (resolve === 'shared') {
	                for (var _i = 0, domains_1 = domains; _i < domains_1.length; _i++) {
	                    var domain = domains_1[_i];
	                    // Replace the scale domain with data output from a cloned subtree after the facet.
	                    if (vega_schema_2.isDataRefDomain(domain)) {
	                        // use data from cloned subtree (which is the same as data but with a prefix added once)
	                        domain.data = optimize_1.FACET_SCALE_PREFIX + domain.data.replace(optimize_1.FACET_SCALE_PREFIX, '');
	                    }
	                }
	            }
	        }
	    });
	}
	function parseNonUnitScaleDomain(model) {
	    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	        var child = _a[_i];
	        parseScaleDomain(child);
	    }
	    var localScaleComponents = model.component.scales;
	    util.keys(localScaleComponents).forEach(function (channel) {
	        // FIXME: Arvind -- Please revise logic for merging selectionDomain / domainRaw
	        var domains;
	        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            var childComponent = child.component.scales[channel];
	            if (childComponent) {
	                if (domains === undefined) {
	                    domains = childComponent.domains;
	                }
	                else {
	                    domains = domains.concat(childComponent.domains);
	                }
	            }
	        }
	        localScaleComponents[channel].domains = domains;
	    });
	}
	/**
	 * Remove unaggregated domain if it is not applicable
	 * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
	 */
	function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
	    if (domain === 'unaggregated') {
	        var _a = canUseUnaggregatedDomain(fieldDef, scaleType), valid = _a.valid, reason = _a.reason;
	        if (!valid) {
	            log.warn(reason);
	            return undefined;
	        }
	    }
	    else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
	        // Apply config if domain is not specified.
	        var valid = canUseUnaggregatedDomain(fieldDef, scaleType).valid;
	        if (valid) {
	            return 'unaggregated';
	        }
	    }
	    return domain;
	}
	function parseDomainForChannel(model, channel) {
	    var scaleType = model.getScaleComponent(channel).get('type');
	    var domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);
	    if (domain !== model.scaleDomain(channel)) {
	        model.specifiedScales[channel] = __assign({}, model.specifiedScales[channel], { domain: domain });
	    }
	    // If channel is either X or Y then union them with X2 & Y2 if they exist
	    if (channel === 'x' && model.channelHasField('x2')) {
	        if (model.channelHasField('x')) {
	            return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(parseSingleChannelDomain(scaleType, domain, model, 'x2'));
	        }
	        else {
	            return parseSingleChannelDomain(scaleType, domain, model, 'x2');
	        }
	    }
	    else if (channel === 'y' && model.channelHasField('y2')) {
	        if (model.channelHasField('y')) {
	            return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(parseSingleChannelDomain(scaleType, domain, model, 'y2'));
	        }
	        else {
	            return parseSingleChannelDomain(scaleType, domain, model, 'y2');
	        }
	    }
	    return parseSingleChannelDomain(scaleType, domain, model, channel);
	}
	exports.parseDomainForChannel = parseDomainForChannel;
	function parseSingleChannelDomain(scaleType, domain, model, channel) {
	    var fieldDef = model.fieldDef(channel);
	    if (domain && domain !== 'unaggregated' && !scale_1.isSelectionDomain(domain)) {
	        if (fieldDef.bin) {
	            log.warn(log.message.conflictedDomain(channel));
	        }
	        else {
	            if (datetime_1.isDateTime(domain[0])) {
	                return domain.map(function (dt) {
	                    return { signal: "{data: " + datetime_1.dateTimeExpr(dt, true) + "}" };
	                });
	            }
	            return [domain];
	        }
	    }
	    var stack = model.stack;
	    if (stack && channel === stack.fieldChannel) {
	        if (stack.offset === 'normalize') {
	            return [[0, 1]];
	        }
	        var data = model.requestDataName(data_1.MAIN);
	        return [{
	                data: data,
	                field: model.vgField(channel, { suffix: 'start' })
	            }, {
	                data: data,
	                field: model.vgField(channel, { suffix: 'end' })
	            }];
	    }
	    var sort = channel_1.isScaleChannel(channel) ? domainSort(model, channel, scaleType) : undefined;
	    if (domain === 'unaggregated') {
	        var data = model.requestDataName(data_1.MAIN);
	        return [{
	                data: data,
	                field: model.vgField(channel, { aggregate: 'min' })
	            }, {
	                data: data,
	                field: model.vgField(channel, { aggregate: 'max' })
	            }];
	    }
	    else if (fieldDef.bin) {
	        if (scale_1.isBinScale(scaleType)) {
	            var signal = model.getName(bin_1.binToString(fieldDef.bin) + "_" + fieldDef.field + "_bins");
	            return [{ signal: "sequence(" + signal + ".start, " + signal + ".stop + " + signal + ".step, " + signal + ".step)" }];
	        }
	        if (scale_1.hasDiscreteDomain(scaleType)) {
	            // ordinal bin scale takes domain from bin_range, ordered by bin start
	            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).
	            return [{
	                    // If sort by aggregation of a specified sort field, we need to use RAW table,
	                    // so we can aggregate values for the scale independently from the main aggregation.
	                    data: util.isBoolean(sort) ? model.requestDataName(data_1.MAIN) : model.requestDataName(data_1.RAW),
	                    // Use range if we added it and the scale does not support computing a range as a signal.
	                    field: model.vgField(channel, common_1.binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),
	                    // we have to use a sort object if sort = true to make the sort correct by bin start
	                    sort: sort === true || !sort_1.isSortField(sort) ? {
	                        field: model.vgField(channel, {}),
	                        op: 'min' // min or max doesn't matter since we sort by the start of the bin range
	                    } : sort
	                }];
	        }
	        else {
	            if (channel === 'x' || channel === 'y') {
	                // X/Y position have to include start and end for non-ordinal scale
	                var data = model.requestDataName(data_1.MAIN);
	                return [{
	                        data: data,
	                        field: model.vgField(channel, {})
	                    }, {
	                        data: data,
	                        field: model.vgField(channel, { binSuffix: 'end' })
	                    }];
	            }
	            else {
	                // TODO: use bin_mid
	                return [{
	                        data: model.requestDataName(data_1.MAIN),
	                        field: model.vgField(channel, {})
	                    }];
	            }
	        }
	    }
	    else if (sort) {
	        return [{
	                // If sort by aggregation of a specified sort field, we need to use RAW table,
	                // so we can aggregate values for the scale independently from the main aggregation.
	                data: util.isBoolean(sort) ? model.requestDataName(data_1.MAIN) : model.requestDataName(data_1.RAW),
	                field: model.vgField(channel),
	                sort: sort
	            }];
	    }
	    else {
	        return [{
	                data: model.requestDataName(data_1.MAIN),
	                field: model.vgField(channel)
	            }];
	    }
	}
	function domainSort(model, channel, scaleType) {
	    if (!scale_1.hasDiscreteDomain(scaleType)) {
	        return undefined;
	    }
	    var sort = model.sort(channel);
	    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)
	    if (sort_1.isSortField(sort)) {
	        return sort;
	    }
	    if (sort === 'descending') {
	        return {
	            op: 'min',
	            field: model.vgField(channel),
	            order: 'descending'
	        };
	    }
	    if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {
	        return true;
	    }
	    // sort == null
	    return undefined;
	}
	exports.domainSort = domainSort;
	/**
	 * Determine if a scale can use unaggregated domain.
	 * @return {Boolean} Returns true if all of the following conditons applies:
	 * 1. `scale.domain` is `unaggregated`
	 * 2. Aggregation function is not `count` or `sum`
	 * 3. The scale is quantitative or time scale.
	 */
	function canUseUnaggregatedDomain(fieldDef, scaleType) {
	    if (!fieldDef.aggregate) {
	        return {
	            valid: false,
	            reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)
	        };
	    }
	    if (!aggregate_1.SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {
	        return {
	            valid: false,
	            reason: log.message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)
	        };
	    }
	    if (fieldDef.type === 'quantitative') {
	        if (scaleType === 'log') {
	            return {
	                valid: false,
	                reason: log.message.unaggregatedDomainWithLogScale(fieldDef)
	            };
	        }
	    }
	    return { valid: true };
	}
	exports.canUseUnaggregatedDomain = canUseUnaggregatedDomain;
	/**
	 * Converts an array of domains to a single Vega scale domain.
	 */
	function mergeDomains(domains) {
	    var uniqueDomains = util.unique(domains.map(function (domain) {
	        // ignore sort property when computing the unique domains
	        if (vega_schema_2.isDataRefDomain(domain)) {
	            var _s = domain.sort, domainWithoutSort = __rest(domain, ["sort"]);
	            return domainWithoutSort;
	        }
	        return domain;
	    }), util.hash);
	    var sorts = util.unique(domains.map(function (d) {
	        if (vega_schema_2.isDataRefDomain(d)) {
	            var s = d.sort;
	            if (s !== undefined && !util.isBoolean(s)) {
	                if (s.op === 'count') {
	                    // let's make sure that if op is count, we don't use a field
	                    delete s.field;
	                }
	                if (s.order === 'ascending') {
	                    // drop order: ascending as it is the default
	                    delete s.order;
	                }
	            }
	            return s;
	        }
	        return undefined;
	    }).filter(function (s) { return s !== undefined; }), util.hash);
	    if (uniqueDomains.length === 1) {
	        var domain = domains[0];
	        if (vega_schema_2.isDataRefDomain(domain) && sorts.length > 0) {
	            var sort_2 = sorts[0];
	            if (sorts.length > 1) {
	                log.warn(log.message.MORE_THAN_ONE_SORT);
	                sort_2 = true;
	            }
	            return __assign({}, domain, { sort: sort_2 });
	        }
	        return domain;
	    }
	    // only keep simple sort properties that work with unioned domains
	    var simpleSorts = util.unique(sorts.map(function (s) {
	        if (s === true) {
	            return s;
	        }
	        if (s.op === 'count') {
	            return s;
	        }
	        log.warn(log.message.domainSortDropped(s));
	        return true;
	    }), util.hash);
	    var sort = undefined;
	    if (simpleSorts.length === 1) {
	        sort = simpleSorts[0];
	    }
	    else if (simpleSorts.length > 1) {
	        log.warn(log.message.MORE_THAN_ONE_SORT);
	        sort = true;
	    }
	    var allData = util.unique(domains.map(function (d) {
	        if (vega_schema_2.isDataRefDomain(d)) {
	            return d.data;
	        }
	        return null;
	    }), function (x) { return x; });
	    if (allData.length === 1 && allData[0] !== null) {
	        // create a union domain of different fields with a single data source
	        var domain = __assign({ data: allData[0], fields: uniqueDomains.map(function (d) { return d.field; }) }, (sort ? { sort: sort } : {}));
	        return domain;
	    }
	    return __assign({ fields: uniqueDomains }, (sort ? { sort: sort } : {}));
	}
	exports.mergeDomains = mergeDomains;
	/**
	 * Return a field if a scale single field.
	 * Return `undefined` otherwise.
	 *
	 */
	function getFieldFromDomain(domain) {
	    if (vega_schema_2.isDataRefDomain(domain) && util.isString(domain.field)) {
	        return domain.field;
	    }
	    else if (vega_schema_1.isDataRefUnionedDomain(domain)) {
	        var field = void 0;
	        for (var _i = 0, _a = domain.fields; _i < _a.length; _i++) {
	            var nonUnionDomain = _a[_i];
	            if (vega_schema_2.isDataRefDomain(nonUnionDomain) && util.isString(nonUnionDomain.field)) {
	                if (!field) {
	                    field = nonUnionDomain.field;
	                }
	                else if (field !== nonUnionDomain.field) {
	                    log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');
	                    return field;
	                }
	            }
	        }
	        log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');
	        return field;
	    }
	    else if (vega_schema_1.isFieldRefUnionDomain(domain)) {
	        log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');
	        var field = domain.fields[0];
	        return util.isString(field) ? field : undefined;
	    }
	    return undefined;
	}
	exports.getFieldFromDomain = getFieldFromDomain;
	function assembleDomain(model, channel) {
	    var scaleComponent = model.component.scales[channel];
	    var domains = scaleComponent.domains.map(function (domain) {
	        // Correct references to data as the original domain's data was determined
	        // in parseScale, which happens before parseData. Thus the original data
	        // reference can be incorrect.
	        if (vega_schema_2.isDataRefDomain(domain)) {
	            domain.data = model.lookupDataSource(domain.data);
	        }
	        return domain;
	    });
	    // domains is an array that has to be merged into a single vega domain
	    return mergeDomains(domains);
	}
	exports.assembleDomain = assembleDomain;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 79 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function isSortField(sort) {
	    return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];
	}
	exports.isSortField = isSortField;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBMkJBLHFCQUErQixJQUE4QjtJQUMzRCxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0UsQ0FBQztBQUZELGtDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZ2dyZWdhdGVPcH0gZnJvbSAnLi9hZ2dyZWdhdGUnO1xuXG5cbmV4cG9ydCB0eXBlIFNvcnRPcmRlciA9ICdhc2NlbmRpbmcnIHwgJ2Rlc2NlbmRpbmcnIHwgbnVsbDtcblxuZXhwb3J0IGludGVyZmFjZSBTb3J0RmllbGQ8Rj4ge1xuICAvKipcbiAgICogVGhlIGRhdGEgW2ZpZWxkXShmaWVsZC5odG1sKSB0byBzb3J0IGJ5LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gSWYgdW5zcGVjaWZpZWQsIGRlZmF1bHRzIHRvIHRoZSBmaWVsZCBzcGVjaWZpZWQgaW4gdGhlIG91dGVyIGRhdGEgcmVmZXJlbmNlLlxuICAgKi9cbiAgZmllbGQ/OiBGO1xuICAvKipcbiAgICogQW4gW2FnZ3JlZ2F0ZSBvcGVyYXRpb25dKGFnZ3JlZ2F0ZS5odG1sI29wcykgdG8gcGVyZm9ybSBvbiB0aGUgZmllbGQgcHJpb3IgdG8gc29ydGluZyAoZS5nLiwgYFwiY291bnRcImAsIGBcIm1lYW5cImAgYW5kIGBcIm1lZGlhblwiYCkuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgaW4gY2FzZXMgd2hlcmUgdGhlIHNvcnQgZmllbGQgYW5kIHRoZSBkYXRhIHJlZmVyZW5jZSBmaWVsZCBkbyBub3QgbWF0Y2guXG4gICAqIFRoZSBpbnB1dCBkYXRhIG9iamVjdHMgd2lsbCBiZSBhZ2dyZWdhdGVkLCBncm91cGVkIGJ5IHRoZSBlbmNvZGVkIGRhdGEgZmllbGQuXG4gICAqXG4gICAqIEZvciBhIGZ1bGwgbGlzdCBvZiBvcGVyYXRpb25zLCBwbGVhc2Ugc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciBbYWdncmVnYXRlXShhZ2dyZWdhdGUuaHRtbCNvcHMpLlxuICAgKi9cbiAgb3A6IEFnZ3JlZ2F0ZU9wO1xuXG4gIC8qKlxuICAgKiBUaGUgc29ydCBvcmRlci4gT25lIG9mIGBcImFzY2VuZGluZ1wiYCAoZGVmYXVsdCkgb3IgYFwiZGVzY2VuZGluZ1wiYC5cbiAgICovXG4gIG9yZGVyPzogU29ydE9yZGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTb3J0RmllbGQ8Rj4oc29ydDogU29ydE9yZGVyIHwgU29ydEZpZWxkPEY+KTogc29ydCBpcyBTb3J0RmllbGQ8Rj4ge1xuICByZXR1cm4gISFzb3J0ICYmIChzb3J0WydvcCddID09PSAnY291bnQnIHx8ICEhc29ydFsnZmllbGQnXSkgJiYgISFzb3J0WydvcCddO1xufVxuIl19

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(53);
	var util_1 = __webpack_require__(14);
	var aggregate_1 = __webpack_require__(81);
	var dataflow_1 = __webpack_require__(82);
	var facet_1 = __webpack_require__(83);
	var filterinvalid_1 = __webpack_require__(84);
	var optimizers = __webpack_require__(85);
	var stack_1 = __webpack_require__(89);
	exports.FACET_SCALE_PREFIX = 'scale_';
	/**
	 * Clones the subtree and ignores output nodes except for the leafs, which are renamed.
	 */
	function cloneSubtree(facet) {
	    function clone(node) {
	        if (!(node instanceof facet_1.FacetNode)) {
	            var copy_1 = node.clone();
	            if (copy_1 instanceof dataflow_1.OutputNode) {
	                var newName = exports.FACET_SCALE_PREFIX + copy_1.getSource();
	                copy_1.setSource(newName);
	                facet.model.component.data.outputNodes[newName] = copy_1;
	            }
	            else if (copy_1 instanceof aggregate_1.AggregateNode || copy_1 instanceof stack_1.StackNode) {
	                copy_1.addDimensions(facet.fields);
	            }
	            util_1.flatten(node.children.map(clone)).forEach(function (n) { return n.parent = copy_1; });
	            return [copy_1];
	        }
	        return util_1.flatten(node.children.map(clone));
	    }
	    return clone;
	}
	/**
	 * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
	 * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
	 */
	function moveFacetDown(node) {
	    if (node instanceof facet_1.FacetNode) {
	        if (node.numChildren() === 1 && !(node.children[0] instanceof dataflow_1.OutputNode)) {
	            // move down until we hit a fork or output node
	            var child = node.children[0];
	            if (child instanceof aggregate_1.AggregateNode || child instanceof stack_1.StackNode) {
	                child.addDimensions(node.fields);
	            }
	            child.swapWithParent();
	            moveFacetDown(node);
	        }
	        else {
	            // move main to facet
	            moveMainDownToFacet(node.model.component.data.main);
	            // replicate the subtree and place it before the facet's main node
	            var copy = util_1.flatten(node.children.map(cloneSubtree(node)));
	            copy.forEach(function (c) { return c.parent = node.model.component.data.main; });
	        }
	    }
	    else {
	        node.children.forEach(moveFacetDown);
	    }
	}
	function moveMainDownToFacet(node) {
	    if (node instanceof dataflow_1.OutputNode && node.type === data_1.MAIN) {
	        if (node.numChildren() === 1) {
	            var child = node.children[0];
	            if (!(child instanceof facet_1.FacetNode)) {
	                child.swapWithParent();
	                moveMainDownToFacet(node);
	            }
	        }
	    }
	}
	/**
	 * Remove nodes that are not required starting from a root.
	 */
	function removeUnnecessaryNodes(node) {
	    // remove empty null filter nodes
	    if (node instanceof filterinvalid_1.FilterInvalidNode && util_1.every(util_1.vals(node.filter), function (f) { return f === null; })) {
	        node.remove();
	    }
	    // remove output nodes that are not required
	    if (node instanceof dataflow_1.OutputNode && !node.isRequired()) {
	        node.remove();
	    }
	    node.children.forEach(removeUnnecessaryNodes);
	}
	/**
	 * Return all leaf nodes.
	 */
	function getLeaves(roots) {
	    var leaves = [];
	    function append(node) {
	        if (node.numChildren() === 0) {
	            leaves.push(node);
	        }
	        else {
	            node.children.forEach(append);
	        }
	    }
	    roots.forEach(append);
	    return leaves;
	}
	/**
	 * Optimizes the dataflow of the passed in data component.
	 */
	function optimizeDataflow(dataComponent) {
	    var roots = util_1.vals(dataComponent.sources);
	    roots.forEach(removeUnnecessaryNodes);
	    // remove source nodes that don't have any children because they also don't have output nodes
	    roots = roots.filter(function (r) { return r.numChildren() > 0; });
	    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.removeUnusedSubtrees));
	    roots = roots.filter(function (r) { return r.numChildren() > 0; });
	    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.moveParseUp));
	    getLeaves(roots).forEach(optimizers.removeDuplicateTimeUnits);
	    roots.forEach(moveFacetDown);
	    util_1.keys(dataComponent.sources).forEach(function (s) {
	        if (dataComponent.sources[s].numChildren() === 0) {
	            delete dataComponent.sources[s];
	        }
	    });
	}
	exports.optimizeDataflow = optimizeDataflow;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var dataflow_1 = __webpack_require__(82);
	function addDimension(dims, channel, fieldDef) {
	    if (fieldDef.bin) {
	        dims[fielddef_1.vgField(fieldDef, {})] = true;
	        dims[fielddef_1.vgField(fieldDef, { binSuffix: 'end' })] = true;
	        if (common_1.binRequiresRange(fieldDef, channel)) {
	            dims[fielddef_1.vgField(fieldDef, { binSuffix: 'range' })] = true;
	        }
	    }
	    else {
	        dims[fielddef_1.vgField(fieldDef)] = true;
	    }
	    return dims;
	}
	function mergeMeasures(parentMeasures, childMeasures) {
	    for (var f in childMeasures) {
	        if (childMeasures.hasOwnProperty(f)) {
	            // when we merge a measure, we either have to add an aggregation operator or even a new field
	            var ops = childMeasures[f];
	            for (var op in ops) {
	                if (ops.hasOwnProperty(op)) {
	                    if (f in parentMeasures) {
	                        // add operator to existing measure field
	                        parentMeasures[f][op] = ops[op];
	                    }
	                    else {
	                        parentMeasures[f] = { op: ops[op] };
	                    }
	                }
	            }
	        }
	    }
	}
	var AggregateNode = /** @class */ (function (_super) {
	    __extends(AggregateNode, _super);
	    /**
	     * @param dimensions string set for dimensions
	     * @param measures dictionary mapping field name => dict of aggregation functions and names to use
	     */
	    function AggregateNode(dimensions, measures) {
	        var _this = _super.call(this) || this;
	        _this.dimensions = dimensions;
	        _this.measures = measures;
	        return _this;
	    }
	    AggregateNode.prototype.clone = function () {
	        return new AggregateNode(__assign({}, this.dimensions), util_1.duplicate(this.measures));
	    };
	    AggregateNode.makeFromEncoding = function (model) {
	        var isAggregate = false;
	        model.forEachFieldDef(function (fd) {
	            if (fd.aggregate) {
	                isAggregate = true;
	            }
	        });
	        var meas = {};
	        var dims = {};
	        if (!isAggregate) {
	            // no need to create this node if the model has no aggregation
	            return null;
	        }
	        model.forEachFieldDef(function (fieldDef, channel) {
	            if (fieldDef.aggregate) {
	                if (fieldDef.aggregate === 'count') {
	                    meas['*'] = meas['*'] || {};
	                    meas['*']['count'] = fielddef_1.vgField(fieldDef, { aggregate: 'count' });
	                }
	                else {
	                    meas[fieldDef.field] = meas[fieldDef.field] || {};
	                    meas[fieldDef.field][fieldDef.aggregate] = fielddef_1.vgField(fieldDef);
	                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain
	                    if (channel_1.isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {
	                        meas[fieldDef.field]['min'] = fielddef_1.vgField(fieldDef, { aggregate: 'min' });
	                        meas[fieldDef.field]['max'] = fielddef_1.vgField(fieldDef, { aggregate: 'max' });
	                    }
	                }
	            }
	            else {
	                addDimension(dims, channel, fieldDef);
	            }
	        });
	        if ((util_1.keys(dims).length + util_1.keys(meas).length) === 0) {
	            return null;
	        }
	        return new AggregateNode(dims, meas);
	    };
	    AggregateNode.makeFromTransform = function (t) {
	        var dims = {};
	        var meas = {};
	        for (var _i = 0, _a = t.aggregate; _i < _a.length; _i++) {
	            var s = _a[_i];
	            if (s.op) {
	                if (s.op === 'count') {
	                    meas['*'] = meas['*'] || {};
	                    meas['*']['count'] = s.as || fielddef_1.vgField(s);
	                }
	                else {
	                    meas[s.field] = meas[s.field] || {};
	                    meas[s.field][s.op] = s.as || fielddef_1.vgField(s);
	                }
	            }
	        }
	        for (var _b = 0, _c = t.groupby; _b < _c.length; _b++) {
	            var s = _c[_b];
	            dims[s] = true;
	        }
	        if ((util_1.keys(dims).length + util_1.keys(meas).length) === 0) {
	            return null;
	        }
	        return new AggregateNode(dims, meas);
	    };
	    AggregateNode.prototype.merge = function (other) {
	        if (!util_1.differ(this.dimensions, other.dimensions)) {
	            mergeMeasures(this.measures, other.measures);
	            other.remove();
	        }
	        else {
	            log.debug('different dimensions, cannot merge');
	        }
	    };
	    AggregateNode.prototype.addDimensions = function (fields) {
	        var _this = this;
	        fields.forEach(function (f) { return _this.dimensions[f] = true; });
	    };
	    AggregateNode.prototype.dependentFields = function () {
	        var out = {};
	        util_1.keys(this.dimensions).forEach(function (f) { return out[f] = true; });
	        util_1.keys(this.measures).forEach(function (m) { return out[m] = true; });
	        return out;
	    };
	    AggregateNode.prototype.producedFields = function () {
	        var _this = this;
	        var out = {};
	        util_1.keys(this.measures).forEach(function (field) {
	            util_1.keys(_this.measures[field]).forEach(function (op) {
	                out[op + "_" + field] = true;
	            });
	        });
	        return out;
	    };
	    AggregateNode.prototype.assemble = function () {
	        var ops = [];
	        var fields = [];
	        var as = [];
	        for (var _i = 0, _a = util_1.keys(this.measures); _i < _a.length; _i++) {
	            var field = _a[_i];
	            for (var _b = 0, _c = util_1.keys(this.measures[field]); _b < _c.length; _b++) {
	                var op = _c[_b];
	                as.push(this.measures[field][op]);
	                ops.push(op);
	                fields.push(field);
	            }
	        }
	        var result = {
	            type: 'aggregate',
	            groupby: util_1.keys(this.dimensions),
	            ops: ops,
	            fields: fields,
	            as: as
	        };
	        return result;
	    };
	    return AggregateNode;
	}(dataflow_1.DataFlowNode));
	exports.AggregateNode = AggregateNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9hZ2dyZWdhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBc0Q7QUFDdEQsMkNBQWlEO0FBQ2pELCtCQUFpQztBQUVqQyxtQ0FBb0U7QUFFcEUsb0NBQTJDO0FBRTNDLHVDQUF3QztBQUV4QyxzQkFBc0IsSUFBZ0MsRUFBRSxPQUFnQixFQUFFLFFBQTBCO0lBQ2xHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsa0JBQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUVuRCxFQUFFLENBQUMsQ0FBQyx5QkFBZ0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFJLENBQUMsa0JBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCx1QkFBdUIsY0FBa0MsRUFBRSxhQUFpQztJQUMxRixHQUFHLENBQUMsQ0FBQyxJQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLDZGQUE2RjtZQUM3RixJQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsR0FBRyxDQUFDLENBQUMsSUFBTSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUFDO3dCQUN4Qix5Q0FBeUM7d0JBQ3pDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ2xDLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ04sY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDO29CQUNwQyxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQ7SUFBbUMsaUNBQVk7SUFLN0M7OztPQUdHO0lBQ0gsdUJBQW9CLFVBQXFCLEVBQVUsUUFBK0M7UUFBbEcsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLGdCQUFVLEdBQVYsVUFBVSxDQUFXO1FBQVUsY0FBUSxHQUFSLFFBQVEsQ0FBdUM7O0lBRWxHLENBQUM7SUFWTSw2QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksYUFBYSxjQUFLLElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBVWEsOEJBQWdCLEdBQTlCLFVBQStCLEtBQWdCO1FBQzdDLElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN4QixLQUFLLENBQUMsZUFBZSxDQUFDLFVBQUEsRUFBRTtZQUN0QixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDakIsV0FBVyxHQUFHLElBQUksQ0FBQztZQUNyQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWhCLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqQiw4REFBOEQ7WUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxLQUFLLENBQUMsZUFBZSxDQUFDLFVBQUMsUUFBUSxFQUFFLE9BQU87WUFDdEMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO2dCQUMvRCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLGtCQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBRTdELGlIQUFpSDtvQkFDakgsRUFBRSxDQUFDLENBQUMsd0JBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUM7d0JBQzdFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsa0JBQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQzt3QkFDcEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO29CQUN0RSxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDeEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRWEsK0JBQWlCLEdBQS9CLFVBQWdDLENBQXFCO1FBQ25ELElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFBLENBQVksVUFBVyxFQUFYLEtBQUEsQ0FBQyxDQUFDLFNBQVMsRUFBWCxjQUFXLEVBQVgsSUFBVztZQUF0QixJQUFNLENBQUMsU0FBQTtZQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLGtCQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxrQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxDQUFDO1lBQ0gsQ0FBQztTQUNGO1FBRUQsR0FBRyxDQUFBLENBQVksVUFBUyxFQUFULEtBQUEsQ0FBQyxDQUFDLE9BQU8sRUFBVCxjQUFTLEVBQVQsSUFBUztZQUFwQixJQUFNLENBQUMsU0FBQTtZQUNULElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDaEI7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSw2QkFBSyxHQUFaLFVBQWEsS0FBb0I7UUFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM3QyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sR0FBRyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ2xELENBQUM7SUFDSCxDQUFDO0lBRU0scUNBQWEsR0FBcEIsVUFBcUIsTUFBZ0I7UUFBckMsaUJBRUM7UUFEQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQXpCLENBQXlCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sdUNBQWUsR0FBdEI7UUFDRSxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixXQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQWIsQ0FBYSxDQUFDLENBQUM7UUFDbEQsV0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFiLENBQWEsQ0FBQyxDQUFDO1FBRWhELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sc0NBQWMsR0FBckI7UUFBQSxpQkFVQztRQVRDLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLFdBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUMvQixXQUFJLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUU7Z0JBQ25DLEdBQUcsQ0FBSSxFQUFFLFNBQUksS0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLGdDQUFRLEdBQWY7UUFDRSxJQUFNLEdBQUcsR0FBa0IsRUFBRSxDQUFDO1FBQzlCLElBQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUM1QixJQUFNLEVBQUUsR0FBYSxFQUFFLENBQUM7UUFFeEIsR0FBRyxDQUFDLENBQWdCLFVBQW1CLEVBQW5CLEtBQUEsV0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBbkIsY0FBbUIsRUFBbkIsSUFBbUI7WUFBbEMsSUFBTSxLQUFLLFNBQUE7WUFDZCxHQUFHLENBQUMsQ0FBYSxVQUEwQixFQUExQixLQUFBLFdBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQTFCLGNBQTBCLEVBQTFCLElBQTBCO2dCQUF0QyxJQUFNLEVBQUUsU0FBQTtnQkFDWCxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbEMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BCO1NBQ0Y7UUFFRCxJQUFNLE1BQU0sR0FBeUI7WUFDbkMsSUFBSSxFQUFFLFdBQVc7WUFDakIsT0FBTyxFQUFFLFdBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlCLEdBQUcsS0FBQTtZQUNILE1BQU0sUUFBQTtZQUNOLEVBQUUsSUFBQTtTQUNILENBQUM7UUFFRixNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUEzSUQsQ0FBbUMsdUJBQVksR0EySTlDO0FBM0lZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZ2dyZWdhdGVPcH0gZnJvbSAnLi4vLi4vYWdncmVnYXRlJztcbmltcG9ydCB7Q2hhbm5lbCwgaXNTY2FsZUNoYW5uZWx9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtGaWVsZERlZiwgdmdGaWVsZH0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge0FnZ3JlZ2F0ZVRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGljdCwgZGlmZmVyLCBkdXBsaWNhdGUsIGtleXMsIFN0cmluZ1NldH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnQWdncmVnYXRlVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2JpblJlcXVpcmVzUmFuZ2V9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi8uLi91bml0JztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuZnVuY3Rpb24gYWRkRGltZW5zaW9uKGRpbXM6IHtbZmllbGQ6IHN0cmluZ106IGJvb2xlYW59LCBjaGFubmVsOiBDaGFubmVsLCBmaWVsZERlZjogRmllbGREZWY8c3RyaW5nPikge1xuICBpZiAoZmllbGREZWYuYmluKSB7XG4gICAgZGltc1t2Z0ZpZWxkKGZpZWxkRGVmLCB7fSldID0gdHJ1ZTtcbiAgICBkaW1zW3ZnRmllbGQoZmllbGREZWYsIHtiaW5TdWZmaXg6ICdlbmQnfSldID0gdHJ1ZTtcblxuICAgIGlmIChiaW5SZXF1aXJlc1JhbmdlKGZpZWxkRGVmLCBjaGFubmVsKSkge1xuICAgICAgZGltc1t2Z0ZpZWxkKGZpZWxkRGVmLCB7YmluU3VmZml4OiAncmFuZ2UnfSldID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGltc1t2Z0ZpZWxkKGZpZWxkRGVmKV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBkaW1zO1xufVxuXG5mdW5jdGlvbiBtZXJnZU1lYXN1cmVzKHBhcmVudE1lYXN1cmVzOiBEaWN0PERpY3Q8c3RyaW5nPj4sIGNoaWxkTWVhc3VyZXM6IERpY3Q8RGljdDxzdHJpbmc+Pikge1xuICBmb3IgKGNvbnN0IGYgaW4gY2hpbGRNZWFzdXJlcykge1xuICAgIGlmIChjaGlsZE1lYXN1cmVzLmhhc093blByb3BlcnR5KGYpKSB7XG4gICAgICAvLyB3aGVuIHdlIG1lcmdlIGEgbWVhc3VyZSwgd2UgZWl0aGVyIGhhdmUgdG8gYWRkIGFuIGFnZ3JlZ2F0aW9uIG9wZXJhdG9yIG9yIGV2ZW4gYSBuZXcgZmllbGRcbiAgICAgIGNvbnN0IG9wcyA9IGNoaWxkTWVhc3VyZXNbZl07XG4gICAgICBmb3IgKGNvbnN0IG9wIGluIG9wcykge1xuICAgICAgICBpZiAob3BzLmhhc093blByb3BlcnR5KG9wKSkge1xuICAgICAgICAgIGlmIChmIGluIHBhcmVudE1lYXN1cmVzKSB7XG4gICAgICAgICAgICAvLyBhZGQgb3BlcmF0b3IgdG8gZXhpc3RpbmcgbWVhc3VyZSBmaWVsZFxuICAgICAgICAgICAgcGFyZW50TWVhc3VyZXNbZl1bb3BdID0gb3BzW29wXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50TWVhc3VyZXNbZl0gPSB7b3A6IG9wc1tvcF19O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWdncmVnYXRlTm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEFnZ3JlZ2F0ZU5vZGUoey4uLnRoaXMuZGltZW5zaW9uc30sIGR1cGxpY2F0ZSh0aGlzLm1lYXN1cmVzKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGRpbWVuc2lvbnMgc3RyaW5nIHNldCBmb3IgZGltZW5zaW9uc1xuICAgKiBAcGFyYW0gbWVhc3VyZXMgZGljdGlvbmFyeSBtYXBwaW5nIGZpZWxkIG5hbWUgPT4gZGljdCBvZiBhZ2dyZWdhdGlvbiBmdW5jdGlvbnMgYW5kIG5hbWVzIHRvIHVzZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkaW1lbnNpb25zOiBTdHJpbmdTZXQsIHByaXZhdGUgbWVhc3VyZXM6IERpY3Q8e1trZXkgaW4gQWdncmVnYXRlT3BdPzogc3RyaW5nfT4pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtYWtlRnJvbUVuY29kaW5nKG1vZGVsOiBVbml0TW9kZWwpOiBBZ2dyZWdhdGVOb2RlIHtcbiAgICBsZXQgaXNBZ2dyZWdhdGUgPSBmYWxzZTtcbiAgICBtb2RlbC5mb3JFYWNoRmllbGREZWYoZmQgPT4ge1xuICAgICAgaWYgKGZkLmFnZ3JlZ2F0ZSkge1xuICAgICAgICBpc0FnZ3JlZ2F0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBtZWFzID0ge307XG4gICAgY29uc3QgZGltcyA9IHt9O1xuXG4gICAgaWYgKCFpc0FnZ3JlZ2F0ZSkge1xuICAgICAgLy8gbm8gbmVlZCB0byBjcmVhdGUgdGhpcyBub2RlIGlmIHRoZSBtb2RlbCBoYXMgbm8gYWdncmVnYXRpb25cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIG1vZGVsLmZvckVhY2hGaWVsZERlZigoZmllbGREZWYsIGNoYW5uZWwpID0+IHtcbiAgICAgIGlmIChmaWVsZERlZi5hZ2dyZWdhdGUpIHtcbiAgICAgICAgaWYgKGZpZWxkRGVmLmFnZ3JlZ2F0ZSA9PT0gJ2NvdW50Jykge1xuICAgICAgICAgIG1lYXNbJyonXSA9IG1lYXNbJyonXSB8fCB7fTtcbiAgICAgICAgICBtZWFzWycqJ11bJ2NvdW50J10gPSB2Z0ZpZWxkKGZpZWxkRGVmLCB7YWdncmVnYXRlOiAnY291bnQnfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVhc1tmaWVsZERlZi5maWVsZF0gPSBtZWFzW2ZpZWxkRGVmLmZpZWxkXSB8fCB7fTtcbiAgICAgICAgICBtZWFzW2ZpZWxkRGVmLmZpZWxkXVtmaWVsZERlZi5hZ2dyZWdhdGVdID0gdmdGaWVsZChmaWVsZERlZik7XG5cbiAgICAgICAgICAvLyBGb3Igc2NhbGUgY2hhbm5lbCB3aXRoIGRvbWFpbiA9PT0gJ3VuYWdncmVnYXRlZCcsIGFkZCBtaW4vbWF4IHNvIHdlIGNhbiB1c2UgdGhlaXIgdW5pb24gYXMgdW5hZ2dyZWdhdGVkIGRvbWFpblxuICAgICAgICAgIGlmIChpc1NjYWxlQ2hhbm5lbChjaGFubmVsKSAmJiBtb2RlbC5zY2FsZURvbWFpbihjaGFubmVsKSA9PT0gJ3VuYWdncmVnYXRlZCcpIHtcbiAgICAgICAgICAgIG1lYXNbZmllbGREZWYuZmllbGRdWydtaW4nXSA9IHZnRmllbGQoZmllbGREZWYsIHthZ2dyZWdhdGU6ICdtaW4nfSk7XG4gICAgICAgICAgICBtZWFzW2ZpZWxkRGVmLmZpZWxkXVsnbWF4J10gPSB2Z0ZpZWxkKGZpZWxkRGVmLCB7YWdncmVnYXRlOiAnbWF4J30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkRGltZW5zaW9uKGRpbXMsIGNoYW5uZWwsIGZpZWxkRGVmKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICgoa2V5cyhkaW1zKS5sZW5ndGggKyBrZXlzKG1lYXMpLmxlbmd0aCkgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWdncmVnYXRlTm9kZShkaW1zLCBtZWFzKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUZyb21UcmFuc2Zvcm0odDogQWdncmVnYXRlVHJhbnNmb3JtKTogQWdncmVnYXRlTm9kZSB7XG4gICAgY29uc3QgZGltcyA9IHt9O1xuICAgIGNvbnN0IG1lYXMgPSB7fTtcbiAgICBmb3IoY29uc3QgcyBvZiB0LmFnZ3JlZ2F0ZSkge1xuICAgICAgaWYgKHMub3ApIHtcbiAgICAgICAgaWYgKHMub3AgPT09ICdjb3VudCcpIHtcbiAgICAgICAgICBtZWFzWycqJ10gPSBtZWFzWycqJ10gfHwge307XG4gICAgICAgICAgbWVhc1snKiddWydjb3VudCddID0gcy5hcyB8fCB2Z0ZpZWxkKHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lYXNbcy5maWVsZF0gPSBtZWFzW3MuZmllbGRdIHx8IHt9O1xuICAgICAgICAgIG1lYXNbcy5maWVsZF1bcy5vcF0gPSBzLmFzIHx8IHZnRmllbGQocyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IoY29uc3QgcyBvZiB0Lmdyb3VwYnkpIHtcbiAgICAgIGRpbXNbc10gPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICgoa2V5cyhkaW1zKS5sZW5ndGggKyBrZXlzKG1lYXMpLmxlbmd0aCkgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWdncmVnYXRlTm9kZShkaW1zLCBtZWFzKTtcbiAgfVxuXG4gIHB1YmxpYyBtZXJnZShvdGhlcjogQWdncmVnYXRlTm9kZSkge1xuICAgIGlmICghZGlmZmVyKHRoaXMuZGltZW5zaW9ucywgb3RoZXIuZGltZW5zaW9ucykpIHtcbiAgICAgIG1lcmdlTWVhc3VyZXModGhpcy5tZWFzdXJlcywgb3RoZXIubWVhc3VyZXMpO1xuICAgICAgb3RoZXIucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1ZygnZGlmZmVyZW50IGRpbWVuc2lvbnMsIGNhbm5vdCBtZXJnZScpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhZGREaW1lbnNpb25zKGZpZWxkczogc3RyaW5nW10pIHtcbiAgICBmaWVsZHMuZm9yRWFjaChmID0+IHRoaXMuZGltZW5zaW9uc1tmXSA9IHRydWUpO1xuICB9XG5cbiAgcHVibGljIGRlcGVuZGVudEZpZWxkcygpIHtcbiAgICBjb25zdCBvdXQgPSB7fTtcblxuICAgIGtleXModGhpcy5kaW1lbnNpb25zKS5mb3JFYWNoKGYgPT4gb3V0W2ZdID0gdHJ1ZSk7XG4gICAga2V5cyh0aGlzLm1lYXN1cmVzKS5mb3JFYWNoKG0gPT4gb3V0W21dID0gdHJ1ZSk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAga2V5cyh0aGlzLm1lYXN1cmVzKS5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIGtleXModGhpcy5tZWFzdXJlc1tmaWVsZF0pLmZvckVhY2gob3AgPT4ge1xuICAgICAgICBvdXRbYCR7b3B9XyR7ZmllbGR9YF0gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnQWdncmVnYXRlVHJhbnNmb3JtIHtcbiAgICBjb25zdCBvcHM6IEFnZ3JlZ2F0ZU9wW10gPSBbXTtcbiAgICBjb25zdCBmaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgYXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGtleXModGhpcy5tZWFzdXJlcykpIHtcbiAgICAgIGZvciAoY29uc3Qgb3Agb2Yga2V5cyh0aGlzLm1lYXN1cmVzW2ZpZWxkXSkpIHtcbiAgICAgICAgYXMucHVzaCh0aGlzLm1lYXN1cmVzW2ZpZWxkXVtvcF0pO1xuICAgICAgICBvcHMucHVzaChvcCk7XG4gICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQ6IFZnQWdncmVnYXRlVHJhbnNmb3JtID0ge1xuICAgICAgdHlwZTogJ2FnZ3JlZ2F0ZScsXG4gICAgICBncm91cGJ5OiBrZXlzKHRoaXMuZGltZW5zaW9ucyksXG4gICAgICBvcHMsXG4gICAgICBmaWVsZHMsXG4gICAgICBhc1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * A node in the dataflow tree.
	 */
	var DataFlowNode = /** @class */ (function () {
	    function DataFlowNode(debugName) {
	        this.debugName = debugName;
	        this._children = [];
	        this._parent = null;
	    }
	    /**
	     * Clone this node with a deep copy but don't clone links to children or parents.
	     */
	    DataFlowNode.prototype.clone = function () {
	        throw new Error('Cannot clone node');
	    };
	    /**
	     * Set of fields that are being created by this node.
	     */
	    DataFlowNode.prototype.producedFields = function () {
	        return {};
	    };
	    DataFlowNode.prototype.dependentFields = function () {
	        return {};
	    };
	    Object.defineProperty(DataFlowNode.prototype, "parent", {
	        get: function () {
	            return this._parent;
	        },
	        /**
	         * Set the parent of the node and also add this not to the parent's children.
	         */
	        set: function (parent) {
	            this._parent = parent;
	            parent.addChild(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DataFlowNode.prototype, "children", {
	        get: function () {
	            return this._children;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DataFlowNode.prototype.numChildren = function () {
	        return this._children.length;
	    };
	    DataFlowNode.prototype.addChild = function (child) {
	        this._children.push(child);
	    };
	    DataFlowNode.prototype.removeChild = function (oldChild) {
	        this._children.splice(this._children.indexOf(oldChild), 1);
	    };
	    /**
	     * Remove node from the dataflow.
	     */
	    DataFlowNode.prototype.remove = function () {
	        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parent = this._parent;
	        }
	        this._parent.removeChild(this);
	    };
	    /**
	     * Insert another node as a parent of this node.
	     */
	    DataFlowNode.prototype.insertAsParentOf = function (other) {
	        var parent = other.parent;
	        parent.removeChild(this);
	        this.parent = parent;
	        other.parent = this;
	    };
	    DataFlowNode.prototype.swapWithParent = function () {
	        var parent = this._parent;
	        var newParent = parent.parent;
	        // reconnect the children
	        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parent = parent;
	        }
	        // remove old links
	        this._children = []; // equivalent to removing every child link one by one
	        parent.removeChild(this);
	        parent.parent.removeChild(parent);
	        // swap two nodes
	        this.parent = newParent;
	        parent.parent = this;
	    };
	    return DataFlowNode;
	}());
	exports.DataFlowNode = DataFlowNode;
	var OutputNode = /** @class */ (function (_super) {
	    __extends(OutputNode, _super);
	    /**
	     * @param source The name of the source. Will change in assemble.
	     * @param type The type of the output node.
	     * @param refCounts A global ref counter map.
	     */
	    function OutputNode(source, type, refCounts) {
	        var _this = _super.call(this, source) || this;
	        _this.type = type;
	        _this.refCounts = refCounts;
	        _this._source = _this._name = source;
	        if (_this.refCounts && !(_this._name in _this.refCounts)) {
	            _this.refCounts[_this._name] = 0;
	        }
	        return _this;
	    }
	    OutputNode.prototype.clone = function () {
	        var cloneObj = new this.constructor;
	        cloneObj.debugName = 'clone_' + this.debugName;
	        cloneObj._source = this._source;
	        cloneObj._name = 'clone_' + this._name;
	        cloneObj.type = this.type;
	        cloneObj.refCounts = this.refCounts;
	        cloneObj.refCounts[cloneObj._name] = 0;
	        return cloneObj;
	    };
	    /**
	     * Request the datasource name and increase the ref counter.
	     *
	     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
	     * It is crucial to request the name from an output node to mark it as a required node.
	     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
	     *
	     * In the assemble phase, this will return the correct name.
	     */
	    OutputNode.prototype.getSource = function () {
	        this.refCounts[this._name]++;
	        return this._source;
	    };
	    OutputNode.prototype.isRequired = function () {
	        return !!this.refCounts[this._name];
	    };
	    OutputNode.prototype.setSource = function (source) {
	        this._source = source;
	    };
	    return OutputNode;
	}(DataFlowNode));
	exports.OutputNode = OutputNode;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var vega_schema_1 = __webpack_require__(59);
	var domain_1 = __webpack_require__(78);
	var dataflow_1 = __webpack_require__(82);
	/**
	 * A node that helps us track what fields we are faceting by.
	 */
	var FacetNode = /** @class */ (function (_super) {
	    __extends(FacetNode, _super);
	    /**
	     * @param model The facet model.
	     * @param name The name that this facet source will have.
	     * @param data The source data for this facet data.
	     */
	    function FacetNode(model, name, data) {
	        var _this = _super.call(this) || this;
	        _this.model = model;
	        _this.name = name;
	        _this.data = data;
	        if (model.facet.column) {
	            _this.columnFields = [model.vgField(channel_1.COLUMN)];
	            _this.columnName = model.getName('column_domain');
	            if (model.fieldDef(channel_1.COLUMN).bin) {
	                _this.columnFields.push(model.vgField(channel_1.COLUMN, { binSuffix: 'end' }));
	            }
	        }
	        if (model.facet.row) {
	            _this.rowFields = [model.vgField(channel_1.ROW)];
	            _this.rowName = model.getName('row_domain');
	            if (model.fieldDef(channel_1.ROW).bin) {
	                _this.rowFields.push(model.vgField(channel_1.ROW, { binSuffix: 'end' }));
	            }
	        }
	        _this.childModel = model.child;
	        return _this;
	    }
	    Object.defineProperty(FacetNode.prototype, "fields", {
	        get: function () {
	            var fields = [];
	            if (this.columnFields) {
	                fields = fields.concat(this.columnFields);
	            }
	            if (this.rowFields) {
	                fields = fields.concat(this.rowFields);
	            }
	            return fields;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * The name to reference this source is its name.
	     */
	    FacetNode.prototype.getSource = function () {
	        return this.name;
	    };
	    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {
	        var childIndependentFieldsWithStep = {};
	        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {
	            var channel = _a[_i];
	            var childScaleComponent = this.childModel.component.scales[channel];
	            if (childScaleComponent && !childScaleComponent.merged) {
	                var type = childScaleComponent.get('type');
	                var range = childScaleComponent.get('range');
	                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {
	                    var domain = domain_1.assembleDomain(this.childModel, channel);
	                    var field = domain_1.getFieldFromDomain(domain);
	                    if (field) {
	                        childIndependentFieldsWithStep[channel] = field;
	                    }
	                    else {
	                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
	                    }
	                }
	            }
	        }
	        return childIndependentFieldsWithStep;
	    };
	    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {
	        var aggregateChildField = {};
	        var childChannel = channel === 'row' ? 'y' : 'x';
	        if (childIndependentFieldsWithStep[childChannel]) {
	            if (crossedDataName) {
	                aggregateChildField = {
	                    // If there is a crossed data, calculate max
	                    fields: ["distinct_" + childIndependentFieldsWithStep[childChannel]],
	                    ops: ['max'],
	                    // Although it is technically a max, just name it distinct so it's easier to refer to it
	                    as: ["distinct_" + childIndependentFieldsWithStep[childChannel]]
	                };
	            }
	            else {
	                aggregateChildField = {
	                    // If there is no crossed data, just calculate distinct
	                    fields: [childIndependentFieldsWithStep[childChannel]],
	                    ops: ['distinct']
	                };
	            }
	        }
	        return {
	            name: channel === 'row' ? this.rowName : this.columnName,
	            // Use data from the crossed one if it exist
	            source: crossedDataName || this.data,
	            transform: [__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]
	        };
	    };
	    FacetNode.prototype.assemble = function () {
	        var data = [];
	        var crossedDataName = null;
	        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
	        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
	            // Need to create a cross dataset to correctly calculate cardinality
	            crossedDataName = "cross_" + this.columnName + "_" + this.rowName;
	            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);
	            var ops = fields.map(function () { return 'distinct'; });
	            data.push({
	                name: crossedDataName,
	                source: this.data,
	                transform: [{
	                        type: 'aggregate',
	                        groupby: this.columnFields.concat(this.rowFields),
	                        fields: fields,
	                        ops: ops
	                    }]
	            });
	        }
	        if (this.columnName) {
	            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));
	        }
	        if (this.rowName) {
	            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));
	        }
	        return data;
	    };
	    return FacetNode;
	}(dataflow_1.DataFlowNode));
	exports.FacetNode = FacetNode;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var FilterInvalidNode = /** @class */ (function (_super) {
	    __extends(FilterInvalidNode, _super);
	    function FilterInvalidNode(fieldDefs) {
	        var _this = _super.call(this) || this;
	        _this.fieldDefs = fieldDefs;
	        return _this;
	    }
	    FilterInvalidNode.prototype.clone = function () {
	        return new FilterInvalidNode(__assign({}, this.fieldDefs));
	    };
	    FilterInvalidNode.make = function (model) {
	        if (model.config.invalidValues !== 'filter') {
	            return null;
	        }
	        var filter = model.reduceFieldDef(function (aggregator, fieldDef, channel) {
	            var scaleComponent = channel_1.isScaleChannel(channel) && model.getScaleComponent(channel);
	            if (scaleComponent) {
	                var scaleType = scaleComponent.get('type');
	                // only automatically filter null for continuous domain since discrete domain scales can handle invalid values.
	                if (scale_1.hasContinuousDomain(scaleType) && !fieldDef.aggregate) {
	                    aggregator[fieldDef.field] = fieldDef;
	                }
	            }
	            return aggregator;
	        }, {});
	        if (!util_1.keys(filter).length) {
	            return null;
	        }
	        return new FilterInvalidNode(filter);
	    };
	    Object.defineProperty(FilterInvalidNode.prototype, "filter", {
	        get: function () {
	            return this.fieldDefs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // create the VgTransforms for each of the filtered fields
	    FilterInvalidNode.prototype.assemble = function () {
	        var _this = this;
	        var filters = util_1.keys(this.filter).reduce(function (vegaFilters, field) {
	            var fieldDef = _this.fieldDefs[field];
	            var ref = fielddef_1.vgField(fieldDef, { expr: 'datum' });
	            if (fieldDef !== null) {
	                vegaFilters.push(ref + " !== null");
	                vegaFilters.push("!isNaN(" + ref + ")");
	            }
	            return vegaFilters;
	        }, []);
	        return filters.length > 0 ?
	            {
	                type: 'filter',
	                expr: filters.join(' && ')
	            } : null;
	    };
	    return FilterInvalidNode;
	}(dataflow_1.DataFlowNode));
	exports.FilterInvalidNode = FilterInvalidNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW52YWxpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZmlsdGVyaW52YWxpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHlDQUE2QztBQUM3QywyQ0FBNkQ7QUFDN0QscUNBQTJEO0FBQzNELG1DQUFzQztBQUd0Qyx1Q0FBd0M7QUFFeEM7SUFBdUMscUNBQVk7SUFLakQsMkJBQW9CLFNBQWlDO1FBQXJELFlBQ0MsaUJBQU8sU0FDUDtRQUZtQixlQUFTLEdBQVQsU0FBUyxDQUF3Qjs7SUFFckQsQ0FBQztJQU5NLGlDQUFLLEdBQVo7UUFDRSxNQUFNLENBQUMsSUFBSSxpQkFBaUIsY0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQU1hLHNCQUFJLEdBQWxCLFVBQW1CLEtBQXFCO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLFFBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQUMsVUFBa0MsRUFBRSxRQUFRLEVBQUUsT0FBTztZQUN4RixJQUFNLGNBQWMsR0FBRyx3QkFBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuRixFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNuQixJQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUU3QywrR0FBK0c7Z0JBQy9HLEVBQUUsQ0FBQyxDQUFDLDJCQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQzFELFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO2dCQUN4QyxDQUFDO1lBQ0gsQ0FBQztZQUNELE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDcEIsQ0FBQyxFQUFFLEVBQTRCLENBQUMsQ0FBQztRQUVqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELHNCQUFJLHFDQUFNO2FBQVY7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUVELDBEQUEwRDtJQUNuRCxvQ0FBUSxHQUFmO1FBQUEsaUJBa0JDO1FBaEJDLElBQU0sT0FBTyxHQUFHLFdBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsV0FBVyxFQUFFLEtBQUs7WUFDMUQsSUFBTSxRQUFRLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QyxJQUFNLEdBQUcsR0FBRyxrQkFBUSxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBRWhELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLENBQUMsSUFBSSxDQUFJLEdBQUcsY0FBVyxDQUFDLENBQUM7Z0JBQ3BDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBVSxHQUFHLE1BQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ3JCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNCO2dCQUNJLElBQUksRUFBRSxRQUFRO2dCQUNkLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUM3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDWCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBMURELENBQXVDLHVCQUFZLEdBMERsRDtBQTFEWSw4Q0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzU2NhbGVDaGFubmVsfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7RmllbGREZWYsIHZnRmllbGQgYXMgZmllbGRSZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgU2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge0RpY3QsIGtleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0ZpbHRlclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbFdpdGhGaWVsZH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgRmlsdGVySW52YWxpZE5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJJbnZhbGlkTm9kZSh7Li4udGhpcy5maWVsZERlZnN9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZmllbGREZWZzOiBEaWN0PEZpZWxkRGVmPHN0cmluZz4+KSB7XG4gICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtYWtlKG1vZGVsOiBNb2RlbFdpdGhGaWVsZCk6IEZpbHRlckludmFsaWROb2RlIHtcbiAgICBpZiAobW9kZWwuY29uZmlnLmludmFsaWRWYWx1ZXMgIT09ICdmaWx0ZXInICkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyID0gbW9kZWwucmVkdWNlRmllbGREZWYoKGFnZ3JlZ2F0b3I6IERpY3Q8RmllbGREZWY8c3RyaW5nPj4sIGZpZWxkRGVmLCBjaGFubmVsKSA9PiB7XG4gICAgICBjb25zdCBzY2FsZUNvbXBvbmVudCA9IGlzU2NhbGVDaGFubmVsKGNoYW5uZWwpICYmIG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuICAgICAgaWYgKHNjYWxlQ29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IHNjYWxlVHlwZSA9IHNjYWxlQ29tcG9uZW50LmdldCgndHlwZScpO1xuXG4gICAgICAgIC8vIG9ubHkgYXV0b21hdGljYWxseSBmaWx0ZXIgbnVsbCBmb3IgY29udGludW91cyBkb21haW4gc2luY2UgZGlzY3JldGUgZG9tYWluIHNjYWxlcyBjYW4gaGFuZGxlIGludmFsaWQgdmFsdWVzLlxuICAgICAgICBpZiAoaGFzQ29udGludW91c0RvbWFpbihzY2FsZVR5cGUpICYmICFmaWVsZERlZi5hZ2dyZWdhdGUpIHtcbiAgICAgICAgICBhZ2dyZWdhdG9yW2ZpZWxkRGVmLmZpZWxkXSA9IGZpZWxkRGVmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWdncmVnYXRvcjtcbiAgICB9LCB7fSBhcyBEaWN0PEZpZWxkRGVmPHN0cmluZz4+KTtcblxuICAgIGlmICgha2V5cyhmaWx0ZXIpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJJbnZhbGlkTm9kZShmaWx0ZXIpO1xuICB9XG5cbiAgZ2V0IGZpbHRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5maWVsZERlZnM7XG4gIH1cblxuICAvLyBjcmVhdGUgdGhlIFZnVHJhbnNmb3JtcyBmb3IgZWFjaCBvZiB0aGUgZmlsdGVyZWQgZmllbGRzXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0ZpbHRlclRyYW5zZm9ybSB7XG5cbiAgICBjb25zdCBmaWx0ZXJzID0ga2V5cyh0aGlzLmZpbHRlcikucmVkdWNlKCh2ZWdhRmlsdGVycywgZmllbGQpID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkRGVmID0gdGhpcy5maWVsZERlZnNbZmllbGRdO1xuICAgICAgY29uc3QgcmVmID0gZmllbGRSZWYoZmllbGREZWYsIHtleHByOiAnZGF0dW0nfSk7XG5cbiAgICAgIGlmIChmaWVsZERlZiAhPT0gbnVsbCkge1xuICAgICAgICB2ZWdhRmlsdGVycy5wdXNoKGAke3JlZn0gIT09IG51bGxgKTtcbiAgICAgICAgdmVnYUZpbHRlcnMucHVzaChgIWlzTmFOKCR7cmVmfSlgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2ZWdhRmlsdGVycztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gZmlsdGVycy5sZW5ndGggPiAwID9cbiAgICB7XG4gICAgICAgIHR5cGU6ICdmaWx0ZXInLFxuICAgICAgICBleHByOiBmaWx0ZXJzLmpvaW4oJyAmJiAnKVxuICAgIH0gOiBudWxsO1xuICB9XG59XG4iXX0=

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var facet_1 = __webpack_require__(83);
	var formatparse_1 = __webpack_require__(86);
	var source_1 = __webpack_require__(87);
	var timeunit_1 = __webpack_require__(88);
	/**
	 * Start optimization path at the leaves. Useful for merging up or removing things.
	 *
	 * If the callback returns true, the recursion continues.
	 */
	function iterateFromLeaves(f) {
	    function optimizeNextFromLeaves(node) {
	        if (node instanceof source_1.SourceNode) {
	            return;
	        }
	        var next = node.parent;
	        if (f(node)) {
	            optimizeNextFromLeaves(next);
	        }
	    }
	    return optimizeNextFromLeaves;
	}
	exports.iterateFromLeaves = iterateFromLeaves;
	/**
	 * Move parse nodes up to forks.
	 */
	function moveParseUp(node) {
	    var parent = node.parent;
	    // move parse up by merging or swapping
	    if (node instanceof formatparse_1.ParseNode) {
	        if (parent instanceof source_1.SourceNode) {
	            return false;
	        }
	        if (parent.numChildren() > 1) {
	            // don't move parse further up but continue with parent.
	            return true;
	        }
	        if (parent instanceof formatparse_1.ParseNode) {
	            parent.merge(node);
	        }
	        else {
	            // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)
	            if (util_1.hasIntersection(parent.producedFields(), node.dependentFields())) {
	                return true;
	            }
	            node.swapWithParent();
	        }
	    }
	    return true;
	}
	exports.moveParseUp = moveParseUp;
	/**
	 * Repeatedly remove leaf nodes that are not output or facet nodes.
	 * The reason is that we don't need subtrees that don't have any output nodes.
	 * Facet nodes are needed for the row or column domains.
	 */
	function removeUnusedSubtrees(node) {
	    if (node instanceof dataflow_1.OutputNode || node.numChildren() > 0 || node instanceof facet_1.FacetNode) {
	        // no need to continue with parent because it is output node or will have children (there was a fork)
	        return false;
	    }
	    else {
	        node.remove();
	    }
	    return true;
	}
	exports.removeUnusedSubtrees = removeUnusedSubtrees;
	/**
	 * Removes duplicate time unit nodes (as determined by the name of the
	 * output field) that may be generated due to selections projected over
	 * time units.
	 */
	function removeDuplicateTimeUnits(leaf) {
	    var fields = {};
	    return iterateFromLeaves(function (node) {
	        if (node instanceof timeunit_1.TimeUnitNode) {
	            var pfields = node.producedFields();
	            var dupe = util_1.keys(pfields).every(function (k) { return !!fields[k]; });
	            if (dupe) {
	                node.remove();
	            }
	            else {
	                fields = __assign({}, fields, pfields);
	            }
	        }
	        return true;
	    })(leaf);
	}
	exports.removeDuplicateTimeUnits = removeDuplicateTimeUnits;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW1pemVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvb3B0aW1pemVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsbUNBQWlEO0FBQ2pELHVDQUFvRDtBQUNwRCxpQ0FBa0M7QUFDbEMsNkNBQXdDO0FBQ3hDLG1DQUFvQztBQUNwQyx1Q0FBd0M7QUFHeEM7Ozs7R0FJRztBQUNILDJCQUFrQyxDQUFrQztJQUNsRSxnQ0FBZ0MsSUFBa0I7UUFDaEQsRUFBRSxDQUFDLENBQUMsSUFBSSxZQUFZLG1CQUFVLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQztRQUNULENBQUM7UUFFRCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWixzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDO0FBYkQsOENBYUM7QUFFRDs7R0FFRztBQUNILHFCQUE0QixJQUFrQjtJQUM1QyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTNCLHVDQUF1QztJQUN2QyxFQUFFLENBQUMsQ0FBQyxJQUFJLFlBQVksdUJBQVMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsRUFBRSxDQUFDLENBQUMsTUFBTSxZQUFZLG1CQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0Isd0RBQXdEO1lBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsTUFBTSxZQUFZLHVCQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sNEZBQTRGO1lBQzVGLEVBQUUsQ0FBQyxDQUFDLHNCQUFlLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckUsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQTNCRCxrQ0EyQkM7QUFFRDs7OztHQUlHO0FBQ0gsOEJBQXFDLElBQWtCO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxxQkFBVSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxZQUFZLGlCQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLHFHQUFxRztRQUNyRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVJELG9EQVFDO0FBRUQ7Ozs7R0FJRztBQUNILGtDQUF5QyxJQUFrQjtJQUN6RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFVBQUMsSUFBa0I7UUFDMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxZQUFZLHVCQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QyxJQUFNLElBQUksR0FBRyxXQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztZQUVyRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNULElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxnQkFBTyxNQUFNLEVBQUssT0FBTyxDQUFDLENBQUM7WUFDbkMsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDO0FBaEJELDREQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGFzSW50ZXJzZWN0aW9uLCBrZXlzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7RmFjZXROb2RlfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7UGFyc2VOb2RlfSBmcm9tICcuL2Zvcm1hdHBhcnNlJztcbmltcG9ydCB7U291cmNlTm9kZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHtUaW1lVW5pdE5vZGV9IGZyb20gJy4vdGltZXVuaXQnO1xuXG5cbi8qKlxuICogU3RhcnQgb3B0aW1pemF0aW9uIHBhdGggYXQgdGhlIGxlYXZlcy4gVXNlZnVsIGZvciBtZXJnaW5nIHVwIG9yIHJlbW92aW5nIHRoaW5ncy5cbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLCB0aGUgcmVjdXJzaW9uIGNvbnRpbnVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVGcm9tTGVhdmVzKGY6IChub2RlOiBEYXRhRmxvd05vZGUpID0+IGJvb2xlYW4pIHtcbiAgZnVuY3Rpb24gb3B0aW1pemVOZXh0RnJvbUxlYXZlcyhub2RlOiBEYXRhRmxvd05vZGUpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKGYobm9kZSkpIHtcbiAgICAgIG9wdGltaXplTmV4dEZyb21MZWF2ZXMobmV4dCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wdGltaXplTmV4dEZyb21MZWF2ZXM7XG59XG5cbi8qKlxuICogTW92ZSBwYXJzZSBub2RlcyB1cCB0byBmb3Jrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQYXJzZVVwKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudDtcblxuICAvLyBtb3ZlIHBhcnNlIHVwIGJ5IG1lcmdpbmcgb3Igc3dhcHBpbmdcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQYXJzZU5vZGUpIHtcbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQubnVtQ2hpbGRyZW4oKSA+IDEpIHtcbiAgICAgIC8vIGRvbid0IG1vdmUgcGFyc2UgZnVydGhlciB1cCBidXQgY29udGludWUgd2l0aCBwYXJlbnQuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgUGFyc2VOb2RlKSB7XG4gICAgICBwYXJlbnQubWVyZ2Uobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvbid0IHN3YXAgd2l0aCBub2RlcyB0aGF0IHByb2R1Y2Ugc29tZXRoaW5nIHRoYXQgdGhlIHBhcnNlIG5vZGUgZGVwZW5kcyBvbiAoZS5nLiBsb29rdXApXG4gICAgICBpZiAoaGFzSW50ZXJzZWN0aW9uKHBhcmVudC5wcm9kdWNlZEZpZWxkcygpLCBub2RlLmRlcGVuZGVudEZpZWxkcygpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zd2FwV2l0aFBhcmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlcGVhdGVkbHkgcmVtb3ZlIGxlYWYgbm9kZXMgdGhhdCBhcmUgbm90IG91dHB1dCBvciBmYWNldCBub2Rlcy5cbiAqIFRoZSByZWFzb24gaXMgdGhhdCB3ZSBkb24ndCBuZWVkIHN1YnRyZWVzIHRoYXQgZG9uJ3QgaGF2ZSBhbnkgb3V0cHV0IG5vZGVzLlxuICogRmFjZXQgbm9kZXMgYXJlIG5lZWRlZCBmb3IgdGhlIHJvdyBvciBjb2x1bW4gZG9tYWlucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZFN1YnRyZWVzKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIE91dHB1dE5vZGUgfHwgbm9kZS5udW1DaGlsZHJlbigpID4gMCB8fCBub2RlIGluc3RhbmNlb2YgRmFjZXROb2RlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBjb250aW51ZSB3aXRoIHBhcmVudCBiZWNhdXNlIGl0IGlzIG91dHB1dCBub2RlIG9yIHdpbGwgaGF2ZSBjaGlsZHJlbiAodGhlcmUgd2FzIGEgZm9yaylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZSB0aW1lIHVuaXQgbm9kZXMgKGFzIGRldGVybWluZWQgYnkgdGhlIG5hbWUgb2YgdGhlXG4gKiBvdXRwdXQgZmllbGQpIHRoYXQgbWF5IGJlIGdlbmVyYXRlZCBkdWUgdG8gc2VsZWN0aW9ucyBwcm9qZWN0ZWQgb3ZlclxuICogdGltZSB1bml0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZVRpbWVVbml0cyhsZWFmOiBEYXRhRmxvd05vZGUpIHtcbiAgbGV0IGZpZWxkcyA9IHt9O1xuICByZXR1cm4gaXRlcmF0ZUZyb21MZWF2ZXMoKG5vZGU6IERhdGFGbG93Tm9kZSkgPT4ge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgVGltZVVuaXROb2RlKSB7XG4gICAgICBjb25zdCBwZmllbGRzID0gbm9kZS5wcm9kdWNlZEZpZWxkcygpO1xuICAgICAgY29uc3QgZHVwZSA9IGtleXMocGZpZWxkcykuZXZlcnkoKGspID0+ICEhZmllbGRzW2tdKTtcblxuICAgICAgaWYgKGR1cGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkcyA9IHsuLi5maWVsZHMsIC4uLnBmaWVsZHN9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KShsZWFmKTtcbn1cbiJdfQ==

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var aggregate_1 = __webpack_require__(13);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var logical_1 = __webpack_require__(20);
	var predicate_1 = __webpack_require__(54);
	var transform_1 = __webpack_require__(58);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var dataflow_1 = __webpack_require__(82);
	function parseExpression(field, parse) {
	    var f = "datum" + util_1.accessPath(field);
	    if (parse === 'number') {
	        return "toNumber(" + f + ")";
	    }
	    else if (parse === 'boolean') {
	        return "toBoolean(" + f + ")";
	    }
	    else if (parse === 'string') {
	        return "toString(" + f + ")";
	    }
	    else if (parse === 'date') {
	        return "toDate(" + f + ")";
	    }
	    else if (parse.indexOf('date:') === 0) {
	        var specifier = parse.slice(5, parse.length);
	        return "timeParse(" + f + "," + specifier + ")";
	    }
	    else if (parse.indexOf('utc:') === 0) {
	        var specifier = parse.slice(4, parse.length);
	        return "utcParse(" + f + "," + specifier + ")";
	    }
	    else {
	        log.warn(log.message.unrecognizedParse(parse));
	        return null;
	    }
	}
	var ParseNode = /** @class */ (function (_super) {
	    __extends(ParseNode, _super);
	    function ParseNode(parse) {
	        var _this = _super.call(this) || this;
	        _this._parse = {};
	        _this._parse = parse;
	        return _this;
	    }
	    ParseNode.prototype.clone = function () {
	        return new ParseNode(util_1.duplicate(this.parse));
	    };
	    ParseNode.make = function (model) {
	        var parse = {};
	        var calcFieldMap = {};
	        (model.transforms || []).forEach(function (transform) {
	            if (transform_1.isCalculate(transform)) {
	                calcFieldMap[transform.as] = true;
	            }
	            else if (transform_1.isFilter(transform)) {
	                logical_1.forEachLeave(transform.filter, function (filter) {
	                    if (predicate_1.isFieldPredicate(filter)) {
	                        if (filter.timeUnit) {
	                            parse[filter.field] = 'date';
	                        }
	                    }
	                });
	            }
	        }, {});
	        if (model_1.isUnitModel(model) || model_1.isFacetModel(model)) {
	            // Parse encoded fields
	            model.forEachFieldDef(function (fieldDef) {
	                if (fielddef_1.isTimeFieldDef(fieldDef)) {
	                    parse[fieldDef.field] = 'date';
	                }
	                else if (fielddef_1.isNumberFieldDef(fieldDef)) {
	                    if (calcFieldMap[fieldDef.field] || aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {
	                        return;
	                    }
	                    parse[fieldDef.field] = 'number';
	                }
	            });
	        }
	        // Custom parse should override inferred parse
	        var data = model.data;
	        if (data && data.format && data.format.parse) {
	            var p_1 = data.format.parse;
	            util_1.keys(p_1).forEach(function (field) {
	                parse[field] = p_1[field];
	            });
	        }
	        // We should not parse what has already been parsed in a parent
	        var modelParse = model.component.data.ancestorParse;
	        util_1.keys(modelParse).forEach(function (field) {
	            if (parse[field] !== modelParse[field]) {
	                log.warn(log.message.differentParse(field, parse[field], modelParse[field]));
	            }
	            else {
	                delete parse[field];
	            }
	        });
	        if (util_1.keys(parse).length === 0) {
	            return null;
	        }
	        return new ParseNode(parse);
	    };
	    Object.defineProperty(ParseNode.prototype, "parse", {
	        get: function () {
	            return this._parse;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ParseNode.prototype.merge = function (other) {
	        this._parse = __assign({}, this._parse, other.parse);
	        other.remove();
	    };
	    ParseNode.prototype.assembleFormatParse = function () {
	        return this._parse;
	    };
	    // format parse depends and produces all fields in its parse
	    ParseNode.prototype.producedFields = function () {
	        return util_1.toSet(util_1.keys(this.parse));
	    };
	    ParseNode.prototype.dependentFields = function () {
	        return util_1.toSet(util_1.keys(this.parse));
	    };
	    ParseNode.prototype.assembleTransforms = function () {
	        var _this = this;
	        return util_1.keys(this._parse).map(function (field) {
	            var expr = parseExpression(field, _this._parse[field]);
	            if (!expr) {
	                return null;
	            }
	            var formula = {
	                type: 'formula',
	                expr: expr,
	                as: field
	            };
	            return formula;
	        }).filter(function (t) { return t !== null; });
	    };
	    return ParseNode;
	}(dataflow_1.DataFlowNode));
	exports.ParseNode = ParseNode;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(53);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var SourceNode = /** @class */ (function (_super) {
	    __extends(SourceNode, _super);
	    function SourceNode(data) {
	        var _this = _super.call(this) || this;
	        data = data || { name: 'source' };
	        if (data_1.isInlineData(data)) {
	            _this._data = { values: data.values };
	        }
	        else if (data_1.isUrlData(data)) {
	            _this._data = { url: data.url };
	            if (!data.format) {
	                data.format = {};
	            }
	            if (!data.format || !data.format.type) {
	                // Extract extension from URL using snippet from
	                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
	                var defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];
	                if (!util_1.contains(['json', 'csv', 'tsv', 'topojson'], defaultExtension)) {
	                    defaultExtension = 'json';
	                }
	                // defaultExtension has type string but we ensure that it is DataFormatType above
	                data.format.type = defaultExtension;
	            }
	        }
	        else if (data_1.isNamedData(data)) {
	            _this._name = data.name;
	            _this._data = {};
	        }
	        if (!data_1.isNamedData(data) && data.format) {
	            var _a = data.format, _b = _a.parse, parse = _b === void 0 ? null : _b, format = __rest(_a, ["parse"]);
	            _this._data.format = format;
	        }
	        return _this;
	    }
	    Object.defineProperty(SourceNode.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SourceNode.prototype.hasName = function () {
	        return !!this._name;
	    };
	    Object.defineProperty(SourceNode.prototype, "dataName", {
	        get: function () {
	            return this._name;
	        },
	        set: function (name) {
	            this._name = name;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SourceNode.prototype, "parent", {
	        set: function (parent) {
	            throw new Error('Source nodes have to be roots.');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SourceNode.prototype.remove = function () {
	        throw new Error('Source nodes are roots and cannot be removed.');
	    };
	    /**
	     * Return a unique identifier for this data source.
	     */
	    SourceNode.prototype.hash = function () {
	        if (data_1.isInlineData(this._data)) {
	            if (!this._hash) {
	                // Hashing can be expensive for large inline datasets.
	                this._hash = util_1.hash(this._data);
	            }
	            return this._hash;
	        }
	        else if (data_1.isUrlData(this._data)) {
	            return util_1.hash([this._data.url, this._data.format]);
	        }
	        else {
	            return this._name;
	        }
	    };
	    SourceNode.prototype.assemble = function () {
	        return __assign({ name: this._name }, this._data, { transform: [] });
	    };
	    return SourceNode;
	}(dataflow_1.DataFlowNode));
	exports.SourceNode = SourceNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBc0Y7QUFDdEYsbUNBQTBDO0FBRTFDLHVDQUF3QztBQUV4QztJQUFnQyw4QkFBWTtJQU8xQyxvQkFBWSxJQUFVO1FBQXRCLFlBQ0UsaUJBQU8sU0FpQ1I7UUEvQkMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQztRQUVoQyxFQUFFLENBQUMsQ0FBQyxtQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixLQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQztRQUNyQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGdCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLEtBQUksQ0FBQyxLQUFLLEdBQUcsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBQyxDQUFDO1lBRTdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ25CLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLGdEQUFnRDtnQkFDaEQsd0dBQXdHO2dCQUN4RyxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNELEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BFLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztnQkFDNUIsQ0FBQztnQkFFRCxpRkFBaUY7Z0JBQ2pGLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLGdCQUFrQyxDQUFDO1lBQ3hELENBQUM7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGtCQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixLQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNsQixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBVyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLElBQU0sZ0JBQXVDLEVBQXRDLGFBQVksRUFBWixpQ0FBWSxFQUFFLDhCQUF3QixDQUFDO1lBQzlDLEtBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUM3QixDQUFDOztJQUNILENBQUM7SUFFRCxzQkFBSSw0QkFBSTthQUFSO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFFTSw0QkFBTyxHQUFkO1FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxzQkFBSSxnQ0FBUTthQUFaO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzthQUVELFVBQWEsSUFBWTtZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLDhCQUFNO2FBQVYsVUFBVyxNQUFvQjtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFFTSwyQkFBTSxHQUFiO1FBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNJLHlCQUFJLEdBQVg7UUFDRSxFQUFFLENBQUMsQ0FBQyxtQkFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsc0RBQXNEO2dCQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxXQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztJQUNILENBQUM7SUFFTSw2QkFBUSxHQUFmO1FBQ0UsTUFBTSxZQUNKLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxJQUNiLElBQUksQ0FBQyxLQUFLLElBQ2IsU0FBUyxFQUFFLEVBQUUsSUFDYjtJQUNKLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUEzRkQsQ0FBZ0MsdUJBQVksR0EyRjNDO0FBM0ZZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYXRhLCBEYXRhRm9ybWF0VHlwZSwgaXNJbmxpbmVEYXRhLCBpc05hbWVkRGF0YSwgaXNVcmxEYXRhfSBmcm9tICcuLi8uLi9kYXRhJztcbmltcG9ydCB7Y29udGFpbnMsIGhhc2h9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0RhdGF9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuZXhwb3J0IGNsYXNzIFNvdXJjZU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwcml2YXRlIF9kYXRhOiBQYXJ0aWFsPFZnRGF0YT47XG5cbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2hhc2g6IHN0cmluZyB8IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGRhdGEgPSBkYXRhIHx8IHtuYW1lOiAnc291cmNlJ307XG5cbiAgICBpZiAoaXNJbmxpbmVEYXRhKGRhdGEpKSB7XG4gICAgICB0aGlzLl9kYXRhID0ge3ZhbHVlczogZGF0YS52YWx1ZXN9O1xuICAgIH0gZWxzZSBpZiAoaXNVcmxEYXRhKGRhdGEpKSB7XG4gICAgICB0aGlzLl9kYXRhID0ge3VybDogZGF0YS51cmx9O1xuXG4gICAgICBpZiAoIWRhdGEuZm9ybWF0KSB7XG4gICAgICAgIGRhdGEuZm9ybWF0ID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YS5mb3JtYXQgfHwgIWRhdGEuZm9ybWF0LnR5cGUpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBleHRlbnNpb24gZnJvbSBVUkwgdXNpbmcgc25pcHBldCBmcm9tXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjgwOTI5L2hvdy10by1leHRyYWN0LWV4dGVuc2lvbi1mcm9tLWZpbGVuYW1lLXN0cmluZy1pbi1qYXZhc2NyaXB0XG4gICAgICAgIGxldCBkZWZhdWx0RXh0ZW5zaW9uID0gLyg/OlxcLihbXi5dKykpPyQvLmV4ZWMoZGF0YS51cmwpWzFdO1xuICAgICAgICBpZiAoIWNvbnRhaW5zKFsnanNvbicsICdjc3YnLCAndHN2JywgJ3RvcG9qc29uJ10sIGRlZmF1bHRFeHRlbnNpb24pKSB7XG4gICAgICAgICAgZGVmYXVsdEV4dGVuc2lvbiA9ICdqc29uJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlZmF1bHRFeHRlbnNpb24gaGFzIHR5cGUgc3RyaW5nIGJ1dCB3ZSBlbnN1cmUgdGhhdCBpdCBpcyBEYXRhRm9ybWF0VHlwZSBhYm92ZVxuICAgICAgICBkYXRhLmZvcm1hdC50eXBlID0gZGVmYXVsdEV4dGVuc2lvbiBhcyBEYXRhRm9ybWF0VHlwZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzTmFtZWREYXRhKGRhdGEpKSB7XG4gICAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuICAgIH1cblxuICAgIGlmICghaXNOYW1lZERhdGEoZGF0YSkgJiYgZGF0YS5mb3JtYXQpIHtcbiAgICAgIGNvbnN0IHtwYXJzZSA9IG51bGwsIC4uLmZvcm1hdH0gPSBkYXRhLmZvcm1hdDtcbiAgICAgIHRoaXMuX2RhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbiAgfVxuXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgcHVibGljIGhhc05hbWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5fbmFtZTtcbiAgfVxuXG4gIGdldCBkYXRhTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIHNldCBkYXRhTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgfVxuXG4gIHNldCBwYXJlbnQocGFyZW50OiBEYXRhRmxvd05vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBub2RlcyBoYXZlIHRvIGJlIHJvb3RzLicpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBub2RlcyBhcmUgcm9vdHMgYW5kIGNhbm5vdCBiZSByZW1vdmVkLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGRhdGEgc291cmNlLlxuICAgKi9cbiAgcHVibGljIGhhc2goKSB7XG4gICAgaWYgKGlzSW5saW5lRGF0YSh0aGlzLl9kYXRhKSkge1xuICAgICAgaWYgKCF0aGlzLl9oYXNoKSB7XG4gICAgICAgIC8vIEhhc2hpbmcgY2FuIGJlIGV4cGVuc2l2ZSBmb3IgbGFyZ2UgaW5saW5lIGRhdGFzZXRzLlxuICAgICAgICB0aGlzLl9oYXNoID0gaGFzaCh0aGlzLl9kYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuICAgIH0gZWxzZSBpZiAoaXNVcmxEYXRhKHRoaXMuX2RhdGEpKSB7XG4gICAgICByZXR1cm4gaGFzaChbdGhpcy5fZGF0YS51cmwsIHRoaXMuX2RhdGEuZm9ybWF0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0RhdGEge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgLi4udGhpcy5fZGF0YSxcbiAgICAgIHRyYW5zZm9ybTogW11cbiAgICB9O1xuICB9XG59XG4iXX0=

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var fielddef_1 = __webpack_require__(28);
	var timeunit_1 = __webpack_require__(30);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var TimeUnitNode = /** @class */ (function (_super) {
	    __extends(TimeUnitNode, _super);
	    function TimeUnitNode(formula) {
	        var _this = _super.call(this) || this;
	        _this.formula = formula;
	        return _this;
	    }
	    TimeUnitNode.prototype.clone = function () {
	        return new TimeUnitNode(util_1.duplicate(this.formula));
	    };
	    TimeUnitNode.makeFromEncoding = function (model) {
	        var formula = model.reduceFieldDef(function (timeUnitComponent, fieldDef) {
	            if (fieldDef.timeUnit) {
	                var f = fielddef_1.vgField(fieldDef);
	                timeUnitComponent[f] = {
	                    as: f,
	                    timeUnit: fieldDef.timeUnit,
	                    field: fieldDef.field
	                };
	            }
	            return timeUnitComponent;
	        }, {});
	        if (util_1.keys(formula).length === 0) {
	            return null;
	        }
	        return new TimeUnitNode(formula);
	    };
	    TimeUnitNode.makeFromTransform = function (t) {
	        return new TimeUnitNode((_a = {},
	            _a[t.field] = {
	                as: t.as,
	                timeUnit: t.timeUnit,
	                field: t.field
	            },
	            _a));
	        var _a;
	    };
	    TimeUnitNode.prototype.merge = function (other) {
	        this.formula = __assign({}, this.formula, other.formula);
	        other.remove();
	    };
	    TimeUnitNode.prototype.producedFields = function () {
	        var out = {};
	        util_1.vals(this.formula).forEach(function (f) {
	            out[f.as] = true;
	        });
	        return out;
	    };
	    TimeUnitNode.prototype.dependentFields = function () {
	        var out = {};
	        util_1.vals(this.formula).forEach(function (f) {
	            out[f.field] = true;
	        });
	        return out;
	    };
	    TimeUnitNode.prototype.assemble = function () {
	        return util_1.vals(this.formula).map(function (c) {
	            return {
	                type: 'formula',
	                as: c.as,
	                expr: timeunit_1.fieldExpr(c.timeUnit, c.field)
	            };
	        });
	    };
	    return TimeUnitNode;
	}(dataflow_1.DataFlowNode));
	exports.TimeUnitNode = TimeUnitNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXVuaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL3RpbWV1bml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQXVDO0FBQ3ZDLDJDQUFtRDtBQUVuRCxtQ0FBdUQ7QUFHdkQsdUNBQXdDO0FBU3hDO0lBQWtDLGdDQUFZO0lBSzVDLHNCQUFvQixPQUFnQztRQUFwRCxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsYUFBTyxHQUFQLE9BQU8sQ0FBeUI7O0lBRXBELENBQUM7SUFOTSw0QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLGdCQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQU1hLDZCQUFnQixHQUE5QixVQUErQixLQUFxQjtRQUNsRCxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQUMsaUJBQW9DLEVBQUUsUUFBUTtZQUNsRixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDdEIsSUFBTSxDQUFDLEdBQUcsa0JBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDNUIsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEdBQUc7b0JBQ3JCLEVBQUUsRUFBRSxDQUFDO29CQUNMLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtvQkFDM0IsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO2lCQUN0QixDQUFDO1lBQ0osQ0FBQztZQUNELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUMzQixDQUFDLEVBQUUsRUFBNkIsQ0FBQyxDQUFDO1FBRWxDLEVBQUUsQ0FBQyxDQUFDLFdBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRWEsOEJBQWlCLEdBQS9CLFVBQWdDLENBQW9CO1FBQ2xELE1BQU0sQ0FBQyxJQUFJLFlBQVk7WUFDckIsR0FBQyxDQUFDLENBQUMsS0FBSyxJQUFHO2dCQUNULEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDUixRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVE7Z0JBQ3BCLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSzthQUNmO2dCQUNELENBQUM7O0lBQ0wsQ0FBQztJQUVNLDRCQUFLLEdBQVosVUFBYSxLQUFtQjtRQUM5QixJQUFJLENBQUMsT0FBTyxnQkFBTyxJQUFJLENBQUMsT0FBTyxFQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVNLHFDQUFjLEdBQXJCO1FBQ0UsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWYsV0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxzQ0FBZSxHQUF0QjtRQUNFLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLFdBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQyxXQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7WUFDN0IsTUFBTSxDQUFDO2dCQUNMLElBQUksRUFBRSxTQUFTO2dCQUNmLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDUixJQUFJLEVBQUUsb0JBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDZixDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXpFRCxDQUFrQyx1QkFBWSxHQXlFN0M7QUF6RVksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3ZnRmllbGR9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7ZmllbGRFeHByLCBUaW1lVW5pdH0gZnJvbSAnLi4vLi4vdGltZXVuaXQnO1xuaW1wb3J0IHtUaW1lVW5pdFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGljdCwgZHVwbGljYXRlLCBrZXlzLCB2YWxzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdGb3JtdWxhVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsV2l0aEZpZWxkfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lVW5pdENvbXBvbmVudCB7XG4gIGFzOiBzdHJpbmc7XG4gIHRpbWVVbml0OiBUaW1lVW5pdDtcbiAgZmllbGQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVVbml0Tm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVVbml0Tm9kZShkdXBsaWNhdGUodGhpcy5mb3JtdWxhKSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm11bGE6IERpY3Q8VGltZVVuaXRDb21wb25lbnQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUZyb21FbmNvZGluZyhtb2RlbDogTW9kZWxXaXRoRmllbGQpIHtcbiAgICBjb25zdCBmb3JtdWxhID0gbW9kZWwucmVkdWNlRmllbGREZWYoKHRpbWVVbml0Q29tcG9uZW50OiBUaW1lVW5pdENvbXBvbmVudCwgZmllbGREZWYpID0+IHtcbiAgICAgIGlmIChmaWVsZERlZi50aW1lVW5pdCkge1xuICAgICAgICBjb25zdCBmID0gdmdGaWVsZChmaWVsZERlZik7XG4gICAgICAgIHRpbWVVbml0Q29tcG9uZW50W2ZdID0ge1xuICAgICAgICAgIGFzOiBmLFxuICAgICAgICAgIHRpbWVVbml0OiBmaWVsZERlZi50aW1lVW5pdCxcbiAgICAgICAgICBmaWVsZDogZmllbGREZWYuZmllbGRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aW1lVW5pdENvbXBvbmVudDtcbiAgICB9LCB7fSBhcyBEaWN0PFRpbWVVbml0Q29tcG9uZW50Pik7XG5cbiAgICBpZiAoa2V5cyhmb3JtdWxhKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVGltZVVuaXROb2RlKGZvcm11bGEpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtYWtlRnJvbVRyYW5zZm9ybSh0OiBUaW1lVW5pdFRyYW5zZm9ybSkge1xuICAgIHJldHVybiBuZXcgVGltZVVuaXROb2RlKHtcbiAgICAgIFt0LmZpZWxkXToge1xuICAgICAgICBhczogdC5hcyxcbiAgICAgICAgdGltZVVuaXQ6IHQudGltZVVuaXQsXG4gICAgICAgIGZpZWxkOiB0LmZpZWxkXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbWVyZ2Uob3RoZXI6IFRpbWVVbml0Tm9kZSkge1xuICAgIHRoaXMuZm9ybXVsYSA9IHsuLi50aGlzLmZvcm11bGEsIC4uLm90aGVyLmZvcm11bGF9O1xuICAgIG90aGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgdmFscyh0aGlzLmZvcm11bGEpLmZvckVhY2goZiA9PiB7XG4gICAgICBvdXRbZi5hc10gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBkZXBlbmRlbnRGaWVsZHMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG5cbiAgICB2YWxzKHRoaXMuZm9ybXVsYSkuZm9yRWFjaChmID0+IHtcbiAgICAgIG91dFtmLmZpZWxkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCkge1xuICAgIHJldHVybiB2YWxzKHRoaXMuZm9ybXVsYSkubWFwKGMgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2Zvcm11bGEnLFxuICAgICAgICBhczogYy5hcyxcbiAgICAgICAgZXhwcjogZmllbGRFeHByKGMudGltZVVuaXQsIGMuZmllbGQpXG4gICAgICB9IGFzIFZnRm9ybXVsYVRyYW5zZm9ybTtcbiAgICB9KTtcbiAgfVxufVxuIl19

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var fielddef_1 = __webpack_require__(28);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var dataflow_1 = __webpack_require__(82);
	function getStackByFields(model) {
	    return model.stack.stackBy.reduce(function (fields, by) {
	        var fieldDef = by.fieldDef;
	        var _field = fielddef_1.vgField(fieldDef);
	        if (_field) {
	            fields.push(_field);
	        }
	        return fields;
	    }, []);
	}
	var StackNode = /** @class */ (function (_super) {
	    __extends(StackNode, _super);
	    function StackNode(stack) {
	        var _this = _super.call(this) || this;
	        _this._stack = stack;
	        return _this;
	    }
	    StackNode.prototype.clone = function () {
	        return new StackNode(util_1.duplicate(this._stack));
	    };
	    StackNode.make = function (model) {
	        var stackProperties = model.stack;
	        if (!stackProperties) {
	            return null;
	        }
	        var dimensionFieldDef;
	        if (stackProperties.groupbyChannel) {
	            dimensionFieldDef = model.fieldDef(stackProperties.groupbyChannel);
	        }
	        var stackby = getStackByFields(model);
	        var orderDef = model.encoding.order;
	        var sort;
	        if (orderDef) {
	            sort = common_1.sortParams(orderDef);
	        }
	        else {
	            // default = descending by stackFields
	            // FIXME is the default here correct for binned fields?
	            sort = stackby.reduce(function (s, field) {
	                s.field.push(field);
	                s.order.push('descending');
	                return s;
	            }, { field: [], order: [] });
	        }
	        return new StackNode({
	            dimensionFieldDef: dimensionFieldDef,
	            field: model.vgField(stackProperties.fieldChannel),
	            facetby: [],
	            stackby: stackby,
	            sort: sort,
	            offset: stackProperties.offset,
	            impute: stackProperties.impute,
	        });
	    };
	    Object.defineProperty(StackNode.prototype, "stack", {
	        get: function () {
	            return this._stack;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StackNode.prototype.addDimensions = function (fields) {
	        this._stack.facetby = this._stack.facetby.concat(fields);
	    };
	    StackNode.prototype.dependentFields = function () {
	        var out = {};
	        out[this._stack.field] = true;
	        this.getGroupbyFields().forEach(function (f) { return out[f] = true; });
	        this._stack.facetby.forEach(function (f) { return out[f] = true; });
	        var field = this._stack.sort.field;
	        vega_util_1.isArray(field) ? field.forEach(function (f) { return out[f] = true; }) : out[field] = true;
	        return out;
	    };
	    StackNode.prototype.producedFields = function () {
	        var out = {};
	        out[this._stack.field + '_start'] = true;
	        out[this._stack.field + '_end'] = true;
	        return out;
	    };
	    StackNode.prototype.getGroupbyFields = function () {
	        var _a = this._stack, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute;
	        if (dimensionFieldDef) {
	            if (dimensionFieldDef.bin) {
	                if (impute) {
	                    // For binned group by field with impute, we calculate bin_mid
	                    // as we cannot impute two fields simultaneously
	                    return [fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'mid' })];
	                }
	                return [
	                    // For binned group by field without impute, we need both bin (start) and bin_end
	                    fielddef_1.vgField(dimensionFieldDef, {}),
	                    fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'end' })
	                ];
	            }
	            return [fielddef_1.vgField(dimensionFieldDef)];
	        }
	        return [];
	    };
	    StackNode.prototype.assemble = function () {
	        var transform = [];
	        var _a = this._stack, facetby = _a.facetby, stackField = _a.field, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute, offset = _a.offset, sort = _a.sort, stackby = _a.stackby;
	        // Impute
	        if (impute && dimensionFieldDef) {
	            var dimensionField = dimensionFieldDef ? fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'mid' }) : undefined;
	            if (dimensionFieldDef.bin) {
	                // As we can only impute one field at a time, we need to calculate
	                // mid point for a binned field
	                transform.push({
	                    type: 'formula',
	                    expr: '(' +
	                        fielddef_1.vgField(dimensionFieldDef, { expr: 'datum' }) +
	                        '+' +
	                        fielddef_1.vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +
	                        ')/2',
	                    as: dimensionField
	                });
	            }
	            transform.push({
	                type: 'impute',
	                field: stackField,
	                groupby: stackby,
	                key: dimensionField,
	                method: 'value',
	                value: 0
	            });
	        }
	        // Stack
	        transform.push({
	            type: 'stack',
	            groupby: this.getGroupbyFields().concat(facetby),
	            field: stackField,
	            sort: sort,
	            as: [
	                stackField + '_start',
	                stackField + '_end'
	            ],
	            offset: offset
	        });
	        return transform;
	    };
	    return StackNode;
	}(dataflow_1.DataFlowNode));
	exports.StackNode = StackNode;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var mark_1 = __webpack_require__(25);
	var scale_1 = __webpack_require__(39);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var resolve_1 = __webpack_require__(66);
	var split_1 = __webpack_require__(67);
	var component_1 = __webpack_require__(91);
	var domain_1 = __webpack_require__(78);
	var properties_1 = __webpack_require__(92);
	var range_1 = __webpack_require__(93);
	var type_2 = __webpack_require__(94);
	function parseScale(model) {
	    parseScaleCore(model);
	    domain_1.parseScaleDomain(model);
	    for (var _i = 0, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1 = scale_1.NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES; _i < NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1.length; _i++) {
	        var prop = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1[_i];
	        properties_1.parseScaleProperty(model, prop);
	    }
	    // range depends on zero
	    range_1.parseScaleRange(model);
	}
	exports.parseScale = parseScale;
	function parseScaleCore(model) {
	    if (model_1.isUnitModel(model)) {
	        model.component.scales = parseUnitScaleCore(model);
	    }
	    else {
	        model.component.scales = parseNonUnitScaleCore(model);
	    }
	}
	exports.parseScaleCore = parseScaleCore;
	/**
	 * Parse scales for all channels of a model.
	 */
	function parseUnitScaleCore(model) {
	    var encoding = model.encoding, config = model.config;
	    var mark = model.mark();
	    return channel_1.SCALE_CHANNELS.reduce(function (scaleComponents, channel) {
	        var fieldDef;
	        var specifiedScale = {};
	        var channelDef = encoding[channel];
	        // If mark has a projection (potentially implicitly), there is no need to generate a scale.
	        if (fielddef_1.isFieldDef(channelDef) && ((mark === mark_1.GEOSHAPE && fielddef_1.isFieldDef(channelDef) && channel === channel_1.SHAPE && channelDef.type === type_1.GEOJSON)
	            || (util_1.contains([channel_1.X, channel_1.Y, channel_1.X2, channel_1.Y2], channel) && util_1.contains([type_1.LATITUDE, type_1.LONGITUDE], channelDef.type)))) {
	            return scaleComponents;
	        }
	        if (fielddef_1.isFieldDef(channelDef)) {
	            fieldDef = channelDef;
	            specifiedScale = channelDef.scale || {};
	        }
	        else if (fielddef_1.hasConditionalFieldDef(channelDef)) {
	            fieldDef = channelDef.condition;
	            specifiedScale = channelDef.condition['scale'] || {}; // We use ['scale'] since we know that channel here has scale for sure
	        }
	        else if (channel === channel_1.X) {
	            fieldDef = fielddef_1.getFieldDef(encoding.x2);
	        }
	        else if (channel === channel_1.Y) {
	            fieldDef = fielddef_1.getFieldDef(encoding.y2);
	        }
	        if (fieldDef) {
	            var specifiedScaleType = specifiedScale.type;
	            var sType = type_2.scaleType(specifiedScale.type, channel, fieldDef, mark, config.scale);
	            scaleComponents[channel] = new component_1.ScaleComponent(model.scaleName(channel + '', true), { value: sType, explicit: specifiedScaleType === sType });
	        }
	        return scaleComponents;
	    }, {});
	}
	var scaleTypeTieBreaker = split_1.tieBreakByComparing(function (st1, st2) { return (scale_1.scaleTypePrecedence(st1) - scale_1.scaleTypePrecedence(st2)); });
	function parseNonUnitScaleCore(model) {
	    var scaleComponents = model.component.scales = {};
	    var scaleTypeWithExplicitIndex = {};
	    var resolve = model.component.resolve;
	    var _loop_1 = function (child) {
	        parseScaleCore(child);
	        // Instead of always merging right away -- check if it is compatible to merge first!
	        util_1.keys(child.component.scales).forEach(function (channel) {
	            // if resolve is undefined, set default first
	            resolve.scale[channel] = resolve.scale[channel] || resolve_1.defaultScaleResolve(channel, model);
	            if (resolve.scale[channel] === 'shared') {
	                var explicitScaleType = scaleTypeWithExplicitIndex[channel];
	                var childScaleType = child.component.scales[channel].getWithExplicit('type');
	                if (explicitScaleType) {
	                    if (scale_1.scaleCompatible(explicitScaleType.value, childScaleType.value)) {
	                        // merge scale component if type are compatible
	                        scaleTypeWithExplicitIndex[channel] = split_1.mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
	                    }
	                    else {
	                        // Otherwise, update conflicting channel to be independent
	                        resolve.scale[channel] = 'independent';
	                        // Remove from the index so they don't get merged
	                        delete scaleTypeWithExplicitIndex[channel];
	                    }
	                }
	                else {
	                    scaleTypeWithExplicitIndex[channel] = childScaleType;
	                }
	            }
	        });
	    };
	    // Parse each child scale and determine if a particular channel can be merged.
	    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	        var child = _a[_i];
	        _loop_1(child);
	    }
	    // Merge each channel listed in the index
	    util_1.keys(scaleTypeWithExplicitIndex).forEach(function (channel) {
	        // Create new merged scale component
	        var name = model.scaleName(channel, true);
	        var typeWithExplicit = scaleTypeWithExplicitIndex[channel];
	        scaleComponents[channel] = new component_1.ScaleComponent(name, typeWithExplicit);
	        // rename each child and mark them as merged
	        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            var childScale = child.component.scales[channel];
	            if (childScale) {
	                child.renameScale(childScale.get('name'), name);
	                childScale.merged = true;
	            }
	        }
	    });
	    return scaleComponents;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var split_1 = __webpack_require__(67);
	var ScaleComponent = /** @class */ (function (_super) {
	    __extends(ScaleComponent, _super);
	    function ScaleComponent(name, typeWithExplicit) {
	        var _this = _super.call(this, {}, // no initial explicit property
	        { name: name } // name as initial implicit property
	        ) || this;
	        _this.merged = false;
	        _this.domains = [];
	        _this.setWithExplicit('type', typeWithExplicit);
	        return _this;
	    }
	    return ScaleComponent;
	}(split_1.Split));
	exports.ScaleComponent = ScaleComponent;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2NhbGUvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUlBLGtDQUF5QztBQVN6QztJQUFvQyxrQ0FBMEI7SUFLNUQsd0JBQVksSUFBWSxFQUFFLGdCQUFxQztRQUEvRCxZQUNFLGtCQUNFLEVBQUUsRUFBTSwrQkFBK0I7UUFDdkMsRUFBQyxJQUFJLE1BQUEsRUFBQyxDQUFFLG9DQUFvQztTQUM3QyxTQUVGO1FBVk0sWUFBTSxHQUFHLEtBQUssQ0FBQztRQUVmLGFBQU8sR0FBdUIsRUFBRSxDQUFDO1FBT3RDLEtBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7O0lBQ2pELENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFaRCxDQUFvQyxhQUFLLEdBWXhDO0FBWlksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge1NjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7T21pdH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnTm9uVW5pb25Eb21haW4sIFZnU2NhbGV9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RXhwbGljaXQsIFNwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbi8qKlxuICogQWxsIFZnRG9tYWluIHByb3BlcnR5IGV4Y2VwdCBkb21haW4uXG4gKiAoV2UgZXhjbHVkZSBkb21haW4gYXMgd2UgaGF2ZSBhIHNwZWNpYWwgXCJkb21haW5zXCIgYXJyYXkgdGhhdCBhbGxvdyB1cyBtZXJnZSB0aGVtIGFsbCBhdCBvbmNlIGluIGFzc2VtYmxlLilcbiAqL1xuLy8gVE9ETzogYWxzbyBleGNsdWRlIGRvbWFpblJhdyBhbmQgcHJvcGVydHkgaW1wbGVtZW50IHRoZSByaWdodCBzY2FsZUNvbXBvbmVudCBmb3Igc2VsZWN0aW9uIGRvbWFpblxuZXhwb3J0IHR5cGUgU2NhbGVDb21wb25lbnRQcm9wcyA9IFBhcnRpYWw8T21pdDxWZ1NjYWxlLCAnZG9tYWluJz4+O1xuXG5leHBvcnQgY2xhc3MgU2NhbGVDb21wb25lbnQgZXh0ZW5kcyBTcGxpdDxTY2FsZUNvbXBvbmVudFByb3BzPiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBwdWJsaWMgZG9tYWluczogVmdOb25VbmlvbkRvbWFpbltdID0gW107XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0eXBlV2l0aEV4cGxpY2l0OiBFeHBsaWNpdDxTY2FsZVR5cGU+KSB7XG4gICAgc3VwZXIoXG4gICAgICB7fSwgICAgIC8vIG5vIGluaXRpYWwgZXhwbGljaXQgcHJvcGVydHlcbiAgICAgIHtuYW1lfSAgLy8gbmFtZSBhcyBpbml0aWFsIGltcGxpY2l0IHByb3BlcnR5XG4gICAgKTtcbiAgICB0aGlzLnNldFdpdGhFeHBsaWNpdCgndHlwZScsIHR5cGVXaXRoRXhwbGljaXQpO1xuICB9XG59XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBTY2FsZUNvbXBvbmVudEluZGV4ID0ge1tQIGluIFNjYWxlQ2hhbm5lbF0/OiBTY2FsZUNvbXBvbmVudH07XG5cbmV4cG9ydCB0eXBlIFNjYWxlSW5kZXggPSB7W1AgaW4gU2NhbGVDaGFubmVsXT86IFNjYWxlfTtcbiJdfQ==

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var util = __webpack_require__(14);
	var model_1 = __webpack_require__(57);
	var split_1 = __webpack_require__(67);
	var range_1 = __webpack_require__(93);
	function parseScaleProperty(model, property) {
	    if (model_1.isUnitModel(model)) {
	        parseUnitScaleProperty(model, property);
	    }
	    else {
	        parseNonUnitScaleProperty(model, property);
	    }
	}
	exports.parseScaleProperty = parseScaleProperty;
	function parseUnitScaleProperty(model, property) {
	    var localScaleComponents = model.component.scales;
	    util_1.keys(localScaleComponents).forEach(function (channel) {
	        var specifiedScale = model.specifiedScales[channel];
	        var localScaleCmpt = localScaleComponents[channel];
	        var mergedScaleCmpt = model.getScaleComponent(channel);
	        var fieldDef = model.fieldDef(channel);
	        var sort = model.sort(channel);
	        var config = model.config;
	        var specifiedValue = specifiedScale[property];
	        var sType = mergedScaleCmpt.get('type');
	        var supportedByScaleType = scale_1.scaleTypeSupportProperty(sType, property);
	        var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);
	        if (specifiedValue !== undefined) {
	            // If there is a specified value, check if it is compatible with scale type and channel
	            if (!supportedByScaleType) {
	                log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));
	            }
	            else if (channelIncompatability) {
	                log.warn(channelIncompatability);
	            }
	        }
	        if (supportedByScaleType && channelIncompatability === undefined) {
	            if (specifiedValue !== undefined) {
	                // copyKeyFromObject ensure type safety
	                localScaleCmpt.copyKeyFromObject(property, specifiedScale);
	            }
	            else {
	                var value = getDefaultValue(property, channel, fieldDef, sort, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);
	                if (value !== undefined) {
	                    localScaleCmpt.set(property, value, false);
	                }
	            }
	        }
	    });
	}
	// Note: This method is used in Voyager.
	function getDefaultValue(property, channel, fieldDef, sort, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {
	    var scaleConfig = config.scale;
	    // If we have default rule-base, determine default value first
	    switch (property) {
	        case 'nice':
	            return nice(scaleType, channel, fieldDef);
	        case 'padding':
	            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);
	        case 'paddingInner':
	            return paddingInner(scalePadding, channel, scaleConfig);
	        case 'paddingOuter':
	            return paddingOuter(scalePadding, channel, scaleType, scalePaddingInner, scaleConfig);
	        case 'reverse':
	            return reverse(scaleType, sort);
	        case 'zero':
	            return zero(channel, fieldDef, specifiedDomain);
	    }
	    // Otherwise, use scale config
	    return scaleConfig[property];
	}
	exports.getDefaultValue = getDefaultValue;
	function parseNonUnitScaleProperty(model, property) {
	    var localScaleComponents = model.component.scales;
	    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	        var child = _a[_i];
	        if (property === 'range') {
	            range_1.parseScaleRange(child);
	        }
	        else {
	            parseScaleProperty(child, property);
	        }
	    }
	    util_1.keys(localScaleComponents).forEach(function (channel) {
	        var valueWithExplicit;
	        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            var childComponent = child.component.scales[channel];
	            if (childComponent) {
	                var childValueWithExplicit = childComponent.getWithExplicit(property);
	                valueWithExplicit = split_1.mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', split_1.tieBreakByComparing(function (v1, v2) {
	                    switch (property) {
	                        case 'range':
	                            // For range step, prefer larger step
	                            if (v1.step && v2.step) {
	                                return v1.step - v2.step;
	                            }
	                            return 0;
	                    }
	                    return 0;
	                }));
	            }
	        }
	        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
	    });
	}
	exports.parseNonUnitScaleProperty = parseNonUnitScaleProperty;
	function nice(scaleType, channel, fieldDef) {
	    if (fieldDef.bin || util.contains([scale_1.ScaleType.TIME, scale_1.ScaleType.UTC], scaleType)) {
	        return undefined;
	    }
	    return util.contains([channel_1.X, channel_1.Y], channel); // return true for quantitative X/Y unless binned
	}
	exports.nice = nice;
	function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {
	    if (util.contains([channel_1.X, channel_1.Y], channel)) {
	        if (scale_1.isContinuousToContinuous(scaleType)) {
	            if (scaleConfig.continuousPadding !== undefined) {
	                return scaleConfig.continuousPadding;
	            }
	            var type = markDef.type, orient = markDef.orient;
	            if (type === 'bar' && !fieldDef.bin) {
	                if ((orient === 'vertical' && channel === 'x') ||
	                    (orient === 'horizontal' && channel === 'y')) {
	                    return barConfig.continuousBandSize;
	                }
	            }
	        }
	        if (scaleType === scale_1.ScaleType.POINT) {
	            return scaleConfig.pointPadding;
	        }
	    }
	    return undefined;
	}
	exports.padding = padding;
	function paddingInner(paddingValue, channel, scaleConfig) {
	    if (paddingValue !== undefined) {
	        // If user has already manually specified "padding", no need to add default paddingInner.
	        return undefined;
	    }
	    if (util.contains([channel_1.X, channel_1.Y], channel)) {
	        // Padding is only set for X and Y by default.
	        // Basically it doesn't make sense to add padding for color and size.
	        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
	        return scaleConfig.bandPaddingInner;
	    }
	    return undefined;
	}
	exports.paddingInner = paddingInner;
	function paddingOuter(paddingValue, channel, scaleType, paddingInnerValue, scaleConfig) {
	    if (paddingValue !== undefined) {
	        // If user has already manually specified "padding", no need to add default paddingOuter.
	        return undefined;
	    }
	    if (util.contains([channel_1.X, channel_1.Y], channel)) {
	        // Padding is only set for X and Y by default.
	        // Basically it doesn't make sense to add padding for color and size.
	        if (scaleType === scale_1.ScaleType.BAND) {
	            if (scaleConfig.bandPaddingOuter !== undefined) {
	                return scaleConfig.bandPaddingOuter;
	            }
	            /* By default, paddingOuter is paddingInner / 2. The reason is that
	                size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
	                and we want the width/height to be integer by default.
	                Note that step (by default) and cardinality are integers.) */
	            return paddingInnerValue / 2;
	        }
	    }
	    return undefined;
	}
	exports.paddingOuter = paddingOuter;
	function reverse(scaleType, sort) {
	    if (scale_1.hasContinuousDomain(scaleType) && sort === 'descending') {
	        // For continuous domain scales, Vega does not support domain sort.
	        // Thus, we reverse range instead if sort is descending
	        return true;
	    }
	    return undefined;
	}
	exports.reverse = reverse;
	function zero(channel, fieldDef, specifiedScale) {
	    // By default, return true only for the following cases:
	    // 1) using quantitative field with size
	    // While this can be either ratio or interval fields, our assumption is that
	    // ratio are more common.
	    if (channel === 'size' && fieldDef.type === 'quantitative') {
	        return true;
	    }
	    // 2) non-binned, quantitative x-scale or y-scale if no custom domain is provided.
	    // (For binning, we should not include zero by default because binning are calculated without zero.
	    // Similar, if users explicitly provide a domain range, we should not augment zero as that will be unexpected.)
	    var hasCustomDomain = !!specifiedScale && specifiedScale !== 'unaggregated';
	    if (!hasCustomDomain && !fieldDef.bin && util.contains([channel_1.X, channel_1.Y], channel)) {
	        return true;
	    }
	    return false;
	}
	exports.zero = zero;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var scale_2 = __webpack_require__(39);
	var util = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var model_1 = __webpack_require__(57);
	var split_1 = __webpack_require__(67);
	var properties_1 = __webpack_require__(92);
	exports.RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];
	function parseScaleRange(model) {
	    if (model_1.isUnitModel(model)) {
	        parseUnitScaleRange(model);
	    }
	    else {
	        properties_1.parseNonUnitScaleProperty(model, 'range');
	    }
	}
	exports.parseScaleRange = parseScaleRange;
	function parseUnitScaleRange(model) {
	    var localScaleComponents = model.component.scales;
	    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!
	    channel_1.SCALE_CHANNELS.forEach(function (channel) {
	        var localScaleCmpt = localScaleComponents[channel];
	        if (!localScaleCmpt) {
	            return;
	        }
	        var mergedScaleCmpt = model.getScaleComponent(channel);
	        var specifiedScale = model.specifiedScales[channel];
	        var fieldDef = model.fieldDef(channel);
	        // Read if there is a specified width/height
	        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
	        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;
	        var scaleType = mergedScaleCmpt.get('type');
	        // if autosize is fit, size cannot be data driven
	        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;
	        if (sizeType && model.fit && !sizeSpecified && rangeStep) {
	            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);
	            sizeSpecified = true;
	        }
	        var xyRangeSteps = getXYRangeStep(model);
	        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark(), sizeSpecified, model.getName(sizeType), xyRangeSteps);
	        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
	    });
	}
	function getXYRangeStep(model) {
	    var xyRangeSteps = [];
	    var xScale = model.getScaleComponent('x');
	    var xRange = xScale && xScale.get('range');
	    if (xRange && vega_schema_1.isVgRangeStep(xRange) && vega_util_1.isNumber(xRange.step)) {
	        xyRangeSteps.push(xRange.step);
	    }
	    var yScale = model.getScaleComponent('y');
	    var yRange = yScale && yScale.get('range');
	    if (yRange && vega_schema_1.isVgRangeStep(yRange) && vega_util_1.isNumber(yRange.step)) {
	        xyRangeSteps.push(yRange.step);
	    }
	    return xyRangeSteps;
	}
	/**
	 * Return mixins that includes one of the range properties (range, rangeStep, scheme).
	 */
	function parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {
	    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;
	    // Check if any of the range properties is specified.
	    // If so, check if it is compatible and make sure that we only output one of the properties
	    for (var _i = 0, RANGE_PROPERTIES_1 = exports.RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {
	        var property = RANGE_PROPERTIES_1[_i];
	        if (specifiedScale[property] !== undefined) {
	            var supportedByScaleType = scale_1.scaleTypeSupportProperty(scaleType, property);
	            var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);
	            if (!supportedByScaleType) {
	                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
	            }
	            else if (channelIncompatability) {
	                log.warn(channelIncompatability);
	            }
	            else {
	                switch (property) {
	                    case 'range':
	                        return split_1.makeExplicit(specifiedScale[property]);
	                    case 'scheme':
	                        return split_1.makeExplicit(parseScheme(specifiedScale[property]));
	                    case 'rangeStep':
	                        var rangeStep = specifiedScale[property];
	                        if (rangeStep !== null) {
	                            if (!sizeSpecified) {
	                                return split_1.makeExplicit({ step: rangeStep });
	                            }
	                            else {
	                                // If top-level size is specified, we ignore specified rangeStep.
	                                log.warn(log.message.rangeStepDropped(channel));
	                            }
	                        }
	                }
	            }
	        }
	    }
	    return split_1.makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));
	}
	exports.parseRangeForChannel = parseRangeForChannel;
	function parseScheme(scheme) {
	    if (scale_1.isExtendedScheme(scheme)) {
	        var r = { scheme: scheme.name };
	        if (scheme.count) {
	            r.count = scheme.count;
	        }
	        if (scheme.extent) {
	            r.extent = scheme.extent;
	        }
	        return r;
	    }
	    return { scheme: scheme };
	}
	function defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {
	    switch (channel) {
	        case channel_1.X:
	        case channel_1.Y:
	            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {
	                if (channel === channel_1.X && mark === 'text') {
	                    if (config.scale.textXRangeStep) {
	                        return { step: config.scale.textXRangeStep };
	                    }
	                }
	                else {
	                    if (config.scale.rangeStep) {
	                        return { step: config.scale.rangeStep };
	                    }
	                }
	            }
	            // If range step is null, use zero to width or height.
	            // Note that these range signals are temporary
	            // as they can be merged and renamed.
	            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)
	            // We will later replace these temporary names with
	            // the final name in assembleScaleRange()
	            if (channel === channel_1.Y && scale_2.hasContinuousDomain(scaleType)) {
	                // For y continuous scale, we have to start from the height as the bottom part has the max value.
	                return [{ signal: sizeSignal }, 0];
	            }
	            else {
	                return [0, { signal: sizeSignal }];
	            }
	        case channel_1.SIZE:
	            // TODO: support custom rangeMin, rangeMax
	            var rangeMin = sizeRangeMin(mark, zero, config);
	            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);
	            return [rangeMin, rangeMax];
	        case channel_1.SHAPE:
	            return 'symbol';
	        case channel_1.COLOR:
	            if (scaleType === 'ordinal') {
	                // Only nominal data uses ordinal scale by default
	                return type === 'nominal' ? 'category' : 'ordinal';
	            }
	            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
	        case channel_1.OPACITY:
	            // TODO: support custom rangeMin, rangeMax
	            return [config.scale.minOpacity, config.scale.maxOpacity];
	    }
	    /* istanbul ignore next: should never reach here */
	    throw new Error("Scale range undefined for channel " + channel);
	}
	exports.defaultRange = defaultRange;
	function sizeRangeMin(mark, zero, config) {
	    if (zero) {
	        return 0;
	    }
	    switch (mark) {
	        case 'bar':
	        case 'tick':
	            return config.scale.minBandSize;
	        case 'line':
	        case 'rule':
	            return config.scale.minStrokeWidth;
	        case 'text':
	            return config.scale.minFontSize;
	        case 'point':
	        case 'square':
	        case 'circle':
	            return config.scale.minSize;
	    }
	    /* istanbul ignore next: should never reach here */
	    // sizeRangeMin not implemented for the mark
	    throw new Error(log.message.incompatibleChannel('size', mark));
	}
	function sizeRangeMax(mark, xyRangeSteps, config) {
	    var scaleConfig = config.scale;
	    // TODO(#1168): make max size scale based on rangeStep / overall plot size
	    switch (mark) {
	        case 'bar':
	        case 'tick':
	            if (config.scale.maxBandSize !== undefined) {
	                return config.scale.maxBandSize;
	            }
	            return minXYRangeStep(xyRangeSteps, config.scale) - 1;
	        case 'line':
	        case 'rule':
	            return config.scale.maxStrokeWidth;
	        case 'text':
	            return config.scale.maxFontSize;
	        case 'point':
	        case 'square':
	        case 'circle':
	            if (config.scale.maxSize) {
	                return config.scale.maxSize;
	            }
	            // FIXME this case totally should be refactored
	            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);
	            return (pointStep - 2) * (pointStep - 2);
	    }
	    /* istanbul ignore next: should never reach here */
	    // sizeRangeMax not implemented for the mark
	    throw new Error(log.message.incompatibleChannel('size', mark));
	}
	/**
	 * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
	 */
	function minXYRangeStep(xyRangeSteps, scaleConfig) {
	    if (xyRangeSteps.length > 0) {
	        return Math.min.apply(null, xyRangeSteps);
	    }
	    if (scaleConfig.rangeStep) {
	        return scaleConfig.rangeStep;
	    }
	    return 21; // FIXME: re-evaluate the default value here.
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var scale_2 = __webpack_require__(39);
	var type_1 = __webpack_require__(32);
	var util = __webpack_require__(14);
	var util_1 = __webpack_require__(14);
	/**
	 * Determine if there is a specified scale type and if it is appropriate,
	 * or determine default type if type is unspecified or inappropriate.
	 */
	// NOTE: CompassQL uses this method.
	function scaleType(specifiedType, channel, fieldDef, mark, scaleConfig) {
	    var defaultScaleType = defaultType(channel, fieldDef, mark, scaleConfig);
	    if (!channel_1.isScaleChannel(channel)) {
	        // There is no scale for these channels
	        return null;
	    }
	    if (specifiedType !== undefined) {
	        // Check if explicitly specified scale type is supported by the channel
	        if (!scale_1.channelSupportScaleType(channel, specifiedType)) {
	            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, specifiedType, defaultScaleType));
	            return defaultScaleType;
	        }
	        // Check if explicitly specified scale type is supported by the data type
	        if (!fieldDefMatchScaleType(specifiedType, fieldDef)) {
	            log.warn(log.message.scaleTypeNotWorkWithFieldDef(specifiedType, defaultScaleType));
	            return defaultScaleType;
	        }
	        return specifiedType;
	    }
	    return defaultScaleType;
	}
	exports.scaleType = scaleType;
	/**
	 * Determine appropriate default scale type.
	 */
	// NOTE: Voyager uses this method.
	function defaultType(channel, fieldDef, mark, scaleConfig) {
	    switch (fieldDef.type) {
	        case 'nominal':
	        case 'ordinal':
	            if (channel === 'color' || channel_1.rangeType(channel) === 'discrete') {
	                if (channel === 'shape' && fieldDef.type === 'ordinal') {
	                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));
	                }
	                return 'ordinal';
	            }
	            if (util.contains(['x', 'y'], channel)) {
	                if (mark === 'rect') {
	                    // The rect mark should fit into a band.
	                    return 'band';
	                }
	                if (mark === 'bar') {
	                    return 'band';
	                }
	            }
	            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.
	            return 'point';
	        case 'temporal':
	            if (channel === 'color') {
	                return 'sequential';
	            }
	            else if (channel_1.rangeType(channel) === 'discrete') {
	                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));
	                // TODO: consider using quantize (equivalent to binning) once we have it
	                return 'ordinal';
	            }
	            return 'time';
	        case 'quantitative':
	            if (channel === 'color') {
	                if (fieldDef.bin) {
	                    return 'bin-ordinal';
	                }
	                // Use `sequential` as the default color scale for continuous data
	                // since it supports both array range and scheme range.
	                return 'sequential';
	            }
	            else if (channel_1.rangeType(channel) === 'discrete') {
	                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));
	                // TODO: consider using quantize (equivalent to binning) once we have it
	                return 'ordinal';
	            }
	            // x and y use a linear scale because selections don't work with bin scales.
	            // Binned scales apply discretization but pan/zoom apply transformations to a [min, max] extent domain.
	            if (fieldDef.bin && channel !== 'x' && channel !== 'y') {
	                return 'bin-linear';
	            }
	            return 'linear';
	        case 'latitude':
	        case 'longitude':
	        case 'geojson':
	            return undefined;
	    }
	    /* istanbul ignore next: should never reach this */
	    throw new Error(log.message.invalidFieldType(fieldDef.type));
	}
	function fieldDefMatchScaleType(specifiedType, fieldDef) {
	    var type = fieldDef.type;
	    if (util_1.contains([type_1.Type.ORDINAL, type_1.Type.NOMINAL], type)) {
	        return specifiedType === undefined || scale_2.hasDiscreteDomain(specifiedType);
	    }
	    else if (type === type_1.Type.TEMPORAL) {
	        return util_1.contains([scale_1.ScaleType.TIME, scale_1.ScaleType.UTC, scale_1.ScaleType.SEQUENTIAL, undefined], specifiedType);
	    }
	    else if (type === type_1.Type.QUANTITATIVE) {
	        if (fieldDef.bin) {
	            return util_1.contains([scale_1.ScaleType.BIN_LINEAR, scale_1.ScaleType.BIN_ORDINAL, scale_1.ScaleType.LINEAR], specifiedType);
	        }
	        return util_1.contains([scale_1.ScaleType.LOG, scale_1.ScaleType.POW, scale_1.ScaleType.SQRT, scale_1.ScaleType.QUANTILE, scale_1.ScaleType.QUANTIZE, scale_1.ScaleType.LINEAR, scale_1.ScaleType.SEQUENTIAL, undefined], specifiedType);
	    }
	    return true;
	}
	exports.fieldDefMatchScaleType = fieldDefMatchScaleType;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var log_1 = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var selection_1 = __webpack_require__(55);
	var scales_1 = __webpack_require__(96);
	exports.BRUSH = '_brush';
	exports.SCALE_TRIGGER = '_scale_trigger';
	var interval = {
	    predicate: 'vlInterval',
	    scaleDomain: 'vlIntervalDomain',
	    signals: function (model, selCmpt) {
	        var name = selCmpt.name;
	        var hasScales = scales_1.default.has(selCmpt);
	        var signals = [];
	        var intervals = [];
	        var tupleTriggers = [];
	        var scaleTriggers = [];
	        if (selCmpt.translate && !hasScales) {
	            var filterExpr_1 = "!event.item || event.item.mark.name !== " + util_1.stringValue(name + exports.BRUSH);
	            events(selCmpt, function (_, evt) {
	                var filters = evt.between[0].filter || (evt.between[0].filter = []);
	                if (filters.indexOf(filterExpr_1) < 0) {
	                    filters.push(filterExpr_1);
	                }
	            });
	        }
	        selCmpt.project.forEach(function (p) {
	            var channel = p.channel;
	            if (channel !== channel_1.X && channel !== channel_1.Y) {
	                log_1.warn('Interval selections only support x and y encoding channels.');
	                return;
	            }
	            var cs = channelSignals(model, selCmpt, channel);
	            var dname = selection_1.channelSignalName(selCmpt, channel, 'data');
	            var vname = selection_1.channelSignalName(selCmpt, channel, 'visual');
	            var scaleStr = util_1.stringValue(model.scaleName(channel));
	            var scaleType = model.getScaleComponent(channel).get('type');
	            var toNum = scale_1.hasContinuousDomain(scaleType) ? '+' : '';
	            signals.push.apply(signals, cs);
	            tupleTriggers.push(dname);
	            intervals.push("{encoding: " + util_1.stringValue(channel) + ", " +
	                ("field: " + util_1.stringValue(p.field) + ", extent: " + dname + "}"));
	            scaleTriggers.push({
	                scaleName: model.scaleName(channel),
	                expr: "(!isArray(" + dname + ") || " +
	                    ("(" + toNum + "invert(" + scaleStr + ", " + vname + ")[0] === " + toNum + dname + "[0] && ") +
	                    (toNum + "invert(" + scaleStr + ", " + vname + ")[1] === " + toNum + dname + "[1]))")
	            });
	        });
	        // Proxy scale reactions to ensure that an infinite loop doesn't occur
	        // when an interval selection filter touches the scale.
	        if (!hasScales) {
	            signals.push({
	                name: name + exports.SCALE_TRIGGER,
	                update: scaleTriggers.map(function (t) { return t.expr; }).join(' && ') +
	                    (" ? " + (name + exports.SCALE_TRIGGER) + " : {}")
	            });
	        }
	        // Only add an interval to the store if it has valid data extents. Data extents
	        // are set to null if pixel extents are equal to account for intervals over
	        // ordinal/nominal domains which, when inverted, will still produce a valid datum.
	        return signals.concat({
	            name: name + selection_1.TUPLE,
	            on: [{
	                    events: tupleTriggers.map(function (t) { return ({ signal: t }); }),
	                    update: tupleTriggers.join(' && ') +
	                        (" ? {unit: " + selection_1.unitName(model) + ", intervals: [" + intervals.join(', ') + "]} : null")
	                }]
	        });
	    },
	    modifyExpr: function (model, selCmpt) {
	        var tpl = selCmpt.name + selection_1.TUPLE;
	        return tpl + ', ' +
	            (selCmpt.resolve === 'global' ? 'true' : "{unit: " + selection_1.unitName(model) + "}");
	    },
	    marks: function (model, selCmpt, marks) {
	        var name = selCmpt.name;
	        var _a = selection_1.positionalProjections(selCmpt), xi = _a.xi, yi = _a.yi;
	        var store = "data(" + util_1.stringValue(selCmpt.name + selection_1.STORE) + ")";
	        // Do not add a brush if we're binding to scales.
	        if (scales_1.default.has(selCmpt)) {
	            return marks;
	        }
	        var update = {
	            x: xi !== null ? { signal: name + "_x[0]" } : { value: 0 },
	            y: yi !== null ? { signal: name + "_y[0]" } : { value: 0 },
	            x2: xi !== null ? { signal: name + "_x[1]" } : { field: { group: 'width' } },
	            y2: yi !== null ? { signal: name + "_y[1]" } : { field: { group: 'height' } }
	        };
	        // If the selection is resolved to global, only a single interval is in
	        // the store. Wrap brush mark's encodings with a production rule to test
	        // this based on the `unit` property. Hide the brush mark if it corresponds
	        // to a unit different from the one in the store.
	        if (selCmpt.resolve === 'global') {
	            for (var _i = 0, _b = util_1.keys(update); _i < _b.length; _i++) {
	                var key = _b[_i];
	                update[key] = [__assign({ test: store + ".length && " + store + "[0].unit === " + selection_1.unitName(model) }, update[key]), { value: 0 }];
	            }
	        }
	        // Two brush marks ensure that fill colors and other aesthetic choices do
	        // not interefere with the core marks, but that the brushed region can still
	        // be interacted with (e.g., dragging it around).
	        var _c = selCmpt.mark, fill = _c.fill, fillOpacity = _c.fillOpacity, stroke = __rest(_c, ["fill", "fillOpacity"]);
	        var vgStroke = util_1.keys(stroke).reduce(function (def, k) {
	            def[k] = { value: stroke[k] };
	            return def;
	        }, {});
	        return [{
	                name: name + exports.BRUSH + '_bg',
	                type: 'rect',
	                clip: true,
	                encode: {
	                    enter: {
	                        fill: { value: fill },
	                        fillOpacity: { value: fillOpacity }
	                    },
	                    update: update
	                }
	            }].concat(marks, {
	            name: name + exports.BRUSH,
	            type: 'rect',
	            clip: true,
	            encode: {
	                enter: __assign({ fill: { value: 'transparent' } }, vgStroke),
	                update: update
	            }
	        });
	    }
	};
	exports.default = interval;
	/**
	 * Returns the visual and data signals for an interval selection.
	 */
	function channelSignals(model, selCmpt, channel) {
	    var vname = selection_1.channelSignalName(selCmpt, channel, 'visual');
	    var dname = selection_1.channelSignalName(selCmpt, channel, 'data');
	    var hasScales = scales_1.default.has(selCmpt);
	    var scaleName = model.scaleName(channel);
	    var scaleStr = util_1.stringValue(scaleName);
	    var scale = model.getScaleComponent(channel);
	    var scaleType = scale ? scale.get('type') : undefined;
	    var size = model.getSizeSignalRef(channel === channel_1.X ? 'width' : 'height').signal;
	    var coord = channel + "(unit)";
	    var on = events(selCmpt, function (def, evt) {
	        return def.concat({ events: evt.between[0], update: "[" + coord + ", " + coord + "]" }, // Brush Start
	        { events: evt, update: "[" + vname + "[0], clamp(" + coord + ", 0, " + size + ")]" } // Brush End
	        );
	    });
	    // React to pan/zooms of continuous scales. Non-continuous scales
	    // (bin-linear, band, point) cannot be pan/zoomed and any other changes
	    // to their domains (e.g., filtering) should clear the brushes.
	    on.push({
	        events: { signal: selCmpt.name + exports.SCALE_TRIGGER },
	        update: scale_1.hasContinuousDomain(scaleType) && !scale_1.isBinScale(scaleType) ?
	            "[scale(" + scaleStr + ", " + dname + "[0]), scale(" + scaleStr + ", " + dname + "[1])]" : "[0, 0]"
	    });
	    return hasScales ? [{ name: dname, on: [] }] : [{
	            name: vname, value: [], on: on
	        }, {
	            name: dname,
	            on: [{ events: { signal: vname }, update: vname + "[0] === " + vname + "[1] ? null : invert(" + scaleStr + ", " + vname + ")" }]
	        }];
	}
	function events(selCmpt, cb) {
	    return selCmpt.events.reduce(function (on, evt) {
	        if (!evt.between) {
	            log_1.warn(evt + " is not an ordered event stream for interval selections");
	            return on;
	        }
	        return cb(on, evt);
	    }, []);
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var selection_1 = __webpack_require__(55);
	var scaleBindings = {
	    has: function (selCmpt) {
	        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' &&
	            selCmpt.bind && selCmpt.bind === 'scales';
	    },
	    parse: function (model, selDef, selCmpt) {
	        var bound = selCmpt.scales = [];
	        selCmpt.project.forEach(function (p) {
	            var channel = p.channel;
	            var scale = model.getScaleComponent(channel);
	            var scaleType = scale ? scale.get('type') : undefined;
	            if (!scale || !scale_1.hasContinuousDomain(scaleType) || scale_1.isBinScale(scaleType)) {
	                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);
	                return;
	            }
	            scale.set('domainRaw', { signal: selection_1.channelSignalName(selCmpt, channel, 'data') }, true);
	            bound.push(channel);
	        });
	    },
	    topLevelSignals: function (model, selCmpt, signals) {
	        // Top-level signals are only needed when coordinating composed views.
	        if (!model.parent) {
	            return signals;
	        }
	        var channels = selCmpt.scales.filter(function (channel) {
	            return !(signals.filter(function (s) { return s.name === selection_1.channelSignalName(selCmpt, channel, 'data'); }).length);
	        });
	        return signals.concat(channels.map(function (channel) {
	            return { name: selection_1.channelSignalName(selCmpt, channel, 'data') };
	        }));
	    },
	    signals: function (model, selCmpt, signals) {
	        // Nested signals need only push to top-level signals when within composed views.
	        if (model.parent) {
	            selCmpt.scales.forEach(function (channel) {
	                var signal = signals.filter(function (s) { return s.name === selection_1.channelSignalName(selCmpt, channel, 'data'); })[0];
	                signal.push = 'outer';
	                delete signal.value;
	                delete signal.update;
	            });
	        }
	        return signals;
	    }
	};
	exports.default = scaleBindings;
	function domain(model, channel) {
	    var scale = util_1.stringValue(model.scaleName(channel));
	    return "domain(" + scale + ")";
	}
	exports.domain = domain;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvc2NhbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esa0NBQW9DO0FBQ3BDLHdDQUErRDtBQUMvRCxzQ0FBMEM7QUFFMUMsMENBQStDO0FBSS9DLElBQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVE7WUFDaEUsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztJQUM5QyxDQUFDO0lBRUQsS0FBSyxFQUFFLFVBQVMsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPO1FBQ3BDLElBQU0sS0FBSyxHQUFjLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQztZQUNoQyxJQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzFCLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQyxJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUV4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLDJCQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLGtCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDaEQsTUFBTSxDQUFDO1lBQ1QsQ0FBQztZQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUMsTUFBTSxFQUFFLDZCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWUsRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUMvQyxzRUFBc0U7UUFDdEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQU87WUFDN0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksS0FBSyw2QkFBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUF0RCxDQUFzRCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0YsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsT0FBTztZQUN6QyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsNkJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsT0FBTyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO1FBQ3ZDLGlGQUFpRjtRQUNqRixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87Z0JBQzVCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLDZCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQXRELENBQXNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFOUYsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ3RCLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztnQkFDcEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGLENBQUM7QUFFdUIsZ0NBQU87QUFFaEMsZ0JBQXVCLEtBQWdCLEVBQUUsT0FBZ0I7SUFDdkQsSUFBTSxLQUFLLEdBQUcsa0JBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLFlBQVUsS0FBSyxNQUFHLENBQUM7QUFDNUIsQ0FBQztBQUhELHdCQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsfSBmcm9tICcuLi8uLi8uLi9jaGFubmVsJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi8uLi9sb2cnO1xuaW1wb3J0IHtoYXNDb250aW51b3VzRG9tYWluLCBpc0JpblNjYWxlfSBmcm9tICcuLi8uLi8uLi9zY2FsZSc7XG5pbXBvcnQge3N0cmluZ1ZhbHVlfSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi8uLi91bml0JztcbmltcG9ydCB7Y2hhbm5lbFNpZ25hbE5hbWV9IGZyb20gJy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5cbmNvbnN0IHNjYWxlQmluZGluZ3M6VHJhbnNmb3JtQ29tcGlsZXIgPSB7XG4gIGhhczogZnVuY3Rpb24oc2VsQ21wdCkge1xuICAgIHJldHVybiBzZWxDbXB0LnR5cGUgPT09ICdpbnRlcnZhbCcgJiYgc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyAmJlxuICAgICAgc2VsQ21wdC5iaW5kICYmIHNlbENtcHQuYmluZCA9PT0gJ3NjYWxlcyc7XG4gIH0sXG5cbiAgcGFyc2U6IGZ1bmN0aW9uKG1vZGVsLCBzZWxEZWYsIHNlbENtcHQpIHtcbiAgICBjb25zdCBib3VuZDogQ2hhbm5lbFtdID0gc2VsQ21wdC5zY2FsZXMgPSBbXTtcblxuICAgIHNlbENtcHQucHJvamVjdC5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSBwLmNoYW5uZWw7XG4gICAgICBjb25zdCBzY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuICAgICAgY29uc3Qgc2NhbGVUeXBlID0gc2NhbGUgPyBzY2FsZS5nZXQoJ3R5cGUnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKCFzY2FsZSB8fCAhaGFzQ29udGludW91c0RvbWFpbihzY2FsZVR5cGUpIHx8IGlzQmluU2NhbGUoc2NhbGVUeXBlKSkge1xuICAgICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5TQ0FMRV9CSU5ESU5HU19DT05USU5VT1VTKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzY2FsZS5zZXQoJ2RvbWFpblJhdycsIHtzaWduYWw6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9LCB0cnVlKTtcbiAgICAgIGJvdW5kLnB1c2goY2hhbm5lbCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdG9wTGV2ZWxTaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIC8vIFRvcC1sZXZlbCBzaWduYWxzIGFyZSBvbmx5IG5lZWRlZCB3aGVuIGNvb3JkaW5hdGluZyBjb21wb3NlZCB2aWV3cy5cbiAgICBpZiAoIW1vZGVsLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHNpZ25hbHM7XG4gICAgfVxuXG4gICAgY29uc3QgY2hhbm5lbHMgPSBzZWxDbXB0LnNjYWxlcy5maWx0ZXIoKGNoYW5uZWwpID0+IHtcbiAgICAgIHJldHVybiAhKHNpZ25hbHMuZmlsdGVyKHMgPT4gcy5uYW1lID09PSBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0LCBjaGFubmVsLCAnZGF0YScpKS5sZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ25hbHMuY29uY2F0KGNoYW5uZWxzLm1hcCgoY2hhbm5lbCkgPT4ge1xuICAgICAgcmV0dXJuIHtuYW1lOiBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0LCBjaGFubmVsLCAnZGF0YScpfTtcbiAgICB9KSk7XG4gIH0sXG5cbiAgc2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICAvLyBOZXN0ZWQgc2lnbmFscyBuZWVkIG9ubHkgcHVzaCB0byB0b3AtbGV2ZWwgc2lnbmFscyB3aGVuIHdpdGhpbiBjb21wb3NlZCB2aWV3cy5cbiAgICBpZiAobW9kZWwucGFyZW50KSB7XG4gICAgICBzZWxDbXB0LnNjYWxlcy5mb3JFYWNoKGNoYW5uZWwgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWwgPSBzaWduYWxzLmZpbHRlcihzID0+IHMubmFtZSA9PT0gY2hhbm5lbFNpZ25hbE5hbWUoc2VsQ21wdCwgY2hhbm5lbCwgJ2RhdGEnKSlbMF07XG5cbiAgICAgICAgc2lnbmFsLnB1c2ggPSAnb3V0ZXInO1xuICAgICAgICBkZWxldGUgc2lnbmFsLnZhbHVlO1xuICAgICAgICBkZWxldGUgc2lnbmFsLnVwZGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzaWduYWxzO1xuICB9XG59O1xuXG5leHBvcnQge3NjYWxlQmluZGluZ3MgYXMgZGVmYXVsdH07XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW4obW9kZWw6IFVuaXRNb2RlbCwgY2hhbm5lbDogQ2hhbm5lbCkge1xuICBjb25zdCBzY2FsZSA9IHN0cmluZ1ZhbHVlKG1vZGVsLnNjYWxlTmFtZShjaGFubmVsKSk7XG4gIHJldHVybiBgZG9tYWluKCR7c2NhbGV9KWA7XG59XG4iXX0=

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var selection_1 = __webpack_require__(55);
	var nearest_1 = __webpack_require__(98);
	var multi = {
	    predicate: 'vlMulti',
	    scaleDomain: 'vlMultiDomain',
	    signals: function (model, selCmpt) {
	        var proj = selCmpt.project;
	        var datum = nearest_1.default.has(selCmpt) ?
	            '(item().isVoronoi ? datum.datum : datum)' : 'datum';
	        var bins = [];
	        var encodings = proj.map(function (p) { return util_1.stringValue(p.channel); }).filter(function (e) { return e; }).join(', ');
	        var fields = proj.map(function (p) { return util_1.stringValue(p.field); }).join(', ');
	        var values = proj.map(function (p) {
	            var channel = p.channel;
	            var fieldDef = model.fieldDef(channel);
	            // Binned fields should capture extents, for a range test against the raw field.
	            return (fieldDef && fieldDef.bin) ? (bins.push(p.field),
	                "[" + datum + util_1.accessPath(model.vgField(channel, {})) + ", " +
	                    ("" + datum + util_1.accessPath(model.vgField(channel, { binSuffix: 'end' })) + "]")) :
	                "" + datum + util_1.accessPath(p.field);
	        }).join(', ');
	        // Only add a discrete selection to the store if a datum is present _and_
	        // the interaction isn't occuring on a group mark. This guards against
	        // polluting interactive state with invalid values in faceted displays
	        // as the group marks are also data-driven. We force the update to account
	        // for constant null states but varying toggles (e.g., shift-click in
	        // whitespace followed by a click in whitespace; the store should only
	        // be cleared on the second click).
	        return [{
	                name: selCmpt.name + selection_1.TUPLE,
	                value: {},
	                on: [{
	                        events: selCmpt.events,
	                        update: "datum && item().mark.marktype !== 'group' ? " +
	                            ("{unit: " + selection_1.unitName(model) + ", encodings: [" + encodings + "], ") +
	                            ("fields: [" + fields + "], values: [" + values + "]") +
	                            (bins.length ? ', ' + bins.map(function (b) { return util_1.stringValue('bin_' + b) + ": 1"; }).join(', ') : '') +
	                            '} : null',
	                        force: true
	                    }]
	            }];
	    },
	    modifyExpr: function (model, selCmpt) {
	        var tpl = selCmpt.name + selection_1.TUPLE;
	        return tpl + ', ' +
	            (selCmpt.resolve === 'global' ? 'null' : "{unit: " + selection_1.unitName(model) + "}");
	    }
	};
	exports.default = multi;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zZWxlY3Rpb24vbXVsdGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUQ7QUFDbkQseUNBQStEO0FBQy9ELGdEQUEyQztBQUczQyxJQUFNLEtBQUssR0FBcUI7SUFDOUIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsV0FBVyxFQUFFLGVBQWU7SUFFNUIsT0FBTyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU87UUFDOUIsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDdkQsSUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBQzFCLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxrQkFBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEYsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLGtCQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDO1lBQ3hCLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDMUIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxnRkFBZ0Y7WUFDaEYsTUFBTSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3JELE1BQUksS0FBSyxHQUFHLGlCQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBSTtxQkFDbEQsS0FBRyxLQUFLLEdBQUcsaUJBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQUcsQ0FBQSxDQUFDLENBQUMsQ0FBQztnQkFDM0UsS0FBRyxLQUFLLEdBQUcsaUJBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFHLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWQseUVBQXlFO1FBQ3pFLHNFQUFzRTtRQUN0RSxzRUFBc0U7UUFDdEUsMEVBQTBFO1FBQzFFLHFFQUFxRTtRQUNyRSxzRUFBc0U7UUFDdEUsbUNBQW1DO1FBQ25DLE1BQU0sQ0FBQyxDQUFDO2dCQUNOLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFLO2dCQUMxQixLQUFLLEVBQUUsRUFBRTtnQkFDVCxFQUFFLEVBQUUsQ0FBQzt3QkFDSCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07d0JBQ3RCLE1BQU0sRUFBRSw4Q0FBOEM7NkJBQ3BELFlBQVUsb0JBQVEsQ0FBQyxLQUFLLENBQUMsc0JBQWlCLFNBQVMsUUFBSyxDQUFBOzZCQUN4RCxjQUFZLE1BQU0sb0JBQWUsTUFBTSxNQUFHLENBQUE7NEJBQzFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBRyxrQkFBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsUUFBSyxFQUEvQixDQUErQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7NEJBQ3ZGLFVBQVU7d0JBQ1osS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQzthQUNILENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTztRQUNqQyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFLLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJO1lBQ2YsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFVLG9CQUFRLENBQUMsS0FBSyxDQUFDLE1BQUcsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Q0FDRixDQUFDO0FBRWUsd0JBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FjY2Vzc1BhdGgsIHN0cmluZ1ZhbHVlfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7U2VsZWN0aW9uQ29tcGlsZXIsIFRVUExFLCB1bml0TmFtZX0gZnJvbSAnLi9zZWxlY3Rpb24nO1xuaW1wb3J0IG5lYXJlc3QgZnJvbSAnLi90cmFuc2Zvcm1zL25lYXJlc3QnO1xuXG5cbmNvbnN0IG11bHRpOlNlbGVjdGlvbkNvbXBpbGVyID0ge1xuICBwcmVkaWNhdGU6ICd2bE11bHRpJyxcbiAgc2NhbGVEb21haW46ICd2bE11bHRpRG9tYWluJyxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCkge1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3QgZGF0dW0gPSBuZWFyZXN0LmhhcyhzZWxDbXB0KSA/XG4gICAgICAnKGl0ZW0oKS5pc1Zvcm9ub2kgPyBkYXR1bS5kYXR1bSA6IGRhdHVtKScgOiAnZGF0dW0nO1xuICAgIGNvbnN0IGJpbnM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgZW5jb2RpbmdzID0gcHJvai5tYXAoKHApID0+IHN0cmluZ1ZhbHVlKHAuY2hhbm5lbCkpLmZpbHRlcigoZSkgPT4gZSkuam9pbignLCAnKTtcbiAgICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gICAgY29uc3QgdmFsdWVzID0gcHJvai5tYXAoKHApID0+IHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSBwLmNoYW5uZWw7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgICAgLy8gQmlubmVkIGZpZWxkcyBzaG91bGQgY2FwdHVyZSBleHRlbnRzLCBmb3IgYSByYW5nZSB0ZXN0IGFnYWluc3QgdGhlIHJhdyBmaWVsZC5cbiAgICAgIHJldHVybiAoZmllbGREZWYgJiYgZmllbGREZWYuYmluKSA/IChiaW5zLnB1c2gocC5maWVsZCksXG4gICAgICAgIGBbJHtkYXR1bX0ke2FjY2Vzc1BhdGgobW9kZWwudmdGaWVsZChjaGFubmVsLCB7fSkpfSwgYCArXG4gICAgICAgICAgICBgJHtkYXR1bX0ke2FjY2Vzc1BhdGgobW9kZWwudmdGaWVsZChjaGFubmVsLCB7YmluU3VmZml4OiAnZW5kJ30pKX1dYCkgOlxuICAgICAgICBgJHtkYXR1bX0ke2FjY2Vzc1BhdGgocC5maWVsZCl9YDtcbiAgICB9KS5qb2luKCcsICcpO1xuXG4gICAgLy8gT25seSBhZGQgYSBkaXNjcmV0ZSBzZWxlY3Rpb24gdG8gdGhlIHN0b3JlIGlmIGEgZGF0dW0gaXMgcHJlc2VudCBfYW5kX1xuICAgIC8vIHRoZSBpbnRlcmFjdGlvbiBpc24ndCBvY2N1cmluZyBvbiBhIGdyb3VwIG1hcmsuIFRoaXMgZ3VhcmRzIGFnYWluc3RcbiAgICAvLyBwb2xsdXRpbmcgaW50ZXJhY3RpdmUgc3RhdGUgd2l0aCBpbnZhbGlkIHZhbHVlcyBpbiBmYWNldGVkIGRpc3BsYXlzXG4gICAgLy8gYXMgdGhlIGdyb3VwIG1hcmtzIGFyZSBhbHNvIGRhdGEtZHJpdmVuLiBXZSBmb3JjZSB0aGUgdXBkYXRlIHRvIGFjY291bnRcbiAgICAvLyBmb3IgY29uc3RhbnQgbnVsbCBzdGF0ZXMgYnV0IHZhcnlpbmcgdG9nZ2xlcyAoZS5nLiwgc2hpZnQtY2xpY2sgaW5cbiAgICAvLyB3aGl0ZXNwYWNlIGZvbGxvd2VkIGJ5IGEgY2xpY2sgaW4gd2hpdGVzcGFjZTsgdGhlIHN0b3JlIHNob3VsZCBvbmx5XG4gICAgLy8gYmUgY2xlYXJlZCBvbiB0aGUgc2Vjb25kIGNsaWNrKS5cbiAgICByZXR1cm4gW3tcbiAgICAgIG5hbWU6IHNlbENtcHQubmFtZSArIFRVUExFLFxuICAgICAgdmFsdWU6IHt9LFxuICAgICAgb246IFt7XG4gICAgICAgIGV2ZW50czogc2VsQ21wdC5ldmVudHMsXG4gICAgICAgIHVwZGF0ZTogYGRhdHVtICYmIGl0ZW0oKS5tYXJrLm1hcmt0eXBlICE9PSAnZ3JvdXAnID8gYCArXG4gICAgICAgICAgYHt1bml0OiAke3VuaXROYW1lKG1vZGVsKX0sIGVuY29kaW5nczogWyR7ZW5jb2RpbmdzfV0sIGAgK1xuICAgICAgICAgIGBmaWVsZHM6IFske2ZpZWxkc31dLCB2YWx1ZXM6IFske3ZhbHVlc31dYCArXG4gICAgICAgICAgKGJpbnMubGVuZ3RoID8gJywgJyArIGJpbnMubWFwKChiKSA9PiBgJHtzdHJpbmdWYWx1ZSgnYmluXycgKyBiKX06IDFgKS5qb2luKCcsICcpIDogJycpICtcbiAgICAgICAgICAnfSA6IG51bGwnLFxuICAgICAgICBmb3JjZTogdHJ1ZVxuICAgICAgfV1cbiAgICB9XTtcbiAgfSxcblxuICBtb2RpZnlFeHByOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCkge1xuICAgIGNvbnN0IHRwbCA9IHNlbENtcHQubmFtZSArIFRVUExFO1xuICAgIHJldHVybiB0cGwgKyAnLCAnICtcbiAgICAgIChzZWxDbXB0LnJlc29sdmUgPT09ICdnbG9iYWwnID8gJ251bGwnIDogYHt1bml0OiAke3VuaXROYW1lKG1vZGVsKX19YCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7bXVsdGkgYXMgZGVmYXVsdH07XG4iXX0=

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var selection_1 = __webpack_require__(55);
	var VORONOI = 'voronoi';
	var nearest = {
	    has: function (selCmpt) {
	        return selCmpt.type !== 'interval' && selCmpt.nearest;
	    },
	    marks: function (model, selCmpt, marks) {
	        var _a = selection_1.positionalProjections(selCmpt), x = _a.x, y = _a.y;
	        var markType = model.mark();
	        if (markType === 'line' || markType === 'area') {
	            log.warn(log.message.nearestNotSupportForContinuous(markType));
	            return marks;
	        }
	        var cellDef = {
	            name: model.getName(VORONOI),
	            type: 'path',
	            from: { data: model.getName('marks') },
	            encode: {
	                enter: {
	                    fill: { value: 'transparent' },
	                    strokeWidth: { value: 0.35 },
	                    stroke: { value: 'transparent' },
	                    isVoronoi: { value: true }
	                }
	            },
	            transform: [{
	                    type: 'voronoi',
	                    x: (x || (!x && !y)) ? 'datum.x' : { expr: '0' },
	                    y: (y || (!x && !y)) ? 'datum.y' : { expr: '0' },
	                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
	                }]
	        };
	        var index = 0;
	        var exists = false;
	        marks.forEach(function (mark, i) {
	            var name = mark.name || '';
	            if (name === model.component.mark[0].name) {
	                index = i;
	            }
	            else if (name.indexOf(VORONOI) >= 0) {
	                exists = true;
	            }
	        });
	        if (!exists) {
	            marks.splice(index + 1, 0, cellDef);
	        }
	        return marks;
	    }
	};
	exports.default = nearest;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVhcmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL25lYXJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQ0FBb0M7QUFDcEMsMENBQW1EO0FBR25ELElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUUxQixJQUFNLE9BQU8sR0FBcUI7SUFDaEMsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxDQUFDO0lBRUQsS0FBSyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO1FBQzdCLElBQUEsK0NBQXVDLEVBQXRDLFFBQUMsRUFBRSxRQUFDLENBQW1DO1FBQzlDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssTUFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsSUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDNUIsSUFBSSxFQUFFLE1BQU07WUFDWixJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBQztZQUNwQyxNQUFNLEVBQUU7Z0JBQ04sS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxhQUFhLEVBQUM7b0JBQzVCLFdBQVcsRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUM7b0JBQzFCLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxhQUFhLEVBQUM7b0JBQzlCLFNBQVMsRUFBRSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUM7aUJBQ3pCO2FBQ0Y7WUFDRCxTQUFTLEVBQUUsQ0FBQztvQkFDVixJQUFJLEVBQUUsU0FBUztvQkFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDO29CQUM5QyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDO29CQUM5QyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUMxRSxDQUFDO1NBQ0gsQ0FBQztRQUVGLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDWixDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNoQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDWixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUM7QUFFaUIsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7cG9zaXRpb25hbFByb2plY3Rpb25zfSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtUcmFuc2Zvcm1Db21waWxlcn0gZnJvbSAnLi90cmFuc2Zvcm1zJztcblxuY29uc3QgVk9ST05PSSA9ICd2b3Jvbm9pJztcblxuY29uc3QgbmVhcmVzdDpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSAhPT0gJ2ludGVydmFsJyAmJiBzZWxDbXB0Lm5lYXJlc3Q7XG4gIH0sXG5cbiAgbWFya3M6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0LCBtYXJrcykge1xuICAgIGNvbnN0IHt4LCB5fSA9IHBvc2l0aW9uYWxQcm9qZWN0aW9ucyhzZWxDbXB0KTtcbiAgICBjb25zdCBtYXJrVHlwZSA9IG1vZGVsLm1hcmsoKTtcbiAgICBpZiAobWFya1R5cGUgPT09ICdsaW5lJyB8fCBtYXJrVHlwZSA9PT0gJ2FyZWEnKSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5uZWFyZXN0Tm90U3VwcG9ydEZvckNvbnRpbnVvdXMobWFya1R5cGUpKTtcbiAgICAgIHJldHVybiBtYXJrcztcbiAgICB9XG5cbiAgICBjb25zdCBjZWxsRGVmID0ge1xuICAgICAgbmFtZTogbW9kZWwuZ2V0TmFtZShWT1JPTk9JKSxcbiAgICAgIHR5cGU6ICdwYXRoJyxcbiAgICAgIGZyb206IHtkYXRhOiBtb2RlbC5nZXROYW1lKCdtYXJrcycpfSxcbiAgICAgIGVuY29kZToge1xuICAgICAgICBlbnRlcjoge1xuICAgICAgICAgIGZpbGw6IHt2YWx1ZTogJ3RyYW5zcGFyZW50J30sXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHt2YWx1ZTogMC4zNX0sXG4gICAgICAgICAgc3Ryb2tlOiB7dmFsdWU6ICd0cmFuc3BhcmVudCd9LFxuICAgICAgICAgIGlzVm9yb25vaToge3ZhbHVlOiB0cnVlfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtOiBbe1xuICAgICAgICB0eXBlOiAndm9yb25vaScsXG4gICAgICAgIHg6ICh4IHx8ICgheCAmJiAheSkpID8gJ2RhdHVtLngnIDoge2V4cHI6ICcwJ30sXG4gICAgICAgIHk6ICh5IHx8ICgheCAmJiAheSkpID8gJ2RhdHVtLnknIDoge2V4cHI6ICcwJ30sXG4gICAgICAgIHNpemU6IFttb2RlbC5nZXRTaXplU2lnbmFsUmVmKCd3aWR0aCcpLCBtb2RlbC5nZXRTaXplU2lnbmFsUmVmKCdoZWlnaHQnKV1cbiAgICAgIH1dXG4gICAgfTtcblxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgIG1hcmtzLmZvckVhY2goKG1hcmssIGkpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBtYXJrLm5hbWUgfHwgJyc7XG4gICAgICBpZiAobmFtZSA9PT0gbW9kZWwuY29tcG9uZW50Lm1hcmtbMF0ubmFtZSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZihWT1JPTk9JKSA+PSAwKSB7XG4gICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgbWFya3Muc3BsaWNlKGluZGV4ICsgMSwgMCwgY2VsbERlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtzO1xuICB9XG59O1xuXG5leHBvcnQge25lYXJlc3QgYXMgZGVmYXVsdH07XG4iXX0=

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var multi_1 = __webpack_require__(97);
	var selection_1 = __webpack_require__(55);
	var single = {
	    predicate: 'vlSingle',
	    scaleDomain: 'vlSingleDomain',
	    signals: multi_1.default.signals,
	    topLevelSignals: function (model, selCmpt, signals) {
	        var hasSignal = signals.filter(function (s) { return s.name === selCmpt.name; });
	        var data = "data(" + util_1.stringValue(selCmpt.name + selection_1.STORE) + ")";
	        var values = data + "[0].values";
	        return hasSignal.length ? signals : signals.concat({
	            name: selCmpt.name,
	            update: data + ".length && {" +
	                selCmpt.project.map(function (p, i) { return p.field + ": " + values + "[" + i + "]"; }).join(', ') + '}'
	        });
	    },
	    modifyExpr: function (model, selCmpt) {
	        var tpl = selCmpt.name + selection_1.TUPLE;
	        return tpl + ', ' +
	            (selCmpt.resolve === 'global' ? 'true' : "{unit: " + selection_1.unitName(model) + "}");
	    }
	};
	exports.default = single;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3NpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1QztBQUN2QyxpQ0FBNEI7QUFDNUIseUNBQXNFO0FBR3RFLElBQU0sTUFBTSxHQUFxQjtJQUMvQixTQUFTLEVBQUUsVUFBVTtJQUNyQixXQUFXLEVBQUUsZ0JBQWdCO0lBRTdCLE9BQU8sRUFBRSxlQUFLLENBQUMsT0FBTztJQUV0QixlQUFlLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDL0MsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLElBQUksRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1FBQ2pFLElBQU0sSUFBSSxHQUFHLFVBQVEsa0JBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFLLENBQUMsTUFBRyxDQUFDO1FBQzFELElBQU0sTUFBTSxHQUFNLElBQUksZUFBWSxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1lBQ2xCLE1BQU0sRUFBSyxJQUFJLGlCQUFjO2dCQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBRyxDQUFDLENBQUMsS0FBSyxVQUFLLE1BQU0sU0FBSSxDQUFDLE1BQUcsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHO1NBQ2hGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTztRQUNqQyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFLLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJO1lBQ2YsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFVLG9CQUFRLENBQUMsS0FBSyxDQUFDLE1BQUcsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Q0FDRixDQUFDO0FBRWdCLHlCQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQgbXVsdGkgZnJvbSAnLi9tdWx0aSc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBpbGVyLCBTVE9SRSwgVFVQTEUsIHVuaXROYW1lfSBmcm9tICcuL3NlbGVjdGlvbic7XG5cblxuY29uc3Qgc2luZ2xlOlNlbGVjdGlvbkNvbXBpbGVyID0ge1xuICBwcmVkaWNhdGU6ICd2bFNpbmdsZScsXG4gIHNjYWxlRG9tYWluOiAndmxTaW5nbGVEb21haW4nLFxuXG4gIHNpZ25hbHM6IG11bHRpLnNpZ25hbHMsXG5cbiAgdG9wTGV2ZWxTaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIGNvbnN0IGhhc1NpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKChzKSA9PiBzLm5hbWUgPT09IHNlbENtcHQubmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IGBkYXRhKCR7c3RyaW5nVmFsdWUoc2VsQ21wdC5uYW1lICsgU1RPUkUpfSlgO1xuICAgIGNvbnN0IHZhbHVlcyA9IGAke2RhdGF9WzBdLnZhbHVlc2A7XG4gICAgcmV0dXJuIGhhc1NpZ25hbC5sZW5ndGggPyBzaWduYWxzIDogc2lnbmFscy5jb25jYXQoe1xuICAgICAgbmFtZTogc2VsQ21wdC5uYW1lLFxuICAgICAgdXBkYXRlOiBgJHtkYXRhfS5sZW5ndGggJiYge2AgK1xuICAgICAgICBzZWxDbXB0LnByb2plY3QubWFwKChwLCBpKSA9PiBgJHtwLmZpZWxkfTogJHt2YWx1ZXN9WyR7aX1dYCkuam9pbignLCAnKSArICd9J1xuICAgIH0pO1xuICB9LFxuXG4gIG1vZGlmeUV4cHI6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0KSB7XG4gICAgY29uc3QgdHBsID0gc2VsQ21wdC5uYW1lICsgVFVQTEU7XG4gICAgcmV0dXJuIHRwbCArICcsICcgK1xuICAgICAgKHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgPyAndHJ1ZScgOiBge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IHtzaW5nbGUgYXMgZGVmYXVsdH07XG4iXX0=

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var inputs_1 = __webpack_require__(101);
	var nearest_1 = __webpack_require__(98);
	var project_1 = __webpack_require__(102);
	var scales_1 = __webpack_require__(96);
	var toggle_1 = __webpack_require__(103);
	var translate_1 = __webpack_require__(104);
	var zoom_1 = __webpack_require__(105);
	var compilers = { project: project_1.default, toggle: toggle_1.default, scales: scales_1.default,
	    translate: translate_1.default, zoom: zoom_1.default, inputs: inputs_1.default, nearest: nearest_1.default };
	function forEachTransform(selCmpt, cb) {
	    for (var t in compilers) {
	        if (compilers[t].has(selCmpt)) {
	            cb(compilers[t]);
	        }
	    }
	}
	exports.forEachTransform = forEachTransform;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3RyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFpQkEsbUNBQThCO0FBQzlCLHFDQUFnQztBQUNoQyxxQ0FBZ0M7QUFDaEMsbUNBQThCO0FBQzlCLG1DQUE4QjtBQUM5Qix5Q0FBb0M7QUFDcEMsK0JBQTBCO0FBQzFCLElBQU0sU0FBUyxHQUE0QixFQUFDLE9BQU8sbUJBQUEsRUFBRSxNQUFNLGtCQUFBLEVBQUUsTUFBTSxrQkFBQTtJQUNqRSxTQUFTLHFCQUFBLEVBQUUsSUFBSSxnQkFBQSxFQUFFLE1BQU0sa0JBQUEsRUFBRSxPQUFPLG1CQUFBLEVBQUMsQ0FBQztBQUVwQywwQkFBaUMsT0FBMkIsRUFBRSxFQUFtQztJQUMvRixHQUFHLENBQUMsQ0FBQyxJQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFORCw0Q0FNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtEaWN0fSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7VmdTaWduYWx9IGZyb20gJy4uLy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uLy4uL21vZGVsJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi8uLi91bml0JztcbmltcG9ydCB7U2VsZWN0aW9uQ29tcG9uZW50fSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmb3JtQ29tcGlsZXIge1xuICBoYXM6IChzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQgfCBTZWxlY3Rpb25EZWYpID0+IGJvb2xlYW47XG4gIHBhcnNlPzogKG1vZGVsOiBVbml0TW9kZWwsIGRlZjogU2VsZWN0aW9uRGVmLCBzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQpID0+IHZvaWQ7XG4gIHNpZ25hbHM/OiAobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBzaWduYWxzOiBWZ1NpZ25hbFtdKSA9PiBWZ1NpZ25hbFtdO1xuICB0b3BMZXZlbFNpZ25hbHM/OiAobW9kZWw6IE1vZGVsLCBzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQsIHNpZ25hbHM6IFZnU2lnbmFsW10pID0+IFZnU2lnbmFsW107XG4gIG1vZGlmeUV4cHI/OiAobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBleHByOiBzdHJpbmcpID0+IHN0cmluZztcbiAgbWFya3M/OiAobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDpTZWxlY3Rpb25Db21wb25lbnQsIG1hcmtzOiBhbnlbXSkgPT4gYW55W107XG59XG5cbmltcG9ydCBpbnB1dHMgZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IG5lYXJlc3QgZnJvbSAnLi9uZWFyZXN0JztcbmltcG9ydCBwcm9qZWN0IGZyb20gJy4vcHJvamVjdCc7XG5pbXBvcnQgc2NhbGVzIGZyb20gJy4vc2NhbGVzJztcbmltcG9ydCB0b2dnbGUgZnJvbSAnLi90b2dnbGUnO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tICcuL3RyYW5zbGF0ZSc7XG5pbXBvcnQgem9vbSBmcm9tICcuL3pvb20nO1xuY29uc3QgY29tcGlsZXJzOiBEaWN0PFRyYW5zZm9ybUNvbXBpbGVyPiA9IHtwcm9qZWN0LCB0b2dnbGUsIHNjYWxlcyxcbiAgdHJhbnNsYXRlLCB6b29tLCBpbnB1dHMsIG5lYXJlc3R9O1xuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFRyYW5zZm9ybShzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQsIGNiOiAodHg6IFRyYW5zZm9ybUNvbXBpbGVyKSA9PiB2b2lkKSB7XG4gIGZvciAoY29uc3QgdCBpbiBjb21waWxlcnMpIHtcbiAgICBpZiAoY29tcGlsZXJzW3RdLmhhcyhzZWxDbXB0KSkge1xuICAgICAgY2IoY29tcGlsZXJzW3RdKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var selection_1 = __webpack_require__(55);
	var nearest_1 = __webpack_require__(98);
	var inputBindings = {
	    has: function (selCmpt) {
	        return selCmpt.type === 'single' && selCmpt.resolve === 'global' &&
	            selCmpt.bind && selCmpt.bind !== 'scales';
	    },
	    topLevelSignals: function (model, selCmpt, signals) {
	        var name = selCmpt.name;
	        var proj = selCmpt.project;
	        var bind = selCmpt.bind;
	        var datum = nearest_1.default.has(selCmpt) ?
	            '(item().isVoronoi ? datum.datum : datum)' : 'datum';
	        proj.forEach(function (p) {
	            var sgname = util_1.varName(name + "_" + p.field);
	            var hasSignal = signals.filter(function (s) { return s.name === sgname; });
	            if (!hasSignal.length) {
	                signals.unshift({
	                    name: sgname,
	                    value: '',
	                    on: [{
	                            events: selCmpt.events,
	                            update: "datum && item().mark.marktype !== 'group' ? " + datum + util_1.accessPath(p.field) + " : null"
	                        }],
	                    bind: bind[p.field] || bind[p.channel] || bind
	                });
	            }
	        });
	        return signals;
	    },
	    signals: function (model, selCmpt, signals) {
	        var name = selCmpt.name;
	        var proj = selCmpt.project;
	        var signal = signals.filter(function (s) { return s.name === name + selection_1.TUPLE; })[0];
	        var fields = proj.map(function (p) { return util_1.stringValue(p.field); }).join(', ');
	        var values = proj.map(function (p) { return util_1.varName(name + "_" + p.field); });
	        signal.update = values.join(' && ') + " ? {fields: [" + fields + "], values: [" + values.join(', ') + "]} : null";
	        delete signal.value;
	        delete signal.on;
	        return signals;
	    }
	};
	exports.default = inputBindings;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQStEO0FBQy9ELDBDQUFtQztBQUNuQyxxQ0FBZ0M7QUFJaEMsSUFBTSxhQUFhLEdBQXFCO0lBQ3RDLEdBQUcsRUFBRSxVQUFTLE9BQU87UUFDbkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUTtZQUM5RCxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0lBQzlDLENBQUM7SUFFRCxlQUFlLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDL0MsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBTSxLQUFLLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNsQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRXZELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDO1lBQ3JCLElBQU0sTUFBTSxHQUFHLGNBQU8sQ0FBSSxJQUFJLFNBQUksQ0FBQyxDQUFDLEtBQU8sQ0FBQyxDQUFDO1lBQzdDLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO1lBQzNELEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQUM7b0JBQ2QsSUFBSSxFQUFFLE1BQU07b0JBQ1osS0FBSyxFQUFFLEVBQUU7b0JBQ1QsRUFBRSxFQUFFLENBQUM7NEJBQ0gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNOzRCQUN0QixNQUFNLEVBQUUsaURBQStDLEtBQUssR0FBRyxpQkFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUzt5QkFDNUYsQ0FBQztvQkFDRixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUk7aUJBQy9DLENBQUMsQ0FBQztZQUNMLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLGlCQUFLLEVBQXZCLENBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsa0JBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQXBCLENBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLGNBQU8sQ0FBSSxJQUFJLFNBQUksQ0FBQyxDQUFDLEtBQU8sQ0FBQyxFQUE3QixDQUE2QixDQUFDLENBQUM7UUFFOUQsTUFBTSxDQUFDLE1BQU0sR0FBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBZ0IsTUFBTSxvQkFBZSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFXLENBQUM7UUFDeEcsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUVqQixNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFDO0FBRXVCLGdDQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthY2Nlc3NQYXRoLCBzdHJpbmdWYWx1ZSwgdmFyTmFtZX0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQge1RVUExFfSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuaW1wb3J0IG5lYXJlc3QgZnJvbSAnLi9uZWFyZXN0JztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cblxuY29uc3QgaW5wdXRCaW5kaW5nczpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ3NpbmdsZScgJiYgc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyAmJlxuICAgICAgc2VsQ21wdC5iaW5kICYmIHNlbENtcHQuYmluZCAhPT0gJ3NjYWxlcyc7XG4gIH0sXG5cbiAgdG9wTGV2ZWxTaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIGNvbnN0IG5hbWUgPSBzZWxDbXB0Lm5hbWU7XG4gICAgY29uc3QgcHJvaiA9IHNlbENtcHQucHJvamVjdDtcbiAgICBjb25zdCBiaW5kID0gc2VsQ21wdC5iaW5kO1xuICAgIGNvbnN0IGRhdHVtID0gbmVhcmVzdC5oYXMoc2VsQ21wdCkgP1xuICAgICAgJyhpdGVtKCkuaXNWb3Jvbm9pID8gZGF0dW0uZGF0dW0gOiBkYXR1bSknIDogJ2RhdHVtJztcblxuICAgIHByb2ouZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICBjb25zdCBzZ25hbWUgPSB2YXJOYW1lKGAke25hbWV9XyR7cC5maWVsZH1gKTtcbiAgICAgIGNvbnN0IGhhc1NpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKChzKSA9PiBzLm5hbWUgPT09IHNnbmFtZSk7XG4gICAgICBpZiAoIWhhc1NpZ25hbC5sZW5ndGgpIHtcbiAgICAgICAgc2lnbmFscy51bnNoaWZ0KHtcbiAgICAgICAgICBuYW1lOiBzZ25hbWUsXG4gICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgIG9uOiBbe1xuICAgICAgICAgICAgZXZlbnRzOiBzZWxDbXB0LmV2ZW50cyxcbiAgICAgICAgICAgIHVwZGF0ZTogYGRhdHVtICYmIGl0ZW0oKS5tYXJrLm1hcmt0eXBlICE9PSAnZ3JvdXAnID8gJHtkYXR1bX0ke2FjY2Vzc1BhdGgocC5maWVsZCl9IDogbnVsbGBcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBiaW5kOiBiaW5kW3AuZmllbGRdIHx8IGJpbmRbcC5jaGFubmVsXSB8fCBiaW5kXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH0sXG5cbiAgc2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3Qgc2lnbmFsID0gc2lnbmFscy5maWx0ZXIoKHMpID0+IHMubmFtZSA9PT0gbmFtZSArIFRVUExFKVswXTtcbiAgICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gICAgY29uc3QgdmFsdWVzID0gcHJvai5tYXAoKHApID0+IHZhck5hbWUoYCR7bmFtZX1fJHtwLmZpZWxkfWApKTtcblxuICAgIHNpZ25hbC51cGRhdGUgPSBgJHt2YWx1ZXMuam9pbignICYmICcpfSA/IHtmaWVsZHM6IFske2ZpZWxkc31dLCB2YWx1ZXM6IFske3ZhbHVlcy5qb2luKCcsICcpfV19IDogbnVsbGA7XG4gICAgZGVsZXRlIHNpZ25hbC52YWx1ZTtcbiAgICBkZWxldGUgc2lnbmFsLm9uO1xuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH1cbn07XG5cbmV4cG9ydCB7aW5wdXRCaW5kaW5ncyBhcyBkZWZhdWx0fTtcbiJdfQ==

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var util_1 = __webpack_require__(14);
	var timeunit_1 = __webpack_require__(88);
	var project = {
	    has: function (selDef) {
	        var def = selDef;
	        return def.fields !== undefined || def.encodings !== undefined;
	    },
	    parse: function (model, selDef, selCmpt) {
	        var channels = {};
	        var timeUnits = {};
	        // TODO: find a possible channel mapping for these fields.
	        (selDef.fields || []).forEach(function (field) { return channels[field] = null; });
	        (selDef.encodings || []).forEach(function (channel) {
	            var fieldDef = model.fieldDef(channel);
	            if (fieldDef) {
	                if (fieldDef.timeUnit) {
	                    var tuField = model.vgField(channel);
	                    channels[tuField] = channel;
	                    // Construct TimeUnitComponents which will be combined into a
	                    // TimeUnitNode. This node may need to be inserted into the
	                    // dataflow if the selection is used across views that do not
	                    // have these time units defined.
	                    timeUnits[tuField] = {
	                        as: tuField,
	                        field: fieldDef.field,
	                        timeUnit: fieldDef.timeUnit
	                    };
	                }
	                else {
	                    channels[fieldDef.field] = channel;
	                }
	            }
	            else {
	                log.warn(log.message.cannotProjectOnChannelWithoutField(channel));
	            }
	        });
	        var projection = selCmpt.project || (selCmpt.project = []);
	        for (var field in channels) {
	            if (channels.hasOwnProperty(field)) {
	                projection.push({ field: field, channel: channels[field] });
	            }
	        }
	        var fields = selCmpt.fields || (selCmpt.fields = {});
	        projection.filter(function (p) { return p.channel; }).forEach(function (p) { return fields[p.channel] = p.field; });
	        if (util_1.keys(timeUnits).length) {
	            selCmpt.timeUnit = new timeunit_1.TimeUnitNode(timeUnits);
	        }
	    }
	};
	exports.default = project;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3Byb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxrQ0FBb0M7QUFFcEMsc0NBQW1DO0FBQ25DLGdEQUFvRTtBQUlwRSxJQUFNLE9BQU8sR0FBc0I7SUFDakMsR0FBRyxFQUFFLFVBQVMsTUFBeUM7UUFDckQsSUFBTSxHQUFHLEdBQUcsTUFBc0IsQ0FBQztRQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUM7SUFDakUsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBTSxTQUFTLEdBQXVDLEVBQUUsQ0FBQztRQUV6RCwwREFBMEQ7UUFDMUQsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQXRCLENBQXNCLENBQUMsQ0FBQztRQUVqRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBeUI7WUFDekQsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUN0QixJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN2QyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO29CQUU1Qiw2REFBNkQ7b0JBQzdELDJEQUEyRDtvQkFDM0QsNkRBQTZEO29CQUM3RCxpQ0FBaUM7b0JBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRzt3QkFDbkIsRUFBRSxFQUFFLE9BQU87d0JBQ1gsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO3dCQUNyQixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7cUJBQzVCLENBQUM7Z0JBQ0osQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQztnQkFDckMsQ0FBQztZQUNILENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM3RCxHQUFHLENBQUMsQ0FBQyxJQUFNLEtBQUssSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztZQUM1RCxDQUFDO1FBQ0gsQ0FBQztRQUVELElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsT0FBTyxFQUFULENBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBM0IsQ0FBMkIsQ0FBQyxDQUFDO1FBRWhGLEVBQUUsQ0FBQyxDQUFDLFdBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSx1QkFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQztBQUVpQiwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2luZ2xlRGVmQ2hhbm5lbH0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtrZXlzfSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7VGltZVVuaXRDb21wb25lbnQsIFRpbWVVbml0Tm9kZX0gZnJvbSAnLi4vLi4vZGF0YS90aW1ldW5pdCc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cbmNvbnN0IHByb2plY3Q6IFRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbERlZjogU2VsZWN0aW9uQ29tcG9uZW50IHwgU2VsZWN0aW9uRGVmKSB7XG4gICAgY29uc3QgZGVmID0gc2VsRGVmIGFzIFNlbGVjdGlvbkRlZjtcbiAgICByZXR1cm4gZGVmLmZpZWxkcyAhPT0gdW5kZWZpbmVkIHx8IGRlZi5lbmNvZGluZ3MgIT09IHVuZGVmaW5lZDtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGNoYW5uZWxzID0ge307XG4gICAgY29uc3QgdGltZVVuaXRzOiB7W2tleTogc3RyaW5nXTogVGltZVVuaXRDb21wb25lbnR9ID0ge307XG5cbiAgICAvLyBUT0RPOiBmaW5kIGEgcG9zc2libGUgY2hhbm5lbCBtYXBwaW5nIGZvciB0aGVzZSBmaWVsZHMuXG4gICAgKHNlbERlZi5maWVsZHMgfHwgW10pLmZvckVhY2goKGZpZWxkKSA9PiBjaGFubmVsc1tmaWVsZF0gPSBudWxsKTtcblxuICAgIChzZWxEZWYuZW5jb2RpbmdzIHx8IFtdKS5mb3JFYWNoKChjaGFubmVsOiBTaW5nbGVEZWZDaGFubmVsKSA9PiB7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgICAgaWYgKGZpZWxkRGVmKSB7XG4gICAgICAgIGlmIChmaWVsZERlZi50aW1lVW5pdCkge1xuICAgICAgICAgIGNvbnN0IHR1RmllbGQgPSBtb2RlbC52Z0ZpZWxkKGNoYW5uZWwpO1xuICAgICAgICAgIGNoYW5uZWxzW3R1RmllbGRdID0gY2hhbm5lbDtcblxuICAgICAgICAgIC8vIENvbnN0cnVjdCBUaW1lVW5pdENvbXBvbmVudHMgd2hpY2ggd2lsbCBiZSBjb21iaW5lZCBpbnRvIGFcbiAgICAgICAgICAvLyBUaW1lVW5pdE5vZGUuIFRoaXMgbm9kZSBtYXkgbmVlZCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICAgIC8vIGRhdGFmbG93IGlmIHRoZSBzZWxlY3Rpb24gaXMgdXNlZCBhY3Jvc3Mgdmlld3MgdGhhdCBkbyBub3RcbiAgICAgICAgICAvLyBoYXZlIHRoZXNlIHRpbWUgdW5pdHMgZGVmaW5lZC5cbiAgICAgICAgICB0aW1lVW5pdHNbdHVGaWVsZF0gPSB7XG4gICAgICAgICAgICBhczogdHVGaWVsZCxcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZERlZi5maWVsZCxcbiAgICAgICAgICAgIHRpbWVVbml0OiBmaWVsZERlZi50aW1lVW5pdFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbm5lbHNbZmllbGREZWYuZmllbGRdID0gY2hhbm5lbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuY2Fubm90UHJvamVjdE9uQ2hhbm5lbFdpdGhvdXRGaWVsZChjaGFubmVsKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gc2VsQ21wdC5wcm9qZWN0IHx8IChzZWxDbXB0LnByb2plY3QgPSBbXSk7XG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBjaGFubmVscykge1xuICAgICAgaWYgKGNoYW5uZWxzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICBwcm9qZWN0aW9uLnB1c2goe2ZpZWxkOiBmaWVsZCwgY2hhbm5lbDogY2hhbm5lbHNbZmllbGRdfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmllbGRzID0gc2VsQ21wdC5maWVsZHMgfHwgKHNlbENtcHQuZmllbGRzID0ge30pO1xuICAgIHByb2plY3Rpb24uZmlsdGVyKChwKSA9PiBwLmNoYW5uZWwpLmZvckVhY2goKHApID0+IGZpZWxkc1twLmNoYW5uZWxdID0gcC5maWVsZCk7XG5cbiAgICBpZiAoa2V5cyh0aW1lVW5pdHMpLmxlbmd0aCkge1xuICAgICAgc2VsQ21wdC50aW1lVW5pdCA9IG5ldyBUaW1lVW5pdE5vZGUodGltZVVuaXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7cHJvamVjdCBhcyBkZWZhdWx0fTtcbiJdfQ==

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var selection_1 = __webpack_require__(55);
	var TOGGLE = '_toggle';
	var toggle = {
	    has: function (selCmpt) {
	        return selCmpt.type === 'multi' && selCmpt.toggle;
	    },
	    signals: function (model, selCmpt, signals) {
	        return signals.concat({
	            name: selCmpt.name + TOGGLE,
	            value: false,
	            on: [{ events: selCmpt.events, update: selCmpt.toggle }]
	        });
	    },
	    modifyExpr: function (model, selCmpt, expr) {
	        var tpl = selCmpt.name + selection_1.TUPLE;
	        var signal = selCmpt.name + TOGGLE;
	        return signal + " ? null : " + tpl + ", " +
	            (selCmpt.resolve === 'global' ?
	                signal + " ? null : true, " :
	                signal + " ? null : {unit: " + selection_1.unitName(model) + "}, ") +
	            (signal + " ? " + tpl + " : null");
	    }
	};
	exports.default = toggle;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvdG9nZ2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMENBQTZDO0FBSTdDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUV6QixJQUFNLE1BQU0sR0FBcUI7SUFDL0IsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNwRCxDQUFDO0lBRUQsT0FBTyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO1FBQ3ZDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3BCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU07WUFDM0IsS0FBSyxFQUFFLEtBQUs7WUFDWixFQUFFLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFDLENBQUM7U0FDdkQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFVBQVUsRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSTtRQUN2QyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFLLENBQUM7UUFDakMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFFckMsTUFBTSxDQUFJLE1BQU0sa0JBQWEsR0FBRyxPQUFJO1lBQ2xDLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQztnQkFDMUIsTUFBTSxxQkFBa0IsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLHlCQUFvQixvQkFBUSxDQUFDLEtBQUssQ0FBQyxRQUFLLENBQUM7YUFDakQsTUFBTSxXQUFNLEdBQUcsWUFBUyxDQUFBLENBQUM7SUFDaEMsQ0FBQztDQUNGLENBQUM7QUFFZ0IseUJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VFVQTEUsIHVuaXROYW1lfSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtUcmFuc2Zvcm1Db21waWxlcn0gZnJvbSAnLi90cmFuc2Zvcm1zJztcblxuXG5jb25zdCBUT0dHTEUgPSAnX3RvZ2dsZSc7XG5cbmNvbnN0IHRvZ2dsZTpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ211bHRpJyAmJiBzZWxDbXB0LnRvZ2dsZTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIHJldHVybiBzaWduYWxzLmNvbmNhdCh7XG4gICAgICBuYW1lOiBzZWxDbXB0Lm5hbWUgKyBUT0dHTEUsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvbjogW3tldmVudHM6IHNlbENtcHQuZXZlbnRzLCB1cGRhdGU6IHNlbENtcHQudG9nZ2xlfV1cbiAgICB9KTtcbiAgfSxcblxuICBtb2RpZnlFeHByOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgZXhwcikge1xuICAgIGNvbnN0IHRwbCA9IHNlbENtcHQubmFtZSArIFRVUExFO1xuICAgIGNvbnN0IHNpZ25hbCA9IHNlbENtcHQubmFtZSArIFRPR0dMRTtcblxuICAgIHJldHVybiBgJHtzaWduYWx9ID8gbnVsbCA6ICR7dHBsfSwgYCArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDogdHJ1ZSwgYCA6XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDoge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX0sIGApICtcbiAgICAgIGAke3NpZ25hbH0gPyAke3RwbH0gOiBudWxsYDtcbiAgfVxufTtcblxuZXhwb3J0IHt0b2dnbGUgYXMgZGVmYXVsdH07XG4iXX0=

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_event_selector_1 = __webpack_require__(56);
	var channel_1 = __webpack_require__(23);
	var interval_1 = __webpack_require__(95);
	var selection_1 = __webpack_require__(55);
	var scales_1 = __webpack_require__(96);
	var ANCHOR = '_translate_anchor';
	var DELTA = '_translate_delta';
	var translate = {
	    has: function (selCmpt) {
	        return selCmpt.type === 'interval' && selCmpt.translate;
	    },
	    signals: function (model, selCmpt, signals) {
	        var name = selCmpt.name;
	        var hasScales = scales_1.default.has(selCmpt);
	        var anchor = name + ANCHOR;
	        var _a = selection_1.positionalProjections(selCmpt), x = _a.x, y = _a.y;
	        var events = vega_event_selector_1.selector(selCmpt.translate, 'scope');
	        if (!hasScales) {
	            events = events.map(function (e) { return (e.between[0].markname = name + interval_1.BRUSH, e); });
	        }
	        signals.push({
	            name: anchor,
	            value: {},
	            on: [{
	                    events: events.map(function (e) { return e.between[0]; }),
	                    update: '{x: x(unit), y: y(unit)' +
	                        (x !== null ? ', extent_x: ' + (hasScales ? scales_1.domain(model, channel_1.X) :
	                            "slice(" + selection_1.channelSignalName(selCmpt, 'x', 'visual') + ")") : '') +
	                        (y !== null ? ', extent_y: ' + (hasScales ? scales_1.domain(model, channel_1.Y) :
	                            "slice(" + selection_1.channelSignalName(selCmpt, 'y', 'visual') + ")") : '') + '}'
	                }]
	        }, {
	            name: name + DELTA,
	            value: {},
	            on: [{
	                    events: events,
	                    update: "{x: " + anchor + ".x - x(unit), y: " + anchor + ".y - y(unit)}"
	                }]
	        });
	        if (x !== null) {
	            onDelta(model, selCmpt, channel_1.X, 'width', signals);
	        }
	        if (y !== null) {
	            onDelta(model, selCmpt, channel_1.Y, 'height', signals);
	        }
	        return signals;
	    }
	};
	exports.default = translate;
	function onDelta(model, selCmpt, channel, size, signals) {
	    var name = selCmpt.name;
	    var hasScales = scales_1.default.has(selCmpt);
	    var signal = signals.filter(function (s) {
	        return s.name === selection_1.channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');
	    })[0];
	    var anchor = name + ANCHOR;
	    var delta = name + DELTA;
	    var sizeSg = model.getSizeSignalRef(size).signal;
	    var scaleCmpt = model.getScaleComponent(channel);
	    var scaleType = scaleCmpt.get('type');
	    var sign = hasScales && channel === channel_1.X ? '-' : ''; // Invert delta when panning x-scales.
	    var extent = anchor + ".extent_" + channel;
	    var offset = "" + sign + delta + "." + channel + " / " + (hasScales ? "" + sizeSg : "span(" + extent + ")");
	    var panFn = !hasScales ? 'panLinear' :
	        scaleType === 'log' ? 'panLog' :
	            scaleType === 'pow' ? 'panPow' : 'panLinear';
	    var update = panFn + "(" + extent + ", " + offset +
	        (hasScales && scaleType === 'pow' ? ", " + (scaleCmpt.get('exponent') || 1) : '') + ')';
	    signal.on.push({
	        events: { signal: delta },
	        update: hasScales ? update : "clampRange(" + update + ", 0, " + sizeSg + ")"
	    });
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_event_selector_1 = __webpack_require__(56);
	var channel_1 = __webpack_require__(23);
	var util_1 = __webpack_require__(14);
	var interval_1 = __webpack_require__(95);
	var selection_1 = __webpack_require__(55);
	var scales_1 = __webpack_require__(96);
	var ANCHOR = '_zoom_anchor';
	var DELTA = '_zoom_delta';
	var zoom = {
	    has: function (selCmpt) {
	        return selCmpt.type === 'interval' && selCmpt.zoom;
	    },
	    signals: function (model, selCmpt, signals) {
	        var name = selCmpt.name;
	        var hasScales = scales_1.default.has(selCmpt);
	        var delta = name + DELTA;
	        var _a = selection_1.positionalProjections(selCmpt), x = _a.x, y = _a.y;
	        var sx = util_1.stringValue(model.scaleName(channel_1.X));
	        var sy = util_1.stringValue(model.scaleName(channel_1.Y));
	        var events = vega_event_selector_1.selector(selCmpt.zoom, 'scope');
	        if (!hasScales) {
	            events = events.map(function (e) { return (e.markname = name + interval_1.BRUSH, e); });
	        }
	        signals.push({
	            name: name + ANCHOR,
	            on: [{
	                    events: events,
	                    update: !hasScales ? "{x: x(unit), y: y(unit)}" :
	                        '{' + [
	                            (sx ? "x: invert(" + sx + ", x(unit))" : ''),
	                            (sy ? "y: invert(" + sy + ", y(unit))" : '')
	                        ].filter(function (expr) { return !!expr; }).join(', ') + '}'
	                }]
	        }, {
	            name: delta,
	            on: [{
	                    events: events,
	                    force: true,
	                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
	                }]
	        });
	        if (x !== null) {
	            onDelta(model, selCmpt, 'x', 'width', signals);
	        }
	        if (y !== null) {
	            onDelta(model, selCmpt, 'y', 'height', signals);
	        }
	        return signals;
	    }
	};
	exports.default = zoom;
	function onDelta(model, selCmpt, channel, size, signals) {
	    var name = selCmpt.name;
	    var hasScales = scales_1.default.has(selCmpt);
	    var signal = signals.filter(function (s) {
	        return s.name === selection_1.channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');
	    })[0];
	    var sizeSg = model.getSizeSignalRef(size).signal;
	    var scaleCmpt = model.getScaleComponent(channel);
	    var scaleType = scaleCmpt.get('type');
	    var base = hasScales ? scales_1.domain(model, channel) : signal.name;
	    var delta = name + DELTA;
	    var anchor = "" + name + ANCHOR + "." + channel;
	    var zoomFn = !hasScales ? 'zoomLinear' :
	        scaleType === 'log' ? 'zoomLog' :
	            scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';
	    var update = zoomFn + "(" + base + ", " + anchor + ", " + delta +
	        (hasScales && scaleType === 'pow' ? ", " + (scaleCmpt.get('exponent') || 1) : '') + ')';
	    signal.on.push({
	        events: { signal: delta },
	        update: hasScales ? update : "clampRange(" + update + ", 0, " + sizeSg + ")"
	    });
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9vbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3pvb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBOEQ7QUFDOUQsNENBQW9EO0FBQ3BELHNDQUEwQztBQUUxQyx3Q0FBb0Q7QUFDcEQsMENBQTBGO0FBRTFGLG1DQUEyRDtBQUkzRCxJQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFDOUIsSUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDO0FBRTVCLElBQU0sSUFBSSxHQUFxQjtJQUM3QixHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ3JELENBQUM7SUFFRCxPQUFPLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDdkMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFNLFNBQVMsR0FBRyxnQkFBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUEsK0NBQXVDLEVBQXRDLFFBQUMsRUFBRSxRQUFDLENBQW1DO1FBQzlDLElBQU0sRUFBRSxHQUFHLGtCQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQU0sRUFBRSxHQUFHLGtCQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQUksTUFBTSxHQUFHLDhCQUFhLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDZixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsZ0JBQWMsRUFBRSxDQUFDLENBQUMsRUFBdkMsQ0FBdUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ1gsSUFBSSxFQUFFLElBQUksR0FBRyxNQUFNO1lBQ25CLEVBQUUsRUFBRSxDQUFDO29CQUNILE1BQU0sRUFBRSxNQUFNO29CQUNkLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQzt3QkFDL0MsR0FBRyxHQUFHOzRCQUNKLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFhLEVBQUUsZUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7NEJBQ3ZDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFhLEVBQUUsZUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7eUJBQ3hDLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRztpQkFDOUMsQ0FBQztTQUNILEVBQUU7WUFDRCxJQUFJLEVBQUUsS0FBSztZQUNYLEVBQUUsRUFBRSxDQUFDO29CQUNILE1BQU0sRUFBRSxNQUFNO29CQUNkLEtBQUssRUFBRSxJQUFJO29CQUNYLE1BQU0sRUFBRSxxREFBcUQ7aUJBQzlELENBQUM7U0FDSCxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0YsQ0FBQztBQUVjLHVCQUFPO0FBRXZCLGlCQUFpQixLQUFnQixFQUFFLE9BQTJCLEVBQUUsT0FBcUIsRUFBRSxJQUF3QixFQUFFLE9BQW1CO0lBQ2xJLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDMUIsSUFBTSxTQUFTLEdBQUcsZ0JBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUM7UUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssNkJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ25ELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxJQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM5RCxJQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQzNCLElBQU0sTUFBTSxHQUFHLEtBQUcsSUFBSSxHQUFHLE1BQU0sU0FBSSxPQUFTLENBQUM7SUFDN0MsSUFBTSxNQUFNLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ2pELElBQU0sTUFBTSxHQUFNLE1BQU0sU0FBSSxJQUFJLFVBQUssTUFBTSxVQUFLLEtBQU87UUFDckQsQ0FBQyxTQUFTLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBSyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7SUFFeEYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDYixNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDO1FBQ3ZCLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsZ0JBQWMsTUFBTSxhQUFRLE1BQU0sTUFBRztLQUNuRSxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzZWxlY3RvciBhcyBwYXJzZVNlbGVjdG9yfSBmcm9tICd2ZWdhLWV2ZW50LXNlbGVjdG9yJztcbmltcG9ydCB7U2NhbGVDaGFubmVsLCBYLCBZfSBmcm9tICcuLi8uLi8uLi9jaGFubmVsJztcbmltcG9ydCB7c3RyaW5nVmFsdWV9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ1NpZ25hbH0gZnJvbSAnLi4vLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtCUlVTSCBhcyBJTlRFUlZBTF9CUlVTSH0gZnJvbSAnLi4vaW50ZXJ2YWwnO1xuaW1wb3J0IHtjaGFubmVsU2lnbmFsTmFtZSwgcG9zaXRpb25hbFByb2plY3Rpb25zLCBTZWxlY3Rpb25Db21wb25lbnR9IGZyb20gJy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi8uLi8uLi91bml0JztcbmltcG9ydCB7ZGVmYXVsdCBhcyBzY2FsZXNDb21waWxlciwgZG9tYWlufSBmcm9tICcuL3NjYWxlcyc7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5cbmNvbnN0IEFOQ0hPUiA9ICdfem9vbV9hbmNob3InO1xuY29uc3QgREVMVEEgPSAnX3pvb21fZGVsdGEnO1xuXG5jb25zdCB6b29tOlRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbENtcHQpIHtcbiAgICByZXR1cm4gc2VsQ21wdC50eXBlID09PSAnaW50ZXJ2YWwnICYmIHNlbENtcHQuem9vbTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIGNvbnN0IG5hbWUgPSBzZWxDbXB0Lm5hbWU7XG4gICAgY29uc3QgaGFzU2NhbGVzID0gc2NhbGVzQ29tcGlsZXIuaGFzKHNlbENtcHQpO1xuICAgIGNvbnN0IGRlbHRhID0gbmFtZSArIERFTFRBO1xuICAgIGNvbnN0IHt4LCB5fSA9IHBvc2l0aW9uYWxQcm9qZWN0aW9ucyhzZWxDbXB0KTtcbiAgICBjb25zdCBzeCA9IHN0cmluZ1ZhbHVlKG1vZGVsLnNjYWxlTmFtZShYKSk7XG4gICAgY29uc3Qgc3kgPSBzdHJpbmdWYWx1ZShtb2RlbC5zY2FsZU5hbWUoWSkpO1xuICAgIGxldCBldmVudHMgPSBwYXJzZVNlbGVjdG9yKHNlbENtcHQuem9vbSwgJ3Njb3BlJyk7XG5cbiAgICBpZiAoIWhhc1NjYWxlcykge1xuICAgICAgZXZlbnRzID0gZXZlbnRzLm1hcCgoZSkgPT4gKGUubWFya25hbWUgPSBuYW1lICsgSU5URVJWQUxfQlJVU0gsIGUpKTtcbiAgICB9XG5cbiAgICBzaWduYWxzLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSArIEFOQ0hPUixcbiAgICAgIG9uOiBbe1xuICAgICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgICAgdXBkYXRlOiAhaGFzU2NhbGVzID8gYHt4OiB4KHVuaXQpLCB5OiB5KHVuaXQpfWAgOlxuICAgICAgICAgICd7JyArIFtcbiAgICAgICAgICAgIChzeCA/IGB4OiBpbnZlcnQoJHtzeH0sIHgodW5pdCkpYCA6ICcnKSxcbiAgICAgICAgICAgIChzeSA/IGB5OiBpbnZlcnQoJHtzeX0sIHkodW5pdCkpYCA6ICcnKVxuICAgICAgICAgIF0uZmlsdGVyKChleHByKSA9PiAhIWV4cHIpLmpvaW4oJywgJykgKyAnfSdcbiAgICAgIH1dXG4gICAgfSwge1xuICAgICAgbmFtZTogZGVsdGEsXG4gICAgICBvbjogW3tcbiAgICAgICAgZXZlbnRzOiBldmVudHMsXG4gICAgICAgIGZvcmNlOiB0cnVlLFxuICAgICAgICB1cGRhdGU6ICdwb3coMS4wMDEsIGV2ZW50LmRlbHRhWSAqIHBvdygxNiwgZXZlbnQuZGVsdGFNb2RlKSknXG4gICAgICB9XVxuICAgIH0pO1xuXG4gICAgaWYgKHggIT09IG51bGwpIHtcbiAgICAgIG9uRGVsdGEobW9kZWwsIHNlbENtcHQsICd4JywgJ3dpZHRoJywgc2lnbmFscyk7XG4gICAgfVxuXG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIG9uRGVsdGEobW9kZWwsIHNlbENtcHQsICd5JywgJ2hlaWdodCcsIHNpZ25hbHMpO1xuICAgIH1cblxuICAgIHJldHVybiBzaWduYWxzO1xuICB9XG59O1xuXG5leHBvcnQge3pvb20gYXMgZGVmYXVsdH07XG5cbmZ1bmN0aW9uIG9uRGVsdGEobW9kZWw6IFVuaXRNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBjaGFubmVsOiBTY2FsZUNoYW5uZWwsIHNpemU6ICd3aWR0aCcgfCAnaGVpZ2h0Jywgc2lnbmFsczogVmdTaWduYWxbXSkge1xuICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICBjb25zdCBoYXNTY2FsZXMgPSBzY2FsZXNDb21waWxlci5oYXMoc2VsQ21wdCk7XG4gIGNvbnN0IHNpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKHMgPT4ge1xuICAgIHJldHVybiBzLm5hbWUgPT09IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsIGhhc1NjYWxlcyA/ICdkYXRhJyA6ICd2aXN1YWwnKTtcbiAgfSlbMF07XG4gIGNvbnN0IHNpemVTZyA9IG1vZGVsLmdldFNpemVTaWduYWxSZWYoc2l6ZSkuc2lnbmFsO1xuICBjb25zdCBzY2FsZUNtcHQgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChjaGFubmVsKTtcbiAgY29uc3Qgc2NhbGVUeXBlID0gc2NhbGVDbXB0LmdldCgndHlwZScpO1xuICBjb25zdCBiYXNlID0gaGFzU2NhbGVzID8gZG9tYWluKG1vZGVsLCBjaGFubmVsKSA6IHNpZ25hbC5uYW1lO1xuICBjb25zdCBkZWx0YSA9IG5hbWUgKyBERUxUQTtcbiAgY29uc3QgYW5jaG9yID0gYCR7bmFtZX0ke0FOQ0hPUn0uJHtjaGFubmVsfWA7XG4gIGNvbnN0IHpvb21GbiA9ICFoYXNTY2FsZXMgPyAnem9vbUxpbmVhcicgOlxuICAgIHNjYWxlVHlwZSA9PT0gJ2xvZycgPyAnem9vbUxvZycgOlxuICAgIHNjYWxlVHlwZSA9PT0gJ3BvdycgPyAnem9vbVBvdycgOiAnem9vbUxpbmVhcic7XG4gIGNvbnN0IHVwZGF0ZSA9IGAke3pvb21Gbn0oJHtiYXNlfSwgJHthbmNob3J9LCAke2RlbHRhfWAgK1xuICAgIChoYXNTY2FsZXMgJiYgc2NhbGVUeXBlID09PSAncG93JyA/IGAsICR7c2NhbGVDbXB0LmdldCgnZXhwb25lbnQnKSB8fCAxfWAgOiAnJykgKyAnKSc7XG5cbiAgc2lnbmFsLm9uLnB1c2goe1xuICAgIGV2ZW50czoge3NpZ25hbDogZGVsdGF9LFxuICAgIHVwZGF0ZTogaGFzU2NhbGVzID8gdXBkYXRlIDogYGNsYW1wUmFuZ2UoJHt1cGRhdGV9LCAwLCAke3NpemVTZ30pYFxuICB9KTtcbn1cbiJdfQ==

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var bin_1 = __webpack_require__(22);
	var fielddef_1 = __webpack_require__(28);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var model_1 = __webpack_require__(57);
	var dataflow_1 = __webpack_require__(82);
	function rangeFormula(model, fieldDef, channel, config) {
	    if (common_1.binRequiresRange(fieldDef, channel)) {
	        // read format from axis or legend, if there is no format then use config.numberFormat
	        var guide = model_1.isUnitModel(model) ? (model.axis(channel) || model.legend(channel) || {}) : {};
	        var startField = fielddef_1.vgField(fieldDef, { expr: 'datum', });
	        var endField = fielddef_1.vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });
	        return {
	            formulaAs: fielddef_1.vgField(fieldDef, { binSuffix: 'range' }),
	            formula: common_1.binFormatExpression(startField, endField, guide.format, config)
	        };
	    }
	    return {};
	}
	function binKey(bin, field) {
	    return bin_1.binToString(bin) + "_" + field;
	}
	function isModelParams(p) {
	    return !!p['model'];
	}
	function getSignalsFromParams(params, key) {
	    if (isModelParams(params)) {
	        var model = params.model;
	        return {
	            signal: model.getName(key + "_bins"),
	            extentSignal: model.getName(key + "_extent")
	        };
	    }
	    return params;
	}
	function isBinTransform(t) {
	    return 'as' in t;
	}
	function createBinComponent(t, params) {
	    var as;
	    if (isBinTransform(t)) {
	        as = [t.as, t.as + "_end"];
	    }
	    else {
	        as = [fielddef_1.vgField(t, {}), fielddef_1.vgField(t, { binSuffix: 'end' })];
	    }
	    var bin = fielddef_1.normalizeBin(t.bin, undefined) || {};
	    var key = binKey(bin, t.field);
	    var _a = getSignalsFromParams(params, key), signal = _a.signal, extentSignal = _a.extentSignal;
	    var binComponent = __assign({ bin: bin, field: t.field, as: as }, signal ? { signal: signal } : {}, extentSignal ? { extentSignal: extentSignal } : {});
	    return { key: key, binComponent: binComponent };
	}
	var BinNode = /** @class */ (function (_super) {
	    __extends(BinNode, _super);
	    function BinNode(bins) {
	        var _this = _super.call(this) || this;
	        _this.bins = bins;
	        return _this;
	    }
	    BinNode.prototype.clone = function () {
	        return new BinNode(util_1.duplicate(this.bins));
	    };
	    BinNode.makeBinFromEncoding = function (model) {
	        var bins = model.reduceFieldDef(function (binComponentIndex, fieldDef, channel) {
	            if (fieldDef.bin) {
	                var _a = createBinComponent(fieldDef, { model: model }), key = _a.key, binComponent = _a.binComponent;
	                binComponentIndex[key] = __assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));
	            }
	            return binComponentIndex;
	        }, {});
	        if (util_1.keys(bins).length === 0) {
	            return null;
	        }
	        return new BinNode(bins);
	    };
	    /**
	     * Creates a bin node from BinTransform.
	     * The optional parameter should provide
	     */
	    BinNode.makeFromTransform = function (t, params) {
	        var _a = createBinComponent(t, params), key = _a.key, binComponent = _a.binComponent;
	        return new BinNode((_b = {},
	            _b[key] = binComponent,
	            _b));
	        var _b;
	    };
	    BinNode.prototype.merge = function (other) {
	        this.bins = __assign({}, this.bins, other.bins);
	        other.remove();
	    };
	    BinNode.prototype.producedFields = function () {
	        var out = {};
	        util_1.vals(this.bins).forEach(function (c) {
	            c.as.forEach(function (f) { return out[f] = true; });
	        });
	        return out;
	    };
	    BinNode.prototype.dependentFields = function () {
	        var out = {};
	        util_1.vals(this.bins).forEach(function (c) {
	            out[c.field] = true;
	        });
	        return out;
	    };
	    BinNode.prototype.assemble = function () {
	        return util_1.flatten(util_1.vals(this.bins).map(function (bin) {
	            var transform = [];
	            var binTrans = __assign({ type: 'bin', field: bin.field, as: bin.as, signal: bin.signal }, bin.bin);
	            if (!bin.bin.extent && bin.extentSignal) {
	                transform.push({
	                    type: 'extent',
	                    field: bin.field,
	                    signal: bin.extentSignal
	                });
	                binTrans.extent = { signal: bin.extentSignal };
	            }
	            transform.push(binTrans);
	            if (bin.formula) {
	                transform.push({
	                    type: 'formula',
	                    expr: bin.formula,
	                    as: bin.formulaAs
	                });
	            }
	            return transform;
	        }));
	    };
	    return BinNode;
	}(dataflow_1.DataFlowNode));
	exports.BinNode = BinNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9iaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBaUQ7QUFHakQsMkNBQStEO0FBRS9ELG1DQUFnRTtBQUVoRSxvQ0FBZ0U7QUFDaEUsa0NBQTREO0FBQzVELHVDQUF3QztBQUd4QyxzQkFBc0IsS0FBcUIsRUFBRSxRQUEwQixFQUFFLE9BQWdCLEVBQUUsTUFBYztJQUNyRyxFQUFFLENBQUMsQ0FBQyx5QkFBZ0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLHNGQUFzRjtRQUV0RixJQUFNLEtBQUssR0FBRyxtQkFBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTdGLElBQU0sVUFBVSxHQUFHLGtCQUFPLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sR0FBRSxDQUFDLENBQUM7UUFDdkQsSUFBTSxRQUFRLEdBQUcsa0JBQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sQ0FBQztZQUNMLFNBQVMsRUFBRSxrQkFBTyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQztZQUNsRCxPQUFPLEVBQUUsNEJBQW1CLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztTQUN6RSxDQUFDO0lBQ0osQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBRUQsZ0JBQWdCLEdBQWMsRUFBRSxLQUFhO0lBQzNDLE1BQU0sQ0FBSSxpQkFBVyxDQUFDLEdBQUcsQ0FBQyxTQUFJLEtBQU8sQ0FBQztBQUN4QyxDQUFDO0FBRUQsdUJBQXVCLENBQTREO0lBQ2pGLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RCLENBQUM7QUFFRCw4QkFDRSxNQUFpRSxFQUNqRSxHQUFXO0lBRVgsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzNCLE1BQU0sQ0FBQztZQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFJLEdBQUcsVUFBTyxDQUFDO1lBQ3BDLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFJLEdBQUcsWUFBUyxDQUFDO1NBQzdDLENBQUM7SUFDSixDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsd0JBQXdCLENBQWtDO0lBQ3hELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFFRCw0QkFDRSxDQUFrQyxFQUNsQyxNQUFpRTtJQUVqRSxJQUFJLEVBQW9CLENBQUM7SUFFekIsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFLLENBQUMsQ0FBQyxFQUFFLFNBQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLEVBQUUsR0FBRyxDQUFDLGtCQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLGtCQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBTSxHQUFHLEdBQUcsdUJBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqRCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixJQUFBLHNDQUEwRCxFQUF6RCxrQkFBTSxFQUFFLDhCQUFZLENBQXNDO0lBRWpFLElBQU0sWUFBWSxjQUNoQixHQUFHLEVBQUUsR0FBRyxFQUNSLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxFQUNkLEVBQUUsRUFBRSxFQUFFLElBQ0gsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFDdEIsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFDLFlBQVksY0FBQSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDdEMsQ0FBQztJQUVGLE1BQU0sQ0FBQyxFQUFDLEdBQUcsS0FBQSxFQUFFLFlBQVksY0FBQSxFQUFDLENBQUM7QUFDN0IsQ0FBQztBQWVEO0lBQTZCLDJCQUFZO0lBS3ZDLGlCQUFvQixJQUF3QjtRQUE1QyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsVUFBSSxHQUFKLElBQUksQ0FBb0I7O0lBRTVDLENBQUM7SUFOTSx1QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQU1hLDJCQUFtQixHQUFqQyxVQUFrQyxLQUFxQjtRQUNyRCxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQUMsaUJBQXFDLEVBQUUsUUFBUSxFQUFFLE9BQU87WUFDekYsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsSUFBQSxtREFBMkQsRUFBMUQsWUFBRyxFQUFFLDhCQUFZLENBQTBDO2dCQUNsRSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsZ0JBQ2pCLFlBQVksRUFDWixpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFDdEIsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDeEQsQ0FBQztZQUNKLENBQUM7WUFDRCxNQUFNLENBQUMsaUJBQWlCLENBQUM7UUFDM0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRVAsRUFBRSxDQUFDLENBQUMsV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7O09BR0c7SUFDVyx5QkFBaUIsR0FBL0IsVUFBZ0MsQ0FBZSxFQUFFLE1BQWlFO1FBQzFHLElBQUEsa0NBQW1ELEVBQWxELFlBQUcsRUFBRSw4QkFBWSxDQUFrQztRQUMxRCxNQUFNLENBQUMsSUFBSSxPQUFPO1lBQ2hCLEdBQUMsR0FBRyxJQUFHLFlBQVk7Z0JBQ25CLENBQUM7O0lBQ0wsQ0FBQztJQUVNLHVCQUFLLEdBQVosVUFBYSxLQUFjO1FBQ3pCLElBQUksQ0FBQyxJQUFJLGdCQUFPLElBQUksQ0FBQyxJQUFJLEVBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sZ0NBQWMsR0FBckI7UUFDRSxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixXQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7WUFDdkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFiLENBQWEsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxpQ0FBZSxHQUF0QjtRQUNFLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLFdBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sMEJBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQyxjQUFPLENBQUMsV0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHO1lBQ3BDLElBQU0sU0FBUyxHQUFrQixFQUFFLENBQUM7WUFFcEMsSUFBTSxRQUFRLGNBQ1YsSUFBSSxFQUFFLEtBQUssRUFDWCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFDaEIsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQ1YsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLElBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FDYixDQUFDO1lBRUYsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDeEMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDYixJQUFJLEVBQUUsUUFBUTtvQkFDZCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7b0JBQ2hCLE1BQU0sRUFBRSxHQUFHLENBQUMsWUFBWTtpQkFDekIsQ0FBQyxDQUFDO2dCQUNILFFBQVEsQ0FBQyxNQUFNLEdBQUcsRUFBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLFlBQVksRUFBQyxDQUFDO1lBQy9DLENBQUM7WUFFRCxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXpCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixTQUFTLENBQUMsSUFBSSxDQUFDO29CQUNiLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxHQUFHLENBQUMsT0FBTztvQkFDakIsRUFBRSxFQUFFLEdBQUcsQ0FBQyxTQUFTO2lCQUNsQixDQUFDLENBQUM7WUFDTCxDQUFDO1lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBbkdELENBQTZCLHVCQUFZLEdBbUd4QztBQW5HWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmluUGFyYW1zLCBiaW5Ub1N0cmluZ30gZnJvbSAnLi4vLi4vYmluJztcbmltcG9ydCB7Q2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7RmllbGREZWYsIG5vcm1hbGl6ZUJpbiwgdmdGaWVsZH0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtCaW5UcmFuc2Zvcm19IGZyb20gJy4uLy4uL3RyYW5zZm9ybSc7XG5pbXBvcnQge0RpY3QsIGR1cGxpY2F0ZSwgZmxhdHRlbiwga2V5cywgdmFsc30gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnQmluVHJhbnNmb3JtLCBWZ1RyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtiaW5Gb3JtYXRFeHByZXNzaW9uLCBiaW5SZXF1aXJlc1JhbmdlfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtpc1VuaXRNb2RlbCwgTW9kZWwsIE1vZGVsV2l0aEZpZWxkfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZnVuY3Rpb24gcmFuZ2VGb3JtdWxhKG1vZGVsOiBNb2RlbFdpdGhGaWVsZCwgZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4sIGNoYW5uZWw6IENoYW5uZWwsIGNvbmZpZzogQ29uZmlnKSB7XG4gICAgaWYgKGJpblJlcXVpcmVzUmFuZ2UoZmllbGREZWYsIGNoYW5uZWwpKSB7XG4gICAgICAvLyByZWFkIGZvcm1hdCBmcm9tIGF4aXMgb3IgbGVnZW5kLCBpZiB0aGVyZSBpcyBubyBmb3JtYXQgdGhlbiB1c2UgY29uZmlnLm51bWJlckZvcm1hdFxuXG4gICAgICBjb25zdCBndWlkZSA9IGlzVW5pdE1vZGVsKG1vZGVsKSA/IChtb2RlbC5heGlzKGNoYW5uZWwpIHx8IG1vZGVsLmxlZ2VuZChjaGFubmVsKSB8fCB7fSkgOiB7fTtcblxuICAgICAgY29uc3Qgc3RhcnRGaWVsZCA9IHZnRmllbGQoZmllbGREZWYsIHtleHByOiAnZGF0dW0nLH0pO1xuICAgICAgY29uc3QgZW5kRmllbGQgPSB2Z0ZpZWxkKGZpZWxkRGVmLCB7ZXhwcjogJ2RhdHVtJywgYmluU3VmZml4OiAnZW5kJ30pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb3JtdWxhQXM6IHZnRmllbGQoZmllbGREZWYsIHtiaW5TdWZmaXg6ICdyYW5nZSd9KSxcbiAgICAgICAgZm9ybXVsYTogYmluRm9ybWF0RXhwcmVzc2lvbihzdGFydEZpZWxkLCBlbmRGaWVsZCwgZ3VpZGUuZm9ybWF0LCBjb25maWcpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGJpbktleShiaW46IEJpblBhcmFtcywgZmllbGQ6IHN0cmluZykge1xuICByZXR1cm4gYCR7YmluVG9TdHJpbmcoYmluKX1fJHtmaWVsZH1gO1xufVxuXG5mdW5jdGlvbiBpc01vZGVsUGFyYW1zKHA6IHttb2RlbDogTW9kZWx9IHwge3NpZ25hbD86IHN0cmluZywgZXh0ZW50U2lnbmFsPzogc3RyaW5nfSk6IHAgaXMge21vZGVsOiBNb2RlbH0ge1xuICByZXR1cm4gISFwWydtb2RlbCddO1xufVxuXG5mdW5jdGlvbiBnZXRTaWduYWxzRnJvbVBhcmFtcyhcbiAgcGFyYW1zOiB7bW9kZWw6IE1vZGVsfSB8IHtzaWduYWw/OiBzdHJpbmcsIGV4dGVudFNpZ25hbD86IHN0cmluZ30sXG4gIGtleTogc3RyaW5nXG4pIHtcbiAgaWYgKGlzTW9kZWxQYXJhbXMocGFyYW1zKSkge1xuICAgIGNvbnN0IG1vZGVsID0gcGFyYW1zLm1vZGVsO1xuICAgIHJldHVybiB7XG4gICAgICBzaWduYWw6IG1vZGVsLmdldE5hbWUoYCR7a2V5fV9iaW5zYCksXG4gICAgICBleHRlbnRTaWduYWw6IG1vZGVsLmdldE5hbWUoYCR7a2V5fV9leHRlbnRgKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZnVuY3Rpb24gaXNCaW5UcmFuc2Zvcm0odDogRmllbGREZWY8c3RyaW5nPiB8IEJpblRyYW5zZm9ybSk6IHQgaXMgQmluVHJhbnNmb3JtIHtcbiAgcmV0dXJuICdhcycgaW4gdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmluQ29tcG9uZW50KFxuICB0OiBGaWVsZERlZjxzdHJpbmc+IHwgQmluVHJhbnNmb3JtLFxuICBwYXJhbXM6IHttb2RlbDogTW9kZWx9IHwge3NpZ25hbD86IHN0cmluZywgZXh0ZW50U2lnbmFsPzogc3RyaW5nfVxuKSB7XG4gIGxldCBhczogW3N0cmluZywgc3RyaW5nXTtcblxuICBpZiAoaXNCaW5UcmFuc2Zvcm0odCkpIHtcbiAgICBhcyA9IFt0LmFzLCBgJHt0LmFzfV9lbmRgXTtcbiAgfSBlbHNlIHtcbiAgICBhcyA9IFt2Z0ZpZWxkKHQsIHt9KSwgdmdGaWVsZCh0LCB7YmluU3VmZml4OiAnZW5kJ30pXTtcbiAgfVxuXG4gIGNvbnN0IGJpbiA9IG5vcm1hbGl6ZUJpbih0LmJpbiwgdW5kZWZpbmVkKSB8fCB7fTtcbiAgY29uc3Qga2V5ID0gYmluS2V5KGJpbiwgdC5maWVsZCk7XG4gIGNvbnN0IHtzaWduYWwsIGV4dGVudFNpZ25hbH0gPSBnZXRTaWduYWxzRnJvbVBhcmFtcyhwYXJhbXMsIGtleSk7XG5cbiAgY29uc3QgYmluQ29tcG9uZW50OiBCaW5Db21wb25lbnQgPSB7XG4gICAgYmluOiBiaW4sXG4gICAgZmllbGQ6IHQuZmllbGQsXG4gICAgYXM6IGFzLFxuICAgIC4uLnNpZ25hbCA/IHtzaWduYWx9IDoge30sXG4gICAgLi4uZXh0ZW50U2lnbmFsID8ge2V4dGVudFNpZ25hbH0gOiB7fVxuICB9O1xuXG4gIHJldHVybiB7a2V5LCBiaW5Db21wb25lbnR9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbkNvbXBvbmVudCB7XG4gIGJpbjogQmluUGFyYW1zO1xuICBmaWVsZDogc3RyaW5nO1xuICBleHRlbnRTaWduYWw/OiBzdHJpbmc7XG4gIHNpZ25hbD86IHN0cmluZztcbiAgYXM6IHN0cmluZ1tdO1xuXG4gIC8vIFJhbmdlIEZvcm11bGFcblxuICBmb3JtdWxhPzogc3RyaW5nO1xuICBmb3JtdWxhQXM/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5Ob2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHVibGljIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQmluTm9kZShkdXBsaWNhdGUodGhpcy5iaW5zKSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJpbnM6IERpY3Q8QmluQ29tcG9uZW50Pikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2VCaW5Gcm9tRW5jb2RpbmcobW9kZWw6IE1vZGVsV2l0aEZpZWxkKSB7XG4gICAgY29uc3QgYmlucyA9IG1vZGVsLnJlZHVjZUZpZWxkRGVmKChiaW5Db21wb25lbnRJbmRleDogRGljdDxCaW5Db21wb25lbnQ+LCBmaWVsZERlZiwgY2hhbm5lbCkgPT4ge1xuICAgICAgaWYgKGZpZWxkRGVmLmJpbikge1xuICAgICAgICBjb25zdCB7a2V5LCBiaW5Db21wb25lbnR9ID0gY3JlYXRlQmluQ29tcG9uZW50KGZpZWxkRGVmLCB7bW9kZWx9KTtcbiAgICAgICAgYmluQ29tcG9uZW50SW5kZXhba2V5XSA9IHtcbiAgICAgICAgICAuLi5iaW5Db21wb25lbnQsXG4gICAgICAgICAgLi4uYmluQ29tcG9uZW50SW5kZXhba2V5XSxcbiAgICAgICAgICAuLi5yYW5nZUZvcm11bGEobW9kZWwsIGZpZWxkRGVmLCBjaGFubmVsLCBtb2RlbC5jb25maWcpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmluQ29tcG9uZW50SW5kZXg7XG4gICAgfSwge30pO1xuXG4gICAgaWYgKGtleXMoYmlucykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEJpbk5vZGUoYmlucyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGJpbiBub2RlIGZyb20gQmluVHJhbnNmb3JtLlxuICAgKiBUaGUgb3B0aW9uYWwgcGFyYW1ldGVyIHNob3VsZCBwcm92aWRlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG1ha2VGcm9tVHJhbnNmb3JtKHQ6IEJpblRyYW5zZm9ybSwgcGFyYW1zOiB7bW9kZWw6IE1vZGVsfSB8IHtzaWduYWw/OiBzdHJpbmcsIGV4dGVudFNpZ25hbD86IHN0cmluZ30pIHtcbiAgICBjb25zdCB7a2V5LCBiaW5Db21wb25lbnR9ID0gY3JlYXRlQmluQ29tcG9uZW50KHQsIHBhcmFtcyk7XG4gICAgcmV0dXJuIG5ldyBCaW5Ob2RlKHtcbiAgICAgIFtrZXldOiBiaW5Db21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBtZXJnZShvdGhlcjogQmluTm9kZSkge1xuICAgIHRoaXMuYmlucyA9IHsuLi50aGlzLmJpbnMsIC4uLm90aGVyLmJpbnN9O1xuICAgIG90aGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgdmFscyh0aGlzLmJpbnMpLmZvckVhY2goYyA9PiB7XG4gICAgICBjLmFzLmZvckVhY2goZiA9PiBvdXRbZl0gPSB0cnVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBwdWJsaWMgZGVwZW5kZW50RmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgdmFscyh0aGlzLmJpbnMpLmZvckVhY2goYyA9PiB7XG4gICAgICBvdXRbYy5maWVsZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ1RyYW5zZm9ybVtdIHtcbiAgICByZXR1cm4gZmxhdHRlbih2YWxzKHRoaXMuYmlucykubWFwKGJpbiA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm06IFZnVHJhbnNmb3JtW10gPSBbXTtcblxuICAgICAgY29uc3QgYmluVHJhbnM6IFZnQmluVHJhbnNmb3JtID0ge1xuICAgICAgICAgIHR5cGU6ICdiaW4nLFxuICAgICAgICAgIGZpZWxkOiBiaW4uZmllbGQsXG4gICAgICAgICAgYXM6IGJpbi5hcyxcbiAgICAgICAgICBzaWduYWw6IGJpbi5zaWduYWwsXG4gICAgICAgICAgLi4uYmluLmJpblxuICAgICAgfTtcblxuICAgICAgaWYgKCFiaW4uYmluLmV4dGVudCAmJiBiaW4uZXh0ZW50U2lnbmFsKSB7XG4gICAgICAgIHRyYW5zZm9ybS5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnZXh0ZW50JyxcbiAgICAgICAgICBmaWVsZDogYmluLmZpZWxkLFxuICAgICAgICAgIHNpZ25hbDogYmluLmV4dGVudFNpZ25hbFxuICAgICAgICB9KTtcbiAgICAgICAgYmluVHJhbnMuZXh0ZW50ID0ge3NpZ25hbDogYmluLmV4dGVudFNpZ25hbH07XG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybS5wdXNoKGJpblRyYW5zKTtcblxuICAgICAgaWYgKGJpbi5mb3JtdWxhKSB7XG4gICAgICAgIHRyYW5zZm9ybS5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnZm9ybXVsYScsXG4gICAgICAgICAgZXhwcjogYmluLmZvcm11bGEsXG4gICAgICAgICAgYXM6IGJpbi5mb3JtdWxhQXNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2Zvcm07XG4gICAgfSkpO1xuICB9XG59XG4iXX0=

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	/**
	 * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.
	 */
	var CalculateNode = /** @class */ (function (_super) {
	    __extends(CalculateNode, _super);
	    function CalculateNode(transform) {
	        var _this = _super.call(this) || this;
	        _this.transform = transform;
	        return _this;
	    }
	    CalculateNode.prototype.clone = function () {
	        return new CalculateNode(util_1.duplicate(this.transform));
	    };
	    CalculateNode.prototype.producedFields = function () {
	        var out = {};
	        out[this.transform.as] = true;
	        return out;
	    };
	    CalculateNode.prototype.assemble = function () {
	        return {
	            type: 'formula',
	            expr: this.transform.calculate,
	            as: this.transform.as
	        };
	    };
	    return CalculateNode;
	}(dataflow_1.DataFlowNode));
	exports.CalculateNode = CalculateNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9jYWxjdWxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsbUNBQXFDO0FBRXJDLHVDQUF3QztBQUV4Qzs7R0FFRztBQUNIO0lBQW1DLGlDQUFZO0lBSzdDLHVCQUFvQixTQUE2QjtRQUFqRCxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsZUFBUyxHQUFULFNBQVMsQ0FBb0I7O0lBRWpELENBQUM7SUFOTSw2QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLGdCQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQU1NLHNDQUFjLEdBQXJCO1FBQ0UsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQztZQUNMLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUztZQUM5QixFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1NBQ3RCLENBQUM7SUFDSixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBdEJELENBQW1DLHVCQUFZLEdBc0I5QztBQXRCWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2FsY3VsYXRlVHJhbnNmb3JtfSBmcm9tICcuLi8uLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0Zvcm11bGFUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuLyoqXG4gKiBXZSBkb24ndCBrbm93IHdoYXQgYSBjYWxjdWxhdGUgbm9kZSBkZXBlbmRzIG9uIHNvIHdlIHNob3VsZCBuZXZlciBtb3ZlIGl0IGJleW9uZCBhbnl0aGluZyB0aGF0IHByb2R1Y2VzIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENhbGN1bGF0ZU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDYWxjdWxhdGVOb2RlKGR1cGxpY2F0ZSh0aGlzLnRyYW5zZm9ybSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2Zvcm06IENhbGN1bGF0ZVRyYW5zZm9ybSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgb3V0W3RoaXMudHJhbnNmb3JtLmFzXSA9IHRydWU7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0Zvcm11bGFUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZm9ybXVsYScsXG4gICAgICBleHByOiB0aGlzLnRyYW5zZm9ybS5jYWxjdWxhdGUsXG4gICAgICBhczogdGhpcy50cmFuc2Zvcm0uYXNcbiAgICB9O1xuICB9XG59XG4iXX0=

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var predicate_1 = __webpack_require__(54);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var FilterNode = /** @class */ (function (_super) {
	    __extends(FilterNode, _super);
	    function FilterNode(model, filter) {
	        var _this = _super.call(this) || this;
	        _this.model = model;
	        _this.filter = filter;
	        _this.expr = predicate_1.expression(_this.model, _this.filter, _this);
	        return _this;
	    }
	    FilterNode.prototype.clone = function () {
	        return new FilterNode(this.model, util_1.duplicate(this.filter));
	    };
	    FilterNode.prototype.assemble = function () {
	        return {
	            type: 'filter',
	            expr: this.expr
	        };
	    };
	    return FilterNode;
	}(dataflow_1.DataFlowNode));
	exports.FilterNode = FilterNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsNkNBQXNEO0FBQ3RELG1DQUFxQztBQUdyQyx1Q0FBd0M7QUFFeEM7SUFBZ0MsOEJBQVk7SUFNMUMsb0JBQTZCLEtBQVksRUFBVSxNQUFpQztRQUFwRixZQUNFLGlCQUFPLFNBRVI7UUFINEIsV0FBSyxHQUFMLEtBQUssQ0FBTztRQUFVLFlBQU0sR0FBTixNQUFNLENBQTJCO1FBRWxGLEtBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQVUsQ0FBQyxLQUFJLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSSxDQUFDLENBQUM7O0lBQ3hELENBQUM7SUFQTSwwQkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBT00sNkJBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQztZQUNMLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBakJELENBQWdDLHVCQUFZLEdBaUIzQztBQWpCWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9naWNhbE9wZXJhbmR9IGZyb20gJy4uLy4uL2xvZ2ljYWwnO1xuaW1wb3J0IHtleHByZXNzaW9uLCBQcmVkaWNhdGV9IGZyb20gJy4uLy4uL3ByZWRpY2F0ZSc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnRmlsdGVyVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBleHByOiBzdHJpbmc7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlck5vZGUodGhpcy5tb2RlbCwgZHVwbGljYXRlKHRoaXMuZmlsdGVyKSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1vZGVsOiBNb2RlbCwgcHJpdmF0ZSBmaWx0ZXI6IExvZ2ljYWxPcGVyYW5kPFByZWRpY2F0ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZXhwciA9IGV4cHJlc3Npb24odGhpcy5tb2RlbCwgdGhpcy5maWx0ZXIsIHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnRmlsdGVyVHJhbnNmb3JtIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2ZpbHRlcicsXG4gICAgICBleHByOiB0aGlzLmV4cHJcbiAgICB9O1xuICB9XG59XG4iXX0=

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var GeoJSONNode = /** @class */ (function (_super) {
	    __extends(GeoJSONNode, _super);
	    function GeoJSONNode(fields, geojson, signal) {
	        var _this = _super.call(this) || this;
	        _this.fields = fields;
	        _this.geojson = geojson;
	        _this.signal = signal;
	        return _this;
	    }
	    GeoJSONNode.prototype.clone = function () {
	        return new GeoJSONNode(util_1.duplicate(this.fields), this.geojson, this.signal);
	    };
	    GeoJSONNode.makeAll = function (model) {
	        var nodes = [];
	        for (var _i = 0, _a = [[channel_1.X, channel_1.Y], [channel_1.X2, channel_1.Y2]]; _i < _a.length; _i++) {
	            var coordinates = _a[_i];
	            var pair = {};
	            for (var _b = 0, coordinates_1 = coordinates; _b < coordinates_1.length; _b++) {
	                var channel = coordinates_1[_b];
	                if (model.channelHasField(channel)) {
	                    var fieldDef = model.fieldDef(channel);
	                    if (util_1.contains([type_1.LATITUDE, type_1.LONGITUDE], fieldDef.type)) {
	                        pair[fieldDef.type] = fieldDef.field;
	                    }
	                }
	            }
	            if (type_1.LONGITUDE in pair || type_1.LATITUDE in pair) {
	                nodes.push(new GeoJSONNode([pair[type_1.LONGITUDE], pair[type_1.LATITUDE]], null, model.getName("geojson_" + nodes.length)));
	            }
	        }
	        if (model.channelHasField(channel_1.SHAPE)) {
	            var fieldDef = model.fieldDef(channel_1.SHAPE);
	            if (fieldDef.type === type_1.GEOJSON) {
	                nodes.push(new GeoJSONNode(null, fieldDef.field, model.getName("geojson_" + nodes.length)));
	            }
	        }
	        return nodes;
	    };
	    GeoJSONNode.prototype.assemble = function () {
	        return __assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {}), (this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal });
	    };
	    return GeoJSONNode;
	}(dataflow_1.DataFlowNode));
	exports.GeoJSONNode = GeoJSONNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZ2VvanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHlDQUFrRDtBQUNsRCxtQ0FBd0Q7QUFDeEQsbUNBQXFEO0FBR3JELHVDQUF3QztBQUV4QztJQUFpQywrQkFBWTtJQWtDM0MscUJBQW9CLE1BQWlCLEVBQVUsT0FBZ0IsRUFBVSxNQUFlO1FBQXhGLFlBQ0UsaUJBQU8sU0FDUjtRQUZtQixZQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsYUFBTyxHQUFQLE9BQU8sQ0FBUztRQUFVLFlBQU0sR0FBTixNQUFNLENBQVM7O0lBRXhGLENBQUM7SUFuQ00sMkJBQUssR0FBWjtRQUNFLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxnQkFBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRWEsbUJBQU8sR0FBckIsVUFBc0IsS0FBcUI7UUFDekMsSUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUVoQyxHQUFHLENBQUMsQ0FBc0IsVUFBa0IsRUFBbEIsTUFBQyxDQUFDLFdBQUMsRUFBRSxXQUFDLENBQUMsRUFBRSxDQUFDLFlBQUUsRUFBRSxZQUFFLENBQUMsQ0FBQyxFQUFsQixjQUFrQixFQUFsQixJQUFrQjtZQUF2QyxJQUFNLFdBQVcsU0FBQTtZQUNwQixJQUFNLElBQUksR0FBaUIsRUFBRSxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxDQUFrQixVQUFXLEVBQVgsMkJBQVcsRUFBWCx5QkFBVyxFQUFYLElBQVc7Z0JBQTVCLElBQU0sT0FBTyxvQkFBQTtnQkFDaEIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25DLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLGVBQVEsQ0FBQyxDQUFDLGVBQVEsRUFBRSxnQkFBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO29CQUN2QyxDQUFDO2dCQUNILENBQUM7YUFDRjtZQUVELEVBQUUsQ0FBQyxDQUFDLGdCQUFTLElBQUksSUFBSSxJQUFJLGVBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFXLEtBQUssQ0FBQyxNQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakgsQ0FBQztTQUNGO1FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxlQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFLLENBQUMsQ0FBQztZQUN2QyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLGNBQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFXLEtBQUssQ0FBQyxNQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUYsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQU1NLDhCQUFRLEdBQWY7UUFDRSxNQUFNLFlBQ0osSUFBSSxFQUFFLFNBQVMsSUFDWixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQzFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDaEQsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQ25CO0lBQ0osQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQTlDRCxDQUFpQyx1QkFBWSxHQThDNUM7QUE5Q1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NIQVBFLCBYLCBYMiwgWSwgWTJ9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtHRU9KU09OLCBMQVRJVFVERSwgTE9OR0lUVURFfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7Y29udGFpbnMsIERpY3QsIGR1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnR2VvSlNPTlRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbFdpdGhGaWVsZH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgR2VvSlNPTk5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBHZW9KU09OTm9kZShkdXBsaWNhdGUodGhpcy5maWVsZHMpLCB0aGlzLmdlb2pzb24sIHRoaXMuc2lnbmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUFsbChtb2RlbDogTW9kZWxXaXRoRmllbGQpOiBHZW9KU09OTm9kZVtdIHtcbiAgICBjb25zdCBub2RlczogR2VvSlNPTk5vZGVbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBjb29yZGluYXRlcyBvZiBbW1gsIFldLCBbWDIsIFkyXV0pIHtcbiAgICAgIGNvbnN0IHBhaXI6IERpY3Q8c3RyaW5nPiA9IHt9O1xuICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIGNvb3JkaW5hdGVzKSB7XG4gICAgICAgIGlmIChtb2RlbC5jaGFubmVsSGFzRmllbGQoY2hhbm5lbCkpIHtcbiAgICAgICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgICAgICAgIGlmIChjb250YWlucyhbTEFUSVRVREUsIExPTkdJVFVERV0sIGZpZWxkRGVmLnR5cGUpKSB7XG4gICAgICAgICAgICBwYWlyW2ZpZWxkRGVmLnR5cGVdID0gZmllbGREZWYuZmllbGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChMT05HSVRVREUgaW4gcGFpciB8fCBMQVRJVFVERSBpbiBwYWlyKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobmV3IEdlb0pTT05Ob2RlKFtwYWlyW0xPTkdJVFVERV0sIHBhaXJbTEFUSVRVREVdXSwgbnVsbCwgbW9kZWwuZ2V0TmFtZShgZ2VvanNvbl8ke25vZGVzLmxlbmd0aH1gKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2RlbC5jaGFubmVsSGFzRmllbGQoU0hBUEUpKSB7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKFNIQVBFKTtcbiAgICAgIGlmIChmaWVsZERlZi50eXBlID09PSBHRU9KU09OKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobmV3IEdlb0pTT05Ob2RlKG51bGwsIGZpZWxkRGVmLmZpZWxkLCBtb2RlbC5nZXROYW1lKGBnZW9qc29uXyR7bm9kZXMubGVuZ3RofWApKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmaWVsZHM/OiBzdHJpbmdbXSwgcHJpdmF0ZSBnZW9qc29uPzogc3RyaW5nLCBwcml2YXRlIHNpZ25hbD86IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdHZW9KU09OVHJhbnNmb3JtIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2dlb2pzb24nLFxuICAgICAgLi4uKHRoaXMuZmllbGRzID8ge2ZpZWxkczogdGhpcy5maWVsZHN9IDoge30pLFxuICAgICAgLi4uKHRoaXMuZ2VvanNvbiA/IHtnZW9qc29uOiB0aGlzLmdlb2pzb259IDoge30pLFxuICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgIH07XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var dataflow_1 = __webpack_require__(82);
	var GeoPointNode = /** @class */ (function (_super) {
	    __extends(GeoPointNode, _super);
	    function GeoPointNode(projection, fields, as) {
	        var _this = _super.call(this) || this;
	        _this.projection = projection;
	        _this.fields = fields;
	        _this.as = as;
	        return _this;
	    }
	    GeoPointNode.prototype.clone = function () {
	        return new GeoPointNode(this.projection, util_1.duplicate(this.fields), util_1.duplicate(this.as));
	    };
	    GeoPointNode.makeAll = function (model) {
	        var nodes = [];
	        if (!model.projectionName()) {
	            return nodes;
	        }
	        for (var _i = 0, _a = [[channel_1.X, channel_1.Y], [channel_1.X2, channel_1.Y2]]; _i < _a.length; _i++) {
	            var coordinates = _a[_i];
	            var pair = {};
	            for (var _b = 0, coordinates_1 = coordinates; _b < coordinates_1.length; _b++) {
	                var channel = coordinates_1[_b];
	                if (model.channelHasField(channel)) {
	                    var fieldDef = model.fieldDef(channel);
	                    if (util_1.contains([type_1.LATITUDE, type_1.LONGITUDE], fieldDef.type)) {
	                        pair[fieldDef.type] = fieldDef.field;
	                    }
	                }
	            }
	            if (type_1.LONGITUDE in pair || type_1.LATITUDE in pair) {
	                nodes.push(new GeoPointNode(model.projectionName(), [pair[type_1.LONGITUDE], pair[type_1.LATITUDE]], [pair[type_1.LONGITUDE] + '_geo', pair[type_1.LATITUDE] + '_geo']));
	            }
	        }
	        return nodes;
	    };
	    GeoPointNode.prototype.assemble = function () {
	        return {
	            type: 'geopoint',
	            projection: this.projection,
	            fields: this.fields,
	            as: this.as
	        };
	    };
	    return GeoPointNode;
	}(dataflow_1.DataFlowNode));
	exports.GeoPointNode = GeoPointNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2dlb3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHlDQUEyQztBQUMzQyxtQ0FBK0M7QUFDL0MsbUNBQXFEO0FBR3JELHVDQUF3QztBQUd4QztJQUFrQyxnQ0FBWTtJQUs1QyxzQkFBb0IsVUFBa0IsRUFBVSxNQUFnQixFQUFVLEVBQVk7UUFBdEYsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLGdCQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVUsWUFBTSxHQUFOLE1BQU0sQ0FBVTtRQUFVLFFBQUUsR0FBRixFQUFFLENBQVU7O0lBRXRGLENBQUM7SUFOTSw0QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBTWEsb0JBQU8sR0FBckIsVUFBc0IsS0FBcUI7UUFDekMsSUFBTSxLQUFLLEdBQW1CLEVBQUUsQ0FBQztRQUVqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxHQUFHLENBQUMsQ0FBc0IsVUFBa0IsRUFBbEIsTUFBQyxDQUFDLFdBQUMsRUFBRSxXQUFDLENBQUMsRUFBRSxDQUFDLFlBQUUsRUFBRSxZQUFFLENBQUMsQ0FBQyxFQUFsQixjQUFrQixFQUFsQixJQUFrQjtZQUF2QyxJQUFNLFdBQVcsU0FBQTtZQUNwQixJQUFNLElBQUksR0FBaUIsRUFBRSxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxDQUFrQixVQUFXLEVBQVgsMkJBQVcsRUFBWCx5QkFBVyxFQUFYLElBQVc7Z0JBQTVCLElBQU0sT0FBTyxvQkFBQTtnQkFDaEIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25DLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLGVBQVEsQ0FBQyxDQUFDLGVBQVEsRUFBRSxnQkFBUyxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO29CQUN2QyxDQUFDO2dCQUNILENBQUM7YUFDRjtZQUVELEVBQUUsQ0FBQyxDQUFDLGdCQUFTLElBQUksSUFBSSxJQUFJLGVBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLGVBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxHQUFHLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9JLENBQUM7U0FDRjtRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQztZQUNMLElBQUksRUFBRSxVQUFVO1lBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1NBQ1osQ0FBQztJQUNKLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUEzQ0QsQ0FBa0MsdUJBQVksR0EyQzdDO0FBM0NZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtYLCBYMiwgWSwgWTJ9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtMQVRJVFVERSwgTE9OR0lUVURFfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7Y29udGFpbnMsIERpY3QsIGR1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnR2VvUG9pbnRUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7TW9kZWxXaXRoRmllbGR9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuXG5leHBvcnQgY2xhc3MgR2VvUG9pbnROb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHVibGljIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgR2VvUG9pbnROb2RlKHRoaXMucHJvamVjdGlvbiwgZHVwbGljYXRlKHRoaXMuZmllbGRzKSwgZHVwbGljYXRlKHRoaXMuYXMpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvamVjdGlvbjogc3RyaW5nLCBwcml2YXRlIGZpZWxkczogc3RyaW5nW10sIHByaXZhdGUgYXM6IHN0cmluZ1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUFsbChtb2RlbDogTW9kZWxXaXRoRmllbGQpOiBHZW9Qb2ludE5vZGVbXSB7XG4gICAgY29uc3Qgbm9kZXM6IEdlb1BvaW50Tm9kZVtdID0gW107XG5cbiAgICBpZiAoIW1vZGVsLnByb2plY3Rpb25OYW1lKCkpIHtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNvb3JkaW5hdGVzIG9mIFtbWCwgWV0sIFtYMiwgWTJdXSkge1xuICAgICAgY29uc3QgcGFpcjogRGljdDxzdHJpbmc+ID0ge307XG4gICAgICBmb3IgKGNvbnN0IGNoYW5uZWwgb2YgY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgaWYgKG1vZGVsLmNoYW5uZWxIYXNGaWVsZChjaGFubmVsKSkge1xuICAgICAgICAgIGNvbnN0IGZpZWxkRGVmID0gbW9kZWwuZmllbGREZWYoY2hhbm5lbCk7XG4gICAgICAgICAgaWYgKGNvbnRhaW5zKFtMQVRJVFVERSwgTE9OR0lUVURFXSwgZmllbGREZWYudHlwZSkpIHtcbiAgICAgICAgICAgIHBhaXJbZmllbGREZWYudHlwZV0gPSBmaWVsZERlZi5maWVsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKExPTkdJVFVERSBpbiBwYWlyIHx8IExBVElUVURFIGluIHBhaXIpIHtcbiAgICAgICAgbm9kZXMucHVzaChuZXcgR2VvUG9pbnROb2RlKG1vZGVsLnByb2plY3Rpb25OYW1lKCksIFtwYWlyW0xPTkdJVFVERV0sIHBhaXJbTEFUSVRVREVdXSwgW3BhaXJbTE9OR0lUVURFXSArICdfZ2VvJywgcGFpcltMQVRJVFVERV0gKyAnX2dlbyddKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnR2VvUG9pbnRUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZ2VvcG9pbnQnLFxuICAgICAgcHJvamVjdGlvbjogdGhpcy5wcm9qZWN0aW9uLFxuICAgICAgZmllbGRzOiB0aGlzLmZpZWxkcyxcbiAgICAgIGFzOiB0aGlzLmFzXG4gICAgfTtcbiAgfVxufVxuIl19

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var selection_1 = __webpack_require__(40);
	var dataflow_1 = __webpack_require__(82);
	var IdentifierNode = /** @class */ (function (_super) {
	    __extends(IdentifierNode, _super);
	    function IdentifierNode() {
	        return _super.call(this) || this;
	    }
	    IdentifierNode.prototype.clone = function () {
	        return new IdentifierNode();
	    };
	    IdentifierNode.prototype.producedFields = function () {
	        return _a = {}, _a[selection_1.SELECTION_ID] = true, _a;
	        var _a;
	    };
	    IdentifierNode.prototype.assemble = function () {
	        return { type: 'identifier', as: selection_1.SELECTION_ID };
	    };
	    return IdentifierNode;
	}(dataflow_1.DataFlowNode));
	exports.IdentifierNode = IdentifierNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZW50aWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2luZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZDQUE2QztBQUU3Qyx1Q0FBd0M7QUFFeEM7SUFBb0Msa0NBQVk7SUFLOUM7ZUFDRSxpQkFBTztJQUNULENBQUM7SUFOTSw4QkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLElBQUksY0FBYyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQU1NLHVDQUFjLEdBQXJCO1FBQ0UsTUFBTSxVQUFFLEdBQUMsd0JBQVksSUFBRyxJQUFJLEtBQUU7O0lBQ2hDLENBQUM7SUFFTSxpQ0FBUSxHQUFmO1FBQ0UsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsd0JBQVksRUFBQyxDQUFDO0lBQ2hELENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFoQkQsQ0FBb0MsdUJBQVksR0FnQi9DO0FBaEJZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTRUxFQ1RJT05fSUR9IGZyb20gJy4uLy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1ZnSWRlbnRpZmllclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgSWRlbnRpZmllck5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyTm9kZSgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpIHtcbiAgICByZXR1cm4ge1tTRUxFQ1RJT05fSURdOiB0cnVlfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0lkZW50aWZpZXJUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7dHlwZTogJ2lkZW50aWZpZXInLCBhczogU0VMRUNUSU9OX0lEfTtcbiAgfVxufVxuIl19

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var log = __webpack_require__(29);
	var dataflow_1 = __webpack_require__(82);
	var source_1 = __webpack_require__(87);
	var LookupNode = /** @class */ (function (_super) {
	    __extends(LookupNode, _super);
	    function LookupNode(transform, secondary) {
	        var _this = _super.call(this) || this;
	        _this.transform = transform;
	        _this.secondary = secondary;
	        return _this;
	    }
	    LookupNode.make = function (model, transform, counter) {
	        var sources = model.component.data.sources;
	        var s = new source_1.SourceNode(transform.from.data);
	        var fromSource = sources[s.hash()];
	        if (!fromSource) {
	            sources[s.hash()] = s;
	            fromSource = s;
	        }
	        var fromOutputName = model.getName("lookup_" + counter);
	        var fromOutputNode = new dataflow_1.OutputNode(fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);
	        fromOutputNode.parent = fromSource;
	        model.component.data.outputNodes[fromOutputName] = fromOutputNode;
	        return new LookupNode(transform, fromOutputNode.getSource());
	    };
	    LookupNode.prototype.producedFields = function () {
	        return vega_util_1.toSet(this.transform.from.fields || ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]));
	    };
	    LookupNode.prototype.assemble = function () {
	        var foreign;
	        if (this.transform.from.fields) {
	            // lookup a few fields and add create a flat output
	            foreign = __assign({ values: this.transform.from.fields }, this.transform.as ? { as: ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]) } : {});
	        }
	        else {
	            // lookup full record and nest it
	            var asName = this.transform.as;
	            if (!vega_util_1.isString(asName)) {
	                log.warn(log.message.NO_FIELDS_NEEDS_AS);
	                asName = '_lookup';
	            }
	            foreign = {
	                as: [asName]
	            };
	        }
	        return __assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign, (this.transform.default ? { default: this.transform.default } : {}));
	    };
	    return LookupNode;
	}(dataflow_1.DataFlowNode));
	exports.LookupNode = LookupNode;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9sb29rdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBMEM7QUFDMUMsK0JBQWlDO0FBS2pDLHVDQUFvRDtBQUNwRCxtQ0FBb0M7QUFFcEM7SUFBZ0MsOEJBQVk7SUFDMUMsb0JBQTRCLFNBQTBCLEVBQWtCLFNBQWlCO1FBQXpGLFlBQ0UsaUJBQU8sU0FDUjtRQUYyQixlQUFTLEdBQVQsU0FBUyxDQUFpQjtRQUFrQixlQUFTLEdBQVQsU0FBUyxDQUFROztJQUV6RixDQUFDO0lBRWEsZUFBSSxHQUFsQixVQUFtQixLQUFZLEVBQUUsU0FBMEIsRUFBRSxPQUFlO1FBQzFFLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QyxJQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNqQixDQUFDO1FBRUQsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFVLE9BQVMsQ0FBQyxDQUFDO1FBQzFELElBQU0sY0FBYyxHQUFHLElBQUkscUJBQVUsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDMUcsY0FBYyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7UUFFbkMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLGNBQWMsQ0FBQztRQUVsRSxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTSxtQ0FBYyxHQUFyQjtRQUNFLE1BQU0sQ0FBQyxpQkFBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ILENBQUM7SUFFTSw2QkFBUSxHQUFmO1FBQ0UsSUFBSSxPQUFtQyxDQUFDO1FBRXhDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDL0IsbURBQW1EO1lBQ25ELE9BQU8sY0FDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNwSCxDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04saUNBQWlDO1lBQ2pDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ3JCLENBQUM7WUFFRCxPQUFPLEdBQUc7Z0JBQ1IsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQ2IsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLFlBQ0osSUFBSSxFQUFFLFFBQVEsRUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDcEIsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFDNUIsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFDNUIsT0FBTyxFQUNQLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNwRTtJQUNKLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUExREQsQ0FBZ0MsdUJBQVksR0EwRDNDO0FBMURZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1N0cmluZywgdG9TZXR9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vbG9nJztcbmltcG9ydCB7TG9va3VwVHJhbnNmb3JtfSBmcm9tICcuLi8uLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHtTdHJpbmdTZXR9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0xvb2t1cFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGUsIE91dHB1dE5vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuaW1wb3J0IHtTb3VyY2VOb2RlfSBmcm9tICcuL3NvdXJjZSc7XG5cbmV4cG9ydCBjbGFzcyBMb29rdXBOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHRyYW5zZm9ybTogTG9va3VwVHJhbnNmb3JtLCBwdWJsaWMgcmVhZG9ubHkgc2Vjb25kYXJ5OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBtYWtlKG1vZGVsOiBNb2RlbCwgdHJhbnNmb3JtOiBMb29rdXBUcmFuc2Zvcm0sIGNvdW50ZXI6IG51bWJlcikge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBtb2RlbC5jb21wb25lbnQuZGF0YS5zb3VyY2VzO1xuICAgIGNvbnN0IHMgPSBuZXcgU291cmNlTm9kZSh0cmFuc2Zvcm0uZnJvbS5kYXRhKTtcbiAgICBsZXQgZnJvbVNvdXJjZSA9IHNvdXJjZXNbcy5oYXNoKCldO1xuICAgIGlmICghZnJvbVNvdXJjZSkge1xuICAgICAgc291cmNlc1tzLmhhc2goKV0gPSBzO1xuICAgICAgZnJvbVNvdXJjZSA9IHM7XG4gICAgfVxuXG4gICAgY29uc3QgZnJvbU91dHB1dE5hbWUgPSBtb2RlbC5nZXROYW1lKGBsb29rdXBfJHtjb3VudGVyfWApO1xuICAgIGNvbnN0IGZyb21PdXRwdXROb2RlID0gbmV3IE91dHB1dE5vZGUoZnJvbU91dHB1dE5hbWUsICdsb29rdXAnLCBtb2RlbC5jb21wb25lbnQuZGF0YS5vdXRwdXROb2RlUmVmQ291bnRzKTtcbiAgICBmcm9tT3V0cHV0Tm9kZS5wYXJlbnQgPSBmcm9tU291cmNlO1xuXG4gICAgbW9kZWwuY29tcG9uZW50LmRhdGEub3V0cHV0Tm9kZXNbZnJvbU91dHB1dE5hbWVdID0gZnJvbU91dHB1dE5vZGU7XG5cbiAgICByZXR1cm4gbmV3IExvb2t1cE5vZGUodHJhbnNmb3JtLCBmcm9tT3V0cHV0Tm9kZS5nZXRTb3VyY2UoKSk7XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKTogU3RyaW5nU2V0IHtcbiAgICByZXR1cm4gdG9TZXQodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMgfHwgKCh0aGlzLnRyYW5zZm9ybS5hcyBpbnN0YW5jZW9mIEFycmF5KSA/IHRoaXMudHJhbnNmb3JtLmFzIDogW3RoaXMudHJhbnNmb3JtLmFzXSkpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnTG9va3VwVHJhbnNmb3JtIHtcbiAgICBsZXQgZm9yZWlnbjogUGFydGlhbDxWZ0xvb2t1cFRyYW5zZm9ybT47XG5cbiAgICBpZiAodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMpIHtcbiAgICAgIC8vIGxvb2t1cCBhIGZldyBmaWVsZHMgYW5kIGFkZCBjcmVhdGUgYSBmbGF0IG91dHB1dFxuICAgICAgZm9yZWlnbiA9IHtcbiAgICAgICAgdmFsdWVzOiB0aGlzLnRyYW5zZm9ybS5mcm9tLmZpZWxkcyxcbiAgICAgICAgLi4uIHRoaXMudHJhbnNmb3JtLmFzID8ge2FzOiAoKHRoaXMudHJhbnNmb3JtLmFzIGluc3RhbmNlb2YgQXJyYXkpID8gdGhpcy50cmFuc2Zvcm0uYXMgOiBbdGhpcy50cmFuc2Zvcm0uYXNdKX0gOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbG9va3VwIGZ1bGwgcmVjb3JkIGFuZCBuZXN0IGl0XG4gICAgICBsZXQgYXNOYW1lID0gdGhpcy50cmFuc2Zvcm0uYXM7XG4gICAgICBpZiAoIWlzU3RyaW5nKGFzTmFtZSkpIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuTk9fRklFTERTX05FRURTX0FTKTtcbiAgICAgICAgYXNOYW1lID0gJ19sb29rdXAnO1xuICAgICAgfVxuXG4gICAgICBmb3JlaWduID0ge1xuICAgICAgICBhczogW2FzTmFtZV1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsb29rdXAnLFxuICAgICAgZnJvbTogdGhpcy5zZWNvbmRhcnksXG4gICAgICBrZXk6IHRoaXMudHJhbnNmb3JtLmZyb20ua2V5LFxuICAgICAgZmllbGRzOiBbdGhpcy50cmFuc2Zvcm0ubG9va3VwXSxcbiAgICAgIC4uLmZvcmVpZ24sXG4gICAgICAuLi4odGhpcy50cmFuc2Zvcm0uZGVmYXVsdCA/IHtkZWZhdWx0OiB0aGlzLnRyYW5zZm9ybS5kZWZhdWx0fSA6IHt9KVxuICAgIH07XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var scale_1 = __webpack_require__(39);
	var vega_schema_1 = __webpack_require__(59);
	var split_1 = __webpack_require__(67);
	function parseLayerLayoutSize(model) {
	    parseChildrenLayoutSize(model);
	    var layoutSizeCmpt = model.component.layoutSize;
	    layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));
	    layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));
	}
	exports.parseLayerLayoutSize = parseLayerLayoutSize;
	exports.parseRepeatLayoutSize = parseLayerLayoutSize;
	function parseConcatLayoutSize(model) {
	    parseChildrenLayoutSize(model);
	    var layoutSizeCmpt = model.component.layoutSize;
	    var sizeTypeToMerge = model.isVConcat ? 'width' : 'height';
	    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));
	}
	exports.parseConcatLayoutSize = parseConcatLayoutSize;
	function parseChildrenLayoutSize(model) {
	    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	        var child = _a[_i];
	        child.parseLayoutSize();
	    }
	}
	exports.parseChildrenLayoutSize = parseChildrenLayoutSize;
	function parseNonUnitLayoutSizeForChannel(model, sizeType) {
	    var channel = sizeType === 'width' ? 'x' : 'y';
	    var resolve = model.component.resolve;
	    var mergedSize;
	    // Try to merge layout size
	    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {
	        var child = _a[_i];
	        var childSize = child.component.layoutSize.getWithExplicit(sizeType);
	        var scaleResolve = resolve.scale[channel];
	        if (scaleResolve === 'independent' && childSize.value === 'range-step') {
	            // Do not merge independent scales with range-step as their size depends
	            // on the scale domains, which can be different between scales.
	            mergedSize = undefined;
	            break;
	        }
	        if (mergedSize) {
	            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
	                // For independent scale, only merge if all the sizes are the same.
	                // If the values are different, abandon the merge!
	                mergedSize = undefined;
	                break;
	            }
	            mergedSize = split_1.mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');
	        }
	        else {
	            mergedSize = childSize;
	        }
	    }
	    if (mergedSize) {
	        // If merged, rename size and set size of all children.
	        for (var _b = 0, _c = model.children; _b < _c.length; _b++) {
	            var child = _c[_b];
	            model.renameLayoutSize(child.getName(sizeType), model.getName(sizeType));
	            child.component.layoutSize.set(sizeType, 'merged', false);
	        }
	        return mergedSize;
	    }
	    else {
	        // Otherwise, there is no merged size.
	        return {
	            explicit: false,
	            value: undefined
	        };
	    }
	}
	function parseUnitLayoutSize(model) {
	    var layoutSizeComponent = model.component.layoutSize;
	    if (!layoutSizeComponent.explicit.width) {
	        var width = defaultUnitSize(model, 'width');
	        layoutSizeComponent.set('width', width, false);
	    }
	    if (!layoutSizeComponent.explicit.height) {
	        var height = defaultUnitSize(model, 'height');
	        layoutSizeComponent.set('height', height, false);
	    }
	}
	exports.parseUnitLayoutSize = parseUnitLayoutSize;
	function defaultUnitSize(model, sizeType) {
	    var channel = sizeType === 'width' ? 'x' : 'y';
	    var config = model.config;
	    var scaleComponent = model.getScaleComponent(channel);
	    if (scaleComponent) {
	        var scaleType = scaleComponent.get('type');
	        var range = scaleComponent.get('range');
	        if (scale_1.hasDiscreteDomain(scaleType) && vega_schema_1.isVgRangeStep(range)) {
	            // For discrete domain with range.step, use dynamic width/height
	            return 'range-step';
	        }
	        else {
	            return config.view[sizeType];
	        }
	    }
	    else {
	        // No scale - set default size
	        if (sizeType === 'width' && model.mark() === 'text') {
	            // width for text mark without x-field is a bit wider than typical range step
	            return config.scale.textXRangeStep;
	        }
	        // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.
	        return config.scale.rangeStep || scale_1.defaultScaleConfig.rangeStep;
	    }
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var util_1 = __webpack_require__(14);
	var vega_schema_1 = __webpack_require__(59);
	var buildmodel_1 = __webpack_require__(49);
	var assemble_1 = __webpack_require__(115);
	var parse_1 = __webpack_require__(52);
	var header_1 = __webpack_require__(61);
	var parse_2 = __webpack_require__(113);
	var model_1 = __webpack_require__(57);
	var repeater_1 = __webpack_require__(116);
	var resolve_1 = __webpack_require__(66);
	var domain_1 = __webpack_require__(78);
	var FacetModel = /** @class */ (function (_super) {
	    __extends(FacetModel, _super);
	    function FacetModel(spec, parent, parentGivenName, repeater, config) {
	        var _this = _super.call(this, spec, parent, parentGivenName, config, spec.resolve) || this;
	        _this.type = 'facet';
	        _this.child = buildmodel_1.buildModel(spec.spec, _this, _this.getName('child'), undefined, repeater, config, false);
	        _this.children = [_this.child];
	        var facet = repeater_1.replaceRepeaterInFacet(spec.facet, repeater);
	        _this.facet = _this.initFacet(facet);
	        return _this;
	    }
	    FacetModel.prototype.initFacet = function (facet) {
	        // clone to prevent side effect to the original spec
	        return encoding_1.reduce(facet, function (normalizedFacet, fieldDef, channel) {
	            if (!util_1.contains([channel_1.ROW, channel_1.COLUMN], channel)) {
	                // Drop unsupported channel
	                log.warn(log.message.incompatibleChannel(channel, 'facet'));
	                return normalizedFacet;
	            }
	            if (fieldDef.field === undefined) {
	                log.warn(log.message.emptyFieldDef(fieldDef, channel));
	                return normalizedFacet;
	            }
	            // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
	            normalizedFacet[channel] = fielddef_1.normalize(fieldDef, channel);
	            return normalizedFacet;
	        }, {});
	    };
	    FacetModel.prototype.channelHasField = function (channel) {
	        return !!this.facet[channel];
	    };
	    FacetModel.prototype.fieldDef = function (channel) {
	        return this.facet[channel];
	    };
	    FacetModel.prototype.parseData = function () {
	        this.component.data = parse_1.parseData(this);
	        this.child.parseData();
	    };
	    FacetModel.prototype.parseLayoutSize = function () {
	        parse_2.parseChildrenLayoutSize(this);
	    };
	    FacetModel.prototype.parseSelection = function () {
	        // As a facet has a single child, the selection components are the same.
	        // The child maintains its selections to assemble signals, which remain
	        // within its unit.
	        this.child.parseSelection();
	        this.component.selection = this.child.component.selection;
	    };
	    FacetModel.prototype.parseMarkGroup = function () {
	        this.child.parseMarkGroup();
	    };
	    FacetModel.prototype.parseAxisAndHeader = function () {
	        this.child.parseAxisAndHeader();
	        this.parseHeader('column');
	        this.parseHeader('row');
	        this.mergeChildAxis('x');
	        this.mergeChildAxis('y');
	    };
	    FacetModel.prototype.parseHeader = function (channel) {
	        if (this.channelHasField(channel)) {
	            var fieldDef = this.facet[channel];
	            var header = fieldDef.header || {};
	            var title = header.title !== undefined ? header.title : fielddef_1.title(fieldDef, this.config);
	            if (this.child.component.layoutHeaders[channel].title) {
	                // merge title with child to produce "Title / Subtitle / Sub-subtitle"
	                title += ' / ' + this.child.component.layoutHeaders[channel].title;
	                this.child.component.layoutHeaders[channel].title = null;
	            }
	            this.component.layoutHeaders[channel] = {
	                title: title,
	                facetFieldDef: fieldDef,
	                // TODO: support adding label to footer as well
	                header: [this.makeHeaderComponent(channel, true)]
	            };
	        }
	    };
	    FacetModel.prototype.makeHeaderComponent = function (channel, labels) {
	        var sizeType = channel === 'row' ? 'height' : 'width';
	        return {
	            labels: labels,
	            sizeSignal: this.child.component.layoutSize.get(sizeType) ? this.child.getSizeSignalRef(sizeType) : undefined,
	            axes: []
	        };
	    };
	    FacetModel.prototype.mergeChildAxis = function (channel) {
	        var child = this.child;
	        if (child.component.axes[channel]) {
	            var _a = this.component, layoutHeaders = _a.layoutHeaders, resolve = _a.resolve;
	            resolve.axis[channel] = resolve_1.parseGuideResolve(resolve, channel);
	            if (resolve.axis[channel] === 'shared') {
	                // For shared axis, move the axes to facet's header or footer
	                var headerChannel = channel === 'x' ? 'column' : 'row';
	                var layoutHeader = layoutHeaders[headerChannel];
	                for (var _i = 0, _b = child.component.axes[channel]; _i < _b.length; _i++) {
	                    var axisComponent = _b[_i];
	                    var mainAxis = axisComponent.main;
	                    var headerType = header_1.getHeaderType(mainAxis.get('orient'));
	                    layoutHeader[headerType] = layoutHeader[headerType] ||
	                        [this.makeHeaderComponent(headerChannel, false)];
	                    // LayoutHeader no longer keep track of property precedence, thus let's combine.
	                    layoutHeader[headerType][0].axes.push(mainAxis.combine());
	                    delete axisComponent.main;
	                }
	            }
	            else {
	                // Otherwise do nothing for independent axes
	            }
	        }
	    };
	    FacetModel.prototype.assembleSelectionTopLevelSignals = function (signals) {
	        return this.child.assembleSelectionTopLevelSignals(signals);
	    };
	    FacetModel.prototype.assembleSelectionSignals = function () {
	        this.child.assembleSelectionSignals();
	        return [];
	    };
	    FacetModel.prototype.assembleSelectionData = function (data) {
	        return this.child.assembleSelectionData(data);
	    };
	    FacetModel.prototype.getLayoutBandMixins = function (headerType) {
	        var bandMixins = {};
	        var bandType = headerType === 'header' ? 'headerBand' : 'footerBand';
	        for (var _i = 0, _a = ['row', 'column']; _i < _a.length; _i++) {
	            var channel = _a[_i];
	            var layoutHeaderComponent = this.component.layoutHeaders[channel];
	            var headerComponent = layoutHeaderComponent[headerType];
	            if (headerComponent && headerComponent[0]) {
	                var sizeType = channel === 'row' ? 'height' : 'width';
	                if (!this.child.component.layoutSize.get(sizeType)) {
	                    // If facet child does not have size signal, then apply headerBand
	                    bandMixins[bandType] = bandMixins[bandType] || {};
	                    bandMixins[bandType][channel] = 0.5;
	                }
	            }
	        }
	        return bandMixins;
	    };
	    FacetModel.prototype.assembleLayout = function () {
	        var columns = this.channelHasField('column') ? this.columnDistinctSignal() : 1;
	        // TODO: determine default align based on shared / independent scales
	        return __assign({ padding: { row: 10, column: 10 } }, this.getLayoutBandMixins('header'), this.getLayoutBandMixins('footer'), { 
	            // TODO: support offset for rowHeader/rowFooter/rowTitle/columnHeader/columnFooter/columnTitle
	            offset: 10, columns: columns, bounds: 'full', align: 'all' });
	    };
	    FacetModel.prototype.assembleLayoutSignals = function () {
	        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
	        return this.child.assembleLayoutSignals();
	    };
	    FacetModel.prototype.columnDistinctSignal = function () {
	        if (this.parent && (this.parent instanceof FacetModel)) {
	            // For nested facet, we will add columns to group mark instead
	            // See discussion in https://github.com/vega/vega/issues/952
	            // and https://github.com/vega/vega-view/releases/tag/v1.2.6
	            return undefined;
	        }
	        else {
	            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
	            var facetLayoutDataName = this.getName('column_domain');
	            return { signal: "length(data('" + facetLayoutDataName + "'))" };
	        }
	    };
	    FacetModel.prototype.assembleGroup = function (signals) {
	        if (this.parent && (this.parent instanceof FacetModel)) {
	            // Provide number of columns for layout.
	            // See discussion in https://github.com/vega/vega/issues/952
	            // and https://github.com/vega/vega-view/releases/tag/v1.2.6
	            return __assign({}, (this.channelHasField('column') ? {
	                encode: {
	                    update: {
	                        // TODO(https://github.com/vega/vega-lite/issues/2759):
	                        // Correct the signal for facet of concat of facet_column
	                        columns: { field: fielddef_1.vgField(this.facet.column, { prefix: 'distinct' }) }
	                    }
	                }
	            } : {}), _super.prototype.assembleGroup.call(this, signals));
	        }
	        return _super.prototype.assembleGroup.call(this, signals);
	    };
	    /**
	     * Aggregate cardinality for calculating size
	     */
	    FacetModel.prototype.getCardinalityAggregateForChild = function () {
	        var fields = [];
	        var ops = [];
	        if (this.child instanceof FacetModel) {
	            if (this.child.channelHasField('column')) {
	                fields.push(fielddef_1.vgField(this.child.facet.column));
	                ops.push('distinct');
	            }
	        }
	        else {
	            for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {
	                var channel = _a[_i];
	                var childScaleComponent = this.child.component.scales[channel];
	                if (childScaleComponent && !childScaleComponent.merged) {
	                    var type = childScaleComponent.get('type');
	                    var range = childScaleComponent.get('range');
	                    if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {
	                        var domain = domain_1.assembleDomain(this.child, channel);
	                        var field = domain_1.getFieldFromDomain(domain);
	                        if (field) {
	                            fields.push(field);
	                            ops.push('distinct');
	                        }
	                        else {
	                            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');
	                        }
	                    }
	                }
	            }
	        }
	        return fields.length ? { fields: fields, ops: ops } : undefined;
	    };
	    FacetModel.prototype.assembleMarks = function () {
	        var _a = this, child = _a.child, facet = _a.facet;
	        var facetRoot = this.component.data.facetRoot;
	        var data = assemble_1.assembleFacetData(facetRoot);
	        // If we facet by two dimensions, we need to add a cross operator to the aggregation
	        // so that we create all groups
	        var hasRow = this.channelHasField(channel_1.ROW);
	        var hasColumn = this.channelHasField(channel_1.COLUMN);
	        var layoutSizeEncodeEntry = child.assembleLayoutSize();
	        var aggregateMixins = {};
	        if (hasRow && hasColumn) {
	            aggregateMixins.aggregate = { cross: true };
	        }
	        var cardinalityAggregateForChild = this.getCardinalityAggregateForChild();
	        if (cardinalityAggregateForChild) {
	            aggregateMixins.aggregate = __assign({}, aggregateMixins.aggregate, cardinalityAggregateForChild);
	        }
	        var title = child.assembleTitle();
	        var style = child.assembleGroupStyle();
	        var markGroup = __assign({ name: this.getName('cell'), type: 'group' }, (title ? { title: title } : {}), (style ? { style: style } : {}), { from: {
	                facet: __assign({ name: facetRoot.name, data: facetRoot.data, groupby: [].concat(hasRow ? [this.vgField(channel_1.ROW)] : [], hasColumn ? [this.vgField(channel_1.COLUMN)] : []) }, aggregateMixins)
	            }, sort: {
	                field: [].concat(hasRow ? [this.vgField(channel_1.ROW, { expr: 'datum', })] : [], hasColumn ? [this.vgField(channel_1.COLUMN, { expr: 'datum' })] : []),
	                order: [].concat(hasRow ? [(facet.row.sort) || 'ascending'] : [], hasColumn ? [(facet.column.sort) || 'ascending'] : [])
	            } }, (data.length > 0 ? { data: data } : {}), (layoutSizeEncodeEntry ? { encode: { update: layoutSizeEncodeEntry } } : {}), child.assembleGroup());
	        return [markGroup];
	    };
	    FacetModel.prototype.getMapping = function () {
	        return this.facet;
	    };
	    return FacetModel;
	}(model_1.ModelWithField));
	exports.FacetModel = FacetModel;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var data_1 = __webpack_require__(53);
	var util_1 = __webpack_require__(14);
	var aggregate_1 = __webpack_require__(81);
	var bin_1 = __webpack_require__(106);
	var calculate_1 = __webpack_require__(107);
	var dataflow_1 = __webpack_require__(82);
	var facet_1 = __webpack_require__(83);
	var filter_1 = __webpack_require__(108);
	var filterinvalid_1 = __webpack_require__(84);
	var formatparse_1 = __webpack_require__(86);
	var geojson_1 = __webpack_require__(109);
	var geopoint_1 = __webpack_require__(110);
	var indentifier_1 = __webpack_require__(111);
	var lookup_1 = __webpack_require__(112);
	var source_1 = __webpack_require__(87);
	var stack_1 = __webpack_require__(89);
	var timeunit_1 = __webpack_require__(88);
	/**
	 * Print debug information for dataflow tree.
	 */
	// tslint:disable-next-line
	function debug(node) {
	    console.log("" + node.constructor.name + (node.debugName ? " (" + node.debugName + ")" : '') + " -> " + (node.children.map(function (c) {
	        return "" + c.constructor.name + (c.debugName ? " (" + c.debugName + ")" : '');
	    })));
	    console.log(node);
	    node.children.forEach(debug);
	}
	function makeWalkTree(data) {
	    // to name datasources
	    var datasetIndex = 0;
	    /**
	     * Recursively walk down the tree.
	     */
	    function walkTree(node, dataSource) {
	        if (node instanceof source_1.SourceNode) {
	            // If the source is a named data source or a data source with values, we need
	            // to put it in a different data source. Otherwise, Vega may override the data.
	            if (!data_1.isUrlData(node.data)) {
	                data.push(dataSource);
	                var newData = {
	                    name: null,
	                    source: dataSource.name,
	                    transform: []
	                };
	                dataSource = newData;
	            }
	        }
	        if (node instanceof formatparse_1.ParseNode) {
	            if (node.parent instanceof source_1.SourceNode && !dataSource.source) {
	                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
	                dataSource.format = __assign({}, dataSource.format || {}, { parse: node.assembleFormatParse() });
	            }
	            else {
	                // Otherwise use Vega expression to parse
	                dataSource.transform = dataSource.transform.concat(node.assembleTransforms());
	            }
	        }
	        if (node instanceof facet_1.FacetNode) {
	            if (!dataSource.name) {
	                dataSource.name = "data_" + datasetIndex++;
	            }
	            if (!dataSource.source || dataSource.transform.length > 0) {
	                data.push(dataSource);
	                node.data = dataSource.name;
	            }
	            else {
	                node.data = dataSource.source;
	            }
	            node.assemble().forEach(function (d) { return data.push(d); });
	            // break here because the rest of the tree has to be taken care of by the facet.
	            return;
	        }
	        if (node instanceof filter_1.FilterNode ||
	            node instanceof calculate_1.CalculateNode ||
	            node instanceof geopoint_1.GeoPointNode ||
	            node instanceof geojson_1.GeoJSONNode ||
	            node instanceof aggregate_1.AggregateNode ||
	            node instanceof lookup_1.LookupNode ||
	            node instanceof indentifier_1.IdentifierNode) {
	            dataSource.transform.push(node.assemble());
	        }
	        if (node instanceof filterinvalid_1.FilterInvalidNode ||
	            node instanceof bin_1.BinNode ||
	            node instanceof timeunit_1.TimeUnitNode ||
	            node instanceof stack_1.StackNode) {
	            dataSource.transform = dataSource.transform.concat(node.assemble());
	        }
	        if (node instanceof aggregate_1.AggregateNode) {
	            if (!dataSource.name) {
	                dataSource.name = "data_" + datasetIndex++;
	            }
	        }
	        if (node instanceof dataflow_1.OutputNode) {
	            if (dataSource.source && dataSource.transform.length === 0) {
	                node.setSource(dataSource.source);
	            }
	            else if (node.parent instanceof dataflow_1.OutputNode) {
	                // Note that an output node may be required but we still do not assemble a
	                // separate data source for it.
	                node.setSource(dataSource.name);
	            }
	            else {
	                if (!dataSource.name) {
	                    dataSource.name = "data_" + datasetIndex++;
	                }
	                // Here we set the name of the datasource we generated. From now on
	                // other assemblers can use it.
	                node.setSource(dataSource.name);
	                // if this node has more than one child, we will add a datasource automatically
	                if (node.numChildren() === 1) {
	                    data.push(dataSource);
	                    var newData = {
	                        name: null,
	                        source: dataSource.name,
	                        transform: []
	                    };
	                    dataSource = newData;
	                }
	            }
	        }
	        switch (node.numChildren()) {
	            case 0:
	                // done
	                if (node instanceof dataflow_1.OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
	                    // do not push empty datasources that are simply references
	                    data.push(dataSource);
	                }
	                break;
	            case 1:
	                walkTree(node.children[0], dataSource);
	                break;
	            default:
	                if (!dataSource.name) {
	                    dataSource.name = "data_" + datasetIndex++;
	                }
	                var source_2 = dataSource.name;
	                if (!dataSource.source || dataSource.transform.length > 0) {
	                    data.push(dataSource);
	                }
	                else {
	                    source_2 = dataSource.source;
	                }
	                node.children.forEach(function (child) {
	                    var newData = {
	                        name: null,
	                        source: source_2,
	                        transform: []
	                    };
	                    walkTree(child, newData);
	                });
	                break;
	        }
	    }
	    return walkTree;
	}
	/**
	 * Assemble data sources that are derived from faceted data.
	 */
	function assembleFacetData(root) {
	    var data = [];
	    var walkTree = makeWalkTree(data);
	    root.children.forEach(function (child) { return walkTree(child, {
	        source: root.name,
	        name: null,
	        transform: []
	    }); });
	    return data;
	}
	exports.assembleFacetData = assembleFacetData;
	/**
	 * Create Vega Data array from a given compiled model and append all of them to the given array
	 *
	 * @param  model
	 * @param  data array
	 * @return modified data array
	 */
	function assembleRootData(dataComponent) {
	    var roots = util_1.vals(dataComponent.sources);
	    var data = [];
	    // roots.forEach(debug);
	    var walkTree = makeWalkTree(data);
	    var sourceIndex = 0;
	    roots.forEach(function (root) {
	        // assign a name if the source does not have a name yet
	        if (!root.hasName()) {
	            root.dataName = "source_" + sourceIndex++;
	        }
	        var newData = root.assemble();
	        walkTree(root, newData);
	    });
	    // remove empty transform arrays for cleaner output
	    data.forEach(function (d) {
	        if (d.transform.length === 0) {
	            delete d.transform;
	        }
	    });
	    // move sources without transforms (the ones that are potentially used in lookups) to the beginning
	    data.sort(function (a, b) { return (a.transform || []).length === 0 ? -1 : ((b.transform || []).length === 0 ? 1 : 0); });
	    // now fix the from references in lookup transforms
	    for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
	        var d = data_2[_i];
	        for (var _a = 0, _b = d.transform || []; _a < _b.length; _a++) {
	            var t = _b[_a];
	            if (t.type === 'lookup') {
	                t.from = dataComponent.outputNodes[t.from].getSource();
	            }
	        }
	    }
	    return data;
	}
	exports.assembleRootData = assembleRootData;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __rest = (this && this.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	            t[p[i]] = s[p[i]];
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var sort_1 = __webpack_require__(79);
	var util_1 = __webpack_require__(14);
	function replaceRepeaterInFacet(facet, repeater) {
	    return replaceRepeater(facet, repeater);
	}
	exports.replaceRepeaterInFacet = replaceRepeaterInFacet;
	function replaceRepeaterInEncoding(encoding, repeater) {
	    return replaceRepeater(encoding, repeater);
	}
	exports.replaceRepeaterInEncoding = replaceRepeaterInEncoding;
	/**
	 * Replaces repeated value and returns if the repeated value is valid.
	 */
	function replaceRepeat(o, repeater) {
	    if (fielddef_1.isRepeatRef(o.field)) {
	        if (o.field.repeat in repeater) {
	            // any needed to calm down ts compiler
	            return __assign({}, o, { field: repeater[o.field.repeat] });
	        }
	        else {
	            log.warn(log.message.noSuchRepeatedValue(o.field.repeat));
	            return undefined;
	        }
	    }
	    return o;
	}
	/**
	 * Replace repeater values in a field def with the concrete field name.
	 */
	function replaceRepeaterInFieldDef(fieldDef, repeater) {
	    fieldDef = replaceRepeat(fieldDef, repeater);
	    if (fieldDef === undefined) {
	        // the field def should be ignored
	        return undefined;
	    }
	    if (fieldDef.sort && sort_1.isSortField(fieldDef.sort)) {
	        var sort = replaceRepeat(fieldDef.sort, repeater);
	        fieldDef = __assign({}, fieldDef, (sort ? { sort: sort } : {}));
	    }
	    return fieldDef;
	}
	function replaceRepeaterInChannelDef(channelDef, repeater) {
	    if (fielddef_1.isFieldDef(channelDef)) {
	        var fd = replaceRepeaterInFieldDef(channelDef, repeater);
	        if (fd) {
	            return fd;
	        }
	        else if (fielddef_1.isConditionalDef(channelDef)) {
	            return { condition: channelDef.condition };
	        }
	    }
	    else {
	        if (fielddef_1.hasConditionalFieldDef(channelDef)) {
	            var fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);
	            if (fd) {
	                return __assign({}, channelDef, { condition: fd });
	            }
	            else {
	                var condition = channelDef.condition, channelDefWithoutCondition = __rest(channelDef, ["condition"]);
	                return channelDefWithoutCondition;
	            }
	        }
	        return channelDef;
	    }
	    return undefined;
	}
	function replaceRepeater(mapping, repeater) {
	    var out = {};
	    for (var channel in mapping) {
	        if (mapping.hasOwnProperty(channel)) {
	            var channelDef = mapping[channel];
	            if (util_1.isArray(channelDef)) {
	                // array cannot have condition
	                out[channel] = channelDef.map(function (cd) { return replaceRepeaterInChannelDef(cd, repeater); })
	                    .filter(function (cd) { return cd; });
	            }
	            else {
	                var cd = replaceRepeaterInChannelDef(channelDef, repeater);
	                if (cd) {
	                    out[channel] = cd;
	                }
	            }
	        }
	    }
	    return out;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var spec_1 = __webpack_require__(42);
	var util_1 = __webpack_require__(14);
	var parse_1 = __webpack_require__(118);
	var parse_2 = __webpack_require__(52);
	var assemble_1 = __webpack_require__(63);
	var parse_3 = __webpack_require__(113);
	var assemble_2 = __webpack_require__(64);
	var model_1 = __webpack_require__(57);
	var selection_1 = __webpack_require__(55);
	var unit_1 = __webpack_require__(123);
	var LayerModel = /** @class */ (function (_super) {
	    __extends(LayerModel, _super);
	    function LayerModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {
	        var _this = _super.call(this, spec, parent, parentGivenName, config, spec.resolve) || this;
	        _this.type = 'layer';
	        var layoutSize = __assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {}));
	        _this.initSize(layoutSize);
	        _this.children = spec.layer.map(function (layer, i) {
	            if (spec_1.isLayerSpec(layer)) {
	                return new LayerModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);
	            }
	            if (spec_1.isUnitSpec(layer)) {
	                return new unit_1.UnitModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);
	            }
	            throw new Error(log.message.INVALID_SPEC);
	        });
	        return _this;
	    }
	    LayerModel.prototype.parseData = function () {
	        this.component.data = parse_2.parseData(this);
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parseData();
	        }
	    };
	    LayerModel.prototype.parseLayoutSize = function () {
	        parse_3.parseLayerLayoutSize(this);
	    };
	    LayerModel.prototype.parseSelection = function () {
	        var _this = this;
	        // Merge selections up the hierarchy so that they may be referenced
	        // across unit specs. Persist their definitions within each child
	        // to assemble signals which remain within output Vega unit groups.
	        this.component.selection = {};
	        var _loop_1 = function (child) {
	            child.parseSelection();
	            util_1.keys(child.component.selection).forEach(function (key) {
	                _this.component.selection[key] = child.component.selection[key];
	            });
	        };
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            _loop_1(child);
	        }
	    };
	    LayerModel.prototype.parseMarkGroup = function () {
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            child.parseMarkGroup();
	        }
	    };
	    LayerModel.prototype.parseAxisAndHeader = function () {
	        parse_1.parseLayerAxis(this);
	    };
	    LayerModel.prototype.assembleSelectionTopLevelSignals = function (signals) {
	        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);
	    };
	    // TODO: Support same named selections across children.
	    LayerModel.prototype.assembleSelectionSignals = function () {
	        return this.children.reduce(function (signals, child) {
	            return signals.concat(child.assembleSelectionSignals());
	        }, []);
	    };
	    LayerModel.prototype.assembleLayoutSignals = function () {
	        return this.children.reduce(function (signals, child) {
	            return signals.concat(child.assembleLayoutSignals());
	        }, assemble_1.assembleLayoutSignals(this));
	    };
	    LayerModel.prototype.assembleSelectionData = function (data) {
	        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, []);
	    };
	    LayerModel.prototype.assembleTitle = function () {
	        var title = _super.prototype.assembleTitle.call(this);
	        if (title) {
	            return title;
	        }
	        // If title does not provide layer, look into children
	        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
	            var child = _a[_i];
	            title = child.assembleTitle();
	            if (title) {
	                return title;
	            }
	        }
	        return undefined;
	    };
	    LayerModel.prototype.assembleLayout = function () {
	        return null;
	    };
	    LayerModel.prototype.assembleMarks = function () {
	        return selection_1.assembleLayerSelectionMarks(this, util_1.flatten(this.children.map(function (child) {
	            return child.assembleMarks();
	        })));
	    };
	    LayerModel.prototype.assembleLegends = function () {
	        return this.children.reduce(function (legends, child) {
	            return legends.concat(child.assembleLegends());
	        }, assemble_2.assembleLegends(this));
	    };
	    return LayerModel;
	}(model_1.Model));
	exports.LayerModel = LayerModel;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var axis_1 = __webpack_require__(21);
	var channel_1 = __webpack_require__(23);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var resolve_1 = __webpack_require__(66);
	var split_1 = __webpack_require__(67);
	var component_1 = __webpack_require__(119);
	var config_1 = __webpack_require__(120);
	var encode = __webpack_require__(121);
	var properties = __webpack_require__(122);
	var AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
	function parseUnitAxis(model) {
	    return channel_1.POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {
	        if (model.component.scales[channel] && model.axis(channel)) {
	            var axisComponent = {};
	            // TODO: support multiple axis
	            var main = parseMainAxis(channel, model);
	            if (main && isVisibleAxis(main)) {
	                axisComponent.main = main;
	            }
	            var grid = parseGridAxis(channel, model);
	            if (grid && isVisibleAxis(grid)) {
	                axisComponent.grid = grid;
	            }
	            axis[channel] = [axisComponent];
	        }
	        return axis;
	    }, {});
	}
	exports.parseUnitAxis = parseUnitAxis;
	var OPPOSITE_ORIENT = {
	    bottom: 'top',
	    top: 'bottom',
	    left: 'right',
	    right: 'left'
	};
	function parseLayerAxis(model) {
	    var _a = model.component, axes = _a.axes, resolve = _a.resolve;
	    var axisCount = { top: 0, bottom: 0, right: 0, left: 0 };
	    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {
	        var child = _b[_i];
	        child.parseAxisAndHeader();
	        for (var _c = 0, _d = util_1.keys(child.component.axes); _c < _d.length; _c++) {
	            var channel = _d[_c];
	            resolve.axis[channel] = resolve_1.parseGuideResolve(model.component.resolve, channel);
	            if (resolve.axis[channel] === 'shared') {
	                // If the resolve says shared (and has not been overridden)
	                // We will try to merge and see if there is a conflict
	                axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);
	                if (!axes[channel]) {
	                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.
	                    // Thus, mark axis as independent and remove the axis component.
	                    resolve.axis[channel] = 'independent';
	                    delete axes[channel];
	                }
	            }
	        }
	    }
	    // Move axes to layer's axis component and merge shared axes
	    for (var _e = 0, _f = ['x', 'y']; _e < _f.length; _e++) {
	        var channel = _f[_e];
	        for (var _g = 0, _h = model.children; _g < _h.length; _g++) {
	            var child = _h[_g];
	            if (!child.component.axes[channel]) {
	                // skip if the child does not have a particular axis
	                continue;
	            }
	            if (resolve.axis[channel] === 'independent') {
	                // If axes are independent, concat the axisComponent array.
	                axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);
	                // Automatically adjust orient
	                for (var _j = 0, _k = child.component.axes[channel]; _j < _k.length; _j++) {
	                    var axisComponent = _k[_j];
	                    var _l = axisComponent.main.getWithExplicit('orient'), orient = _l.value, explicit = _l.explicit;
	                    if (axisCount[orient] > 0 && !explicit) {
	                        // Change axis orient if the number do not match
	                        var oppositeOrient = OPPOSITE_ORIENT[orient];
	                        if (axisCount[orient] > axisCount[oppositeOrient]) {
	                            axisComponent.main.set('orient', oppositeOrient, false);
	                        }
	                    }
	                    axisCount[orient]++;
	                    // TODO(https://github.com/vega/vega-lite/issues/2634): automaticaly add extra offset?
	                }
	            }
	            // After merging, make sure to remove axes from child
	            delete child.component.axes[channel];
	        }
	    }
	}
	exports.parseLayerAxis = parseLayerAxis;
	function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
	    if (mergedAxisCmpts) {
	        if (mergedAxisCmpts.length !== childAxisCmpts.length) {
	            return undefined; // Cannot merge axis component with different number of axes.
	        }
	        var length_1 = mergedAxisCmpts.length;
	        for (var i = 0; i < length_1; i++) {
	            var mergedMain = mergedAxisCmpts[i].main;
	            var childMain = childAxisCmpts[i].main;
	            if ((!!mergedMain) !== (!!childMain)) {
	                return undefined;
	            }
	            else if (mergedMain && childMain) {
	                var mergedOrient = mergedMain.getWithExplicit('orient');
	                var childOrient = childMain.getWithExplicit('orient');
	                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
	                    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
	                    // Cannot merge due to inconsistent orient
	                    return undefined;
	                }
	                else {
	                    mergedAxisCmpts[i].main = mergeAxisComponentPart(mergedMain, childMain);
	                }
	            }
	            var mergedGrid = mergedAxisCmpts[i].grid;
	            var childGrid = childAxisCmpts[i].grid;
	            if ((!!mergedGrid) !== (!!childGrid)) {
	                return undefined;
	            }
	            else if (mergedGrid && childGrid) {
	                mergedAxisCmpts[i].grid = mergeAxisComponentPart(mergedGrid, childGrid);
	            }
	        }
	    }
	    else {
	        // For first one, return a copy of the child
	        return childAxisCmpts.map(function (axisComponent) { return (__assign({}, (axisComponent.main ? { main: axisComponent.main.clone() } : {}), (axisComponent.grid ? { grid: axisComponent.grid.clone() } : {}))); });
	    }
	    return mergedAxisCmpts;
	}
	function mergeAxisComponentPart(merged, child) {
	    var _loop_1 = function (prop) {
	        var mergedValueWithExplicit = split_1.mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', 
	        // Tie breaker function
	        function (v1, v2) {
	            switch (prop) {
	                case 'title':
	                    return common_1.titleMerger(v1, v2);
	                case 'gridScale':
	                    return {
	                        explicit: v1.explicit,
	                        value: v1.value || v2.value
	                    };
	            }
	            return split_1.defaultTieBreaker(v1, v2, prop, 'axis');
	        });
	        merged.setWithExplicit(prop, mergedValueWithExplicit);
	    };
	    for (var _i = 0, VG_AXIS_PROPERTIES_1 = axis_1.VG_AXIS_PROPERTIES; _i < VG_AXIS_PROPERTIES_1.length; _i++) {
	        var prop = VG_AXIS_PROPERTIES_1[_i];
	        _loop_1(prop);
	    }
	    return merged;
	}
	function isFalseOrNull(v) {
	    return v === false || v === null;
	}
	/**
	 * Return if an axis is visible (shows at least one part of the axis).
	 */
	function isVisibleAxis(axis) {
	    return util_1.some(AXIS_PARTS, function (part) { return hasAxisPart(axis, part); });
	}
	function hasAxisPart(axis, part) {
	    // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
	    if (part === 'axis') {
	        return true;
	    }
	    if (part === 'grid' || part === 'title') {
	        return !!axis.get(part);
	    }
	    // Other parts are enabled by default, so they should not be false or null.
	    return !isFalseOrNull(axis.get(part));
	}
	/**
	 * Make an inner axis for showing grid for shared axis.
	 */
	function parseGridAxis(channel, model) {
	    // FIXME: support adding ticks for grid axis that are inner axes of faceted plots.
	    return parseAxis(channel, model, true);
	}
	exports.parseGridAxis = parseGridAxis;
	function parseMainAxis(channel, model) {
	    return parseAxis(channel, model, false);
	}
	exports.parseMainAxis = parseMainAxis;
	function parseAxis(channel, model, isGridAxis) {
	    var axis = model.axis(channel);
	    var axisComponent = new component_1.AxisComponentPart();
	    // 1.2. Add properties
	    axis_1.VG_AXIS_PROPERTIES.forEach(function (property) {
	        var value = getProperty(property, axis, channel, model, isGridAxis);
	        if (value !== undefined) {
	            var explicit = 
	            // specified axis.values is already respected, but may get transformed.
	            property === 'values' ? !!axis.values :
	                // both VL axis.encoding and axis.labelAngle affect VG axis.encode
	                property === 'encode' ? !!axis.encoding || !!axis.labelAngle :
	                    value === axis[property];
	            var configValue = config_1.getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));
	            if (explicit || configValue === undefined ||
	                // A lot of rules need to be applied for the grid axis
	                // FIXME: this is not perfectly correct, but we need to rewrite axis component to have one axis and separate them later during assembly anyway.
	                isGridAxis) {
	                // Do not apply implicit rule if there is a config value
	                axisComponent.set(property, value, explicit);
	            }
	        }
	    });
	    // 2) Add guide encode definition groups
	    var axisEncoding = axis.encoding || {};
	    var axisEncode = AXIS_PARTS.reduce(function (e, part) {
	        if (!hasAxisPart(axisComponent, part)) {
	            // No need to create encode for a disabled part.
	            return e;
	        }
	        var value = part === 'labels' ?
	            encode.labels(model, channel, axisEncoding.labels || {}, axisComponent.get('orient')) :
	            axisEncoding[part] || {};
	        if (value !== undefined && util_1.keys(value).length > 0) {
	            e[part] = { update: value };
	        }
	        return e;
	    }, {});
	    // FIXME: By having encode as one property, we won't have fine grained encode merging.
	    if (util_1.keys(axisEncode).length > 0) {
	        axisComponent.set('encode', axisEncode, !!axis.encoding || !!axis.labelAngle);
	    }
	    return axisComponent;
	}
	function getProperty(property, specifiedAxis, channel, model, isGridAxis) {
	    var fieldDef = model.fieldDef(channel);
	    if ((isGridAxis && axis_1.AXIS_PROPERTY_TYPE[property] === 'main') ||
	        (!isGridAxis && axis_1.AXIS_PROPERTY_TYPE[property] === 'grid')) {
	        // Do not apply unapplicable properties
	        return undefined;
	    }
	    switch (property) {
	        case 'scale':
	            return model.scaleName(channel);
	        case 'gridScale':
	            return properties.gridScale(model, channel, isGridAxis);
	        case 'domain':
	            return properties.domain(property, specifiedAxis, isGridAxis, channel);
	        case 'format':
	            // We don't include temporal field here as we apply format in encode block
	            return common_1.numberFormat(fieldDef, specifiedAxis.format, model.config);
	        case 'grid': {
	            var scaleType = model.getScaleComponent(channel).get('type');
	            return common_1.getSpecifiedOrDefaultValue(specifiedAxis.grid, properties.grid(scaleType, fieldDef));
	        }
	        case 'labels':
	            return isGridAxis ? false : specifiedAxis.labels;
	        case 'labelFlush':
	            return properties.labelFlush(fieldDef, channel, specifiedAxis, isGridAxis);
	        case 'labelOverlap': {
	            var scaleType = model.getScaleComponent(channel).get('type');
	            return properties.labelOverlap(fieldDef, specifiedAxis, channel, scaleType);
	        }
	        case 'minExtent': {
	            return properties.minMaxExtent(specifiedAxis.minExtent, isGridAxis);
	        }
	        case 'maxExtent': {
	            return properties.minMaxExtent(specifiedAxis.maxExtent, isGridAxis);
	        }
	        case 'orient':
	            return common_1.getSpecifiedOrDefaultValue(specifiedAxis.orient, properties.orient(channel));
	        case 'tickCount': {
	            var scaleType = model.getScaleComponent(channel).get('type');
	            var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
	            var size = sizeType ? model.getSizeSignalRef(sizeType)
	                : undefined;
	            return common_1.getSpecifiedOrDefaultValue(specifiedAxis.tickCount, properties.tickCount(channel, fieldDef, scaleType, size));
	        }
	        case 'ticks':
	            return properties.ticks(property, specifiedAxis, isGridAxis, channel);
	        case 'title':
	            return common_1.getSpecifiedOrDefaultValue(specifiedAxis.title, properties.title(specifiedAxis.titleMaxLength, fieldDef, model.config));
	        case 'values':
	            return properties.values(specifiedAxis, model, fieldDef);
	        case 'zindex':
	            return common_1.getSpecifiedOrDefaultValue(specifiedAxis.zindex, properties.zindex(isGridAxis));
	    }
	    // Otherwise, return specified property.
	    return axis_1.isAxisProperty(property) ? specifiedAxis[property] : undefined;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var split_1 = __webpack_require__(67);
	var AxisComponentPart = /** @class */ (function (_super) {
	    __extends(AxisComponentPart, _super);
	    function AxisComponentPart() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return AxisComponentPart;
	}(split_1.Split));
	exports.AxisComponentPart = AxisComponentPart;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEsa0NBQStCO0FBRS9CO0lBQXVDLHFDQUFzQjtJQUE3RDs7SUFBK0QsQ0FBQztJQUFELHdCQUFDO0FBQUQsQ0FBQyxBQUFoRSxDQUF1QyxhQUFLLEdBQW9CO0FBQW5ELDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXhpc30gZnJvbSAnLi4vLi4vYXhpcyc7XG5pbXBvcnQge1ZnQXhpc30gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtTcGxpdH0gZnJvbSAnLi4vc3BsaXQnO1xuXG5leHBvcnQgY2xhc3MgQXhpc0NvbXBvbmVudFBhcnQgZXh0ZW5kcyBTcGxpdDxQYXJ0aWFsPFZnQXhpcz4+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXhpc0NvbXBvbmVudCB7XG4gIG1haW4/OiBBeGlzQ29tcG9uZW50UGFydDtcbiAgZ3JpZD86IEF4aXNDb21wb25lbnRQYXJ0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF4aXNDb21wb25lbnRJbmRleCB7XG4gIHg/OiBBeGlzQ29tcG9uZW50W107XG4gIHk/OiBBeGlzQ29tcG9uZW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXhpc0luZGV4IHtcbiAgeD86IEF4aXM7XG4gIHk/OiBBeGlzO1xufVxuIl19

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function getAxisConfig(property, config, channel, orient, scaleType) {
	    if (orient === void 0) { orient = ''; }
	    // configTypes to loop, starting from higher precedence
	    var configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([
	        channel === 'x' ? 'axisX' : 'axisY',
	        'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1),
	        'axis'
	    ]);
	    for (var _i = 0, configTypes_1 = configTypes; _i < configTypes_1.length; _i++) {
	        var configType = configTypes_1[_i];
	        if (config[configType] && config[configType][property] !== undefined) {
	            return config[configType][property];
	        }
	    }
	    return undefined;
	}
	exports.getAxisConfig = getAxisConfig;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSx1QkFBOEIsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsT0FBNkIsRUFBRSxNQUFtQixFQUFFLFNBQW9CO0lBQXpDLHVCQUFBLEVBQUEsV0FBbUI7SUFDaEgsdURBQXVEO0lBQ3ZELElBQU0sV0FBVyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BFLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTztRQUNuQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTTtLQUNQLENBQUMsQ0FBQztJQUNILEdBQUcsQ0FBQyxDQUFxQixVQUFXLEVBQVgsMkJBQVcsRUFBWCx5QkFBVyxFQUFYLElBQVc7UUFBL0IsSUFBTSxVQUFVLG9CQUFBO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNyRSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7S0FDRjtJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQWRELHNDQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQb3NpdGlvblNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7U2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBeGlzQ29uZmlnKHByb3BlcnR5OiBzdHJpbmcsIGNvbmZpZzogQ29uZmlnLCBjaGFubmVsOiBQb3NpdGlvblNjYWxlQ2hhbm5lbCwgb3JpZW50OiBzdHJpbmcgPSAnJywgc2NhbGVUeXBlOiBTY2FsZVR5cGUpIHtcbiAgLy8gY29uZmlnVHlwZXMgdG8gbG9vcCwgc3RhcnRpbmcgZnJvbSBoaWdoZXIgcHJlY2VkZW5jZVxuICBjb25zdCBjb25maWdUeXBlcyA9IChzY2FsZVR5cGUgPT09ICdiYW5kJyA/IFsnYXhpc0JhbmQnXSA6IFtdKS5jb25jYXQoW1xuICAgIGNoYW5uZWwgPT09ICd4JyA/ICdheGlzWCcgOiAnYXhpc1knLFxuICAgICdheGlzJyArIG9yaWVudC5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpICsgb3JpZW50LnN1YnN0cigxKSwgLy8gYXhpc1RvcCwgYXhpc0JvdHRvbSwgLi4uXG4gICAgJ2F4aXMnXG4gIF0pO1xuICBmb3IgKGNvbnN0IGNvbmZpZ1R5cGUgb2YgY29uZmlnVHlwZXMpIHtcbiAgICBpZiAoY29uZmlnW2NvbmZpZ1R5cGVdICYmIGNvbmZpZ1tjb25maWdUeXBlXVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbmZpZ1tjb25maWdUeXBlXVtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var scale_1 = __webpack_require__(39);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var config_1 = __webpack_require__(120);
	function labels(model, channel, specifiedLabelsSpec, orient) {
	    var fieldDef = model.fieldDef(channel) ||
	        (channel === 'x' ? model.fieldDef('x2') :
	            channel === 'y' ? model.fieldDef('y2') :
	                undefined);
	    var axis = model.axis(channel);
	    var config = model.config;
	    var labelsSpec = {};
	    // Text
	    if (fielddef_1.isTimeFieldDef(fieldDef)) {
	        var isUTCScale = model.getScaleComponent(channel).get('type') === scale_1.ScaleType.UTC;
	        labelsSpec.text = {
	            signal: common_1.timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, config.timeFormat, isUTCScale)
	        };
	    }
	    // Label Angle
	    var angle = config_1.getAxisConfig('labelAngle', model.config, channel, orient, model.getScaleComponent(channel).get('type'));
	    if (angle === undefined) {
	        angle = labelAngle(axis, channel, fieldDef);
	        if (angle) {
	            labelsSpec.angle = { value: angle };
	        }
	    }
	    if (angle !== undefined && channel === 'x') {
	        var align = labelAlign(angle, orient);
	        if (align) {
	            labelsSpec.align = { value: align };
	        }
	        // Auto set baseline if x is rotated by 90, or -90
	        if (util_1.contains([90, 270], angle)) {
	            labelsSpec.baseline = { value: 'middle' };
	        }
	    }
	    labelsSpec = __assign({}, labelsSpec, specifiedLabelsSpec);
	    return util_1.keys(labelsSpec).length === 0 ? undefined : labelsSpec;
	}
	exports.labels = labels;
	function labelAngle(axis, channel, fieldDef) {
	    if (axis.labelAngle !== undefined) {
	        // Make angle within [0,360)
	        return ((axis.labelAngle % 360) + 360) % 360;
	    }
	    else {
	        if (channel === channel_1.X && util_1.contains([type_1.NOMINAL, type_1.ORDINAL], fieldDef.type)) {
	            return 270;
	        }
	    }
	    return undefined;
	}
	exports.labelAngle = labelAngle;
	function labelAlign(angle, orient) {
	    if (angle > 0) {
	        if (angle % 360 > 180) {
	            return orient === 'top' ? 'left' : 'right';
	        }
	        else if (angle % 360 < 180) {
	            return orient === 'top' ? 'right' : 'left';
	        }
	    }
	    else if (angle < 0) {
	        return labelAlign((angle % 360) + 360 /* convert to positive value*/, orient);
	    }
	    return undefined;
	}
	exports.labelAlign = labelAlign;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9lbmNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBLHlDQUErRDtBQUMvRCwyQ0FBd0Q7QUFDeEQscUNBQXNDO0FBQ3RDLG1DQUE0QztBQUM1QyxtQ0FBMEM7QUFFMUMsb0NBQStDO0FBRS9DLG1DQUF1QztBQUV2QyxnQkFBdUIsS0FBZ0IsRUFBRSxPQUE2QixFQUFFLG1CQUF3QixFQUFFLE1BQWtCO0lBQ2xILElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3RDLENBQ0UsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDeEMsU0FBUyxDQUNWLENBQUM7SUFDSixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFFNUIsSUFBSSxVQUFVLEdBQVEsRUFBRSxDQUFDO0lBRXpCLE9BQU87SUFDUCxFQUFFLENBQUMsQ0FBQyx5QkFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLGlCQUFTLENBQUMsR0FBRyxDQUFDO1FBRWxGLFVBQVUsQ0FBQyxJQUFJLEdBQUc7WUFDaEIsTUFBTSxFQUFFLDZCQUFvQixDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7U0FDeEksQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjO0lBQ2QsSUFBSSxLQUFLLEdBQUcsc0JBQWEsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNySCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN4QixLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNWLFVBQVUsQ0FBQyxLQUFLLEdBQUcsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUM7UUFDcEMsQ0FBQztJQUNILENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNWLFVBQVUsQ0FBQyxLQUFLLEdBQUcsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELGtEQUFrRDtRQUNsRCxFQUFFLENBQUMsQ0FBQyxlQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLENBQUM7UUFDMUMsQ0FBQztJQUNILENBQUM7SUFFRCxVQUFVLGdCQUNMLFVBQVUsRUFDVixtQkFBbUIsQ0FDdkIsQ0FBQztJQUVGLE1BQU0sQ0FBQyxXQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDaEUsQ0FBQztBQWhERCx3QkFnREM7QUFDRCxvQkFBMkIsSUFBVSxFQUFFLE9BQWdCLEVBQUUsUUFBMEI7SUFDakYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLDRCQUE0QjtRQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQy9DLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxXQUFDLElBQUksZUFBUSxDQUFDLENBQUMsY0FBTyxFQUFFLGNBQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakUsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNiLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBVkQsZ0NBVUM7QUFFRCxvQkFBMkIsS0FBYSxFQUFFLE1BQWtCO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM3QyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDNUMsQ0FBQztJQUNILENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsOEJBQThCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVhELGdDQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBeGlzfSBmcm9tICcuLi8uLi9heGlzJztcbmltcG9ydCB7Q2hhbm5lbCwgUG9zaXRpb25TY2FsZUNoYW5uZWwsIFh9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtGaWVsZERlZiwgaXNUaW1lRmllbGREZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7U2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge05PTUlOQUwsIE9SRElOQUx9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtjb250YWlucywga2V5c30gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge0F4aXNPcmllbnQsIEhvcml6b250YWxBbGlnbn0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHt0aW1lRm9ybWF0RXhwcmVzc2lvbn0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7Z2V0QXhpc0NvbmZpZ30gZnJvbSAnLi9jb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGFiZWxzKG1vZGVsOiBVbml0TW9kZWwsIGNoYW5uZWw6IFBvc2l0aW9uU2NhbGVDaGFubmVsLCBzcGVjaWZpZWRMYWJlbHNTcGVjOiBhbnksIG9yaWVudDogQXhpc09yaWVudCkge1xuICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpIHx8XG4gICAgKFxuICAgICAgY2hhbm5lbCA9PT0gJ3gnID8gbW9kZWwuZmllbGREZWYoJ3gyJykgOlxuICAgICAgY2hhbm5lbCA9PT0gJ3knID8gbW9kZWwuZmllbGREZWYoJ3kyJykgOlxuICAgICAgdW5kZWZpbmVkXG4gICAgKTtcbiAgY29uc3QgYXhpcyA9IG1vZGVsLmF4aXMoY2hhbm5lbCk7XG4gIGNvbnN0IGNvbmZpZyA9IG1vZGVsLmNvbmZpZztcblxuICBsZXQgbGFiZWxzU3BlYzogYW55ID0ge307XG5cbiAgLy8gVGV4dFxuICBpZiAoaXNUaW1lRmllbGREZWYoZmllbGREZWYpKSB7XG4gICAgY29uc3QgaXNVVENTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpLmdldCgndHlwZScpID09PSBTY2FsZVR5cGUuVVRDO1xuXG4gICAgbGFiZWxzU3BlYy50ZXh0ID0ge1xuICAgICAgc2lnbmFsOiB0aW1lRm9ybWF0RXhwcmVzc2lvbignZGF0dW0udmFsdWUnLCBmaWVsZERlZi50aW1lVW5pdCwgYXhpcy5mb3JtYXQsIGNvbmZpZy5heGlzLnNob3J0VGltZUxhYmVscywgY29uZmlnLnRpbWVGb3JtYXQsIGlzVVRDU2NhbGUpXG4gICAgfTtcbiAgfVxuXG4gIC8vIExhYmVsIEFuZ2xlXG4gIGxldCBhbmdsZSA9IGdldEF4aXNDb25maWcoJ2xhYmVsQW5nbGUnLCBtb2RlbC5jb25maWcsIGNoYW5uZWwsIG9yaWVudCwgbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCkuZ2V0KCd0eXBlJykpO1xuICBpZiAoYW5nbGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGFuZ2xlID0gbGFiZWxBbmdsZShheGlzLCBjaGFubmVsLCBmaWVsZERlZik7XG4gICAgaWYgKGFuZ2xlKSB7XG4gICAgICBsYWJlbHNTcGVjLmFuZ2xlID0ge3ZhbHVlOiBhbmdsZX07XG4gICAgfVxuICB9XG5cbiAgaWYgKGFuZ2xlICE9PSB1bmRlZmluZWQgJiYgY2hhbm5lbCA9PT0gJ3gnKSB7XG4gICAgY29uc3QgYWxpZ24gPSBsYWJlbEFsaWduKGFuZ2xlLCBvcmllbnQpO1xuICAgIGlmIChhbGlnbikge1xuICAgICAgbGFiZWxzU3BlYy5hbGlnbiA9IHt2YWx1ZTogYWxpZ259O1xuICAgIH1cblxuICAgIC8vIEF1dG8gc2V0IGJhc2VsaW5lIGlmIHggaXMgcm90YXRlZCBieSA5MCwgb3IgLTkwXG4gICAgaWYgKGNvbnRhaW5zKFs5MCwgMjcwXSwgYW5nbGUpKSB7XG4gICAgICBsYWJlbHNTcGVjLmJhc2VsaW5lID0ge3ZhbHVlOiAnbWlkZGxlJ307XG4gICAgfVxuICB9XG5cbiAgbGFiZWxzU3BlYyA9IHtcbiAgICAuLi5sYWJlbHNTcGVjLFxuICAgIC4uLnNwZWNpZmllZExhYmVsc1NwZWNcbiAgfTtcblxuICByZXR1cm4ga2V5cyhsYWJlbHNTcGVjKS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBsYWJlbHNTcGVjO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxhYmVsQW5nbGUoYXhpczogQXhpcywgY2hhbm5lbDogQ2hhbm5lbCwgZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4pIHtcbiAgaWYgKGF4aXMubGFiZWxBbmdsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gTWFrZSBhbmdsZSB3aXRoaW4gWzAsMzYwKVxuICAgIHJldHVybiAoKGF4aXMubGFiZWxBbmdsZSAlIDM2MCkgKyAzNjApICUgMzYwO1xuICB9IGVsc2Uge1xuICAgIGlmIChjaGFubmVsID09PSBYICYmIGNvbnRhaW5zKFtOT01JTkFMLCBPUkRJTkFMXSwgZmllbGREZWYudHlwZSkpIHtcbiAgICAgIHJldHVybiAyNzA7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbEFsaWduKGFuZ2xlOiBudW1iZXIsIG9yaWVudDogQXhpc09yaWVudCk6IEhvcml6b250YWxBbGlnbiB7XG4gIGlmIChhbmdsZSA+IDApIHtcbiAgICBpZiAoYW5nbGUgJSAzNjAgPiAxODApIHtcbiAgICAgIHJldHVybiBvcmllbnQgPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKGFuZ2xlICUgMzYwIDwgMTgwKSB7XG4gICAgICByZXR1cm4gb3JpZW50ID09PSAndG9wJyA/ICdyaWdodCc6ICdsZWZ0JztcbiAgICB9XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCAwKSB7XG4gICAgcmV0dXJuIGxhYmVsQWxpZ24oKGFuZ2xlICUgMzYwKSArIDM2MCAvKiBjb252ZXJ0IHRvIHBvc2l0aXZlIHZhbHVlKi8sIG9yaWVudCk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuIl19

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var bin_1 = __webpack_require__(22);
	var channel_1 = __webpack_require__(23);
	var datetime_1 = __webpack_require__(31);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	function domainAndTicks(property, specifiedAxis, isGridAxis, channel) {
	    if (isGridAxis) {
	        return false;
	    }
	    return specifiedAxis[property];
	}
	exports.domainAndTicks = domainAndTicks;
	exports.domain = domainAndTicks;
	exports.ticks = domainAndTicks;
	// TODO: we need to refactor this method after we take care of config refactoring
	/**
	 * Default rules for whether to show a grid should be shown for a channel.
	 * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
	 */
	function grid(scaleType, fieldDef) {
	    return !scale_1.hasDiscreteDomain(scaleType) && !fieldDef.bin;
	}
	exports.grid = grid;
	function gridScale(model, channel, isGridAxis) {
	    if (isGridAxis) {
	        var gridChannel = channel === 'x' ? 'y' : 'x';
	        if (model.getScaleComponent(gridChannel)) {
	            return model.scaleName(gridChannel);
	        }
	    }
	    return undefined;
	}
	exports.gridScale = gridScale;
	function labelFlush(fieldDef, channel, specifiedAxis, isGridAxis) {
	    if (isGridAxis) {
	        return undefined;
	    }
	    if (specifiedAxis.labelFlush !== undefined) {
	        return specifiedAxis.labelFlush;
	    }
	    if (channel === 'x' && util_1.contains(['quantitative', 'temporal'], fieldDef.type)) {
	        return true;
	    }
	    return undefined;
	}
	exports.labelFlush = labelFlush;
	function labelOverlap(fieldDef, specifiedAxis, channel, scaleType) {
	    if (specifiedAxis.labelOverlap !== undefined) {
	        return specifiedAxis.labelOverlap;
	    }
	    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
	    if (fieldDef.type !== 'nominal') {
	        if (scaleType === 'log') {
	            return 'greedy';
	        }
	        return true;
	    }
	    return undefined;
	}
	exports.labelOverlap = labelOverlap;
	function minMaxExtent(specifiedExtent, isGridAxis) {
	    if (isGridAxis) {
	        // Always return 0 to make sure that `config.axis*.minExtent` and `config.axis*.maxExtent`
	        // would not affect gridAxis
	        return 0;
	    }
	    else {
	        return specifiedExtent;
	    }
	}
	exports.minMaxExtent = minMaxExtent;
	function orient(channel) {
	    switch (channel) {
	        case channel_1.X:
	            return 'bottom';
	        case channel_1.Y:
	            return 'left';
	    }
	    /* istanbul ignore next: This should never happen. */
	    throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);
	}
	exports.orient = orient;
	function tickCount(channel, fieldDef, scaleType, size) {
	    if (!scale_1.hasDiscreteDomain(scaleType) && scaleType !== 'log' && !util_1.contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {
	        if (fieldDef.bin) {
	            // for binned data, we don't want more ticks than maxbins
	            return { signal: "ceil(" + size.signal + "/20)" };
	        }
	        return { signal: "ceil(" + size.signal + "/40)" };
	    }
	    return undefined;
	}
	exports.tickCount = tickCount;
	function title(maxLength, fieldDef, config) {
	    // if not defined, automatically determine axis title from field def
	    var fieldTitle = fielddef_1.title(fieldDef, config);
	    return maxLength ? util_1.truncate(fieldTitle, maxLength) : fieldTitle;
	}
	exports.title = title;
	function values(specifiedAxis, model, fieldDef) {
	    var vals = specifiedAxis.values;
	    if (specifiedAxis.values && datetime_1.isDateTime(vals[0])) {
	        return vals.map(function (dt) {
	            // normalize = true as end user won't put 0 = January
	            return { signal: datetime_1.dateTimeExpr(dt, true) };
	        });
	    }
	    if (!vals && fieldDef.bin && fieldDef.type === type_1.QUANTITATIVE) {
	        var signal = model.getName(bin_1.binToString(fieldDef.bin) + "_" + fieldDef.field + "_bins");
	        return { signal: "sequence(" + signal + ".start, " + signal + ".stop + " + signal + ".step, " + signal + ".step)" };
	    }
	    return vals;
	}
	exports.values = values;
	function zindex(isGridAxis) {
	    if (isGridAxis) {
	        // if grid is true, need to put layer on the back so that grid is behind marks
	        return 0;
	    }
	    return 1; // otherwise return undefined and use Vega's default.
	}
	exports.zindex = zindex;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var vlEncoding = __webpack_require__(27);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var mark_1 = __webpack_require__(25);
	var stack_1 = __webpack_require__(43);
	var util_1 = __webpack_require__(14);
	var parse_1 = __webpack_require__(118);
	var parse_2 = __webpack_require__(52);
	var assemble_1 = __webpack_require__(63);
	var parse_3 = __webpack_require__(113);
	var init_1 = __webpack_require__(124);
	var mark_2 = __webpack_require__(125);
	var model_1 = __webpack_require__(57);
	var repeater_1 = __webpack_require__(116);
	var selection_1 = __webpack_require__(55);
	/**
	 * Internal model of Vega-Lite specification for the compiler.
	 */
	var UnitModel = /** @class */ (function (_super) {
	    __extends(UnitModel, _super);
	    function UnitModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {
	        if (parentGivenSize === void 0) { parentGivenSize = {}; }
	        var _this = _super.call(this, spec, parent, parentGivenName, config, undefined) || this;
	        _this.fit = fit;
	        _this.type = 'unit';
	        _this.specifiedScales = {};
	        _this.specifiedAxes = {};
	        _this.specifiedLegends = {};
	        _this.specifiedProjection = {};
	        _this.selection = {};
	        _this.children = [];
	        _this.initSize(__assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {})));
	        var mark = mark_1.isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
	        var encoding = _this.encoding = encoding_1.normalizeEncoding(repeater_1.replaceRepeaterInEncoding(spec.encoding || {}, repeater), mark);
	        _this.markDef = init_1.normalizeMarkDef(spec.mark, encoding, config);
	        // calculate stack properties
	        _this.stack = stack_1.stack(mark, encoding, _this.config.stack);
	        _this.specifiedScales = _this.initScales(mark, encoding);
	        _this.specifiedAxes = _this.initAxes(encoding);
	        _this.specifiedLegends = _this.initLegend(encoding);
	        _this.specifiedProjection = spec.projection;
	        // Selections will be initialized upon parse.
	        _this.selection = spec.selection;
	        return _this;
	    }
	    /**
	     * Return specified Vega-lite scale domain for a particular channel
	     * @param channel
	     */
	    UnitModel.prototype.scaleDomain = function (channel) {
	        var scale = this.specifiedScales[channel];
	        return scale ? scale.domain : undefined;
	    };
	    UnitModel.prototype.sort = function (channel) {
	        return (this.getMapping()[channel] || {}).sort;
	    };
	    UnitModel.prototype.axis = function (channel) {
	        return this.specifiedAxes[channel];
	    };
	    UnitModel.prototype.legend = function (channel) {
	        return this.specifiedLegends[channel];
	    };
	    UnitModel.prototype.initScales = function (mark, encoding) {
	        return channel_1.SCALE_CHANNELS.reduce(function (scales, channel) {
	            var fieldDef;
	            var specifiedScale;
	            var channelDef = encoding[channel];
	            if (fielddef_1.isFieldDef(channelDef)) {
	                fieldDef = channelDef;
	                specifiedScale = channelDef.scale;
	            }
	            else if (fielddef_1.hasConditionalFieldDef(channelDef)) {
	                fieldDef = channelDef.condition;
	                specifiedScale = channelDef.condition['scale'];
	            }
	            else if (channel === 'x') {
	                fieldDef = fielddef_1.getFieldDef(encoding.x2);
	            }
	            else if (channel === 'y') {
	                fieldDef = fielddef_1.getFieldDef(encoding.y2);
	            }
	            if (fieldDef) {
	                scales[channel] = specifiedScale || {};
	            }
	            return scales;
	        }, {});
	    };
	    UnitModel.prototype.initAxes = function (encoding) {
	        return [channel_1.X, channel_1.Y].reduce(function (_axis, channel) {
	            // Position Axis
	            // TODO: handle ConditionFieldDef
	            var channelDef = encoding[channel];
	            if (fielddef_1.isFieldDef(channelDef) ||
	                (channel === channel_1.X && fielddef_1.isFieldDef(encoding.x2)) ||
	                (channel === channel_1.Y && fielddef_1.isFieldDef(encoding.y2))) {
	                var axisSpec = fielddef_1.isFieldDef(channelDef) ? channelDef.axis : null;
	                // We no longer support false in the schema, but we keep false here for backward compatability.
	                if (axisSpec !== null && axisSpec !== false) {
	                    _axis[channel] = __assign({}, axisSpec);
	                }
	            }
	            return _axis;
	        }, {});
	    };
	    UnitModel.prototype.initLegend = function (encoding) {
	        return channel_1.NONPOSITION_SCALE_CHANNELS.reduce(function (_legend, channel) {
	            var channelDef = encoding[channel];
	            if (channelDef) {
	                var legend = fielddef_1.isFieldDef(channelDef) ? channelDef.legend :
	                    (fielddef_1.hasConditionalFieldDef(channelDef)) ? channelDef.condition['legend'] : null;
	                if (legend !== null && legend !== false) {
	                    _legend[channel] = __assign({}, legend);
	                }
	            }
	            return _legend;
	        }, {});
	    };
	    UnitModel.prototype.parseData = function () {
	        this.component.data = parse_2.parseData(this);
	    };
	    UnitModel.prototype.parseLayoutSize = function () {
	        parse_3.parseUnitLayoutSize(this);
	    };
	    UnitModel.prototype.parseSelection = function () {
	        this.component.selection = selection_1.parseUnitSelection(this, this.selection);
	    };
	    UnitModel.prototype.parseMarkGroup = function () {
	        this.component.mark = mark_2.parseMarkGroup(this);
	    };
	    UnitModel.prototype.parseAxisAndHeader = function () {
	        this.component.axes = parse_1.parseUnitAxis(this);
	    };
	    UnitModel.prototype.assembleSelectionTopLevelSignals = function (signals) {
	        return selection_1.assembleTopLevelSignals(this, signals);
	    };
	    UnitModel.prototype.assembleSelectionSignals = function () {
	        return selection_1.assembleUnitSelectionSignals(this, []);
	    };
	    UnitModel.prototype.assembleSelectionData = function (data) {
	        return selection_1.assembleUnitSelectionData(this, data);
	    };
	    UnitModel.prototype.assembleLayout = function () {
	        return null;
	    };
	    UnitModel.prototype.assembleLayoutSignals = function () {
	        return assemble_1.assembleLayoutSignals(this);
	    };
	    UnitModel.prototype.assembleMarks = function () {
	        var marks = this.component.mark || [];
	        // If this unit is part of a layer, selections should augment
	        // all in concert rather than each unit individually. This
	        // ensures correct interleaving of clipping and brushed marks.
	        if (!this.parent || !model_1.isLayerModel(this.parent)) {
	            marks = selection_1.assembleUnitSelectionMarks(this, marks);
	        }
	        return marks.map(this.correctDataNames);
	    };
	    UnitModel.prototype.assembleLayoutSize = function () {
	        return {
	            width: this.getSizeSignalRef('width'),
	            height: this.getSizeSignalRef('height')
	        };
	    };
	    UnitModel.prototype.getMapping = function () {
	        return this.encoding;
	    };
	    UnitModel.prototype.toSpec = function (excludeConfig, excludeData) {
	        var encoding = util_1.duplicate(this.encoding);
	        var spec;
	        spec = {
	            mark: this.markDef,
	            encoding: encoding
	        };
	        if (!excludeConfig) {
	            spec.config = util_1.duplicate(this.config);
	        }
	        if (!excludeData) {
	            spec.data = util_1.duplicate(this.data);
	        }
	        // remove defaults
	        return spec;
	    };
	    UnitModel.prototype.mark = function () {
	        return this.markDef.type;
	    };
	    UnitModel.prototype.channelHasField = function (channel) {
	        return vlEncoding.channelHasField(this.encoding, channel);
	    };
	    UnitModel.prototype.fieldDef = function (channel) {
	        var channelDef = this.encoding[channel];
	        return fielddef_1.getFieldDef(channelDef);
	    };
	    return UnitModel;
	}(model_1.ModelWithField));
	exports.UnitModel = UnitModel;
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var mark_1 = __webpack_require__(25);
	var type_1 = __webpack_require__(32);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	function normalizeMarkDef(mark, encoding, config) {
	    var markDef = mark_1.isMarkDef(mark) ? __assign({}, mark) : { type: mark };
	    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.
	    var specifiedOrient = markDef.orient || common_1.getMarkConfig('orient', markDef, config);
	    markDef.orient = orient(markDef.type, encoding, specifiedOrient);
	    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
	        log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));
	    }
	    // set opacity and filled if not specified in mark config
	    var specifiedOpacity = markDef.opacity || common_1.getMarkConfig('opacity', markDef, config);
	    if (specifiedOpacity === undefined) {
	        markDef.opacity = defaultOpacity(markDef.type, encoding);
	    }
	    var specifiedFilled = markDef.filled;
	    if (specifiedFilled === undefined) {
	        markDef.filled = filled(markDef, config);
	    }
	    return markDef;
	}
	exports.normalizeMarkDef = normalizeMarkDef;
	function defaultOpacity(mark, encoding) {
	    if (util_1.contains([mark_1.POINT, mark_1.TICK, mark_1.CIRCLE, mark_1.SQUARE], mark)) {
	        // point-based marks
	        if (!encoding_1.isAggregate(encoding)) {
	            return 0.7;
	        }
	    }
	    return undefined;
	}
	function filled(markDef, config) {
	    var filledConfig = common_1.getMarkConfig('filled', markDef, config);
	    var mark = markDef.type;
	    return filledConfig !== undefined ? filledConfig : mark !== mark_1.POINT && mark !== mark_1.LINE && mark !== mark_1.RULE;
	}
	function orient(mark, encoding, specifiedOrient) {
	    switch (mark) {
	        case mark_1.POINT:
	        case mark_1.CIRCLE:
	        case mark_1.SQUARE:
	        case mark_1.TEXT:
	        case mark_1.RECT:
	            // orient is meaningless for these marks.
	            return undefined;
	    }
	    var yIsRange = encoding.y2;
	    var xIsRange = encoding.x2;
	    switch (mark) {
	        case mark_1.RULE:
	            // return undefined for line segment rule
	            if (xIsRange && yIsRange) {
	                return undefined;
	            }
	        /* tslint:disable */
	        // intentional fall through
	        case mark_1.BAR:
	        case mark_1.AREA:
	            // If there are range for both x and y, y (vertical) has higher precedence.
	            if (yIsRange) {
	                return 'vertical';
	            }
	            else if (xIsRange) {
	                return 'horizontal';
	            }
	            else if (mark === mark_1.RULE) {
	                if (encoding.x && !encoding.y) {
	                    return 'vertical';
	                }
	                else if (encoding.y && !encoding.x) {
	                    return 'horizontal';
	                }
	            }
	        case mark_1.LINE: // intentional fall through
	        case mark_1.TICK:// Tick is opposite to bar, line, area and never have ranged mark.
	            /* tslint:enable */
	            var xIsContinuous = fielddef_1.isFieldDef(encoding.x) && fielddef_1.isContinuous(encoding.x);
	            var yIsContinuous = fielddef_1.isFieldDef(encoding.y) && fielddef_1.isContinuous(encoding.y);
	            if (xIsContinuous && !yIsContinuous) {
	                return mark !== 'tick' ? 'horizontal' : 'vertical';
	            }
	            else if (!xIsContinuous && yIsContinuous) {
	                return mark !== 'tick' ? 'vertical' : 'horizontal';
	            }
	            else if (xIsContinuous && yIsContinuous) {
	                var xDef = encoding.x; // we can cast here since they are surely fieldDef
	                var yDef = encoding.y;
	                var xIsTemporal = xDef.type === type_1.TEMPORAL;
	                var yIsTemporal = yDef.type === type_1.TEMPORAL;
	                // temporal without timeUnit is considered continuous, but better serves as dimension
	                if (xIsTemporal && !yIsTemporal) {
	                    return mark !== 'tick' ? 'vertical' : 'horizontal';
	                }
	                else if (!xIsTemporal && yIsTemporal) {
	                    return mark !== 'tick' ? 'horizontal' : 'vertical';
	                }
	                if (!xDef.aggregate && yDef.aggregate) {
	                    return mark !== 'tick' ? 'vertical' : 'horizontal';
	                }
	                else if (xDef.aggregate && !yDef.aggregate) {
	                    return mark !== 'tick' ? 'horizontal' : 'vertical';
	                }
	                if (specifiedOrient) {
	                    // When ambiguous, use user specified one.
	                    return specifiedOrient;
	                }
	                if (!(mark === mark_1.LINE && encoding.order)) {
	                    // Except for connected scatterplot, we should log warning for unclear orientation of QxQ plots.
	                    log.warn(log.message.unclearOrientContinuous(mark));
	                }
	                return 'vertical';
	            }
	            else {
	                // For Discrete x Discrete case, return undefined.
	                log.warn(log.message.unclearOrientDiscreteOrEmpty(mark));
	                return undefined;
	            }
	    }
	    return 'vertical';
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var data_1 = __webpack_require__(53);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var mark_1 = __webpack_require__(25);
	var sort_1 = __webpack_require__(79);
	var util_1 = __webpack_require__(14);
	var common_1 = __webpack_require__(62);
	var area_1 = __webpack_require__(126);
	var bar_1 = __webpack_require__(127);
	var geoshape_1 = __webpack_require__(128);
	var line_1 = __webpack_require__(129);
	var point_1 = __webpack_require__(130);
	var rect_1 = __webpack_require__(131);
	var rule_1 = __webpack_require__(132);
	var text_1 = __webpack_require__(133);
	var tick_1 = __webpack_require__(134);
	var markCompiler = {
	    area: area_1.area,
	    bar: bar_1.bar,
	    line: line_1.line,
	    point: point_1.point,
	    text: text_1.text,
	    tick: tick_1.tick,
	    rect: rect_1.rect,
	    rule: rule_1.rule,
	    circle: point_1.circle,
	    square: point_1.square,
	    geoshape: geoshape_1.geoshape
	};
	function parseMarkGroup(model) {
	    if (util_1.contains([mark_1.LINE, mark_1.AREA], model.mark())) {
	        return parsePathMark(model);
	    }
	    else {
	        return parseNonPathMark(model);
	    }
	}
	exports.parseMarkGroup = parseMarkGroup;
	var FACETED_PATH_PREFIX = 'faceted_path_';
	function parsePathMark(model) {
	    var mark = model.mark();
	    var details = pathGroupingFields(model.encoding);
	    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
	    var clip = model.markDef.clip !== undefined ? !!model.markDef.clip : scaleClip(model);
	    var style = common_1.getStyles(model.markDef);
	    var sort = getPathSort(model);
	    var pathMarks = [
	        __assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), (sort ? { sort: sort } : {}), { 
	            // If has subfacet for line/area group, need to use faceted data from below.
	            // FIXME: support sorting path order (in connected scatterplot)
	            from: { data: (details.length > 0 ? FACETED_PATH_PREFIX : '') + model.requestDataName(data_1.MAIN) }, encode: { update: markCompiler[mark].encodeEntry(model) } }, postEncodingTransform ? { transform: postEncodingTransform } : {})
	    ];
	    if (details.length > 0) {
	        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
	        return [{
	                name: model.getName('pathgroup'),
	                type: 'group',
	                from: {
	                    facet: {
	                        name: FACETED_PATH_PREFIX + model.requestDataName(data_1.MAIN),
	                        data: model.requestDataName(data_1.MAIN),
	                        groupby: details,
	                    }
	                },
	                encode: {
	                    update: {
	                        width: { field: { group: 'width' } },
	                        height: { field: { group: 'height' } }
	                    }
	                },
	                marks: pathMarks
	            }];
	    }
	    else {
	        return pathMarks;
	    }
	}
	function getPathSort(model) {
	    if (model.mark() === 'line' && model.channelHasField('order')) {
	        // For only line, sort by the order field if it is specified.
	        return common_1.sortParams(model.encoding.order, { expr: 'datum' });
	    }
	    else {
	        // For both line and area, we sort values based on dimension by default
	        var dimensionChannel = model.markDef.orient === 'horizontal' ? 'y' : 'x';
	        var s = model.sort(dimensionChannel);
	        var sortField = sort_1.isSortField(s) ?
	            fielddef_1.vgField({
	                // FIXME: this op might not already exist?
	                // FIXME: what if dimensionChannel (x or y) contains custom domain?
	                aggregate: encoding_1.isAggregate(model.encoding) ? s.op : undefined,
	                field: s.field
	            }, { expr: 'datum' }) :
	            model.vgField(dimensionChannel, {
	                // For stack with imputation, we only have bin_mid
	                binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
	                expr: 'datum'
	            });
	        return sortField ?
	            {
	                field: sortField,
	                order: 'descending'
	            } :
	            undefined;
	    }
	}
	exports.getPathSort = getPathSort;
	function parseNonPathMark(model) {
	    var mark = model.mark();
	    var style = common_1.getStyles(model.markDef);
	    var clip = model.markDef.clip !== undefined ? !!model.markDef.clip : scaleClip(model);
	    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;
	    var marks = []; // TODO: vgMarks
	    // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
	    marks.push(__assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), { from: { data: model.requestDataName(data_1.MAIN) }, encode: { update: markCompiler[mark].encodeEntry(model) } }, (postEncodingTransform ? { transform: postEncodingTransform } : {})));
	    return marks;
	}
	/**
	 * Returns list of path grouping fields
	 * that the model's spec contains.
	 */
	function pathGroupingFields(encoding) {
	    return util_1.keys(encoding).reduce(function (details, channel) {
	        switch (channel) {
	            // x, y, x2, y2, order, tooltip, href, cursor should not cause lines to group
	            case 'x':
	            case 'y':
	            case 'order':
	            case 'tooltip':
	            case 'href':
	            case 'x2':
	            case 'y2':
	            // TODO: case 'cursor':
	            // text, shape, shouldn't be a part of line/area
	            case 'text':
	            case 'shape':
	                return details;
	            case 'detail':
	                var channelDef = encoding[channel];
	                if (channelDef) {
	                    (vega_util_1.isArray(channelDef) ? channelDef : [channelDef]).forEach(function (fieldDef) {
	                        if (!fieldDef.aggregate) {
	                            details.push(fielddef_1.vgField(fieldDef, {}));
	                        }
	                    });
	                }
	                return details;
	            case 'color':
	            case 'size':
	            case 'opacity':
	                // TODO strokeDashOffset:
	                var fieldDef = fielddef_1.getFieldDef(encoding[channel]);
	                if (fieldDef && !fieldDef.aggregate) {
	                    details.push(fielddef_1.vgField(fieldDef, {}));
	                }
	                return details;
	            default:
	                throw new Error("Bug: Channel " + channel + " unimplemented for line mark");
	        }
	    }, []);
	}
	exports.pathGroupingFields = pathGroupingFields;
	/**
	 * If scales are bound to interval selections, we want to automatically clip
	 * marks to account for panning/zooming interactions. We identify bound scales
	 * by the domainRaw property, which gets added during scale parsing.
	 */
	function scaleClip(model) {
	    var xScale = model.getScaleComponent('x');
	    var yScale = model.getScaleComponent('y');
	    return (xScale && xScale.get('domainRaw')) ||
	        (yScale && yScale.get('domainRaw')) ? true : false;
	}
	//# sourceMappingURL=data:application/json;base64,

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var mixins = __webpack_require__(70);
	exports.area = {
	    vgMark: 'area',
	    encodeEntry: function (model) {
	        return __assign({}, mixins.baseEncodeEntry(model, false), mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'));
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvYXJlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRUEsaUNBQW1DO0FBR3RCLFFBQUEsSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLE1BQU0sY0FDRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFDcEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUM1QztJQUNKLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5cbmV4cG9ydCBjb25zdCBhcmVhOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ2FyZWEnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwgZmFsc2UpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_util_1 = __webpack_require__(19);
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var scale_1 = __webpack_require__(39);
	var vega_schema_1 = __webpack_require__(59);
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	exports.bar = {
	    vgMark: 'rect',
	    encodeEntry: function (model) {
	        var stack = model.stack;
	        return __assign({}, mixins.baseEncodeEntry(model, true), x(model, stack), y(model, stack));
	    }
	};
	function x(model, stack) {
	    var config = model.config, width = model.width;
	    var orient = model.markDef.orient;
	    var sizeDef = model.encoding.size;
	    var xDef = model.encoding.x;
	    var xScaleName = model.scaleName(channel_1.X);
	    var xScale = model.getScaleComponent(channel_1.X);
	    // x, x2, and width -- we must specify two of these in all conditions
	    if (orient === 'horizontal') {
	        return __assign({}, mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'));
	    }
	    else {
	        if (fielddef_1.isFieldDef(xDef)) {
	            var xScaleType = xScale.get('type');
	            if (xDef.bin && !sizeDef && !scale_1.hasDiscreteDomain(xScaleType)) {
	                return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), config.bar.binSpacing, xScale.get('reverse'));
	            }
	            else {
	                if (xScaleType === scale_1.ScaleType.BAND) {
	                    return mixins.bandPosition(xDef, 'x', model);
	                }
	            }
	        }
	        // sized bin, normal point-ordinal axis, quantitative x-axis, or no x
	        return mixins.centeredBandPosition('x', model, __assign({}, ref.mid(width)), defaultSizeRef(xScaleName, xScale, config));
	    }
	}
	function y(model, stack) {
	    var config = model.config, encoding = model.encoding, height = model.height;
	    var orient = model.markDef.orient;
	    var sizeDef = encoding.size;
	    var yDef = encoding.y;
	    var yScaleName = model.scaleName(channel_1.Y);
	    var yScale = model.getScaleComponent(channel_1.Y);
	    // y, y2 & height -- we must specify two of these in all conditions
	    if (orient === 'vertical') {
	        return __assign({}, mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin'));
	    }
	    else {
	        if (fielddef_1.isFieldDef(yDef)) {
	            var yScaleType = yScale.get('type');
	            if (yDef.bin && !sizeDef && !scale_1.hasDiscreteDomain(yScaleType)) {
	                return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), config.bar.binSpacing, yScale.get('reverse'));
	            }
	            else if (yScaleType === scale_1.ScaleType.BAND) {
	                return mixins.bandPosition(yDef, 'y', model);
	            }
	        }
	        return mixins.centeredBandPosition('y', model, ref.mid(height), defaultSizeRef(yScaleName, yScale, config));
	    }
	}
	function defaultSizeRef(scaleName, scale, config) {
	    if (config.bar.discreteBandSize) {
	        return { value: config.bar.discreteBandSize };
	    }
	    if (scale) {
	        var scaleType = scale.get('type');
	        if (scaleType === scale_1.ScaleType.POINT) {
	            var scaleRange = scale.get('range');
	            if (vega_schema_1.isVgRangeStep(scaleRange) && vega_util_1.isNumber(scaleRange.step)) {
	                return { value: scaleRange.step - 1 };
	            }
	            log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);
	        }
	        else if (scaleType === scale_1.ScaleType.BAND) {
	            return ref.bandRef(scaleName);
	        }
	        else {
	            return { value: config.bar.continuousBandSize };
	        }
	    }
	    if (config.scale.rangeStep && config.scale.rangeStep !== null) {
	        return { value: config.scale.rangeStep - 1 };
	    }
	    return { value: 20 };
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbWFyay9iYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVDQUFtQztBQUNuQyx5Q0FBbUM7QUFFbkMsMkNBQTBDO0FBQzFDLCtCQUFpQztBQUNqQyxxQ0FBeUQ7QUFHekQsaURBQStEO0FBSS9ELGlDQUFtQztBQUNuQyxnQ0FBa0M7QUFHckIsUUFBQSxHQUFHLEdBQWlCO0lBQy9CLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUMxQixNQUFNLGNBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ25DLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQ2YsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFDbEI7SUFDSixDQUFDO0NBQ0YsQ0FBQztBQUVGLFdBQVcsS0FBZ0IsRUFBRSxLQUFzQjtJQUMxQyxJQUFBLHFCQUFNLEVBQUUsbUJBQUssQ0FBVTtJQUM5QixJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxJQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUVwQyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQUMsQ0FBQyxDQUFDO0lBQ3RDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxXQUFDLENBQUMsQ0FBQztJQUMxQyxxRUFBcUU7SUFDckUsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxjQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzVDO0lBQ0osQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sRUFBRSxDQUFDLENBQUMscUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMseUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FDMUIsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQzlFLENBQUM7WUFDSixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDL0MsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO1FBQ0QscUVBQXFFO1FBRXJFLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEtBQUssZUFDdkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FDbEIsY0FBYyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQzNDLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQztBQUVELFdBQVcsS0FBZ0IsRUFBRSxLQUFzQjtJQUMxQyxJQUFBLHFCQUFNLEVBQUUseUJBQVEsRUFBRSxxQkFBTSxDQUFVO0lBQ3pDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3BDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFFOUIsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4QixJQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQUMsQ0FBQyxDQUFDO0lBQ3RDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxXQUFDLENBQUMsQ0FBQztJQUMxQyxtRUFBbUU7SUFDbkUsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxjQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzVDO0lBQ0osQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sRUFBRSxDQUFDLENBQUMscUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMseUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FDMUIsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQzlFLENBQUM7WUFDSixDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFDNUQsY0FBYyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQzNDLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQztBQUVELHdCQUF3QixTQUFpQixFQUFFLEtBQXFCLEVBQUUsTUFBYztJQUM5RSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ1YsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssaUJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsRUFBRSxDQUFDLENBQUMsMkJBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNELE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBQyxDQUFDO1lBQ3RDLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUNoRSxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBQyxDQUFDO0lBQzdDLENBQUM7SUFDRCxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNOdW1iZXJ9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge1gsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge2lzRmllbGREZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtoYXNEaXNjcmV0ZURvbWFpbiwgU2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge1N0YWNrUHJvcGVydGllc30gZnJvbSAnLi4vLi4vc3RhY2snO1xuaW1wb3J0IHtWZ1ZhbHVlUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzVmdSYW5nZVN0ZXAsIFZnRW5jb2RlRW50cnl9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7U2NhbGVDb21wb25lbnR9IGZyb20gJy4uL3NjYWxlL2NvbXBvbmVudCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IGJhcjogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBtb2RlbC5zdGFjaztcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwgdHJ1ZSksXG4gICAgICAuLi54KG1vZGVsLCBzdGFjayksXG4gICAgICAuLi55KG1vZGVsLCBzdGFjayksXG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24geChtb2RlbDogVW5pdE1vZGVsLCBzdGFjazogU3RhY2tQcm9wZXJ0aWVzKTogVmdFbmNvZGVFbnRyeSB7XG4gIGNvbnN0IHtjb25maWcsIHdpZHRofSA9IG1vZGVsO1xuICBjb25zdCBvcmllbnQgPSBtb2RlbC5tYXJrRGVmLm9yaWVudDtcbiAgY29uc3Qgc2l6ZURlZiA9IG1vZGVsLmVuY29kaW5nLnNpemU7XG5cbiAgY29uc3QgeERlZiA9IG1vZGVsLmVuY29kaW5nLng7XG4gIGNvbnN0IHhTY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoWCk7XG4gIGNvbnN0IHhTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KFgpO1xuICAvLyB4LCB4MiwgYW5kIHdpZHRoIC0tIHdlIG11c3Qgc3BlY2lmeSB0d28gb2YgdGhlc2UgaW4gYWxsIGNvbmRpdGlvbnNcbiAgaWYgKG9yaWVudCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsICd6ZXJvT3JNaW4nKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1pbicpLFxuICAgIH07XG4gIH0gZWxzZSB7IC8vIHZlcnRpY2FsXG4gICAgaWYgKGlzRmllbGREZWYoeERlZikpIHtcbiAgICAgIGNvbnN0IHhTY2FsZVR5cGUgPSB4U2NhbGUuZ2V0KCd0eXBlJyk7XG4gICAgICBpZiAoeERlZi5iaW4gJiYgIXNpemVEZWYgJiYgIWhhc0Rpc2NyZXRlRG9tYWluKHhTY2FsZVR5cGUpKSB7XG4gICAgICAgIHJldHVybiBtaXhpbnMuYmlubmVkUG9zaXRpb24oXG4gICAgICAgICAgeERlZiwgJ3gnLCBtb2RlbC5zY2FsZU5hbWUoJ3gnKSwgY29uZmlnLmJhci5iaW5TcGFjaW5nLCB4U2NhbGUuZ2V0KCdyZXZlcnNlJylcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh4U2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgICAgIHJldHVybiBtaXhpbnMuYmFuZFBvc2l0aW9uKHhEZWYsICd4JywgbW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHNpemVkIGJpbiwgbm9ybWFsIHBvaW50LW9yZGluYWwgYXhpcywgcXVhbnRpdGF0aXZlIHgtYXhpcywgb3Igbm8geFxuXG4gICAgcmV0dXJuIG1peGlucy5jZW50ZXJlZEJhbmRQb3NpdGlvbigneCcsIG1vZGVsLFxuICAgICAgey4uLnJlZi5taWQod2lkdGgpfSxcbiAgICAgIGRlZmF1bHRTaXplUmVmKHhTY2FsZU5hbWUsIHhTY2FsZSwgY29uZmlnKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24geShtb2RlbDogVW5pdE1vZGVsLCBzdGFjazogU3RhY2tQcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHtjb25maWcsIGVuY29kaW5nLCBoZWlnaHR9ID0gbW9kZWw7XG4gIGNvbnN0IG9yaWVudCA9IG1vZGVsLm1hcmtEZWYub3JpZW50O1xuICBjb25zdCBzaXplRGVmID0gZW5jb2Rpbmcuc2l6ZTtcblxuICBjb25zdCB5RGVmID0gZW5jb2RpbmcueTtcbiAgY29uc3QgeVNjYWxlTmFtZSA9IG1vZGVsLnNjYWxlTmFtZShZKTtcbiAgY29uc3QgeVNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoWSk7XG4gIC8vIHksIHkyICYgaGVpZ2h0IC0tIHdlIG11c3Qgc3BlY2lmeSB0d28gb2YgdGhlc2UgaW4gYWxsIGNvbmRpdGlvbnNcbiAgaWYgKG9yaWVudCA9PT0gJ3ZlcnRpY2FsJykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNaW4nKSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGlmIChpc0ZpZWxkRGVmKHlEZWYpKSB7XG4gICAgICBjb25zdCB5U2NhbGVUeXBlID0geVNjYWxlLmdldCgndHlwZScpO1xuICAgICAgaWYgKHlEZWYuYmluICYmICFzaXplRGVmICYmICFoYXNEaXNjcmV0ZURvbWFpbih5U2NhbGVUeXBlKSkge1xuICAgICAgICByZXR1cm4gbWl4aW5zLmJpbm5lZFBvc2l0aW9uKFxuICAgICAgICAgIHlEZWYsICd5JywgbW9kZWwuc2NhbGVOYW1lKCd5JyksIGNvbmZpZy5iYXIuYmluU3BhY2luZywgeVNjYWxlLmdldCgncmV2ZXJzZScpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHlTY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5CQU5EKSB7XG4gICAgICAgIHJldHVybiBtaXhpbnMuYmFuZFBvc2l0aW9uKHlEZWYsICd5JywgbW9kZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWl4aW5zLmNlbnRlcmVkQmFuZFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSxcbiAgICAgIGRlZmF1bHRTaXplUmVmKHlTY2FsZU5hbWUsIHlTY2FsZSwgY29uZmlnKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFNpemVSZWYoc2NhbGVOYW1lOiBzdHJpbmcsIHNjYWxlOiBTY2FsZUNvbXBvbmVudCwgY29uZmlnOiBDb25maWcpOiBWZ1ZhbHVlUmVmIHtcbiAgaWYgKGNvbmZpZy5iYXIuZGlzY3JldGVCYW5kU2l6ZSkge1xuICAgIHJldHVybiB7dmFsdWU6IGNvbmZpZy5iYXIuZGlzY3JldGVCYW5kU2l6ZX07XG4gIH1cblxuICBpZiAoc2NhbGUpIHtcbiAgICBjb25zdCBzY2FsZVR5cGUgPSBzY2FsZS5nZXQoJ3R5cGUnKTtcbiAgICBpZiAoc2NhbGVUeXBlID09PSBTY2FsZVR5cGUuUE9JTlQpIHtcbiAgICAgIGNvbnN0IHNjYWxlUmFuZ2UgPSBzY2FsZS5nZXQoJ3JhbmdlJyk7XG4gICAgICBpZiAoaXNWZ1JhbmdlU3RlcChzY2FsZVJhbmdlKSAmJiBpc051bWJlcihzY2FsZVJhbmdlLnN0ZXApKSB7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IHNjYWxlUmFuZ2Uuc3RlcCAtIDF9O1xuICAgICAgfVxuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuQkFSX1dJVEhfUE9JTlRfU0NBTEVfQU5EX1JBTkdFU1RFUF9OVUxMKTtcbiAgICB9IGVsc2UgaWYgKHNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLkJBTkQpIHtcbiAgICAgIHJldHVybiByZWYuYmFuZFJlZihzY2FsZU5hbWUpO1xuICAgIH0gZWxzZSB7IC8vIG5vbi1vcmRpbmFsIHNjYWxlXG4gICAgICByZXR1cm4ge3ZhbHVlOiBjb25maWcuYmFyLmNvbnRpbnVvdXNCYW5kU2l6ZX07XG4gICAgfVxuICB9XG4gIGlmIChjb25maWcuc2NhbGUucmFuZ2VTdGVwICYmIGNvbmZpZy5zY2FsZS5yYW5nZVN0ZXAgIT09IG51bGwpIHtcbiAgICByZXR1cm4ge3ZhbHVlOiBjb25maWcuc2NhbGUucmFuZ2VTdGVwIC0gMX07XG4gIH1cbiAgcmV0dXJuIHt2YWx1ZTogMjB9O1xufVxuXG4iXX0=

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var mixins = __webpack_require__(70);
	var fielddef_1 = __webpack_require__(28);
	var type_1 = __webpack_require__(32);
	exports.geoshape = {
	    vgMark: 'shape',
	    encodeEntry: function (model) {
	        return __assign({}, mixins.baseEncodeEntry(model, true));
	    },
	    postEncodingTransform: function (model) {
	        var encoding = model.encoding;
	        var shapeDef = encoding.shape;
	        var transform = __assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && fielddef_1.isFieldDef(shapeDef) && shapeDef.type === type_1.GEOJSON ? { field: fielddef_1.vgField(shapeDef, { expr: 'datum' }) } : {}));
	        return [transform];
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2Vvc2hhcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL2dlb3NoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQSxpQ0FBbUM7QUFFbkMsMkNBQW1EO0FBQ25ELG1DQUFtQztBQUl0QixRQUFBLFFBQVEsR0FBaUI7SUFDcEMsTUFBTSxFQUFFLE9BQU87SUFDZixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixNQUFNLGNBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ3RDO0lBQ0osQ0FBQztJQUNELHFCQUFxQixFQUFFLFVBQUMsS0FBZ0I7UUFDL0IsSUFBQSx5QkFBUSxDQUFVO1FBQ3pCLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFFaEMsSUFBTSxTQUFTLGNBQ2IsSUFBSSxFQUFFLFVBQVUsRUFDaEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFFL0IsQ0FBQyxRQUFRLElBQUkscUJBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLGNBQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsa0JBQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDdEgsQ0FBQztRQUNGLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0ICogYXMgbWl4aW5zIGZyb20gJy4vbWl4aW5zJztcblxuaW1wb3J0IHtpc0ZpZWxkRGVmLCB2Z0ZpZWxkfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQge0dFT0pTT059IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtWZ0dlb1NoYXBlVHJhbnNmb3JtLCBWZ1Bvc3RFbmNvZGluZ1RyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjb25zdCBnZW9zaGFwZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzaGFwZScsXG4gIGVuY29kZUVudHJ5OiAobW9kZWw6IFVuaXRNb2RlbCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB0cnVlKVxuICAgIH07XG4gIH0sXG4gIHBvc3RFbmNvZGluZ1RyYW5zZm9ybTogKG1vZGVsOiBVbml0TW9kZWwpOiBWZ1Bvc3RFbmNvZGluZ1RyYW5zZm9ybVtdID0+IHtcbiAgICBjb25zdCB7ZW5jb2Rpbmd9ID0gbW9kZWw7XG4gICAgY29uc3Qgc2hhcGVEZWYgPSBlbmNvZGluZy5zaGFwZTtcblxuICAgIGNvbnN0IHRyYW5zZm9ybTogVmdHZW9TaGFwZVRyYW5zZm9ybSA9IHtcbiAgICAgIHR5cGU6ICdnZW9zaGFwZScsXG4gICAgICBwcm9qZWN0aW9uOiBtb2RlbC5wcm9qZWN0aW9uTmFtZSgpLFxuICAgICAgLy8gYXM6ICdzaGFwZScsXG4gICAgICAuLi4oc2hhcGVEZWYgJiYgaXNGaWVsZERlZihzaGFwZURlZikgJiYgc2hhcGVEZWYudHlwZSA9PT0gR0VPSlNPTiA/IHtmaWVsZDogdmdGaWVsZChzaGFwZURlZiwge2V4cHI6ICdkYXR1bSd9KX0gOiB7fSlcbiAgICB9O1xuICAgIHJldHVybiBbdHJhbnNmb3JtXTtcbiAgfVxufTtcbiJdfQ==

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	exports.line = {
	    vgMark: 'line',
	    encodeEntry: function (model) {
	        var width = model.width, height = model.height;
	        return __assign({}, mixins.baseEncodeEntry(model, true), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {
	            vgChannel: 'strokeWidth' // VL's line size is strokeWidth
	        }));
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRUEsaUNBQW1DO0FBQ25DLGdDQUFrQztBQUVyQixRQUFBLElBQUksR0FBaUI7SUFDaEMsTUFBTSxFQUFFLE1BQU07SUFDZCxXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUNyQixJQUFBLG1CQUFLLEVBQUUscUJBQU0sQ0FBVTtRQUU5QixNQUFNLGNBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ25DLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ2hELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQ2pELE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRTtZQUNuQyxTQUFTLEVBQUUsYUFBYSxDQUFFLGdDQUFnQztTQUMzRCxDQUFDLEVBQ0Y7SUFDSixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7TWFya0NvbXBpbGVyfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0ICogYXMgbWl4aW5zIGZyb20gJy4vbWl4aW5zJztcbmltcG9ydCAqIGFzIHJlZiBmcm9tICcuL3ZhbHVlcmVmJztcblxuZXhwb3J0IGNvbnN0IGxpbmU6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAnbGluZScsXG4gIGVuY29kZUVudHJ5OiAobW9kZWw6IFVuaXRNb2RlbCkgPT4ge1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IG1vZGVsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHRydWUpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpKSxcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsLCB7XG4gICAgICAgIHZnQ2hhbm5lbDogJ3N0cm9rZVdpZHRoJyAgLy8gVkwncyBsaW5lIHNpemUgaXMgc3Ryb2tlV2lkdGhcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var common_1 = __webpack_require__(62);
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	function encodeEntry(model, fixedShape) {
	    var config = model.config, width = model.width, height = model.height;
	    return __assign({}, mixins.baseEncodeEntry(model, true), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), shapeMixins(model, config, fixedShape));
	}
	function shapeMixins(model, config, fixedShape) {
	    if (fixedShape) {
	        return { shape: { value: fixedShape } };
	    }
	    return mixins.nonPosition('shape', model, { defaultValue: common_1.getMarkConfig('shape', model.markDef, config) });
	}
	exports.shapeMixins = shapeMixins;
	exports.point = {
	    vgMark: 'symbol',
	    encodeEntry: function (model) {
	        return encodeEntry(model);
	    }
	};
	exports.circle = {
	    vgMark: 'symbol',
	    encodeEntry: function (model) {
	        return encodeEntry(model, 'circle');
	    }
	};
	exports.square = {
	    vgMark: 'symbol',
	    encodeEntry: function (model) {
	        return encodeEntry(model, 'square');
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQSxvQ0FBd0M7QUFHeEMsaUNBQW1DO0FBQ25DLGdDQUFrQztBQUdsQyxxQkFBcUIsS0FBZ0IsRUFBRSxVQUFnQztJQUM5RCxJQUFBLHFCQUFNLEVBQUUsbUJBQUssRUFBRSxxQkFBTSxDQUFVO0lBRXRDLE1BQU0sY0FDRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQ2pDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUN6QztBQUNKLENBQUM7QUFFRCxxQkFBNEIsS0FBZ0IsRUFBRSxNQUFjLEVBQUUsVUFBZ0M7SUFDNUYsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsRUFBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUMsWUFBWSxFQUFFLHNCQUFhLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFXLEVBQUMsQ0FBQyxDQUFDO0FBQ3JILENBQUM7QUFMRCxrQ0FLQztBQUVZLFFBQUEsS0FBSyxHQUFpQjtJQUNqQyxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7Q0FDRixDQUFDO0FBRVcsUUFBQSxNQUFNLEdBQWlCO0lBQ2xDLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFDO0FBRVcsUUFBQSxNQUFNLEdBQWlCO0lBQ2xDLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge1ZnRW5jb2RlRW50cnl9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7Z2V0TWFya0NvbmZpZ30gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7TWFya0NvbXBpbGVyfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0ICogYXMgbWl4aW5zIGZyb20gJy4vbWl4aW5zJztcbmltcG9ydCAqIGFzIHJlZiBmcm9tICcuL3ZhbHVlcmVmJztcblxuXG5mdW5jdGlvbiBlbmNvZGVFbnRyeShtb2RlbDogVW5pdE1vZGVsLCBmaXhlZFNoYXBlPzogJ2NpcmNsZScgfCAnc3F1YXJlJykge1xuICBjb25zdCB7Y29uZmlnLCB3aWR0aCwgaGVpZ2h0fSA9IG1vZGVsO1xuXG4gIHJldHVybiB7XG4gICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwgdHJ1ZSksXG4gICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSksXG4gICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwpLFxuICAgIC4uLnNoYXBlTWl4aW5zKG1vZGVsLCBjb25maWcsIGZpeGVkU2hhcGUpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcGVNaXhpbnMobW9kZWw6IFVuaXRNb2RlbCwgY29uZmlnOiBDb25maWcsIGZpeGVkU2hhcGU/OiAnY2lyY2xlJyB8ICdzcXVhcmUnKTogVmdFbmNvZGVFbnRyeSB7XG4gIGlmIChmaXhlZFNoYXBlKSB7XG4gICAgcmV0dXJuIHtzaGFwZToge3ZhbHVlOiBmaXhlZFNoYXBlfX07XG4gIH1cbiAgcmV0dXJuIG1peGlucy5ub25Qb3NpdGlvbignc2hhcGUnLCBtb2RlbCwge2RlZmF1bHRWYWx1ZTogZ2V0TWFya0NvbmZpZygnc2hhcGUnLCBtb2RlbC5tYXJrRGVmLCBjb25maWcpIGFzIHN0cmluZ30pO1xufVxuXG5leHBvcnQgY29uc3QgcG9pbnQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAnc3ltYm9sJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIGVuY29kZUVudHJ5KG1vZGVsKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNpcmNsZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdjaXJjbGUnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNxdWFyZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdzcXVhcmUnKTtcbiAgfVxufTtcbiJdfQ==

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var fielddef_1 = __webpack_require__(28);
	var log = __webpack_require__(29);
	var mark_1 = __webpack_require__(25);
	var scale_1 = __webpack_require__(39);
	var mixins = __webpack_require__(70);
	exports.rect = {
	    vgMark: 'rect',
	    encodeEntry: function (model) {
	        return __assign({}, mixins.baseEncodeEntry(model, true), x(model), y(model));
	    }
	};
	function x(model) {
	    var xDef = model.encoding.x;
	    var x2Def = model.encoding.x2;
	    var xScale = model.getScaleComponent(channel_1.X);
	    var xScaleType = xScale ? xScale.get('type') : undefined;
	    if (fielddef_1.isFieldDef(xDef) && xDef.bin && !x2Def) {
	        return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), 0, xScale.get('reverse'));
	    }
	    else if (fielddef_1.isFieldDef(xDef) && xScale && scale_1.hasDiscreteDomain(xScaleType)) {
	        /* istanbul ignore else */
	        if (xScaleType === scale_1.ScaleType.BAND) {
	            return mixins.bandPosition(xDef, 'x', model);
	        }
	        else {
	            // We don't support rect mark with point/ordinal scale
	            throw new Error(log.message.scaleTypeNotWorkWithMark(mark_1.RECT, xScaleType));
	        }
	    }
	    else {
	        return __assign({}, mixins.pointPosition('x', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));
	    }
	}
	function y(model) {
	    var yDef = model.encoding.y;
	    var y2Def = model.encoding.y2;
	    var yScale = model.getScaleComponent(channel_1.Y);
	    var yScaleType = yScale ? yScale.get('type') : undefined;
	    if (fielddef_1.isFieldDef(yDef) && yDef.bin && !y2Def) {
	        return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), 0, yScale.get('reverse'));
	    }
	    else if (fielddef_1.isFieldDef(yDef) && yScale && scale_1.hasDiscreteDomain(yScaleType)) {
	        /* istanbul ignore else */
	        if (yScaleType === scale_1.ScaleType.BAND) {
	            return mixins.bandPosition(yDef, 'y', model);
	        }
	        else {
	            // We don't support rect mark with point/ordinal scale
	            throw new Error(log.message.scaleTypeNotWorkWithMark(mark_1.RECT, yScaleType));
	        }
	    }
	    else {
	        return __assign({}, mixins.pointPosition('y', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEseUNBQW1DO0FBQ25DLDJDQUEwQztBQUMxQywrQkFBaUM7QUFDakMsbUNBQWdDO0FBQ2hDLHFDQUF5RDtBQUd6RCxpQ0FBbUM7QUFFdEIsUUFBQSxJQUFJLEdBQWlCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsTUFBTSxjQUNELE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUNuQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ1IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUNYO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixXQUFXLEtBQWdCO0lBQ3pCLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQ2hDLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxXQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUUzRCxFQUFFLENBQUMsQ0FBQyxxQkFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMscUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUkseUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLDBCQUEwQjtRQUMxQixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sc0RBQXNEO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxXQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMxRSxDQUFDO0lBQ0gsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxjQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsRUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUNsRDtJQUNKLENBQUM7QUFDSCxDQUFDO0FBRUQsV0FBVyxLQUFnQjtJQUN6QixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUNoQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsV0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFM0QsRUFBRSxDQUFDLENBQUMscUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLHFCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLHlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RSwwQkFBMEI7UUFDMUIsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLGlCQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLHNEQUFzRDtZQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsV0FBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDMUUsQ0FBQztJQUNILENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sY0FDRCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFDbEQ7SUFDSixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7WCwgWX0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge2lzRmllbGREZWZ9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtSRUNUfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7aGFzRGlzY3JldGVEb21haW4sIFNjYWxlVHlwZX0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5leHBvcnQgY29uc3QgcmVjdDogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHRydWUpLFxuICAgICAgLi4ueChtb2RlbCksXG4gICAgICAuLi55KG1vZGVsKSxcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiB4KG1vZGVsOiBVbml0TW9kZWwpIHtcbiAgY29uc3QgeERlZiA9IG1vZGVsLmVuY29kaW5nLng7XG4gIGNvbnN0IHgyRGVmID0gbW9kZWwuZW5jb2RpbmcueDI7XG4gIGNvbnN0IHhTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KFgpO1xuICBjb25zdCB4U2NhbGVUeXBlID0geFNjYWxlID8geFNjYWxlLmdldCgndHlwZScpIDogdW5kZWZpbmVkO1xuXG4gIGlmIChpc0ZpZWxkRGVmKHhEZWYpICYmIHhEZWYuYmluICYmICF4MkRlZikge1xuICAgIHJldHVybiBtaXhpbnMuYmlubmVkUG9zaXRpb24oeERlZiwgJ3gnLCBtb2RlbC5zY2FsZU5hbWUoJ3gnKSwgMCwgeFNjYWxlLmdldCgncmV2ZXJzZScpKTtcbiAgfSBlbHNlIGlmIChpc0ZpZWxkRGVmKHhEZWYpICYmIHhTY2FsZSAmJiBoYXNEaXNjcmV0ZURvbWFpbih4U2NhbGVUeXBlKSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHhTY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5CQU5EKSB7XG4gICAgICByZXR1cm4gbWl4aW5zLmJhbmRQb3NpdGlvbih4RGVmLCAneCcsIG1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCByZWN0IG1hcmsgd2l0aCBwb2ludC9vcmRpbmFsIHNjYWxlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2Uuc2NhbGVUeXBlTm90V29ya1dpdGhNYXJrKFJFQ1QsIHhTY2FsZVR5cGUpKTtcbiAgICB9XG4gIH0gZWxzZSB7IC8vIGNvbnRpbnVvdXMgc2NhbGUgb3Igbm8gc2NhbGVcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgJ3plcm9Pck1heCcpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWluJywgJ3gyJylcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHkobW9kZWw6IFVuaXRNb2RlbCkge1xuICBjb25zdCB5RGVmID0gbW9kZWwuZW5jb2RpbmcueTtcbiAgY29uc3QgeTJEZWYgPSBtb2RlbC5lbmNvZGluZy55MjtcbiAgY29uc3QgeVNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoWSk7XG4gIGNvbnN0IHlTY2FsZVR5cGUgPSB5U2NhbGUgPyB5U2NhbGUuZ2V0KCd0eXBlJykgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzRmllbGREZWYoeURlZikgJiYgeURlZi5iaW4gJiYgIXkyRGVmKSB7XG4gICAgcmV0dXJuIG1peGlucy5iaW5uZWRQb3NpdGlvbih5RGVmLCAneScsIG1vZGVsLnNjYWxlTmFtZSgneScpLCAwLCB5U2NhbGUuZ2V0KCdyZXZlcnNlJykpO1xuICB9IGVsc2UgaWYgKGlzRmllbGREZWYoeURlZikgJiYgeVNjYWxlICYmIGhhc0Rpc2NyZXRlRG9tYWluKHlTY2FsZVR5cGUpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoeVNjYWxlVHlwZSA9PT0gU2NhbGVUeXBlLkJBTkQpIHtcbiAgICAgIHJldHVybiBtaXhpbnMuYmFuZFBvc2l0aW9uKHlEZWYsICd5JywgbW9kZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHJlY3QgbWFyayB3aXRoIHBvaW50L29yZGluYWwgc2NhbGVcbiAgICAgIHRocm93IG5ldyBFcnJvcihsb2cubWVzc2FnZS5zY2FsZVR5cGVOb3RXb3JrV2l0aE1hcmsoUkVDVCwgeVNjYWxlVHlwZSkpO1xuICAgIH1cbiAgfSBlbHNlIHsgLy8gY29udGludW91cyBzY2FsZSBvciBubyBzY2FsZVxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCAnemVyb09yTWF4JyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNaW4nLCAneTInKVxuICAgIH07XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	exports.rule = {
	    vgMark: 'rule',
	    encodeEntry: function (model) {
	        var _config = model.config, markDef = model.markDef, width = model.width, height = model.height;
	        var orient = markDef.orient;
	        if (!model.encoding.x && !model.encoding.y) {
	            // if we have neither x or y, show nothing
	            return {};
	        }
	        return __assign({}, mixins.baseEncodeEntry(model, true), mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)), mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)), (orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}), (orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}), mixins.nonPosition('size', model, {
	            vgChannel: 'strokeWidth' // VL's rule size is strokeWidth
	        }));
	    }
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRUEsaUNBQW1DO0FBQ25DLGdDQUFrQztBQUVyQixRQUFBLElBQUksR0FBaUI7SUFDaEMsTUFBTSxFQUFFLE1BQU07SUFDZCxXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUNyQixJQUFBLHNCQUFlLEVBQUUsdUJBQU8sRUFBRSxtQkFBSyxFQUFFLHFCQUFNLENBQVU7UUFDeEQsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUU5QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLDBDQUEwQztZQUMxQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUVELE1BQU0sY0FDRCxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN4RixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBR3ZGLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFHOUUsQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUVoRixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDbkMsU0FBUyxFQUFFLGFBQWEsQ0FBRSxnQ0FBZ0M7U0FDM0QsQ0FBQyxFQUNGO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cbmV4cG9ydCBjb25zdCBydWxlOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3J1bGUnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICBjb25zdCB7Y29uZmlnOiBfY29uZmlnLCBtYXJrRGVmLCB3aWR0aCwgaGVpZ2h0fSA9IG1vZGVsO1xuICAgIGNvbnN0IG9yaWVudCA9IG1hcmtEZWYub3JpZW50O1xuXG4gICAgaWYgKCFtb2RlbC5lbmNvZGluZy54ICYmICFtb2RlbC5lbmNvZGluZy55KSB7XG4gICAgICAvLyBpZiB3ZSBoYXZlIG5laXRoZXIgeCBvciB5LCBzaG93IG5vdGhpbmdcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwgdHJ1ZSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneCcsIG1vZGVsLCBvcmllbnQgPT09ICdob3Jpem9udGFsJyA/ICd6ZXJvT3JNaW4nIDogcmVmLm1pZCh3aWR0aCkpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgb3JpZW50ID09PSAndmVydGljYWwnID8gJ3plcm9Pck1pbicgOiByZWYubWlkKGhlaWdodCkpLFxuXG4gICAgICAvLyBpbmNsdWRlIHgyIGZvciBob3Jpem9udGFsIG9yIGxpbmUgc2VnbWVudCBydWxlXG4gICAgICAuLi4ob3JpZW50ICE9PSAndmVydGljYWwnID8gbWl4aW5zLnBvaW50UG9zaXRpb24yKG1vZGVsLCAnemVyb09yTWF4JywgJ3gyJykgOiB7fSksXG5cbiAgICAgIC8vIGluY2x1ZGUgeTIgZm9yIHZlcnRpY2FsIG9yIGxpbmUgc2VnbWVudCBydWxlXG4gICAgICAuLi4ob3JpZW50ICE9PSAnaG9yaXpvbnRhbCcgPyBtaXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNYXgnLCAneTInKSA6IHt9KSxcblxuICAgICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwsIHtcbiAgICAgICAgdmdDaGFubmVsOiAnc3Ryb2tlV2lkdGgnICAvLyBWTCdzIHJ1bGUgc2l6ZSBpcyBzdHJva2VXaWR0aFxuICAgICAgfSlcbiAgICB9O1xuICB9XG59O1xuIl19

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var channel_1 = __webpack_require__(23);
	var encoding_1 = __webpack_require__(27);
	var fielddef_1 = __webpack_require__(28);
	var type_1 = __webpack_require__(32);
	var common_1 = __webpack_require__(62);
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	exports.text = {
	    vgMark: 'text',
	    encodeEntry: function (model) {
	        var config = model.config, encoding = model.encoding, height = model.height;
	        var textDef = encoding.text;
	        return __assign({}, mixins.baseEncodeEntry(model, true), mixins.pointPosition('x', model, xDefault(config, textDef)), mixins.pointPosition('y', model, ref.mid(height)), mixins.text(model), mixins.nonPosition('size', model, {
	            vgChannel: 'fontSize' // VL's text size is fontSize
	        }), mixins.valueIfDefined('align', align(model.markDef, encoding, config)));
	    }
	};
	function xDefault(config, textDef) {
	    if (fielddef_1.isFieldDef(textDef) && textDef.type === type_1.QUANTITATIVE) {
	        return { field: { group: 'width' }, offset: -5 };
	    }
	    // TODO: allow this to fit (Be consistent with ref.midX())
	    return { value: config.scale.textXRangeStep / 2 };
	}
	function align(markDef, encoding, config) {
	    var a = markDef.align || common_1.getMarkConfig('align', markDef, config);
	    if (a === undefined) {
	        return encoding_1.channelHasField(encoding, channel_1.X) ? 'center' : 'right';
	    }
	    // If there is a config, Vega-parser will process this already.
	    return undefined;
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEseUNBQWdDO0FBRWhDLDJDQUF5RDtBQUN6RCwyQ0FBc0Q7QUFFdEQsbUNBQXdDO0FBRXhDLG9DQUF3QztBQUd4QyxpQ0FBbUM7QUFDbkMsZ0NBQWtDO0FBR3JCLFFBQUEsSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUVkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEscUJBQU0sRUFBRSx5QkFBUSxFQUFFLHFCQUFNLENBQVU7UUFDekMsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUU5QixNQUFNLGNBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ25DLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQzNELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQ2xCLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRTtZQUNuQyxTQUFTLEVBQUUsVUFBVSxDQUFFLDZCQUE2QjtTQUNyRCxDQUFDLEVBQ0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQ3pFO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixrQkFBa0IsTUFBYyxFQUFFLE9BQTJCO0lBQzNELEVBQUUsQ0FBQyxDQUFDLHFCQUFVLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxtQkFBWSxDQUFDLENBQUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELDBEQUEwRDtJQUMxRCxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsQ0FBQyxFQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELGVBQWUsT0FBZ0IsRUFBRSxRQUEwQixFQUFFLE1BQWM7SUFDekUsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxzQkFBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLDBCQUFlLENBQUMsUUFBUSxFQUFFLFdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMzRCxDQUFDO0lBQ0QsK0RBQStEO0lBQy9ELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7WH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7Y2hhbm5lbEhhc0ZpZWxkLCBFbmNvZGluZ30gZnJvbSAnLi4vLi4vZW5jb2RpbmcnO1xuaW1wb3J0IHtDaGFubmVsRGVmLCBpc0ZpZWxkRGVmfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQge01hcmtEZWZ9IGZyb20gJy4uLy4uL21hcmsnO1xuaW1wb3J0IHtRVUFOVElUQVRJVkV9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtWZ1ZhbHVlUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2dldE1hcmtDb25maWd9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IHRleHQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAndGV4dCcsXG5cbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZywgZW5jb2RpbmcsIGhlaWdodH0gPSBtb2RlbDtcbiAgICBjb25zdCB0ZXh0RGVmID0gZW5jb2RpbmcudGV4dDtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB0cnVlKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIHhEZWZhdWx0KGNvbmZpZywgdGV4dERlZikpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpKSxcbiAgICAgIC4uLm1peGlucy50ZXh0KG1vZGVsKSxcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsLCB7XG4gICAgICAgIHZnQ2hhbm5lbDogJ2ZvbnRTaXplJyAgLy8gVkwncyB0ZXh0IHNpemUgaXMgZm9udFNpemVcbiAgICAgIH0pLFxuICAgICAgLi4ubWl4aW5zLnZhbHVlSWZEZWZpbmVkKCdhbGlnbicsIGFsaWduKG1vZGVsLm1hcmtEZWYsIGVuY29kaW5nLCBjb25maWcpKVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHhEZWZhdWx0KGNvbmZpZzogQ29uZmlnLCB0ZXh0RGVmOiBDaGFubmVsRGVmPHN0cmluZz4pOiBWZ1ZhbHVlUmVmIHtcbiAgaWYgKGlzRmllbGREZWYodGV4dERlZikgJiYgdGV4dERlZi50eXBlID09PSBRVUFOVElUQVRJVkUpIHtcbiAgICByZXR1cm4ge2ZpZWxkOiB7Z3JvdXA6ICd3aWR0aCd9LCBvZmZzZXQ6IC01fTtcbiAgfVxuICAvLyBUT0RPOiBhbGxvdyB0aGlzIHRvIGZpdCAoQmUgY29uc2lzdGVudCB3aXRoIHJlZi5taWRYKCkpXG4gIHJldHVybiB7dmFsdWU6IGNvbmZpZy5zY2FsZS50ZXh0WFJhbmdlU3RlcCAvIDJ9O1xufVxuXG5mdW5jdGlvbiBhbGlnbihtYXJrRGVmOiBNYXJrRGVmLCBlbmNvZGluZzogRW5jb2Rpbmc8c3RyaW5nPiwgY29uZmlnOiBDb25maWcpIHtcbiAgY29uc3QgYSA9IG1hcmtEZWYuYWxpZ24gfHwgZ2V0TWFya0NvbmZpZygnYWxpZ24nLCBtYXJrRGVmLCBjb25maWcpO1xuICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoYW5uZWxIYXNGaWVsZChlbmNvZGluZywgWCkgPyAnY2VudGVyJyA6ICdyaWdodCc7XG4gIH1cbiAgLy8gSWYgdGhlcmUgaXMgYSBjb25maWcsIFZlZ2EtcGFyc2VyIHdpbGwgcHJvY2VzcyB0aGlzIGFscmVhZHkuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var vega_schema_1 = __webpack_require__(59);
	var mixins = __webpack_require__(70);
	var ref = __webpack_require__(71);
	exports.tick = {
	    vgMark: 'rect',
	    encodeEntry: function (model) {
	        var config = model.config, markDef = model.markDef, width = model.width, height = model.height;
	        var orient = markDef.orient;
	        var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
	        var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
	        return __assign({}, mixins.baseEncodeEntry(model, true), mixins.pointPosition('x', model, ref.mid(width), 'xc'), mixins.pointPosition('y', model, ref.mid(height), 'yc'), mixins.nonPosition('size', model, {
	            defaultValue: defaultSize(model),
	            vgChannel: vgSizeChannel
	        }), (_a = {}, _a[vgThicknessChannel] = { value: config.tick.thickness }, _a));
	        var _a;
	    }
	};
	function defaultSize(model) {
	    var config = model.config;
	    var orient = model.markDef.orient;
	    var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
	    if (config.tick.bandSize !== undefined) {
	        return config.tick.bandSize;
	    }
	    else {
	        var scaleRange = scale ? scale.get('range') : undefined;
	        var rangeStep = scaleRange && vega_schema_1.isVgRangeStep(scaleRange) ?
	            scaleRange.step :
	            config.scale.rangeStep;
	        if (typeof rangeStep !== 'number') {
	            // FIXME consolidate this log
	            throw new Error('Function does not handle non-numeric rangeStep');
	        }
	        return rangeStep / 1.5;
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGljay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGljay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsaURBQWdEO0FBR2hELGlDQUFtQztBQUNuQyxnQ0FBa0M7QUFHckIsUUFBQSxJQUFJLEdBQWlCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNO0lBRWQsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDckIsSUFBQSxxQkFBTSxFQUFFLHVCQUFPLEVBQUUsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBQy9DLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFOUIsSUFBTSxhQUFhLEdBQUcsTUFBTSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDbkUsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUV4RSxNQUFNLGNBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBRW5DLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUN0RCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsRUFHdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1lBQ25DLFlBQVksRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxhQUFhO1NBQ3pCLENBQUMsZUFDRCxrQkFBa0IsSUFBRyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxPQUNwRDs7SUFDSixDQUFDO0NBQ0YsQ0FBQztBQUVGLHFCQUFxQixLQUFnQjtJQUM1QixJQUFBLHFCQUFNLENBQVU7SUFDdkIsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDcEMsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFM0UsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sSUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUQsSUFBTSxTQUFTLEdBQUcsVUFBVSxJQUFJLDJCQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN6RCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQUMsT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsQyw2QkFBNkI7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFDRCxNQUFNLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztJQUN6QixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNWZ1JhbmdlU3RlcH0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuaW1wb3J0ICogYXMgcmVmIGZyb20gJy4vdmFsdWVyZWYnO1xuXG5cbmV4cG9ydCBjb25zdCB0aWNrOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3JlY3QnLFxuXG4gIGVuY29kZUVudHJ5OiAobW9kZWw6IFVuaXRNb2RlbCkgPT4ge1xuICAgIGNvbnN0IHtjb25maWcsIG1hcmtEZWYsIHdpZHRoLCBoZWlnaHR9ID0gbW9kZWw7XG4gICAgY29uc3Qgb3JpZW50ID0gbWFya0RlZi5vcmllbnQ7XG5cbiAgICBjb25zdCB2Z1NpemVDaGFubmVsID0gb3JpZW50ID09PSAnaG9yaXpvbnRhbCcgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgY29uc3QgdmdUaGlja25lc3NDaGFubmVsID0gb3JpZW50ID09PSAnaG9yaXpvbnRhbCcgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwgdHJ1ZSksXG5cbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIHJlZi5taWQod2lkdGgpLCAneGMnKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSwgJ3ljJyksXG5cbiAgICAgIC8vIHNpemUgLyB0aGlja25lc3MgPT4gd2lkdGggLyBoZWlnaHRcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsLCB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFNpemUobW9kZWwpLFxuICAgICAgICB2Z0NoYW5uZWw6IHZnU2l6ZUNoYW5uZWxcbiAgICAgIH0pLFxuICAgICAgW3ZnVGhpY2tuZXNzQ2hhbm5lbF06IHt2YWx1ZTogY29uZmlnLnRpY2sudGhpY2tuZXNzfSxcbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2l6ZShtb2RlbDogVW5pdE1vZGVsKTogbnVtYmVyIHtcbiAgY29uc3Qge2NvbmZpZ30gPSBtb2RlbDtcbiAgY29uc3Qgb3JpZW50ID0gbW9kZWwubWFya0RlZi5vcmllbnQ7XG4gIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQob3JpZW50ID09PSAnaG9yaXpvbnRhbCcgPyAneCcgOiAneScpO1xuXG4gIGlmIChjb25maWcudGljay5iYW5kU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbmZpZy50aWNrLmJhbmRTaXplO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNjYWxlUmFuZ2UgPSBzY2FsZSA/IHNjYWxlLmdldCgncmFuZ2UnKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBzY2FsZVJhbmdlICYmIGlzVmdSYW5nZVN0ZXAoc2NhbGVSYW5nZSkgP1xuICAgICAgc2NhbGVSYW5nZS5zdGVwIDpcbiAgICAgIGNvbmZpZy5zY2FsZS5yYW5nZVN0ZXA7XG4gICAgaWYgKHR5cGVvZiByYW5nZVN0ZXAgIT09ICdudW1iZXInKSB7XG4gICAgICAvLyBGSVhNRSBjb25zb2xpZGF0ZSB0aGlzIGxvZ1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBkb2VzIG5vdCBoYW5kbGUgbm9uLW51bWVyaWMgcmFuZ2VTdGVwJyk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVN0ZXAgLyAxLjU7XG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var log = __webpack_require__(29);
	var baseconcat_1 = __webpack_require__(51);
	var buildmodel_1 = __webpack_require__(49);
	var parse_1 = __webpack_require__(113);
	var RepeatModel = /** @class */ (function (_super) {
	    __extends(RepeatModel, _super);
	    function RepeatModel(spec, parent, parentGivenName, repeatValues, config) {
	        var _this = _super.call(this, spec, parent, parentGivenName, config, spec.resolve) || this;
	        _this.type = 'repeat';
	        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
	            log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);
	        }
	        _this.repeat = spec.repeat;
	        _this.children = _this._initChildren(spec, _this.repeat, repeatValues, config);
	        return _this;
	    }
	    RepeatModel.prototype._initChildren = function (spec, repeat, repeater, config) {
	        var children = [];
	        var row = repeat.row || [repeater ? repeater.row : null];
	        var column = repeat.column || [repeater ? repeater.column : null];
	        // cross product
	        for (var _i = 0, row_1 = row; _i < row_1.length; _i++) {
	            var rowField = row_1[_i];
	            for (var _a = 0, column_1 = column; _a < column_1.length; _a++) {
	                var columnField = column_1[_a];
	                var name_1 = (rowField ? '_' + rowField : '') + (columnField ? '_' + columnField : '');
	                var childRepeat = {
	                    row: rowField,
	                    column: columnField
	                };
	                children.push(buildmodel_1.buildModel(spec.spec, this, this.getName('child' + name_1), undefined, childRepeat, config, false));
	            }
	        }
	        return children;
	    };
	    RepeatModel.prototype.parseLayoutSize = function () {
	        parse_1.parseRepeatLayoutSize(this);
	    };
	    RepeatModel.prototype.assembleLayout = function () {
	        // TODO: allow customization
	        return {
	            padding: { row: 10, column: 10 },
	            offset: 10,
	            columns: this.repeat && this.repeat.column ? this.repeat.column.length : 1,
	            bounds: 'full',
	            align: 'all'
	        };
	    };
	    return RepeatModel;
	}(baseconcat_1.BaseConcatModel));
	exports.RepeatModel = RepeatModel;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvcmVwZWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUVBLDRCQUE4QjtBQUk5QiwyQ0FBNkM7QUFDN0MsMkNBQXdDO0FBQ3hDLDRDQUF5RDtBQUl6RDtJQUFpQywrQkFBZTtJQU05QyxxQkFBWSxJQUFnQixFQUFFLE1BQWEsRUFBRSxlQUF1QixFQUFFLFlBQTJCLEVBQUUsTUFBYztRQUFqSCxZQUNFLGtCQUFNLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBUTNEO1FBZGUsVUFBSSxHQUFhLFFBQVEsQ0FBQztRQVF4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hILEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFFRCxLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFJLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQzs7SUFDOUUsQ0FBQztJQUVPLG1DQUFhLEdBQXJCLFVBQXNCLElBQWdCLEVBQUUsTUFBYyxFQUFFLFFBQXVCLEVBQUUsTUFBYztRQUM3RixJQUFNLFFBQVEsR0FBWSxFQUFFLENBQUM7UUFDN0IsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEUsZ0JBQWdCO1FBQ2hCLEdBQUcsQ0FBQyxDQUFtQixVQUFHLEVBQUgsV0FBRyxFQUFILGlCQUFHLEVBQUgsSUFBRztZQUFyQixJQUFNLFFBQVEsWUFBQTtZQUNqQixHQUFHLENBQUMsQ0FBc0IsVUFBTSxFQUFOLGlCQUFNLEVBQU4sb0JBQU0sRUFBTixJQUFNO2dCQUEzQixJQUFNLFdBQVcsZUFBQTtnQkFDcEIsSUFBTSxNQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFdkYsSUFBTSxXQUFXLEdBQUc7b0JBQ2xCLEdBQUcsRUFBRSxRQUFRO29CQUNiLE1BQU0sRUFBRSxXQUFXO2lCQUNwQixDQUFDO2dCQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ2pIO1NBQ0Y7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxxQ0FBZSxHQUF0QjtRQUNFLDZCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxvQ0FBYyxHQUFyQjtRQUNFLDRCQUE0QjtRQUM1QixNQUFNLENBQUM7WUFDTCxPQUFPLEVBQUUsRUFBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUM7WUFDOUIsTUFBTSxFQUFFLEVBQUU7WUFDVixPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sRUFBRSxNQUFNO1lBQ2QsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDO0lBQ0osQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXJERCxDQUFpQyw0QkFBZSxHQXFEL0M7QUFyRFksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge1JlcGVhdH0gZnJvbSAnLi4vcmVwZWF0JztcbmltcG9ydCB7UmVwZWF0U3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge1ZnTGF5b3V0fSBmcm9tICcuLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0Jhc2VDb25jYXRNb2RlbH0gZnJvbSAnLi9iYXNlY29uY2F0JztcbmltcG9ydCB7YnVpbGRNb2RlbH0gZnJvbSAnLi9idWlsZG1vZGVsJztcbmltcG9ydCB7cGFyc2VSZXBlYXRMYXlvdXRTaXplfSBmcm9tICcuL2xheW91dHNpemUvcGFyc2UnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQge1JlcGVhdGVyVmFsdWV9IGZyb20gJy4vcmVwZWF0ZXInO1xuXG5leHBvcnQgY2xhc3MgUmVwZWF0TW9kZWwgZXh0ZW5kcyBCYXNlQ29uY2F0TW9kZWwge1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogJ3JlcGVhdCcgPSAncmVwZWF0JztcbiAgcHVibGljIHJlYWRvbmx5IHJlcGVhdDogUmVwZWF0O1xuXG4gIHB1YmxpYyByZWFkb25seSBjaGlsZHJlbjogTW9kZWxbXTtcblxuICBjb25zdHJ1Y3RvcihzcGVjOiBSZXBlYXRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgcmVwZWF0VmFsdWVzOiBSZXBlYXRlclZhbHVlLCBjb25maWc6IENvbmZpZykge1xuICAgIHN1cGVyKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCBjb25maWcsIHNwZWMucmVzb2x2ZSk7XG5cbiAgICBpZiAoc3BlYy5yZXNvbHZlICYmIHNwZWMucmVzb2x2ZS5heGlzICYmIChzcGVjLnJlc29sdmUuYXhpcy54ID09PSAnc2hhcmVkJyB8fCBzcGVjLnJlc29sdmUuYXhpcy55ID09PSAnc2hhcmVkJykpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLlJFUEVBVF9DQU5OT1RfU0hBUkVfQVhJUyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXBlYXQgPSBzcGVjLnJlcGVhdDtcbiAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5faW5pdENoaWxkcmVuKHNwZWMsIHRoaXMucmVwZWF0LCByZXBlYXRWYWx1ZXMsIGNvbmZpZyk7XG4gIH1cblxuICBwcml2YXRlIF9pbml0Q2hpbGRyZW4oc3BlYzogUmVwZWF0U3BlYywgcmVwZWF0OiBSZXBlYXQsIHJlcGVhdGVyOiBSZXBlYXRlclZhbHVlLCBjb25maWc6IENvbmZpZyk6IE1vZGVsW10ge1xuICAgIGNvbnN0IGNoaWxkcmVuOiBNb2RlbFtdID0gW107XG4gICAgY29uc3Qgcm93ID0gcmVwZWF0LnJvdyB8fCBbcmVwZWF0ZXIgPyByZXBlYXRlci5yb3cgOiBudWxsXTtcbiAgICBjb25zdCBjb2x1bW4gPSByZXBlYXQuY29sdW1uIHx8IFtyZXBlYXRlciA/IHJlcGVhdGVyLmNvbHVtbiA6IG51bGxdO1xuXG4gICAgLy8gY3Jvc3MgcHJvZHVjdFxuICAgIGZvciAoY29uc3Qgcm93RmllbGQgb2Ygcm93KSB7XG4gICAgICBmb3IgKGNvbnN0IGNvbHVtbkZpZWxkIG9mIGNvbHVtbikge1xuICAgICAgICBjb25zdCBuYW1lID0gKHJvd0ZpZWxkID8gJ18nICsgcm93RmllbGQgOiAnJykgKyAoY29sdW1uRmllbGQgPyAnXycgKyBjb2x1bW5GaWVsZCA6ICcnKTtcblxuICAgICAgICBjb25zdCBjaGlsZFJlcGVhdCA9IHtcbiAgICAgICAgICByb3c6IHJvd0ZpZWxkLFxuICAgICAgICAgIGNvbHVtbjogY29sdW1uRmllbGRcbiAgICAgICAgfTtcblxuICAgICAgICBjaGlsZHJlbi5wdXNoKGJ1aWxkTW9kZWwoc3BlYy5zcGVjLCB0aGlzLCB0aGlzLmdldE5hbWUoJ2NoaWxkJyArIG5hbWUpLCB1bmRlZmluZWQsIGNoaWxkUmVwZWF0LCBjb25maWcsIGZhbHNlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgcHVibGljIHBhcnNlTGF5b3V0U2l6ZSgpIHtcbiAgICBwYXJzZVJlcGVhdExheW91dFNpemUodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVMYXlvdXQoKTogVmdMYXlvdXQge1xuICAgIC8vIFRPRE86IGFsbG93IGN1c3RvbWl6YXRpb25cbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZzoge3JvdzogMTAsIGNvbHVtbjogMTB9LFxuICAgICAgb2Zmc2V0OiAxMCxcbiAgICAgIGNvbHVtbnM6IHRoaXMucmVwZWF0ICYmIHRoaXMucmVwZWF0LmNvbHVtbiA/IHRoaXMucmVwZWF0LmNvbHVtbi5sZW5ndGggOiAxLFxuICAgICAgYm91bmRzOiAnZnVsbCcsXG4gICAgICBhbGlnbjogJ2FsbCdcbiAgICB9O1xuICB9XG59XG4iXX0=

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmFjZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmllbGREZWZ9IGZyb20gJy4vZmllbGRkZWYnO1xuaW1wb3J0IHtHdWlkZX0gZnJvbSAnLi9ndWlkZSc7XG5pbXBvcnQge1NvcnRPcmRlcn0gZnJvbSAnLi9zb3J0JztcblxuXG4vKipcbiAqIEhlYWRlcnMgb2Ygcm93IC8gY29sdW1uIGNoYW5uZWxzIGZvciBmYWNldGVkIHBsb3RzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRlciBleHRlbmRzIEd1aWRlIHtcbiAgLyoqXG4gICAqIFRoZSByb3RhdGlvbiBhbmdsZSBvZiB0aGUgaGVhZGVyIGxhYmVscy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwYC5cbiAgICpcbiAgICogQG1pbmltdW0gLTM2MFxuICAgKiBAbWF4aW11bSAzNjBcbiAgICovXG4gIGxhYmVsQW5nbGU/OiBudW1iZXI7XG5cbiAgLy8gVE9ETzogbGFiZWxQYWRkaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjZXRGaWVsZERlZjxGPiBleHRlbmRzIEZpZWxkRGVmPEY+IHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZWZpbmluZyBwcm9wZXJ0aWVzIG9mIGEgZmFjZXQncyBoZWFkZXIuXG4gICAqL1xuICBoZWFkZXI/OiBIZWFkZXI7XG5cbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgZm9yIGEgZmFjZXQgZmllbGQuXG4gICAqIFRoaXMgY2FuIGJlIGBcImFzY2VuZGluZ1wiYCwgYFwiZGVzY2VuZGluZ1wiYC5cbiAgICovXG4gIHNvcnQ/OiBTb3J0T3JkZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFjZXRNYXBwaW5nPEY+IHtcblxuICAvKipcbiAgICogVmVydGljYWwgZmFjZXRzIGZvciB0cmVsbGlzIHBsb3RzLlxuICAgKi9cbiAgcm93PzogRmFjZXRGaWVsZERlZjxGPjtcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBmYWNldHMgZm9yIHRyZWxsaXMgcGxvdHMuXG4gICAqL1xuICBjb2x1bW4/OiBGYWNldEZpZWxkRGVmPEY+O1xufVxuIl19

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var mark_1 = __webpack_require__(25);
	var mark_2 = __webpack_require__(25);
	var util_1 = __webpack_require__(14);
	/**
	 * Required Encoding Channels for each mark type
	 */
	exports.DEFAULT_REQUIRED_CHANNEL_MAP = {
	    text: ['text'],
	    line: ['x', 'y'],
	    area: ['x', 'y']
	};
	/**
	 * Supported Encoding Channel for each mark type
	 */
	exports.DEFAULT_SUPPORTED_CHANNEL_TYPE = {
	    bar: util_1.toSet(['row', 'column', 'x', 'y', 'size', 'color', 'detail']),
	    line: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'detail']),
	    area: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'detail']),
	    tick: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'detail']),
	    circle: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'size', 'detail']),
	    square: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'size', 'detail']),
	    point: util_1.toSet(['row', 'column', 'x', 'y', 'color', 'size', 'detail', 'shape']),
	    geoshape: util_1.toSet(['row', 'column', 'color', 'detail', 'shape']),
	    text: util_1.toSet(['row', 'column', 'size', 'color', 'text']) // TODO(#724) revise
	};
	// TODO: consider if we should add validate method and
	// requires ZSchema in the main vega-lite repo
	/**
	 * Further check if encoding mapping of a spec is invalid and
	 * return error if it is invalid.
	 *
	 * This checks if
	 * (1) all the required encoding channels for the mark type are specified
	 * (2) all the specified encoding channels are supported by the mark type
	 * @param  {[type]} spec [description]
	 * @param  {RequiredChannelMap = DefaultRequiredChannelMap}  requiredChannelMap
	 * @param  {SupportedChannelMap = DefaultSupportedChannelMap} supportedChannelMap
	 * @return {String} Return one reason why the encoding is invalid,
	 *                  or null if the encoding is valid.
	 */
	function getEncodingMappingError(spec, requiredChannelMap, supportedChannelMap) {
	    if (requiredChannelMap === void 0) { requiredChannelMap = exports.DEFAULT_REQUIRED_CHANNEL_MAP; }
	    if (supportedChannelMap === void 0) { supportedChannelMap = exports.DEFAULT_SUPPORTED_CHANNEL_TYPE; }
	    var mark = mark_1.isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
	    var encoding = spec.encoding;
	    var requiredChannels = requiredChannelMap[mark];
	    var supportedChannels = supportedChannelMap[mark];
	    for (var i in requiredChannels) {
	        if (!(requiredChannels[i] in encoding)) {
	            return 'Missing encoding channel \"' + requiredChannels[i] +
	                '\" for mark \"' + mark + '\"';
	        }
	    }
	    for (var channel in encoding) {
	        if (!supportedChannels[channel]) {
	            return 'Encoding channel \"' + channel +
	                '\" is not supported by mark type \"' + mark + '\"';
	        }
	    }
	    if (mark === mark_2.BAR && !encoding.x && !encoding.y) {
	        return 'Missing both x and y for bar';
	    }
	    return null;
	}
	exports.getEncodingMappingError = getEncodingMappingError;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmFsaWRhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBaUM7QUFDakMsK0JBQTJCO0FBRTNCLCtCQUE2QjtBQVM3Qjs7R0FFRztBQUNVLFFBQUEsNEJBQTRCLEdBQXVCO0lBQzlELElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNkLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDaEIsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztDQUNqQixDQUFDO0FBUUY7O0dBRUc7QUFDVSxRQUFBLDhCQUE4QixHQUF3QjtJQUNqRSxHQUFHLEVBQU8sWUFBSyxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkUsSUFBSSxFQUFNLFlBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0QsSUFBSSxFQUFNLFlBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0QsSUFBSSxFQUFNLFlBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0QsTUFBTSxFQUFJLFlBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBSSxZQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RSxLQUFLLEVBQUssWUFBSyxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hGLFFBQVEsRUFBRSxZQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsSUFBSSxFQUFNLFlBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUF5QixvQkFBb0I7Q0FDekcsQ0FBQztBQUVGLHNEQUFzRDtBQUN0RCw4Q0FBOEM7QUFFOUM7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsaUNBQXdDLElBQThCLEVBQ3BFLGtCQUFxRSxFQUNyRSxtQkFBeUU7SUFEekUsbUNBQUEsRUFBQSxxQkFBeUMsb0NBQTRCO0lBQ3JFLG9DQUFBLEVBQUEsc0JBQTJDLHNDQUE4QjtJQUV6RSxJQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMvQixJQUFNLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xELElBQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEQsR0FBRyxDQUFDLENBQUMsSUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLDZCQUE2QixHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztnQkFDeEQsZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQyxDQUFDLElBQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLHFCQUFxQixHQUFHLE9BQU87Z0JBQ3BDLHFDQUFxQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7UUFDeEQsQ0FBQztJQUNILENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztJQUN4QyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUE1QkQsMERBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc01hcmtEZWZ9IGZyb20gJy4vbWFyayc7XG5pbXBvcnQge0JBUn0gZnJvbSAnLi9tYXJrJztcbmltcG9ydCB7RmFjZXRlZENvbXBvc2l0ZVVuaXRTcGVjfSBmcm9tICcuL3NwZWMnO1xuaW1wb3J0IHt0b1NldH0gZnJvbSAnLi91dGlsJztcblxuXG5cbi8vIFRPRE86IG1vdmUgdG8gdmwuc3BlYy52YWxpZGF0b3I/XG5leHBvcnQgaW50ZXJmYWNlIFJlcXVpcmVkQ2hhbm5lbE1hcCB7XG4gIFttYXJrOiBzdHJpbmddOiBBcnJheTxzdHJpbmc+O1xufVxuXG4vKipcbiAqIFJlcXVpcmVkIEVuY29kaW5nIENoYW5uZWxzIGZvciBlYWNoIG1hcmsgdHlwZVxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVFVSVJFRF9DSEFOTkVMX01BUDogUmVxdWlyZWRDaGFubmVsTWFwID0ge1xuICB0ZXh0OiBbJ3RleHQnXSxcbiAgbGluZTogWyd4JywgJ3knXSxcbiAgYXJlYTogWyd4JywgJ3knXVxufTtcblxuZXhwb3J0IGludGVyZmFjZSBTdXBwb3J0ZWRDaGFubmVsTWFwIHtcbiAgW21hcms6IHN0cmluZ106IHtcbiAgICBbY2hhbm5lbDogc3RyaW5nXTogYm9vbGVhblxuICB9O1xufVxuXG4vKipcbiAqIFN1cHBvcnRlZCBFbmNvZGluZyBDaGFubmVsIGZvciBlYWNoIG1hcmsgdHlwZVxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVVBQT1JURURfQ0hBTk5FTF9UWVBFOiBTdXBwb3J0ZWRDaGFubmVsTWFwID0ge1xuICBiYXI6ICAgICAgdG9TZXQoWydyb3cnLCAnY29sdW1uJywgJ3gnLCAneScsICdzaXplJywgJ2NvbG9yJywgJ2RldGFpbCddKSxcbiAgbGluZTogICAgIHRvU2V0KFsncm93JywgJ2NvbHVtbicsICd4JywgJ3knLCAnY29sb3InLCAnZGV0YWlsJ10pLCAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogYWRkIHNpemUgd2hlbiBWZWdhIHN1cHBvcnRzXG4gIGFyZWE6ICAgICB0b1NldChbJ3JvdycsICdjb2x1bW4nLCAneCcsICd5JywgJ2NvbG9yJywgJ2RldGFpbCddKSxcbiAgdGljazogICAgIHRvU2V0KFsncm93JywgJ2NvbHVtbicsICd4JywgJ3knLCAnY29sb3InLCAnZGV0YWlsJ10pLFxuICBjaXJjbGU6ICAgdG9TZXQoWydyb3cnLCAnY29sdW1uJywgJ3gnLCAneScsICdjb2xvcicsICdzaXplJywgJ2RldGFpbCddKSxcbiAgc3F1YXJlOiAgIHRvU2V0KFsncm93JywgJ2NvbHVtbicsICd4JywgJ3knLCAnY29sb3InLCAnc2l6ZScsICdkZXRhaWwnXSksXG4gIHBvaW50OiAgICB0b1NldChbJ3JvdycsICdjb2x1bW4nLCAneCcsICd5JywgJ2NvbG9yJywgJ3NpemUnLCAnZGV0YWlsJywgJ3NoYXBlJ10pLFxuICBnZW9zaGFwZTogdG9TZXQoWydyb3cnLCAnY29sdW1uJywgJ2NvbG9yJywgJ2RldGFpbCcsICdzaGFwZSddKSxcbiAgdGV4dDogICAgIHRvU2V0KFsncm93JywgJ2NvbHVtbicsICdzaXplJywgJ2NvbG9yJywgJ3RleHQnXSkgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETygjNzI0KSByZXZpc2Vcbn07XG5cbi8vIFRPRE86IGNvbnNpZGVyIGlmIHdlIHNob3VsZCBhZGQgdmFsaWRhdGUgbWV0aG9kIGFuZFxuLy8gcmVxdWlyZXMgWlNjaGVtYSBpbiB0aGUgbWFpbiB2ZWdhLWxpdGUgcmVwb1xuXG4vKipcbiAqIEZ1cnRoZXIgY2hlY2sgaWYgZW5jb2RpbmcgbWFwcGluZyBvZiBhIHNwZWMgaXMgaW52YWxpZCBhbmRcbiAqIHJldHVybiBlcnJvciBpZiBpdCBpcyBpbnZhbGlkLlxuICpcbiAqIFRoaXMgY2hlY2tzIGlmXG4gKiAoMSkgYWxsIHRoZSByZXF1aXJlZCBlbmNvZGluZyBjaGFubmVscyBmb3IgdGhlIG1hcmsgdHlwZSBhcmUgc3BlY2lmaWVkXG4gKiAoMikgYWxsIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcgY2hhbm5lbHMgYXJlIHN1cHBvcnRlZCBieSB0aGUgbWFyayB0eXBlXG4gKiBAcGFyYW0gIHtbdHlwZV19IHNwZWMgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7UmVxdWlyZWRDaGFubmVsTWFwID0gRGVmYXVsdFJlcXVpcmVkQ2hhbm5lbE1hcH0gIHJlcXVpcmVkQ2hhbm5lbE1hcFxuICogQHBhcmFtICB7U3VwcG9ydGVkQ2hhbm5lbE1hcCA9IERlZmF1bHRTdXBwb3J0ZWRDaGFubmVsTWFwfSBzdXBwb3J0ZWRDaGFubmVsTWFwXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJldHVybiBvbmUgcmVhc29uIHdoeSB0aGUgZW5jb2RpbmcgaXMgaW52YWxpZCxcbiAqICAgICAgICAgICAgICAgICAgb3IgbnVsbCBpZiB0aGUgZW5jb2RpbmcgaXMgdmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmNvZGluZ01hcHBpbmdFcnJvcihzcGVjOiBGYWNldGVkQ29tcG9zaXRlVW5pdFNwZWMsXG4gIHJlcXVpcmVkQ2hhbm5lbE1hcDogUmVxdWlyZWRDaGFubmVsTWFwID0gREVGQVVMVF9SRVFVSVJFRF9DSEFOTkVMX01BUCxcbiAgc3VwcG9ydGVkQ2hhbm5lbE1hcDogU3VwcG9ydGVkQ2hhbm5lbE1hcCA9IERFRkFVTFRfU1VQUE9SVEVEX0NIQU5ORUxfVFlQRVxuICApIHtcbiAgY29uc3QgbWFyayA9IGlzTWFya0RlZihzcGVjLm1hcmspID8gc3BlYy5tYXJrLnR5cGUgOiBzcGVjLm1hcms7XG4gIGNvbnN0IGVuY29kaW5nID0gc3BlYy5lbmNvZGluZztcbiAgY29uc3QgcmVxdWlyZWRDaGFubmVscyA9IHJlcXVpcmVkQ2hhbm5lbE1hcFttYXJrXTtcbiAgY29uc3Qgc3VwcG9ydGVkQ2hhbm5lbHMgPSBzdXBwb3J0ZWRDaGFubmVsTWFwW21hcmtdO1xuXG4gIGZvciAoY29uc3QgaSBpbiByZXF1aXJlZENoYW5uZWxzKSB7IC8vIGFsbCByZXF1aXJlZCBjaGFubmVscyBhcmUgaW4gZW5jb2RpbmdgXG4gICAgaWYgKCEocmVxdWlyZWRDaGFubmVsc1tpXSBpbiBlbmNvZGluZykpIHtcbiAgICAgIHJldHVybiAnTWlzc2luZyBlbmNvZGluZyBjaGFubmVsIFxcXCInICsgcmVxdWlyZWRDaGFubmVsc1tpXSArXG4gICAgICAgICdcXFwiIGZvciBtYXJrIFxcXCInICsgbWFyayArICdcXFwiJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IGNoYW5uZWwgaW4gZW5jb2RpbmcpIHsgLy8gYWxsIGNoYW5uZWxzIGluIGVuY29kaW5nIGFyZSBzdXBwb3J0ZWRcbiAgICBpZiAoIXN1cHBvcnRlZENoYW5uZWxzW2NoYW5uZWxdKSB7XG4gICAgICByZXR1cm4gJ0VuY29kaW5nIGNoYW5uZWwgXFxcIicgKyBjaGFubmVsICtcbiAgICAgICAgJ1xcXCIgaXMgbm90IHN1cHBvcnRlZCBieSBtYXJrIHR5cGUgXFxcIicgKyBtYXJrICsgJ1xcXCInO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXJrID09PSBCQVIgJiYgIWVuY29kaW5nLnggJiYgIWVuY29kaW5nLnkpIHtcbiAgICByZXR1cm4gJ01pc3NpbmcgYm90aCB4IGFuZCB5IGZvciBiYXInO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=

/***/ }),
/* 138 */
/***/ (function(module, exports) {

	module.exports = {"name":"vega-lite","author":"Jeffrey Heer, Dominik Moritz, Kanit \"Ham\" Wongsuphasawat","version":"2.1.2","collaborators":["Kanit Wongsuphasawat <kanitw@gmail.com> (http://kanitw.yellowpigz.com)","Dominik Moritz <domoritz@cs.washington.edu> (https://www.domoritz.de)","Jeffrey Heer <jheer@uw.edu> (http://jheer.org)"],"homepage":"https://vega.github.io/vega-lite/","description":"Vega-lite provides a higher-level grammar for visual analysis, comparable to ggplot or Tableau, that generates complete Vega specifications.","main":"build/src/index.js","unpkg":"build/vega-lite.min.js","jsdelivr":"build/vega-lite.min.js","types":"typings/vega-lite.d.ts","bin":{"vl2png":"./bin/vl2png","vl2svg":"./bin/vl2svg","vl2vg":"./bin/vl2vg"},"directories":{"test":"test"},"scripts":{"pretsc":"mkdir -p build && rm -rf build/*/** && cp package.json build/","tsc":"tsc","prebuild":"mkdir -p build/site build/test-gallery","build":"npm run build:only","build:only":"npm run tsc && cp package.json build && browserify src/index.ts -p tsify -d -s vl | exorcist build/vega-lite.js.map > build/vega-lite.js","postbuild":"node node_modules/uglify-js/bin/uglifyjs build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && npm run schema","build:examples":"npm run data && npm run build:only && npm run build:examples-only","build:examples-only":"npm run build:example && npm run build:examples-normalized","build:examples-normalized":"rm -f examples/specs/normalized/*.vl.json && scripts/build-normalized-examples","build:example":"TZ=America/Los_Angeles scripts/build-examples.sh","build:toc":"bundle exec jekyll build -q && scripts/generate-toc","build:site":"browserify site/static/main.ts -p [tsify -p site] -d | exorcist build/site/main.js.map > build/site/main.js","build:versions":"scripts/update-version.sh","build:test-gallery":"browserify test-gallery/main.ts -p [tsify -p test-gallery] -d > build/test-gallery/main.js","check:examples":"scripts/check-examples.sh","check:schema":"scripts/check-schema.sh","clean":"rm -rf build && rm -f vega-lite.* & find -E src test site examples -regex '.*\\.(js|js.map|d.ts)' -delete && rm -f examples/compiled/*.png && find site/examples ! -name 'index.md' -type f -exec rm -f {} +","data":"rsync -r node_modules/vega-datasets/data/* data","link":"npm link && npm link vega-lite","deploy":"scripts/deploy.sh","deploy:gh":"scripts/deploy-gh.sh","deploy:schema":"scripts/deploy-schema.sh","prestart":"npm run data && npm run build && scripts/index-examples","start":"nodemon -x 'npm run build:test-gallery' & browser-sync start --server --files 'build/test-gallery/main.js' --index 'test-gallery/index.html'","poststart":"rm examples/all-examples.json","preschema":"npm run prebuild","schema":"ts-json-schema-generator --path tsconfig.json --type TopLevelExtendedSpec > build/vega-lite-schema.json && npm run renameschema && cp build/vega-lite-schema.json _data/","renameschema":"scripts/rename-schema.sh","presite":"npm run prebuild && npm run data && npm run build:site && npm run build:toc && npm run build:versions && scripts/create-example-pages","site":"bundle exec jekyll serve --incremental","lint":"tslint -p .","test":"npm run build:only && npm run test:only && npm run test:runtime && npm run lint","posttest":"npm run schema && npm run data && npm run mocha:examples","test:nocompile":"npm run test:only && npm run test:runtime && npm run lint && npm run mocha:examples","test:only":"nyc --reporter=html --reporter=text-summary npm run mocha:test","test:runtime":"TZ=America/Los_Angeles wdio wdio.conf.js","test:runtime:generate":"rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true npm run test:runtime","test:debug":"npm run tsc && mocha --recursive --debug-brk --inspect build/test","test:debug-examples":"npm run tsc && npm run schema && mocha --recursive --debug-brk --inspect build/examples","mocha:test":"mocha --require source-map-support/register --reporter dot --recursive build/test","mocha:examples":"mocha --require source-map-support/register --reporter dot --recursive build/examples","codecov":"nyc report --reporter=json && codecov -f coverage/*.json","watch:build":"watchify src/index.ts -p tsify -v -d -s vl -o 'exorcist build/vega-lite.js.map > build/vega-lite.js'","watch:tsc":"npm run tsc -- -w","watch:test":"nodemon -x 'npm test'","watch":"nodemon -x 'npm run build && npm run test:nocompile' # already ran schema in build"},"repository":{"type":"git","url":"https://github.com/vega/vega-lite.git"},"license":"BSD-3-Clause","bugs":{"url":"https://github.com/vega/vega-lite/issues"},"devDependencies":{"@types/chai":"^4.1.2","@types/d3":"^4.12.0","@types/highlight.js":"^9.12.2","@types/mkdirp":"^0.5.2","@types/mocha":"^2.2.47","@types/node":"^9.3.0","@types/webdriverio":"^4.8.8","ajv":"^6.0.1","browser-sync":"^2.23.6","browserify-shim":"^3.8.14","browserify":"^15.2.0","chai":"^4.1.2","cheerio":"^1.0.0-rc.2","chromedriver":"^2.35.0","codecov":"^3.0.0","d3":"^4.12.2","exorcist":"^1.0.0","highlight.js":"^9.12.0","mkdirp":"^0.5.1","mocha":"^5.0.0","nodemon":"^1.14.11","nyc":"^11.4.1","source-map-support":"^0.5.3","svg2png-many":"^0.0.7","ts-json-schema-generator":"^0.18.0","ts-node":"^4.1.0","tsify":"^3.0.4","tslint-eslint-rules":"^4.1.1","tslint":"5.9.1","typescript":"^2.6.2","uglify-js":"^3.3.8","vega-datasets":"^1.11.0","vega-embed":"^3.0.0","vega-tooltip":"^0.5.1","vega":"^3.0.10","watchify":"^3.9.0","wdio-chromedriver-service":"^0.1.2","wdio-dot-reporter":"0.0.9","wdio-mocha-framework":"^0.5.12","wdio-static-server-service":"^1.0.1","webdriverio":"^4.10.1","yaml-front-matter":"^3.4.0"},"dependencies":{"@types/json-stable-stringify":"^1.0.32","json-stable-stringify":"^1.0.1","tslib":"^1.9.0","vega-event-selector":"^2.0.0","vega-util":"^1.6.2","yargs":"^11.0.0"}}

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Parse a vega schema url into library and version.
	 */
	function default_1(url) {
	    var regex = /\/schema\/([\w-]+)\/([\w\.\-]+)\.json$/g;
	    var _a = regex.exec(url).slice(1, 3), library = _a[0], version = _a[1];
	    return { library: library, version: version };
	}
	exports.default = default_1;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 140 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Open editor url in a new window, and pass a message.
	 */
	function post(window, url, data) {
	    var editor = window.open(url);
	    var wait = 10000;
	    var step = 250;
	    var count = ~~(wait / step);
	    function listen(evt) {
	        if (evt.source === editor) {
	            count = 0;
	            window.removeEventListener('message', listen, false);
	        }
	    }
	    window.addEventListener('message', listen, false);
	    // send message
	    // periodically resend until ack received or timeout
	    function send() {
	        if (count <= 0) {
	            return;
	        }
	        editor.postMessage(data, '*');
	        setTimeout(send, step);
	        count -= 1;
	    }
	    setTimeout(send, step);
	}
	exports.post = post;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wb3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxjQUFxQixNQUFjLEVBQUUsR0FBVyxFQUFFLElBQVM7SUFDekQsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxJQUFNLElBQUksR0FBRyxLQUFLLENBQUM7SUFDbkIsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztJQUU1QixnQkFBZ0IsR0FBRztRQUNqQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUIsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEQsZUFBZTtJQUNmLG9EQUFvRDtJQUNwRDtRQUNFLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkIsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUF6QkQsb0JBeUJDIn0=

/***/ })
/******/ ])});;
//# sourceMappingURL=index.js.map